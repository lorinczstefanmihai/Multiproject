
Multiproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004114  08004114  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004114  08004114  00014114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800411c  0800411c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  2000007c  080041a0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  080041a0  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000abe7  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019c9  00000000  00000000  0002acce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ea  00000000  00000000  0002ce48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b4aa  00000000  00000000  0002d432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b312  00000000  00000000  000488dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b057f  00000000  00000000  00053bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000210c  00000000  00000000  00104170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0010627c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000007c 	.word	0x2000007c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f94 	.word	0x08003f94

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000080 	.word	0x20000080
 8000100:	08003f94 	.word	0x08003f94

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_uldivmod>:
 8000240:	2b00      	cmp	r3, #0
 8000242:	d111      	bne.n	8000268 <__aeabi_uldivmod+0x28>
 8000244:	2a00      	cmp	r2, #0
 8000246:	d10f      	bne.n	8000268 <__aeabi_uldivmod+0x28>
 8000248:	2900      	cmp	r1, #0
 800024a:	d100      	bne.n	800024e <__aeabi_uldivmod+0xe>
 800024c:	2800      	cmp	r0, #0
 800024e:	d002      	beq.n	8000256 <__aeabi_uldivmod+0x16>
 8000250:	2100      	movs	r1, #0
 8000252:	43c9      	mvns	r1, r1
 8000254:	0008      	movs	r0, r1
 8000256:	b407      	push	{r0, r1, r2}
 8000258:	4802      	ldr	r0, [pc, #8]	; (8000264 <__aeabi_uldivmod+0x24>)
 800025a:	a102      	add	r1, pc, #8	; (adr r1, 8000264 <__aeabi_uldivmod+0x24>)
 800025c:	1840      	adds	r0, r0, r1
 800025e:	9002      	str	r0, [sp, #8]
 8000260:	bd03      	pop	{r0, r1, pc}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	ffffffd9 	.word	0xffffffd9
 8000268:	b403      	push	{r0, r1}
 800026a:	4668      	mov	r0, sp
 800026c:	b501      	push	{r0, lr}
 800026e:	9802      	ldr	r0, [sp, #8]
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	9b01      	ldr	r3, [sp, #4]
 8000276:	469e      	mov	lr, r3
 8000278:	b002      	add	sp, #8
 800027a:	bc0c      	pop	{r2, r3}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__udivmoddi4>:
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	4657      	mov	r7, sl
 8000284:	464e      	mov	r6, r9
 8000286:	4645      	mov	r5, r8
 8000288:	46de      	mov	lr, fp
 800028a:	b5e0      	push	{r5, r6, r7, lr}
 800028c:	0004      	movs	r4, r0
 800028e:	000d      	movs	r5, r1
 8000290:	4692      	mov	sl, r2
 8000292:	4699      	mov	r9, r3
 8000294:	b083      	sub	sp, #12
 8000296:	428b      	cmp	r3, r1
 8000298:	d830      	bhi.n	80002fc <__udivmoddi4+0x7c>
 800029a:	d02d      	beq.n	80002f8 <__udivmoddi4+0x78>
 800029c:	4649      	mov	r1, r9
 800029e:	4650      	mov	r0, sl
 80002a0:	f000 f8ba 	bl	8000418 <__clzdi2>
 80002a4:	0029      	movs	r1, r5
 80002a6:	0006      	movs	r6, r0
 80002a8:	0020      	movs	r0, r4
 80002aa:	f000 f8b5 	bl	8000418 <__clzdi2>
 80002ae:	1a33      	subs	r3, r6, r0
 80002b0:	4698      	mov	r8, r3
 80002b2:	3b20      	subs	r3, #32
 80002b4:	d434      	bmi.n	8000320 <__udivmoddi4+0xa0>
 80002b6:	469b      	mov	fp, r3
 80002b8:	4653      	mov	r3, sl
 80002ba:	465a      	mov	r2, fp
 80002bc:	4093      	lsls	r3, r2
 80002be:	4642      	mov	r2, r8
 80002c0:	001f      	movs	r7, r3
 80002c2:	4653      	mov	r3, sl
 80002c4:	4093      	lsls	r3, r2
 80002c6:	001e      	movs	r6, r3
 80002c8:	42af      	cmp	r7, r5
 80002ca:	d83b      	bhi.n	8000344 <__udivmoddi4+0xc4>
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d100      	bne.n	80002d2 <__udivmoddi4+0x52>
 80002d0:	e079      	b.n	80003c6 <__udivmoddi4+0x146>
 80002d2:	465b      	mov	r3, fp
 80002d4:	1ba4      	subs	r4, r4, r6
 80002d6:	41bd      	sbcs	r5, r7
 80002d8:	2b00      	cmp	r3, #0
 80002da:	da00      	bge.n	80002de <__udivmoddi4+0x5e>
 80002dc:	e076      	b.n	80003cc <__udivmoddi4+0x14c>
 80002de:	2200      	movs	r2, #0
 80002e0:	2300      	movs	r3, #0
 80002e2:	9200      	str	r2, [sp, #0]
 80002e4:	9301      	str	r3, [sp, #4]
 80002e6:	2301      	movs	r3, #1
 80002e8:	465a      	mov	r2, fp
 80002ea:	4093      	lsls	r3, r2
 80002ec:	9301      	str	r3, [sp, #4]
 80002ee:	2301      	movs	r3, #1
 80002f0:	4642      	mov	r2, r8
 80002f2:	4093      	lsls	r3, r2
 80002f4:	9300      	str	r3, [sp, #0]
 80002f6:	e029      	b.n	800034c <__udivmoddi4+0xcc>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	d9cf      	bls.n	800029c <__udivmoddi4+0x1c>
 80002fc:	2200      	movs	r2, #0
 80002fe:	2300      	movs	r3, #0
 8000300:	9200      	str	r2, [sp, #0]
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <__udivmoddi4+0x8e>
 800030a:	601c      	str	r4, [r3, #0]
 800030c:	605d      	str	r5, [r3, #4]
 800030e:	9800      	ldr	r0, [sp, #0]
 8000310:	9901      	ldr	r1, [sp, #4]
 8000312:	b003      	add	sp, #12
 8000314:	bcf0      	pop	{r4, r5, r6, r7}
 8000316:	46bb      	mov	fp, r7
 8000318:	46b2      	mov	sl, r6
 800031a:	46a9      	mov	r9, r5
 800031c:	46a0      	mov	r8, r4
 800031e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000320:	4642      	mov	r2, r8
 8000322:	469b      	mov	fp, r3
 8000324:	2320      	movs	r3, #32
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	4652      	mov	r2, sl
 800032a:	40da      	lsrs	r2, r3
 800032c:	4641      	mov	r1, r8
 800032e:	0013      	movs	r3, r2
 8000330:	464a      	mov	r2, r9
 8000332:	408a      	lsls	r2, r1
 8000334:	0017      	movs	r7, r2
 8000336:	4642      	mov	r2, r8
 8000338:	431f      	orrs	r7, r3
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	001e      	movs	r6, r3
 8000340:	42af      	cmp	r7, r5
 8000342:	d9c3      	bls.n	80002cc <__udivmoddi4+0x4c>
 8000344:	2200      	movs	r2, #0
 8000346:	2300      	movs	r3, #0
 8000348:	9200      	str	r2, [sp, #0]
 800034a:	9301      	str	r3, [sp, #4]
 800034c:	4643      	mov	r3, r8
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0d8      	beq.n	8000304 <__udivmoddi4+0x84>
 8000352:	07fb      	lsls	r3, r7, #31
 8000354:	0872      	lsrs	r2, r6, #1
 8000356:	431a      	orrs	r2, r3
 8000358:	4646      	mov	r6, r8
 800035a:	087b      	lsrs	r3, r7, #1
 800035c:	e00e      	b.n	800037c <__udivmoddi4+0xfc>
 800035e:	42ab      	cmp	r3, r5
 8000360:	d101      	bne.n	8000366 <__udivmoddi4+0xe6>
 8000362:	42a2      	cmp	r2, r4
 8000364:	d80c      	bhi.n	8000380 <__udivmoddi4+0x100>
 8000366:	1aa4      	subs	r4, r4, r2
 8000368:	419d      	sbcs	r5, r3
 800036a:	2001      	movs	r0, #1
 800036c:	1924      	adds	r4, r4, r4
 800036e:	416d      	adcs	r5, r5
 8000370:	2100      	movs	r1, #0
 8000372:	3e01      	subs	r6, #1
 8000374:	1824      	adds	r4, r4, r0
 8000376:	414d      	adcs	r5, r1
 8000378:	2e00      	cmp	r6, #0
 800037a:	d006      	beq.n	800038a <__udivmoddi4+0x10a>
 800037c:	42ab      	cmp	r3, r5
 800037e:	d9ee      	bls.n	800035e <__udivmoddi4+0xde>
 8000380:	3e01      	subs	r6, #1
 8000382:	1924      	adds	r4, r4, r4
 8000384:	416d      	adcs	r5, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d1f8      	bne.n	800037c <__udivmoddi4+0xfc>
 800038a:	9800      	ldr	r0, [sp, #0]
 800038c:	9901      	ldr	r1, [sp, #4]
 800038e:	465b      	mov	r3, fp
 8000390:	1900      	adds	r0, r0, r4
 8000392:	4169      	adcs	r1, r5
 8000394:	2b00      	cmp	r3, #0
 8000396:	db24      	blt.n	80003e2 <__udivmoddi4+0x162>
 8000398:	002b      	movs	r3, r5
 800039a:	465a      	mov	r2, fp
 800039c:	4644      	mov	r4, r8
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	002a      	movs	r2, r5
 80003a2:	40e2      	lsrs	r2, r4
 80003a4:	001c      	movs	r4, r3
 80003a6:	465b      	mov	r3, fp
 80003a8:	0015      	movs	r5, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	db2a      	blt.n	8000404 <__udivmoddi4+0x184>
 80003ae:	0026      	movs	r6, r4
 80003b0:	409e      	lsls	r6, r3
 80003b2:	0033      	movs	r3, r6
 80003b4:	0026      	movs	r6, r4
 80003b6:	4647      	mov	r7, r8
 80003b8:	40be      	lsls	r6, r7
 80003ba:	0032      	movs	r2, r6
 80003bc:	1a80      	subs	r0, r0, r2
 80003be:	4199      	sbcs	r1, r3
 80003c0:	9000      	str	r0, [sp, #0]
 80003c2:	9101      	str	r1, [sp, #4]
 80003c4:	e79e      	b.n	8000304 <__udivmoddi4+0x84>
 80003c6:	42a3      	cmp	r3, r4
 80003c8:	d8bc      	bhi.n	8000344 <__udivmoddi4+0xc4>
 80003ca:	e782      	b.n	80002d2 <__udivmoddi4+0x52>
 80003cc:	4642      	mov	r2, r8
 80003ce:	2320      	movs	r3, #32
 80003d0:	2100      	movs	r1, #0
 80003d2:	1a9b      	subs	r3, r3, r2
 80003d4:	2200      	movs	r2, #0
 80003d6:	9100      	str	r1, [sp, #0]
 80003d8:	9201      	str	r2, [sp, #4]
 80003da:	2201      	movs	r2, #1
 80003dc:	40da      	lsrs	r2, r3
 80003de:	9201      	str	r2, [sp, #4]
 80003e0:	e785      	b.n	80002ee <__udivmoddi4+0x6e>
 80003e2:	4642      	mov	r2, r8
 80003e4:	2320      	movs	r3, #32
 80003e6:	1a9b      	subs	r3, r3, r2
 80003e8:	002a      	movs	r2, r5
 80003ea:	4646      	mov	r6, r8
 80003ec:	409a      	lsls	r2, r3
 80003ee:	0023      	movs	r3, r4
 80003f0:	40f3      	lsrs	r3, r6
 80003f2:	4644      	mov	r4, r8
 80003f4:	4313      	orrs	r3, r2
 80003f6:	002a      	movs	r2, r5
 80003f8:	40e2      	lsrs	r2, r4
 80003fa:	001c      	movs	r4, r3
 80003fc:	465b      	mov	r3, fp
 80003fe:	0015      	movs	r5, r2
 8000400:	2b00      	cmp	r3, #0
 8000402:	dad4      	bge.n	80003ae <__udivmoddi4+0x12e>
 8000404:	4642      	mov	r2, r8
 8000406:	002f      	movs	r7, r5
 8000408:	2320      	movs	r3, #32
 800040a:	0026      	movs	r6, r4
 800040c:	4097      	lsls	r7, r2
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	40de      	lsrs	r6, r3
 8000412:	003b      	movs	r3, r7
 8000414:	4333      	orrs	r3, r6
 8000416:	e7cd      	b.n	80003b4 <__udivmoddi4+0x134>

08000418 <__clzdi2>:
 8000418:	b510      	push	{r4, lr}
 800041a:	2900      	cmp	r1, #0
 800041c:	d103      	bne.n	8000426 <__clzdi2+0xe>
 800041e:	f000 f807 	bl	8000430 <__clzsi2>
 8000422:	3020      	adds	r0, #32
 8000424:	e002      	b.n	800042c <__clzdi2+0x14>
 8000426:	0008      	movs	r0, r1
 8000428:	f000 f802 	bl	8000430 <__clzsi2>
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__clzsi2>:
 8000430:	211c      	movs	r1, #28
 8000432:	2301      	movs	r3, #1
 8000434:	041b      	lsls	r3, r3, #16
 8000436:	4298      	cmp	r0, r3
 8000438:	d301      	bcc.n	800043e <__clzsi2+0xe>
 800043a:	0c00      	lsrs	r0, r0, #16
 800043c:	3910      	subs	r1, #16
 800043e:	0a1b      	lsrs	r3, r3, #8
 8000440:	4298      	cmp	r0, r3
 8000442:	d301      	bcc.n	8000448 <__clzsi2+0x18>
 8000444:	0a00      	lsrs	r0, r0, #8
 8000446:	3908      	subs	r1, #8
 8000448:	091b      	lsrs	r3, r3, #4
 800044a:	4298      	cmp	r0, r3
 800044c:	d301      	bcc.n	8000452 <__clzsi2+0x22>
 800044e:	0900      	lsrs	r0, r0, #4
 8000450:	3904      	subs	r1, #4
 8000452:	a202      	add	r2, pc, #8	; (adr r2, 800045c <__clzsi2+0x2c>)
 8000454:	5c10      	ldrb	r0, [r2, r0]
 8000456:	1840      	adds	r0, r0, r1
 8000458:	4770      	bx	lr
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	02020304 	.word	0x02020304
 8000460:	01010101 	.word	0x01010101
	...

0800046c <decode_NMEA_message>:
#include "NMEA.h"
#include <stdio.h>


bool decode_NMEA_message(char input_data[550], GPGGA_struct *gpgga)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
	int idx = 0, i = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
	char buffer[12];
	memset(buffer,'\0',12);
 800047e:	230c      	movs	r3, #12
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	220c      	movs	r2, #12
 8000484:	2100      	movs	r1, #0
 8000486:	0018      	movs	r0, r3
 8000488:	f002 ff42 	bl	8003310 <memset>

	while(input_data[idx] != 'G' || input_data[idx + 1] != 'P' || input_data[idx + 2] != 'G' || input_data[idx + 3] != 'G' || input_data[idx + 4] != 'A')
 800048c:	e009      	b.n	80004a2 <decode_NMEA_message+0x36>
	{
		idx++;
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	3301      	adds	r3, #1
 8000492:	61fb      	str	r3, [r7, #28]
		if(idx > 477)
 8000494:	69fa      	ldr	r2, [r7, #28]
 8000496:	23ef      	movs	r3, #239	; 0xef
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	429a      	cmp	r2, r3
 800049c:	db01      	blt.n	80004a2 <decode_NMEA_message+0x36>
			return FALSE;
 800049e:	2300      	movs	r3, #0
 80004a0:	e048      	b.n	8000534 <decode_NMEA_message+0xc8>
	while(input_data[idx] != 'G' || input_data[idx + 1] != 'P' || input_data[idx + 2] != 'G' || input_data[idx + 3] != 'G' || input_data[idx + 4] != 'A')
 80004a2:	69fb      	ldr	r3, [r7, #28]
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	18d3      	adds	r3, r2, r3
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b47      	cmp	r3, #71	; 0x47
 80004ac:	d1ef      	bne.n	800048e <decode_NMEA_message+0x22>
 80004ae:	69fb      	ldr	r3, [r7, #28]
 80004b0:	3301      	adds	r3, #1
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	18d3      	adds	r3, r2, r3
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2b50      	cmp	r3, #80	; 0x50
 80004ba:	d1e8      	bne.n	800048e <decode_NMEA_message+0x22>
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	3302      	adds	r3, #2
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	18d3      	adds	r3, r2, r3
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b47      	cmp	r3, #71	; 0x47
 80004c8:	d1e1      	bne.n	800048e <decode_NMEA_message+0x22>
 80004ca:	69fb      	ldr	r3, [r7, #28]
 80004cc:	3303      	adds	r3, #3
 80004ce:	687a      	ldr	r2, [r7, #4]
 80004d0:	18d3      	adds	r3, r2, r3
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b47      	cmp	r3, #71	; 0x47
 80004d6:	d1da      	bne.n	800048e <decode_NMEA_message+0x22>
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	3304      	adds	r3, #4
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	18d3      	adds	r3, r2, r3
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b41      	cmp	r3, #65	; 0x41
 80004e4:	d1d3      	bne.n	800048e <decode_NMEA_message+0x22>
	}

	idx += 6; // includem si virgula
 80004e6:	69fb      	ldr	r3, [r7, #28]
 80004e8:	3306      	adds	r3, #6
 80004ea:	61fb      	str	r3, [r7, #28]

	while(input_data[idx] != ',')
 80004ec:	e00f      	b.n	800050e <decode_NMEA_message+0xa2>
	{
		buffer[i] = input_data[idx];
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	18d3      	adds	r3, r2, r3
 80004f4:	7819      	ldrb	r1, [r3, #0]
 80004f6:	230c      	movs	r3, #12
 80004f8:	18fa      	adds	r2, r7, r3
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	18d3      	adds	r3, r2, r3
 80004fe:	1c0a      	adds	r2, r1, #0
 8000500:	701a      	strb	r2, [r3, #0]
		idx++;
 8000502:	69fb      	ldr	r3, [r7, #28]
 8000504:	3301      	adds	r3, #1
 8000506:	61fb      	str	r3, [r7, #28]
		i++;
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	3301      	adds	r3, #1
 800050c:	61bb      	str	r3, [r7, #24]
	while(input_data[idx] != ',')
 800050e:	69fb      	ldr	r3, [r7, #28]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	18d3      	adds	r3, r2, r3
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b2c      	cmp	r3, #44	; 0x2c
 8000518:	d1e9      	bne.n	80004ee <decode_NMEA_message+0x82>
	}

	sscanf(buffer, "%d",(int*)&gpgga->time);
 800051a:	683a      	ldr	r2, [r7, #0]
 800051c:	4907      	ldr	r1, [pc, #28]	; (800053c <decode_NMEA_message+0xd0>)
 800051e:	230c      	movs	r3, #12
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	0018      	movs	r0, r3
 8000524:	f002 feca 	bl	80032bc <siscanf>
	i = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	61bb      	str	r3, [r7, #24]
	idx++;
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	3301      	adds	r3, #1
 8000530:	61fb      	str	r3, [r7, #28]

	return TRUE;
 8000532:	2301      	movs	r3, #1


}
 8000534:	0018      	movs	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	b008      	add	sp, #32
 800053a:	bd80      	pop	{r7, pc}
 800053c:	08003fac 	.word	0x08003fac

08000540 <SysTick_Handler>:
#include "main.h"

extern UART_HandleTypeDef uart_gps;

void SysTick_Handler (void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000544:	f000 f9fa 	bl	800093c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000548:	f000 faf2 	bl	8000b30 <HAL_SYSTICK_IRQHandler>
}
 800054c:	46c0      	nop			; (mov r8, r8)
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&uart_gps);
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <USART1_IRQHandler+0x14>)
 800055a:	0018      	movs	r0, r3
 800055c:	f000 ff36 	bl	80013cc <HAL_UART_IRQHandler>
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	2000012c 	.word	0x2000012c

0800056c <main>:
char loading_console_message[40] = "GPS MODULE IS SEARCHING SIGNAL \n\r";

GPGGA_struct gpgga;

int main()
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000570:	f000 f97a 	bl	8000868 <HAL_Init>
	UART_Init();
 8000574:	f000 f818 	bl	80005a8 <UART_Init>

	HAL_UART_Transmit(&console_output,(uint8_t*)&start_console_message, 24, HAL_UART_TIMEOUT_VALUE);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <main+0x28>)
 800057a:	4907      	ldr	r1, [pc, #28]	; (8000598 <main+0x2c>)
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <main+0x30>)
 800057e:	2218      	movs	r2, #24
 8000580:	f000 fe1a 	bl	80011b8 <HAL_UART_Transmit>


	while(1)
	{
		HAL_UART_Receive_IT(&uart_gps,(uint8_t*)&data, 700);
 8000584:	23af      	movs	r3, #175	; 0xaf
 8000586:	009a      	lsls	r2, r3, #2
 8000588:	4905      	ldr	r1, [pc, #20]	; (80005a0 <main+0x34>)
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <main+0x38>)
 800058c:	0018      	movs	r0, r3
 800058e:	f000 feb7 	bl	8001300 <HAL_UART_Receive_IT>
 8000592:	e7f7      	b.n	8000584 <main+0x18>
 8000594:	01ffffff 	.word	0x01ffffff
 8000598:	20000000 	.word	0x20000000
 800059c:	20000098 	.word	0x20000098
 80005a0:	200001c0 	.word	0x200001c0
 80005a4:	2000012c 	.word	0x2000012c

080005a8 <UART_Init>:
	}

}

void UART_Init()
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	console_output.Instance = USART2;
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <UART_Init+0x84>)
 80005ae:	4a20      	ldr	r2, [pc, #128]	; (8000630 <UART_Init+0x88>)
 80005b0:	601a      	str	r2, [r3, #0]
	console_output.Init.BaudRate = 115200;
 80005b2:	4b1e      	ldr	r3, [pc, #120]	; (800062c <UART_Init+0x84>)
 80005b4:	22e1      	movs	r2, #225	; 0xe1
 80005b6:	0252      	lsls	r2, r2, #9
 80005b8:	605a      	str	r2, [r3, #4]
	console_output.Init.Mode = UART_MODE_TX;
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <UART_Init+0x84>)
 80005bc:	2208      	movs	r2, #8
 80005be:	615a      	str	r2, [r3, #20]
	console_output.Init.Parity = UART_PARITY_NONE;
 80005c0:	4b1a      	ldr	r3, [pc, #104]	; (800062c <UART_Init+0x84>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
	console_output.Init.StopBits = UART_STOPBITS_1;
 80005c6:	4b19      	ldr	r3, [pc, #100]	; (800062c <UART_Init+0x84>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
	console_output.Init.WordLength = UART_WORDLENGTH_8B;
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <UART_Init+0x84>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
	console_output.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <UART_Init+0x84>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&console_output) != HAL_OK)
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <UART_Init+0x84>)
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fd96 	bl	800110c <HAL_UART_Init>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <UART_Init+0x40>
	{
		Error_handler();
 80005e4:	f000 f82a 	bl	800063c <Error_handler>
	}

	uart_gps.Instance = USART1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <UART_Init+0x8c>)
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <UART_Init+0x90>)
 80005ec:	601a      	str	r2, [r3, #0]
	uart_gps.Init.BaudRate = 9600;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <UART_Init+0x8c>)
 80005f0:	2296      	movs	r2, #150	; 0x96
 80005f2:	0192      	lsls	r2, r2, #6
 80005f4:	605a      	str	r2, [r3, #4]
	uart_gps.Init.Mode = UART_MODE_TX_RX;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <UART_Init+0x8c>)
 80005f8:	220c      	movs	r2, #12
 80005fa:	615a      	str	r2, [r3, #20]
	uart_gps.Init.Parity = UART_PARITY_NONE;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <UART_Init+0x8c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
	uart_gps.Init.StopBits = UART_STOPBITS_1;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <UART_Init+0x8c>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
	uart_gps.Init.WordLength = UART_WORDLENGTH_8B;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <UART_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
	uart_gps.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <UART_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&uart_gps) != HAL_OK)
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <UART_Init+0x8c>)
 8000616:	0018      	movs	r0, r3
 8000618:	f000 fd78 	bl	800110c <HAL_UART_Init>
 800061c:	1e03      	subs	r3, r0, #0
 800061e:	d001      	beq.n	8000624 <UART_Init+0x7c>
	{
		Error_handler();
 8000620:	f000 f80c 	bl	800063c <Error_handler>
	}
}
 8000624:	46c0      	nop			; (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	20000098 	.word	0x20000098
 8000630:	40004400 	.word	0x40004400
 8000634:	2000012c 	.word	0x2000012c
 8000638:	40013800 	.word	0x40013800

0800063c <Error_handler>:

void Error_handler()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	while(1);
 8000640:	e7fe      	b.n	8000640 <Error_handler+0x4>
	...

08000644 <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

	//char *p = &data;

	if(decode_NMEA_message(data, &gpgga) != 0)
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <HAL_UART_RxCpltCallback+0x30>)
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_UART_RxCpltCallback+0x34>)
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff ff0a 	bl	800046c <decode_NMEA_message>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d007      	beq.n	800066c <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&console_output, (uint8_t*)&data, 700, HAL_UART_TIMEOUT_VALUE);
 800065c:	4c07      	ldr	r4, [pc, #28]	; (800067c <HAL_UART_RxCpltCallback+0x38>)
 800065e:	23af      	movs	r3, #175	; 0xaf
 8000660:	009a      	lsls	r2, r3, #2
 8000662:	4905      	ldr	r1, [pc, #20]	; (8000678 <HAL_UART_RxCpltCallback+0x34>)
 8000664:	4806      	ldr	r0, [pc, #24]	; (8000680 <HAL_UART_RxCpltCallback+0x3c>)
 8000666:	0023      	movs	r3, r4
 8000668:	f000 fda6 	bl	80011b8 <HAL_UART_Transmit>

}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b003      	add	sp, #12
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	200003e8 	.word	0x200003e8
 8000678:	200001c0 	.word	0x200001c0
 800067c:	01ffffff 	.word	0x01ffffff
 8000680:	20000098 	.word	0x20000098

08000684 <HAL_MspInit>:
 *      Author: lorin
 */
#include "main.h"

void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor


	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <HAL_MspInit+0x18>)
 800068a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800068c:	4b03      	ldr	r3, [pc, #12]	; (800069c <HAL_MspInit+0x18>)
 800068e:	21e0      	movs	r1, #224	; 0xe0
 8000690:	02c9      	lsls	r1, r1, #11
 8000692:	430a      	orrs	r2, r1
 8000694:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b08d      	sub	sp, #52	; 0x34
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;

  /********************enable clocks********************/

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	4b3a      	ldr	r3, [pc, #232]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ac:	4b39      	ldr	r3, [pc, #228]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006ae:	2101      	movs	r1, #1
 80006b0:	430a      	orrs	r2, r1
 80006b2:	635a      	str	r2, [r3, #52]	; 0x34
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b8:	2201      	movs	r2, #1
 80006ba:	4013      	ands	r3, r2
 80006bc:	61bb      	str	r3, [r7, #24]
 80006be:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006c6:	2104      	movs	r1, #4
 80006c8:	430a      	orrs	r2, r1
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34
 80006cc:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006d0:	2204      	movs	r2, #4
 80006d2:	4013      	ands	r3, r2
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	697b      	ldr	r3, [r7, #20]

  __HAL_RCC_USART1_CLK_ENABLE();
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006de:	2180      	movs	r1, #128	; 0x80
 80006e0:	01c9      	lsls	r1, r1, #7
 80006e2:	430a      	orrs	r2, r1
 80006e4:	641a      	str	r2, [r3, #64]	; 0x40
 80006e6:	4b2b      	ldr	r3, [pc, #172]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	01db      	lsls	r3, r3, #7
 80006ee:	4013      	ands	r3, r2
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_USART2_CLK_ENABLE();
 80006f4:	4b27      	ldr	r3, [pc, #156]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <HAL_UART_MspInit+0xf4>)
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	0289      	lsls	r1, r1, #10
 80006fe:	430a      	orrs	r2, r1
 8000700:	63da      	str	r2, [r3, #60]	; 0x3c
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <HAL_UART_MspInit+0xf4>)
 8000704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	029b      	lsls	r3, r3, #10
 800070a:	4013      	ands	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]

  /********************pin muxing***********************/

  /* UART TX CONSOLE */
  gpio_uart.Pin = GPIO_PIN_2;
 8000710:	241c      	movs	r4, #28
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2204      	movs	r2, #4
 8000716:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2202      	movs	r2, #2
 800071c:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART2;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2201      	movs	r2, #1
 8000722:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2201      	movs	r2, #1
 8000728:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2202      	movs	r2, #2
 800072e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000730:	193a      	adds	r2, r7, r4
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 facd 	bl	8000cd8 <HAL_GPIO_Init>

  /* UART TX GPS */
  gpio_uart.Pin = GPIO_PIN_4;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2210      	movs	r2, #16
 8000742:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2202      	movs	r2, #2
 8000748:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART1;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2201      	movs	r2, #1
 800074e:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2201      	movs	r2, #1
 8000754:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2202      	movs	r2, #2
 800075a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 800075c:	193b      	adds	r3, r7, r4
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_UART_MspInit+0xf8>)
 8000760:	0019      	movs	r1, r3
 8000762:	0010      	movs	r0, r2
 8000764:	f000 fab8 	bl	8000cd8 <HAL_GPIO_Init>

  /* UART RX GPS */
  gpio_uart.Pin = GPIO_PIN_5;
 8000768:	0021      	movs	r1, r4
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2220      	movs	r2, #32
 800076e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 8000770:	187b      	adds	r3, r7, r1
 8000772:	4a09      	ldr	r2, [pc, #36]	; (8000798 <HAL_UART_MspInit+0xf8>)
 8000774:	0019      	movs	r1, r3
 8000776:	0010      	movs	r0, r2
 8000778:	f000 faae 	bl	8000cd8 <HAL_GPIO_Init>

  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800077c:	201b      	movs	r0, #27
 800077e:	f000 f9ba 	bl	8000af6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn,15,0);
 8000782:	2200      	movs	r2, #0
 8000784:	210f      	movs	r1, #15
 8000786:	201b      	movs	r0, #27
 8000788:	f000 f9a0 	bl	8000acc <HAL_NVIC_SetPriority>

}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b00d      	add	sp, #52	; 0x34
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	50000800 	.word	0x50000800

0800079c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a4:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <_sbrk+0x5c>)
 80007a6:	4b15      	ldr	r3, [pc, #84]	; (80007fc <_sbrk+0x60>)
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <_sbrk+0x64>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <_sbrk+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	18d3      	adds	r3, r2, r3
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d207      	bcs.n	80007dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007cc:	f002 fda8 	bl	8003320 <__errno>
 80007d0:	0003      	movs	r3, r0
 80007d2:	220c      	movs	r2, #12
 80007d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d6:	2301      	movs	r3, #1
 80007d8:	425b      	negs	r3, r3
 80007da:	e009      	b.n	80007f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007dc:	4b08      	ldr	r3, [pc, #32]	; (8000800 <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	18d2      	adds	r2, r2, r3
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <_sbrk+0x64>)
 80007ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b006      	add	sp, #24
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20024000 	.word	0x20024000
 80007fc:	00000400 	.word	0x00000400
 8000800:	20000400 	.word	0x20000400
 8000804:	20000550 	.word	0x20000550

08000808 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	; (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000818:	f7ff fff6 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	; (8000854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	; (8000860 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000842:	f002 fd73 	bl	800332c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000846:	f7ff fe91 	bl	800056c <main>

0800084a <LoopForever>:

LoopForever:
  b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000858:	08004124 	.word	0x08004124
  ldr r2, =_sbss
 800085c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000860:	20000550 	.word	0x20000550

08000864 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC1_COMP_IRQHandler>
	...

08000868 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <HAL_Init+0x3c>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_Init+0x3c>)
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	0049      	lsls	r1, r1, #1
 800087e:	430a      	orrs	r2, r1
 8000880:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000882:	2000      	movs	r0, #0
 8000884:	f000 f810 	bl	80008a8 <HAL_InitTick>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d003      	beq.n	8000894 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	e001      	b.n	8000898 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fef6 	bl	8000684 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b002      	add	sp, #8
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008b0:	230f      	movs	r3, #15
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <HAL_InitTick+0x88>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d02b      	beq.n	8000918 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <HAL_InitTick+0x8c>)
 80008c2:	681c      	ldr	r4, [r3, #0]
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <HAL_InitTick+0x88>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	0019      	movs	r1, r3
 80008ca:	23fa      	movs	r3, #250	; 0xfa
 80008cc:	0098      	lsls	r0, r3, #2
 80008ce:	f7ff fc2b 	bl	8000128 <__udivsi3>
 80008d2:	0003      	movs	r3, r0
 80008d4:	0019      	movs	r1, r3
 80008d6:	0020      	movs	r0, r4
 80008d8:	f7ff fc26 	bl	8000128 <__udivsi3>
 80008dc:	0003      	movs	r3, r0
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 f919 	bl	8000b16 <HAL_SYSTICK_Config>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d112      	bne.n	800090e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d80a      	bhi.n	8000904 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	2301      	movs	r3, #1
 80008f2:	425b      	negs	r3, r3
 80008f4:	2200      	movs	r2, #0
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 f8e8 	bl	8000acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <HAL_InitTick+0x90>)
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	e00d      	b.n	8000920 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000904:	230f      	movs	r3, #15
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	e008      	b.n	8000920 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800090e:	230f      	movs	r3, #15
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	e003      	b.n	8000920 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000918:	230f      	movs	r3, #15
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	2201      	movs	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000920:	230f      	movs	r3, #15
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	781b      	ldrb	r3, [r3, #0]
}
 8000926:	0018      	movs	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	b005      	add	sp, #20
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	20000028 	.word	0x20000028
 8000934:	20000020 	.word	0x20000020
 8000938:	20000024 	.word	0x20000024

0800093c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x1c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	001a      	movs	r2, r3
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x20>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	18d2      	adds	r2, r2, r3
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <HAL_IncTick+0x20>)
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	20000028 	.word	0x20000028
 800095c:	20000404 	.word	0x20000404

08000960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b02      	ldr	r3, [pc, #8]	; (8000970 <HAL_GetTick+0x10>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	20000404 	.word	0x20000404

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	0002      	movs	r2, r0
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b7f      	cmp	r3, #127	; 0x7f
 8000986:	d809      	bhi.n	800099c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000988:	1dfb      	adds	r3, r7, #7
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	001a      	movs	r2, r3
 800098e:	231f      	movs	r3, #31
 8000990:	401a      	ands	r2, r3
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_EnableIRQ+0x30>)
 8000994:	2101      	movs	r1, #1
 8000996:	4091      	lsls	r1, r2
 8000998:	000a      	movs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	e000e100 	.word	0xe000e100

080009a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	0002      	movs	r2, r0
 80009b0:	6039      	str	r1, [r7, #0]
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009b6:	1dfb      	adds	r3, r7, #7
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b7f      	cmp	r3, #127	; 0x7f
 80009bc:	d828      	bhi.n	8000a10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009be:	4a2f      	ldr	r2, [pc, #188]	; (8000a7c <__NVIC_SetPriority+0xd4>)
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	33c0      	adds	r3, #192	; 0xc0
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	589b      	ldr	r3, [r3, r2]
 80009ce:	1dfa      	adds	r2, r7, #7
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	0011      	movs	r1, r2
 80009d4:	2203      	movs	r2, #3
 80009d6:	400a      	ands	r2, r1
 80009d8:	00d2      	lsls	r2, r2, #3
 80009da:	21ff      	movs	r1, #255	; 0xff
 80009dc:	4091      	lsls	r1, r2
 80009de:	000a      	movs	r2, r1
 80009e0:	43d2      	mvns	r2, r2
 80009e2:	401a      	ands	r2, r3
 80009e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	019b      	lsls	r3, r3, #6
 80009ea:	22ff      	movs	r2, #255	; 0xff
 80009ec:	401a      	ands	r2, r3
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0018      	movs	r0, r3
 80009f4:	2303      	movs	r3, #3
 80009f6:	4003      	ands	r3, r0
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009fc:	481f      	ldr	r0, [pc, #124]	; (8000a7c <__NVIC_SetPriority+0xd4>)
 80009fe:	1dfb      	adds	r3, r7, #7
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b25b      	sxtb	r3, r3
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	430a      	orrs	r2, r1
 8000a08:	33c0      	adds	r3, #192	; 0xc0
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a0e:	e031      	b.n	8000a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <__NVIC_SetPriority+0xd8>)
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	0019      	movs	r1, r3
 8000a18:	230f      	movs	r3, #15
 8000a1a:	400b      	ands	r3, r1
 8000a1c:	3b08      	subs	r3, #8
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3306      	adds	r3, #6
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	18d3      	adds	r3, r2, r3
 8000a26:	3304      	adds	r3, #4
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	1dfa      	adds	r2, r7, #7
 8000a2c:	7812      	ldrb	r2, [r2, #0]
 8000a2e:	0011      	movs	r1, r2
 8000a30:	2203      	movs	r2, #3
 8000a32:	400a      	ands	r2, r1
 8000a34:	00d2      	lsls	r2, r2, #3
 8000a36:	21ff      	movs	r1, #255	; 0xff
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	43d2      	mvns	r2, r2
 8000a3e:	401a      	ands	r2, r3
 8000a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	019b      	lsls	r3, r3, #6
 8000a46:	22ff      	movs	r2, #255	; 0xff
 8000a48:	401a      	ands	r2, r3
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	2303      	movs	r3, #3
 8000a52:	4003      	ands	r3, r0
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a58:	4809      	ldr	r0, [pc, #36]	; (8000a80 <__NVIC_SetPriority+0xd8>)
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	001c      	movs	r4, r3
 8000a60:	230f      	movs	r3, #15
 8000a62:	4023      	ands	r3, r4
 8000a64:	3b08      	subs	r3, #8
 8000a66:	089b      	lsrs	r3, r3, #2
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	3306      	adds	r3, #6
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	18c3      	adds	r3, r0, r3
 8000a70:	3304      	adds	r3, #4
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	b003      	add	sp, #12
 8000a7a:	bd90      	pop	{r4, r7, pc}
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1e5a      	subs	r2, r3, #1
 8000a90:	2380      	movs	r3, #128	; 0x80
 8000a92:	045b      	lsls	r3, r3, #17
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d301      	bcc.n	8000a9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e010      	b.n	8000abe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <SysTick_Config+0x44>)
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	3a01      	subs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	425b      	negs	r3, r3
 8000aa8:	2103      	movs	r1, #3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff ff7c 	bl	80009a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SysTick_Config+0x44>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab6:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SysTick_Config+0x44>)
 8000ab8:	2207      	movs	r2, #7
 8000aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000abc:	2300      	movs	r3, #0
}
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	1c02      	adds	r2, r0, #0
 8000adc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff ff5d 	bl	80009a8 <__NVIC_SetPriority>
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b004      	add	sp, #16
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	0002      	movs	r2, r0
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff ff33 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	b002      	add	sp, #8
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff ffaf 	bl	8000a84 <SysTick_Config>
 8000b26:	0003      	movs	r3, r0
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000b34:	f000 f803 	bl	8000b3e <HAL_SYSTICK_Callback>
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e04f      	b.n	8000bfa <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2225      	movs	r2, #37	; 0x25
 8000b5e:	5c9b      	ldrb	r3, [r3, r2]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d008      	beq.n	8000b78 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2204      	movs	r2, #4
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2224      	movs	r2, #36	; 0x24
 8000b70:	2100      	movs	r1, #0
 8000b72:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e040      	b.n	8000bfa <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	210e      	movs	r1, #14
 8000b84:	438a      	bics	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b92:	491c      	ldr	r1, [pc, #112]	; (8000c04 <HAL_DMA_Abort+0xbc>)
 8000b94:	400a      	ands	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	438a      	bics	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bac:	221c      	movs	r2, #28
 8000bae:	401a      	ands	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4091      	lsls	r1, r2
 8000bb8:	000a      	movs	r2, r1
 8000bba:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000bc4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00c      	beq.n	8000be8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bd8:	490a      	ldr	r1, [pc, #40]	; (8000c04 <HAL_DMA_Abort+0xbc>)
 8000bda:	400a      	ands	r2, r1
 8000bdc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000be6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2225      	movs	r2, #37	; 0x25
 8000bec:	2101      	movs	r1, #1
 8000bee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2224      	movs	r2, #36	; 0x24
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b002      	add	sp, #8
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	fffffeff 	.word	0xfffffeff

08000c08 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c10:	210f      	movs	r1, #15
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2225      	movs	r2, #37	; 0x25
 8000c1c:	5c9b      	ldrb	r3, [r3, r2]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d006      	beq.n	8000c32 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2204      	movs	r2, #4
 8000c28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e048      	b.n	8000cc4 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	210e      	movs	r1, #14
 8000c3e:	438a      	bics	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	438a      	bics	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c5c:	491d      	ldr	r1, [pc, #116]	; (8000cd4 <HAL_DMA_Abort_IT+0xcc>)
 8000c5e:	400a      	ands	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	221c      	movs	r2, #28
 8000c68:	401a      	ands	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4091      	lsls	r1, r2
 8000c72:	000a      	movs	r2, r1
 8000c74:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000c7e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00c      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c92:	4910      	ldr	r1, [pc, #64]	; (8000cd4 <HAL_DMA_Abort_IT+0xcc>)
 8000c94:	400a      	ands	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000ca0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2225      	movs	r2, #37	; 0x25
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2224      	movs	r2, #36	; 0x24
 8000cae:	2100      	movs	r1, #0
 8000cb0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	0010      	movs	r0, r2
 8000cc2:	4798      	blx	r3
    }
  }
  return status;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	fffffeff 	.word	0xfffffeff

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce6:	e14d      	b.n	8000f84 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2101      	movs	r1, #1
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	4091      	lsls	r1, r2
 8000cf2:	000a      	movs	r2, r1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d100      	bne.n	8000d00 <HAL_GPIO_Init+0x28>
 8000cfe:	e13e      	b.n	8000f7e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2203      	movs	r2, #3
 8000d06:	4013      	ands	r3, r2
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d005      	beq.n	8000d18 <HAL_GPIO_Init+0x40>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2203      	movs	r2, #3
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d130      	bne.n	8000d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	43da      	mvns	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	43da      	mvns	r2, r3
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	2201      	movs	r2, #1
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2203      	movs	r2, #3
 8000d80:	4013      	ands	r3, r2
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d017      	beq.n	8000db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	689a      	ldr	r2, [r3, #8]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	409a      	lsls	r2, r3
 8000da8:	0013      	movs	r3, r2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2203      	movs	r2, #3
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d123      	bne.n	8000e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	08da      	lsrs	r2, r3, #3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3208      	adds	r2, #8
 8000dca:	0092      	lsls	r2, r2, #2
 8000dcc:	58d3      	ldr	r3, [r2, r3]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	2207      	movs	r2, #7
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	691a      	ldr	r2, [r3, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	2107      	movs	r1, #7
 8000dee:	400b      	ands	r3, r1
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	0092      	lsls	r2, r2, #2
 8000e06:	6939      	ldr	r1, [r7, #16]
 8000e08:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	409a      	lsls	r2, r3
 8000e18:	0013      	movs	r3, r2
 8000e1a:	43da      	mvns	r2, r3
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2203      	movs	r2, #3
 8000e28:	401a      	ands	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	23c0      	movs	r3, #192	; 0xc0
 8000e44:	029b      	lsls	r3, r3, #10
 8000e46:	4013      	ands	r3, r2
 8000e48:	d100      	bne.n	8000e4c <HAL_GPIO_Init+0x174>
 8000e4a:	e098      	b.n	8000f7e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e4c:	4a53      	ldr	r2, [pc, #332]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3318      	adds	r3, #24
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	589b      	ldr	r3, [r3, r2]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	4013      	ands	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	220f      	movs	r2, #15
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0x1d6>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <HAL_GPIO_Init+0x2c8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x1d2>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <HAL_GPIO_Init+0x2cc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x1ce>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a46      	ldr	r2, [pc, #280]	; (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x1ca>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a45      	ldr	r2, [pc, #276]	; (8000fac <HAL_GPIO_Init+0x2d4>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x1c6>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e008      	b.n	8000eb0 <HAL_GPIO_Init+0x1d8>
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	e006      	b.n	8000eb0 <HAL_GPIO_Init+0x1d8>
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e004      	b.n	8000eb0 <HAL_GPIO_Init+0x1d8>
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	e002      	b.n	8000eb0 <HAL_GPIO_Init+0x1d8>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <HAL_GPIO_Init+0x1d8>
 8000eae:	2300      	movs	r3, #0
 8000eb0:	697a      	ldr	r2, [r7, #20]
 8000eb2:	2103      	movs	r1, #3
 8000eb4:	400a      	ands	r2, r1
 8000eb6:	00d2      	lsls	r2, r2, #3
 8000eb8:	4093      	lsls	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ec0:	4936      	ldr	r1, [pc, #216]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	3318      	adds	r3, #24
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	035b      	lsls	r3, r3, #13
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d003      	beq.n	8000ef2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43da      	mvns	r2, r3
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	039b      	lsls	r3, r3, #14
 8000f10:	4013      	ands	r3, r2
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000f24:	2384      	movs	r3, #132	; 0x84
 8000f26:	58d3      	ldr	r3, [r2, r3]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	029b      	lsls	r3, r3, #10
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f48:	4914      	ldr	r1, [pc, #80]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000f4a:	2284      	movs	r2, #132	; 0x84
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	58d3      	ldr	r3, [r2, r3]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	025b      	lsls	r3, r3, #9
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f76:	4909      	ldr	r1, [pc, #36]	; (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	40da      	lsrs	r2, r3
 8000f8c:	1e13      	subs	r3, r2, #0
 8000f8e:	d000      	beq.n	8000f92 <HAL_GPIO_Init+0x2ba>
 8000f90:	e6aa      	b.n	8000ce8 <HAL_GPIO_Init+0x10>
  }
}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b006      	add	sp, #24
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	50000400 	.word	0x50000400
 8000fa4:	50000800 	.word	0x50000800
 8000fa8:	50000c00 	.word	0x50000c00
 8000fac:	50001000 	.word	0x50001000

08000fb0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	23e0      	movs	r3, #224	; 0xe0
 8000fba:	01db      	lsls	r3, r3, #7
 8000fbc:	4013      	ands	r3, r2
}
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fce:	4b3c      	ldr	r3, [pc, #240]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	2238      	movs	r2, #56	; 0x38
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d10f      	bne.n	8000ff8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000fd8:	4b39      	ldr	r3, [pc, #228]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	0adb      	lsrs	r3, r3, #11
 8000fde:	2207      	movs	r2, #7
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000fea:	6839      	ldr	r1, [r7, #0]
 8000fec:	4835      	ldr	r0, [pc, #212]	; (80010c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8000fee:	f7ff f89b 	bl	8000128 <__udivsi3>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e05d      	b.n	80010b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2238      	movs	r2, #56	; 0x38
 8000ffe:	4013      	ands	r3, r2
 8001000:	2b08      	cmp	r3, #8
 8001002:	d102      	bne.n	800100a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	e054      	b.n	80010b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800100a:	4b2d      	ldr	r3, [pc, #180]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2238      	movs	r2, #56	; 0x38
 8001010:	4013      	ands	r3, r2
 8001012:	2b10      	cmp	r3, #16
 8001014:	d138      	bne.n	8001088 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001016:	4b2a      	ldr	r3, [pc, #168]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	2203      	movs	r2, #3
 800101c:	4013      	ands	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	2207      	movs	r2, #7
 8001028:	4013      	ands	r3, r2
 800102a:	3301      	adds	r3, #1
 800102c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d10d      	bne.n	8001050 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	4824      	ldr	r0, [pc, #144]	; (80010c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001038:	f7ff f876 	bl	8000128 <__udivsi3>
 800103c:	0003      	movs	r3, r0
 800103e:	0019      	movs	r1, r3
 8001040:	4b1f      	ldr	r3, [pc, #124]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	227f      	movs	r2, #127	; 0x7f
 8001048:	4013      	ands	r3, r2
 800104a:	434b      	muls	r3, r1
 800104c:	617b      	str	r3, [r7, #20]
        break;
 800104e:	e00d      	b.n	800106c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	481c      	ldr	r0, [pc, #112]	; (80010c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001054:	f7ff f868 	bl	8000128 <__udivsi3>
 8001058:	0003      	movs	r3, r0
 800105a:	0019      	movs	r1, r3
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	227f      	movs	r2, #127	; 0x7f
 8001064:	4013      	ands	r3, r2
 8001066:	434b      	muls	r3, r1
 8001068:	617b      	str	r3, [r7, #20]
        break;
 800106a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0f5b      	lsrs	r3, r3, #29
 8001072:	2207      	movs	r2, #7
 8001074:	4013      	ands	r3, r2
 8001076:	3301      	adds	r3, #1
 8001078:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	6978      	ldr	r0, [r7, #20]
 800107e:	f7ff f853 	bl	8000128 <__udivsi3>
 8001082:	0003      	movs	r3, r0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e015      	b.n	80010b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2238      	movs	r2, #56	; 0x38
 800108e:	4013      	ands	r3, r2
 8001090:	2b20      	cmp	r3, #32
 8001092:	d103      	bne.n	800109c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2238      	movs	r2, #56	; 0x38
 80010a2:	4013      	ands	r3, r2
 80010a4:	2b18      	cmp	r3, #24
 80010a6:	d103      	bne.n	80010b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80010a8:	23fa      	movs	r3, #250	; 0xfa
 80010aa:	01db      	lsls	r3, r3, #7
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	e001      	b.n	80010b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80010b4:	693b      	ldr	r3, [r7, #16]
}
 80010b6:	0018      	movs	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b006      	add	sp, #24
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40021000 	.word	0x40021000
 80010c4:	00f42400 	.word	0x00f42400
 80010c8:	007a1200 	.word	0x007a1200

080010cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010d0:	4b02      	ldr	r3, [pc, #8]	; (80010dc <HAL_RCC_GetHCLKFreq+0x10>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	20000020 	.word	0x20000020

080010e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010e0:	b5b0      	push	{r4, r5, r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80010e4:	f7ff fff2 	bl	80010cc <HAL_RCC_GetHCLKFreq>
 80010e8:	0004      	movs	r4, r0
 80010ea:	f7ff ff61 	bl	8000fb0 <LL_RCC_GetAPB1Prescaler>
 80010ee:	0003      	movs	r3, r0
 80010f0:	0b1a      	lsrs	r2, r3, #12
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_RCC_GetPCLK1Freq+0x28>)
 80010f4:	0092      	lsls	r2, r2, #2
 80010f6:	58d3      	ldr	r3, [r2, r3]
 80010f8:	221f      	movs	r2, #31
 80010fa:	4013      	ands	r3, r2
 80010fc:	40dc      	lsrs	r4, r3
 80010fe:	0023      	movs	r3, r4
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bdb0      	pop	{r4, r5, r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	08003fbc 	.word	0x08003fbc

0800110c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e046      	b.n	80011ac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2288      	movs	r2, #136	; 0x88
 8001122:	589b      	ldr	r3, [r3, r2]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2284      	movs	r2, #132	; 0x84
 800112c:	2100      	movs	r1, #0
 800112e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	0018      	movs	r0, r3
 8001134:	f7ff fab4 	bl	80006a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2288      	movs	r2, #136	; 0x88
 800113c:	2124      	movs	r1, #36	; 0x24
 800113e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2101      	movs	r1, #1
 800114c:	438a      	bics	r2, r1
 800114e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	0018      	movs	r0, r3
 800115c:	f000 ffce 	bl	80020fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	0018      	movs	r0, r3
 8001164:	f000 fc74 	bl	8001a50 <UART_SetConfig>
 8001168:	0003      	movs	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e01c      	b.n	80011ac <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	490d      	ldr	r1, [pc, #52]	; (80011b4 <HAL_UART_Init+0xa8>)
 800117e:	400a      	ands	r2, r1
 8001180:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	212a      	movs	r1, #42	; 0x2a
 800118e:	438a      	bics	r2, r1
 8001190:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	0018      	movs	r0, r3
 80011a6:	f001 f85d 	bl	8002264 <UART_CheckIdleState>
 80011aa:	0003      	movs	r3, r0
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	ffffb7ff 	.word	0xffffb7ff

080011b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af02      	add	r7, sp, #8
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	1dbb      	adds	r3, r7, #6
 80011c6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2288      	movs	r2, #136	; 0x88
 80011cc:	589b      	ldr	r3, [r3, r2]
 80011ce:	2b20      	cmp	r3, #32
 80011d0:	d000      	beq.n	80011d4 <HAL_UART_Transmit+0x1c>
 80011d2:	e090      	b.n	80012f6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_UART_Transmit+0x2a>
 80011da:	1dbb      	adds	r3, r7, #6
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e088      	b.n	80012f8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	015b      	lsls	r3, r3, #5
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d109      	bne.n	8001206 <HAL_UART_Transmit+0x4e>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d105      	bne.n	8001206 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2201      	movs	r2, #1
 80011fe:	4013      	ands	r3, r2
 8001200:	d001      	beq.n	8001206 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e078      	b.n	80012f8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2290      	movs	r2, #144	; 0x90
 800120a:	2100      	movs	r1, #0
 800120c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2288      	movs	r2, #136	; 0x88
 8001212:	2121      	movs	r1, #33	; 0x21
 8001214:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001216:	f7ff fba3 	bl	8000960 <HAL_GetTick>
 800121a:	0003      	movs	r3, r0
 800121c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1dba      	adds	r2, r7, #6
 8001222:	2154      	movs	r1, #84	; 0x54
 8001224:	8812      	ldrh	r2, [r2, #0]
 8001226:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1dba      	adds	r2, r7, #6
 800122c:	2156      	movs	r1, #86	; 0x56
 800122e:	8812      	ldrh	r2, [r2, #0]
 8001230:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	015b      	lsls	r3, r3, #5
 800123a:	429a      	cmp	r2, r3
 800123c:	d108      	bne.n	8001250 <HAL_UART_Transmit+0x98>
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d104      	bne.n	8001250 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	e003      	b.n	8001258 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001258:	e030      	b.n	80012bc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	0013      	movs	r3, r2
 8001264:	2200      	movs	r2, #0
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	f001 f8a6 	bl	80023b8 <UART_WaitOnFlagUntilTimeout>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d005      	beq.n	800127c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2288      	movs	r2, #136	; 0x88
 8001274:	2120      	movs	r1, #32
 8001276:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e03d      	b.n	80012f8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d10b      	bne.n	800129a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	001a      	movs	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	05d2      	lsls	r2, r2, #23
 800128e:	0dd2      	lsrs	r2, r2, #23
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	3302      	adds	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	e007      	b.n	80012aa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	781a      	ldrb	r2, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	3301      	adds	r3, #1
 80012a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2256      	movs	r2, #86	; 0x56
 80012ae:	5a9b      	ldrh	r3, [r3, r2]
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b299      	uxth	r1, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2256      	movs	r2, #86	; 0x56
 80012ba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2256      	movs	r2, #86	; 0x56
 80012c0:	5a9b      	ldrh	r3, [r3, r2]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1c8      	bne.n	800125a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	68f8      	ldr	r0, [r7, #12]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	0013      	movs	r3, r2
 80012d2:	2200      	movs	r2, #0
 80012d4:	2140      	movs	r1, #64	; 0x40
 80012d6:	f001 f86f 	bl	80023b8 <UART_WaitOnFlagUntilTimeout>
 80012da:	1e03      	subs	r3, r0, #0
 80012dc:	d005      	beq.n	80012ea <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2288      	movs	r2, #136	; 0x88
 80012e2:	2120      	movs	r1, #32
 80012e4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e006      	b.n	80012f8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2288      	movs	r2, #136	; 0x88
 80012ee:	2120      	movs	r1, #32
 80012f0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80012f6:	2302      	movs	r3, #2
  }
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b008      	add	sp, #32
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	1dbb      	adds	r3, r7, #6
 800130c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	228c      	movs	r2, #140	; 0x8c
 8001312:	589b      	ldr	r3, [r3, r2]
 8001314:	2b20      	cmp	r3, #32
 8001316:	d14f      	bne.n	80013b8 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_UART_Receive_IT+0x26>
 800131e:	1dbb      	adds	r3, r7, #6
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e047      	b.n	80013ba <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	015b      	lsls	r3, r3, #5
 8001332:	429a      	cmp	r2, r3
 8001334:	d109      	bne.n	800134a <HAL_UART_Receive_IT+0x4a>
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2201      	movs	r2, #1
 8001342:	4013      	ands	r3, r2
 8001344:	d001      	beq.n	800134a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e037      	b.n	80013ba <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_UART_Receive_IT+0xc4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d025      	beq.n	80013a6 <HAL_UART_Receive_IT+0xa6>
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <HAL_UART_Receive_IT+0xc8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d020      	beq.n	80013a6 <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	041b      	lsls	r3, r3, #16
 800136e:	4013      	ands	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001372:	f3ef 8310 	mrs	r3, PRIMASK
 8001376:	613b      	str	r3, [r7, #16]
  return(result);
 8001378:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	2301      	movs	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	f383 8810 	msr	PRIMASK, r3
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	04c9      	lsls	r1, r1, #19
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	f383 8810 	msr	PRIMASK, r3
}
 80013a4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80013a6:	1dbb      	adds	r3, r7, #6
 80013a8:	881a      	ldrh	r2, [r3, #0]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	0018      	movs	r0, r3
 80013b0:	f001 f872 	bl	8002498 <UART_Start_Receive_IT>
 80013b4:	0003      	movs	r3, r0
 80013b6:	e000      	b.n	80013ba <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80013b8:	2302      	movs	r3, #2
  }
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b008      	add	sp, #32
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	40008000 	.word	0x40008000
 80013c8:	40008400 	.word	0x40008400

080013cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80013cc:	b5b0      	push	{r4, r5, r7, lr}
 80013ce:	b0aa      	sub	sp, #168	; 0xa8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	22a4      	movs	r2, #164	; 0xa4
 80013dc:	18b9      	adds	r1, r7, r2
 80013de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	20a0      	movs	r0, #160	; 0xa0
 80013e8:	1839      	adds	r1, r7, r0
 80013ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	249c      	movs	r4, #156	; 0x9c
 80013f4:	1939      	adds	r1, r7, r4
 80013f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80013f8:	0011      	movs	r1, r2
 80013fa:	18bb      	adds	r3, r7, r2
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4aa2      	ldr	r2, [pc, #648]	; (8001688 <HAL_UART_IRQHandler+0x2bc>)
 8001400:	4013      	ands	r3, r2
 8001402:	2298      	movs	r2, #152	; 0x98
 8001404:	18bd      	adds	r5, r7, r2
 8001406:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001408:	18bb      	adds	r3, r7, r2
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d11a      	bne.n	8001446 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001410:	187b      	adds	r3, r7, r1
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2220      	movs	r2, #32
 8001416:	4013      	ands	r3, r2
 8001418:	d015      	beq.n	8001446 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800141a:	183b      	adds	r3, r7, r0
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2220      	movs	r2, #32
 8001420:	4013      	ands	r3, r2
 8001422:	d105      	bne.n	8001430 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001424:	193b      	adds	r3, r7, r4
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	055b      	lsls	r3, r3, #21
 800142c:	4013      	ands	r3, r2
 800142e:	d00a      	beq.n	8001446 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001434:	2b00      	cmp	r3, #0
 8001436:	d100      	bne.n	800143a <HAL_UART_IRQHandler+0x6e>
 8001438:	e2dc      	b.n	80019f4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	0010      	movs	r0, r2
 8001442:	4798      	blx	r3
      }
      return;
 8001444:	e2d6      	b.n	80019f4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001446:	2398      	movs	r3, #152	; 0x98
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d100      	bne.n	8001452 <HAL_UART_IRQHandler+0x86>
 8001450:	e122      	b.n	8001698 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001452:	239c      	movs	r3, #156	; 0x9c
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a8c      	ldr	r2, [pc, #560]	; (800168c <HAL_UART_IRQHandler+0x2c0>)
 800145a:	4013      	ands	r3, r2
 800145c:	d106      	bne.n	800146c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a8a      	ldr	r2, [pc, #552]	; (8001690 <HAL_UART_IRQHandler+0x2c4>)
 8001466:	4013      	ands	r3, r2
 8001468:	d100      	bne.n	800146c <HAL_UART_IRQHandler+0xa0>
 800146a:	e115      	b.n	8001698 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800146c:	23a4      	movs	r3, #164	; 0xa4
 800146e:	18fb      	adds	r3, r7, r3
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2201      	movs	r2, #1
 8001474:	4013      	ands	r3, r2
 8001476:	d012      	beq.n	800149e <HAL_UART_IRQHandler+0xd2>
 8001478:	23a0      	movs	r3, #160	; 0xa0
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4013      	ands	r3, r2
 8001484:	d00b      	beq.n	800149e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2201      	movs	r2, #1
 800148c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2290      	movs	r2, #144	; 0x90
 8001492:	589b      	ldr	r3, [r3, r2]
 8001494:	2201      	movs	r2, #1
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2190      	movs	r1, #144	; 0x90
 800149c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800149e:	23a4      	movs	r3, #164	; 0xa4
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2202      	movs	r2, #2
 80014a6:	4013      	ands	r3, r2
 80014a8:	d011      	beq.n	80014ce <HAL_UART_IRQHandler+0x102>
 80014aa:	239c      	movs	r3, #156	; 0x9c
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	d00b      	beq.n	80014ce <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2202      	movs	r2, #2
 80014bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2290      	movs	r2, #144	; 0x90
 80014c2:	589b      	ldr	r3, [r3, r2]
 80014c4:	2204      	movs	r2, #4
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2190      	movs	r1, #144	; 0x90
 80014cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80014ce:	23a4      	movs	r3, #164	; 0xa4
 80014d0:	18fb      	adds	r3, r7, r3
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2204      	movs	r2, #4
 80014d6:	4013      	ands	r3, r2
 80014d8:	d011      	beq.n	80014fe <HAL_UART_IRQHandler+0x132>
 80014da:	239c      	movs	r3, #156	; 0x9c
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4013      	ands	r3, r2
 80014e4:	d00b      	beq.n	80014fe <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2204      	movs	r2, #4
 80014ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2290      	movs	r2, #144	; 0x90
 80014f2:	589b      	ldr	r3, [r3, r2]
 80014f4:	2202      	movs	r2, #2
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2190      	movs	r1, #144	; 0x90
 80014fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80014fe:	23a4      	movs	r3, #164	; 0xa4
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2208      	movs	r2, #8
 8001506:	4013      	ands	r3, r2
 8001508:	d017      	beq.n	800153a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800150a:	23a0      	movs	r3, #160	; 0xa0
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2220      	movs	r2, #32
 8001512:	4013      	ands	r3, r2
 8001514:	d105      	bne.n	8001522 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001516:	239c      	movs	r3, #156	; 0x9c
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a5b      	ldr	r2, [pc, #364]	; (800168c <HAL_UART_IRQHandler+0x2c0>)
 800151e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001520:	d00b      	beq.n	800153a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2208      	movs	r2, #8
 8001528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2290      	movs	r2, #144	; 0x90
 800152e:	589b      	ldr	r3, [r3, r2]
 8001530:	2208      	movs	r2, #8
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2190      	movs	r1, #144	; 0x90
 8001538:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800153a:	23a4      	movs	r3, #164	; 0xa4
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4013      	ands	r3, r2
 8001546:	d013      	beq.n	8001570 <HAL_UART_IRQHandler+0x1a4>
 8001548:	23a0      	movs	r3, #160	; 0xa0
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	04db      	lsls	r3, r3, #19
 8001552:	4013      	ands	r3, r2
 8001554:	d00c      	beq.n	8001570 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2280      	movs	r2, #128	; 0x80
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2290      	movs	r2, #144	; 0x90
 8001564:	589b      	ldr	r3, [r3, r2]
 8001566:	2220      	movs	r2, #32
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2190      	movs	r1, #144	; 0x90
 800156e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2290      	movs	r2, #144	; 0x90
 8001574:	589b      	ldr	r3, [r3, r2]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <HAL_UART_IRQHandler+0x1b0>
 800157a:	e23d      	b.n	80019f8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800157c:	23a4      	movs	r3, #164	; 0xa4
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2220      	movs	r2, #32
 8001584:	4013      	ands	r3, r2
 8001586:	d015      	beq.n	80015b4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001588:	23a0      	movs	r3, #160	; 0xa0
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2220      	movs	r2, #32
 8001590:	4013      	ands	r3, r2
 8001592:	d106      	bne.n	80015a2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001594:	239c      	movs	r3, #156	; 0x9c
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	055b      	lsls	r3, r3, #21
 800159e:	4013      	ands	r3, r2
 80015a0:	d008      	beq.n	80015b4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d004      	beq.n	80015b4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	0010      	movs	r0, r2
 80015b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2290      	movs	r2, #144	; 0x90
 80015b8:	589b      	ldr	r3, [r3, r2]
 80015ba:	2194      	movs	r1, #148	; 0x94
 80015bc:	187a      	adds	r2, r7, r1
 80015be:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2240      	movs	r2, #64	; 0x40
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b40      	cmp	r3, #64	; 0x40
 80015cc:	d004      	beq.n	80015d8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2228      	movs	r2, #40	; 0x28
 80015d4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80015d6:	d04c      	beq.n	8001672 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	0018      	movs	r0, r3
 80015dc:	f001 f880 	bl	80026e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b40      	cmp	r3, #64	; 0x40
 80015ec:	d13c      	bne.n	8001668 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015ee:	f3ef 8310 	mrs	r3, PRIMASK
 80015f2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80015f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015f6:	2090      	movs	r0, #144	; 0x90
 80015f8:	183a      	adds	r2, r7, r0
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	2301      	movs	r3, #1
 80015fe:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001602:	f383 8810 	msr	PRIMASK, r3
}
 8001606:	46c0      	nop			; (mov r8, r8)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	438a      	bics	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	183b      	adds	r3, r7, r0
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800161e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001620:	f383 8810 	msr	PRIMASK, r3
}
 8001624:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	589b      	ldr	r3, [r3, r2]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d016      	beq.n	800165e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	589b      	ldr	r3, [r3, r2]
 8001636:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_UART_IRQHandler+0x2c8>)
 8001638:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	589b      	ldr	r3, [r3, r2]
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff fae1 	bl	8000c08 <HAL_DMA_Abort_IT>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d01c      	beq.n	8001684 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	589b      	ldr	r3, [r3, r2]
 8001650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	2180      	movs	r1, #128	; 0x80
 8001656:	5852      	ldr	r2, [r2, r1]
 8001658:	0010      	movs	r0, r2
 800165a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800165c:	e012      	b.n	8001684 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	0018      	movs	r0, r3
 8001662:	f000 f9e1 	bl	8001a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001666:	e00d      	b.n	8001684 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	0018      	movs	r0, r3
 800166c:	f000 f9dc 	bl	8001a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001670:	e008      	b.n	8001684 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	0018      	movs	r0, r3
 8001676:	f000 f9d7 	bl	8001a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2290      	movs	r2, #144	; 0x90
 800167e:	2100      	movs	r1, #0
 8001680:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001682:	e1b9      	b.n	80019f8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001684:	46c0      	nop			; (mov r8, r8)
    return;
 8001686:	e1b7      	b.n	80019f8 <HAL_UART_IRQHandler+0x62c>
 8001688:	0000080f 	.word	0x0000080f
 800168c:	10000001 	.word	0x10000001
 8001690:	04000120 	.word	0x04000120
 8001694:	080027ad 	.word	0x080027ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800169c:	2b01      	cmp	r3, #1
 800169e:	d000      	beq.n	80016a2 <HAL_UART_IRQHandler+0x2d6>
 80016a0:	e13e      	b.n	8001920 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80016a2:	23a4      	movs	r3, #164	; 0xa4
 80016a4:	18fb      	adds	r3, r7, r3
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2210      	movs	r2, #16
 80016aa:	4013      	ands	r3, r2
 80016ac:	d100      	bne.n	80016b0 <HAL_UART_IRQHandler+0x2e4>
 80016ae:	e137      	b.n	8001920 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80016b0:	23a0      	movs	r3, #160	; 0xa0
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2210      	movs	r2, #16
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_UART_IRQHandler+0x2f2>
 80016bc:	e130      	b.n	8001920 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2210      	movs	r2, #16
 80016c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b40      	cmp	r3, #64	; 0x40
 80016d2:	d000      	beq.n	80016d6 <HAL_UART_IRQHandler+0x30a>
 80016d4:	e0a4      	b.n	8001820 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	589b      	ldr	r3, [r3, r2]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	217e      	movs	r1, #126	; 0x7e
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d100      	bne.n	80016f0 <HAL_UART_IRQHandler+0x324>
 80016ee:	e185      	b.n	80019fc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	225c      	movs	r2, #92	; 0x5c
 80016f4:	5a9b      	ldrh	r3, [r3, r2]
 80016f6:	187a      	adds	r2, r7, r1
 80016f8:	8812      	ldrh	r2, [r2, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d300      	bcc.n	8001700 <HAL_UART_IRQHandler+0x334>
 80016fe:	e17d      	b.n	80019fc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	187a      	adds	r2, r7, r1
 8001704:	215e      	movs	r1, #94	; 0x5e
 8001706:	8812      	ldrh	r2, [r2, #0]
 8001708:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	589b      	ldr	r3, [r3, r2]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2220      	movs	r2, #32
 8001716:	4013      	ands	r3, r2
 8001718:	d170      	bne.n	80017fc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800171a:	f3ef 8310 	mrs	r3, PRIMASK
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8001720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001722:	67bb      	str	r3, [r7, #120]	; 0x78
 8001724:	2301      	movs	r3, #1
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	f383 8810 	msr	PRIMASK, r3
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	49b4      	ldr	r1, [pc, #720]	; (8001a0c <HAL_UART_IRQHandler+0x640>)
 800173c:	400a      	ands	r2, r1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001746:	f383 8810 	msr	PRIMASK, r3
}
 800174a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800174c:	f3ef 8310 	mrs	r3, PRIMASK
 8001750:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8001752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001754:	677b      	str	r3, [r7, #116]	; 0x74
 8001756:	2301      	movs	r3, #1
 8001758:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800175a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800175c:	f383 8810 	msr	PRIMASK, r3
}
 8001760:	46c0      	nop			; (mov r8, r8)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	438a      	bics	r2, r1
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001774:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001778:	f383 8810 	msr	PRIMASK, r3
}
 800177c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800177e:	f3ef 8310 	mrs	r3, PRIMASK
 8001782:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001784:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001786:	673b      	str	r3, [r7, #112]	; 0x70
 8001788:	2301      	movs	r3, #1
 800178a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800178c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178e:	f383 8810 	msr	PRIMASK, r3
}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	438a      	bics	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017a6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017aa:	f383 8810 	msr	PRIMASK, r3
}
 80017ae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	228c      	movs	r2, #140	; 0x8c
 80017b4:	2120      	movs	r1, #32
 80017b6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017be:	f3ef 8310 	mrs	r3, PRIMASK
 80017c2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80017c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017c8:	2301      	movs	r3, #1
 80017ca:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017ce:	f383 8810 	msr	PRIMASK, r3
}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2110      	movs	r1, #16
 80017e0:	438a      	bics	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017ea:	f383 8810 	msr	PRIMASK, r3
}
 80017ee:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	589b      	ldr	r3, [r3, r2]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff f9a6 	bl	8000b48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	225c      	movs	r2, #92	; 0x5c
 8001806:	5a9a      	ldrh	r2, [r3, r2]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	215e      	movs	r1, #94	; 0x5e
 800180c:	5a5b      	ldrh	r3, [r3, r1]
 800180e:	b29b      	uxth	r3, r3
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	b29a      	uxth	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	0011      	movs	r1, r2
 8001818:	0018      	movs	r0, r3
 800181a:	f000 f90d 	bl	8001a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800181e:	e0ed      	b.n	80019fc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	225c      	movs	r2, #92	; 0x5c
 8001824:	5a99      	ldrh	r1, [r3, r2]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	225e      	movs	r2, #94	; 0x5e
 800182a:	5a9b      	ldrh	r3, [r3, r2]
 800182c:	b29a      	uxth	r2, r3
 800182e:	208e      	movs	r0, #142	; 0x8e
 8001830:	183b      	adds	r3, r7, r0
 8001832:	1a8a      	subs	r2, r1, r2
 8001834:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	225e      	movs	r2, #94	; 0x5e
 800183a:	5a9b      	ldrh	r3, [r3, r2]
 800183c:	b29b      	uxth	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d100      	bne.n	8001844 <HAL_UART_IRQHandler+0x478>
 8001842:	e0dd      	b.n	8001a00 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8001844:	183b      	adds	r3, r7, r0
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d100      	bne.n	800184e <HAL_UART_IRQHandler+0x482>
 800184c:	e0d8      	b.n	8001a00 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800184e:	f3ef 8310 	mrs	r3, PRIMASK
 8001852:	60fb      	str	r3, [r7, #12]
  return(result);
 8001854:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001856:	2488      	movs	r4, #136	; 0x88
 8001858:	193a      	adds	r2, r7, r4
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	2301      	movs	r3, #1
 800185e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f383 8810 	msr	PRIMASK, r3
}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4967      	ldr	r1, [pc, #412]	; (8001a10 <HAL_UART_IRQHandler+0x644>)
 8001874:	400a      	ands	r2, r1
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	193b      	adds	r3, r7, r4
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f383 8810 	msr	PRIMASK, r3
}
 8001884:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001886:	f3ef 8310 	mrs	r3, PRIMASK
 800188a:	61bb      	str	r3, [r7, #24]
  return(result);
 800188c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800188e:	2484      	movs	r4, #132	; 0x84
 8001890:	193a      	adds	r2, r7, r4
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f383 8810 	msr	PRIMASK, r3
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	495a      	ldr	r1, [pc, #360]	; (8001a14 <HAL_UART_IRQHandler+0x648>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	193b      	adds	r3, r7, r4
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	f383 8810 	msr	PRIMASK, r3
}
 80018bc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	228c      	movs	r2, #140	; 0x8c
 80018c2:	2120      	movs	r1, #32
 80018c4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018d2:	f3ef 8310 	mrs	r3, PRIMASK
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018da:	2480      	movs	r4, #128	; 0x80
 80018dc:	193a      	adds	r2, r7, r4
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e6:	f383 8810 	msr	PRIMASK, r3
}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2110      	movs	r1, #16
 80018f8:	438a      	bics	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	193b      	adds	r3, r7, r4
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	f383 8810 	msr	PRIMASK, r3
}
 8001908:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001910:	183b      	adds	r3, r7, r0
 8001912:	881a      	ldrh	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	0011      	movs	r1, r2
 8001918:	0018      	movs	r0, r3
 800191a:	f000 f88d 	bl	8001a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800191e:	e06f      	b.n	8001a00 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001920:	23a4      	movs	r3, #164	; 0xa4
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	035b      	lsls	r3, r3, #13
 800192a:	4013      	ands	r3, r2
 800192c:	d010      	beq.n	8001950 <HAL_UART_IRQHandler+0x584>
 800192e:	239c      	movs	r3, #156	; 0x9c
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	03db      	lsls	r3, r3, #15
 8001938:	4013      	ands	r3, r2
 800193a:	d009      	beq.n	8001950 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	0352      	lsls	r2, r2, #13
 8001944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0018      	movs	r0, r3
 800194a:	f001 fc9f 	bl	800328c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800194e:	e05a      	b.n	8001a06 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8001950:	23a4      	movs	r3, #164	; 0xa4
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	4013      	ands	r3, r2
 800195a:	d016      	beq.n	800198a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800195c:	23a0      	movs	r3, #160	; 0xa0
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2280      	movs	r2, #128	; 0x80
 8001964:	4013      	ands	r3, r2
 8001966:	d106      	bne.n	8001976 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8001968:	239c      	movs	r3, #156	; 0x9c
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	4013      	ands	r3, r2
 8001974:	d009      	beq.n	800198a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800197a:	2b00      	cmp	r3, #0
 800197c:	d042      	beq.n	8001a04 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	0010      	movs	r0, r2
 8001986:	4798      	blx	r3
    }
    return;
 8001988:	e03c      	b.n	8001a04 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800198a:	23a4      	movs	r3, #164	; 0xa4
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2240      	movs	r2, #64	; 0x40
 8001992:	4013      	ands	r3, r2
 8001994:	d00a      	beq.n	80019ac <HAL_UART_IRQHandler+0x5e0>
 8001996:	23a0      	movs	r3, #160	; 0xa0
 8001998:	18fb      	adds	r3, r7, r3
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2240      	movs	r2, #64	; 0x40
 800199e:	4013      	ands	r3, r2
 80019a0:	d004      	beq.n	80019ac <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f000 ff18 	bl	80027da <UART_EndTransmit_IT>
    return;
 80019aa:	e02c      	b.n	8001a06 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80019ac:	23a4      	movs	r3, #164	; 0xa4
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	4013      	ands	r3, r2
 80019b8:	d00b      	beq.n	80019d2 <HAL_UART_IRQHandler+0x606>
 80019ba:	23a0      	movs	r3, #160	; 0xa0
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	05db      	lsls	r3, r3, #23
 80019c4:	4013      	ands	r3, r2
 80019c6:	d004      	beq.n	80019d2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f001 fc6e 	bl	80032ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80019d0:	e019      	b.n	8001a06 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80019d2:	23a4      	movs	r3, #164	; 0xa4
 80019d4:	18fb      	adds	r3, r7, r3
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	045b      	lsls	r3, r3, #17
 80019dc:	4013      	ands	r3, r2
 80019de:	d012      	beq.n	8001a06 <HAL_UART_IRQHandler+0x63a>
 80019e0:	23a0      	movs	r3, #160	; 0xa0
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da0d      	bge.n	8001a06 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f001 fc55 	bl	800329c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80019f2:	e008      	b.n	8001a06 <HAL_UART_IRQHandler+0x63a>
      return;
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	e006      	b.n	8001a06 <HAL_UART_IRQHandler+0x63a>
    return;
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	e004      	b.n	8001a06 <HAL_UART_IRQHandler+0x63a>
      return;
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	e002      	b.n	8001a06 <HAL_UART_IRQHandler+0x63a>
      return;
 8001a00:	46c0      	nop			; (mov r8, r8)
 8001a02:	e000      	b.n	8001a06 <HAL_UART_IRQHandler+0x63a>
    return;
 8001a04:	46c0      	nop			; (mov r8, r8)
  }
}
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b02a      	add	sp, #168	; 0xa8
 8001a0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0c:	fffffeff 	.word	0xfffffeff
 8001a10:	fffffedf 	.word	0xfffffedf
 8001a14:	effffffe 	.word	0xeffffffe

08001a18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b002      	add	sp, #8
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	000a      	movs	r2, r1
 8001a42:	1cbb      	adds	r3, r7, #2
 8001a44:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b002      	add	sp, #8
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	b090      	sub	sp, #64	; 0x40
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a58:	231a      	movs	r3, #26
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	189b      	adds	r3, r3, r2
 8001a5e:	19db      	adds	r3, r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4ac1      	ldr	r2, [pc, #772]	; (8001d88 <UART_SetConfig+0x338>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4abc      	ldr	r2, [pc, #752]	; (8001d8c <UART_SetConfig+0x33c>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	68d9      	ldr	r1, [r3, #12]
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	0003      	movs	r3, r0
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4ab6      	ldr	r2, [pc, #728]	; (8001d90 <UART_SetConfig+0x340>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d009      	beq.n	8001ad0 <UART_SetConfig+0x80>
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4ab4      	ldr	r2, [pc, #720]	; (8001d94 <UART_SetConfig+0x344>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d004      	beq.n	8001ad0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001acc:	4313      	orrs	r3, r2
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4ab0      	ldr	r2, [pc, #704]	; (8001d98 <UART_SetConfig+0x348>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	220f      	movs	r2, #15
 8001aee:	4393      	bics	r3, r2
 8001af0:	0018      	movs	r0, r3
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	0003      	movs	r3, r0
 8001afc:	430b      	orrs	r3, r1
 8001afe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4aa5      	ldr	r2, [pc, #660]	; (8001d9c <UART_SetConfig+0x34c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d131      	bne.n	8001b6e <UART_SetConfig+0x11e>
 8001b0a:	4ba5      	ldr	r3, [pc, #660]	; (8001da0 <UART_SetConfig+0x350>)
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	2203      	movs	r2, #3
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d01d      	beq.n	8001b52 <UART_SetConfig+0x102>
 8001b16:	d823      	bhi.n	8001b60 <UART_SetConfig+0x110>
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d00c      	beq.n	8001b36 <UART_SetConfig+0xe6>
 8001b1c:	d820      	bhi.n	8001b60 <UART_SetConfig+0x110>
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <UART_SetConfig+0xd8>
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d00e      	beq.n	8001b44 <UART_SetConfig+0xf4>
 8001b26:	e01b      	b.n	8001b60 <UART_SetConfig+0x110>
 8001b28:	231b      	movs	r3, #27
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	189b      	adds	r3, r3, r2
 8001b2e:	19db      	adds	r3, r3, r7
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e154      	b.n	8001de0 <UART_SetConfig+0x390>
 8001b36:	231b      	movs	r3, #27
 8001b38:	2220      	movs	r2, #32
 8001b3a:	189b      	adds	r3, r3, r2
 8001b3c:	19db      	adds	r3, r3, r7
 8001b3e:	2202      	movs	r2, #2
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	e14d      	b.n	8001de0 <UART_SetConfig+0x390>
 8001b44:	231b      	movs	r3, #27
 8001b46:	2220      	movs	r2, #32
 8001b48:	189b      	adds	r3, r3, r2
 8001b4a:	19db      	adds	r3, r3, r7
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	e146      	b.n	8001de0 <UART_SetConfig+0x390>
 8001b52:	231b      	movs	r3, #27
 8001b54:	2220      	movs	r2, #32
 8001b56:	189b      	adds	r3, r3, r2
 8001b58:	19db      	adds	r3, r3, r7
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	e13f      	b.n	8001de0 <UART_SetConfig+0x390>
 8001b60:	231b      	movs	r3, #27
 8001b62:	2220      	movs	r2, #32
 8001b64:	189b      	adds	r3, r3, r2
 8001b66:	19db      	adds	r3, r3, r7
 8001b68:	2210      	movs	r2, #16
 8001b6a:	701a      	strb	r2, [r3, #0]
 8001b6c:	e138      	b.n	8001de0 <UART_SetConfig+0x390>
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a8c      	ldr	r2, [pc, #560]	; (8001da4 <UART_SetConfig+0x354>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d131      	bne.n	8001bdc <UART_SetConfig+0x18c>
 8001b78:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <UART_SetConfig+0x350>)
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	220c      	movs	r2, #12
 8001b7e:	4013      	ands	r3, r2
 8001b80:	2b0c      	cmp	r3, #12
 8001b82:	d01d      	beq.n	8001bc0 <UART_SetConfig+0x170>
 8001b84:	d823      	bhi.n	8001bce <UART_SetConfig+0x17e>
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d00c      	beq.n	8001ba4 <UART_SetConfig+0x154>
 8001b8a:	d820      	bhi.n	8001bce <UART_SetConfig+0x17e>
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <UART_SetConfig+0x146>
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d00e      	beq.n	8001bb2 <UART_SetConfig+0x162>
 8001b94:	e01b      	b.n	8001bce <UART_SetConfig+0x17e>
 8001b96:	231b      	movs	r3, #27
 8001b98:	2220      	movs	r2, #32
 8001b9a:	189b      	adds	r3, r3, r2
 8001b9c:	19db      	adds	r3, r3, r7
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	e11d      	b.n	8001de0 <UART_SetConfig+0x390>
 8001ba4:	231b      	movs	r3, #27
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	189b      	adds	r3, r3, r2
 8001baa:	19db      	adds	r3, r3, r7
 8001bac:	2202      	movs	r2, #2
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	e116      	b.n	8001de0 <UART_SetConfig+0x390>
 8001bb2:	231b      	movs	r3, #27
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	189b      	adds	r3, r3, r2
 8001bb8:	19db      	adds	r3, r3, r7
 8001bba:	2204      	movs	r2, #4
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e10f      	b.n	8001de0 <UART_SetConfig+0x390>
 8001bc0:	231b      	movs	r3, #27
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	189b      	adds	r3, r3, r2
 8001bc6:	19db      	adds	r3, r3, r7
 8001bc8:	2208      	movs	r2, #8
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e108      	b.n	8001de0 <UART_SetConfig+0x390>
 8001bce:	231b      	movs	r3, #27
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	189b      	adds	r3, r3, r2
 8001bd4:	19db      	adds	r3, r3, r7
 8001bd6:	2210      	movs	r2, #16
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e101      	b.n	8001de0 <UART_SetConfig+0x390>
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <UART_SetConfig+0x358>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d131      	bne.n	8001c4a <UART_SetConfig+0x1fa>
 8001be6:	4b6e      	ldr	r3, [pc, #440]	; (8001da0 <UART_SetConfig+0x350>)
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	2230      	movs	r2, #48	; 0x30
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b30      	cmp	r3, #48	; 0x30
 8001bf0:	d01d      	beq.n	8001c2e <UART_SetConfig+0x1de>
 8001bf2:	d823      	bhi.n	8001c3c <UART_SetConfig+0x1ec>
 8001bf4:	2b20      	cmp	r3, #32
 8001bf6:	d00c      	beq.n	8001c12 <UART_SetConfig+0x1c2>
 8001bf8:	d820      	bhi.n	8001c3c <UART_SetConfig+0x1ec>
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d002      	beq.n	8001c04 <UART_SetConfig+0x1b4>
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d00e      	beq.n	8001c20 <UART_SetConfig+0x1d0>
 8001c02:	e01b      	b.n	8001c3c <UART_SetConfig+0x1ec>
 8001c04:	231b      	movs	r3, #27
 8001c06:	2220      	movs	r2, #32
 8001c08:	189b      	adds	r3, r3, r2
 8001c0a:	19db      	adds	r3, r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	e0e6      	b.n	8001de0 <UART_SetConfig+0x390>
 8001c12:	231b      	movs	r3, #27
 8001c14:	2220      	movs	r2, #32
 8001c16:	189b      	adds	r3, r3, r2
 8001c18:	19db      	adds	r3, r3, r7
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	e0df      	b.n	8001de0 <UART_SetConfig+0x390>
 8001c20:	231b      	movs	r3, #27
 8001c22:	2220      	movs	r2, #32
 8001c24:	189b      	adds	r3, r3, r2
 8001c26:	19db      	adds	r3, r3, r7
 8001c28:	2204      	movs	r2, #4
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	e0d8      	b.n	8001de0 <UART_SetConfig+0x390>
 8001c2e:	231b      	movs	r3, #27
 8001c30:	2220      	movs	r2, #32
 8001c32:	189b      	adds	r3, r3, r2
 8001c34:	19db      	adds	r3, r3, r7
 8001c36:	2208      	movs	r2, #8
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	e0d1      	b.n	8001de0 <UART_SetConfig+0x390>
 8001c3c:	231b      	movs	r3, #27
 8001c3e:	2220      	movs	r2, #32
 8001c40:	189b      	adds	r3, r3, r2
 8001c42:	19db      	adds	r3, r3, r7
 8001c44:	2210      	movs	r2, #16
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e0ca      	b.n	8001de0 <UART_SetConfig+0x390>
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a57      	ldr	r2, [pc, #348]	; (8001dac <UART_SetConfig+0x35c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d106      	bne.n	8001c62 <UART_SetConfig+0x212>
 8001c54:	231b      	movs	r3, #27
 8001c56:	2220      	movs	r2, #32
 8001c58:	189b      	adds	r3, r3, r2
 8001c5a:	19db      	adds	r3, r3, r7
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	e0be      	b.n	8001de0 <UART_SetConfig+0x390>
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a52      	ldr	r2, [pc, #328]	; (8001db0 <UART_SetConfig+0x360>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d106      	bne.n	8001c7a <UART_SetConfig+0x22a>
 8001c6c:	231b      	movs	r3, #27
 8001c6e:	2220      	movs	r2, #32
 8001c70:	189b      	adds	r3, r3, r2
 8001c72:	19db      	adds	r3, r3, r7
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	e0b2      	b.n	8001de0 <UART_SetConfig+0x390>
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <UART_SetConfig+0x364>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d106      	bne.n	8001c92 <UART_SetConfig+0x242>
 8001c84:	231b      	movs	r3, #27
 8001c86:	2220      	movs	r2, #32
 8001c88:	189b      	adds	r3, r3, r2
 8001c8a:	19db      	adds	r3, r3, r7
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	e0a6      	b.n	8001de0 <UART_SetConfig+0x390>
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a3e      	ldr	r2, [pc, #248]	; (8001d90 <UART_SetConfig+0x340>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d13e      	bne.n	8001d1a <UART_SetConfig+0x2ca>
 8001c9c:	4b40      	ldr	r3, [pc, #256]	; (8001da0 <UART_SetConfig+0x350>)
 8001c9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001ca0:	23c0      	movs	r3, #192	; 0xc0
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	22c0      	movs	r2, #192	; 0xc0
 8001ca8:	0112      	lsls	r2, r2, #4
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d027      	beq.n	8001cfe <UART_SetConfig+0x2ae>
 8001cae:	22c0      	movs	r2, #192	; 0xc0
 8001cb0:	0112      	lsls	r2, r2, #4
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d82a      	bhi.n	8001d0c <UART_SetConfig+0x2bc>
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d011      	beq.n	8001ce2 <UART_SetConfig+0x292>
 8001cbe:	2280      	movs	r2, #128	; 0x80
 8001cc0:	0112      	lsls	r2, r2, #4
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d822      	bhi.n	8001d0c <UART_SetConfig+0x2bc>
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <UART_SetConfig+0x284>
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	00d2      	lsls	r2, r2, #3
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00e      	beq.n	8001cf0 <UART_SetConfig+0x2a0>
 8001cd2:	e01b      	b.n	8001d0c <UART_SetConfig+0x2bc>
 8001cd4:	231b      	movs	r3, #27
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	189b      	adds	r3, r3, r2
 8001cda:	19db      	adds	r3, r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e07e      	b.n	8001de0 <UART_SetConfig+0x390>
 8001ce2:	231b      	movs	r3, #27
 8001ce4:	2220      	movs	r2, #32
 8001ce6:	189b      	adds	r3, r3, r2
 8001ce8:	19db      	adds	r3, r3, r7
 8001cea:	2202      	movs	r2, #2
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e077      	b.n	8001de0 <UART_SetConfig+0x390>
 8001cf0:	231b      	movs	r3, #27
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	189b      	adds	r3, r3, r2
 8001cf6:	19db      	adds	r3, r3, r7
 8001cf8:	2204      	movs	r2, #4
 8001cfa:	701a      	strb	r2, [r3, #0]
 8001cfc:	e070      	b.n	8001de0 <UART_SetConfig+0x390>
 8001cfe:	231b      	movs	r3, #27
 8001d00:	2220      	movs	r2, #32
 8001d02:	189b      	adds	r3, r3, r2
 8001d04:	19db      	adds	r3, r3, r7
 8001d06:	2208      	movs	r2, #8
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e069      	b.n	8001de0 <UART_SetConfig+0x390>
 8001d0c:	231b      	movs	r3, #27
 8001d0e:	2220      	movs	r2, #32
 8001d10:	189b      	adds	r3, r3, r2
 8001d12:	19db      	adds	r3, r3, r7
 8001d14:	2210      	movs	r2, #16
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	e062      	b.n	8001de0 <UART_SetConfig+0x390>
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <UART_SetConfig+0x344>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d157      	bne.n	8001dd4 <UART_SetConfig+0x384>
 8001d24:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <UART_SetConfig+0x350>)
 8001d26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d28:	23c0      	movs	r3, #192	; 0xc0
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	22c0      	movs	r2, #192	; 0xc0
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d040      	beq.n	8001db8 <UART_SetConfig+0x368>
 8001d36:	22c0      	movs	r2, #192	; 0xc0
 8001d38:	0092      	lsls	r2, r2, #2
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d843      	bhi.n	8001dc6 <UART_SetConfig+0x376>
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d011      	beq.n	8001d6a <UART_SetConfig+0x31a>
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d83b      	bhi.n	8001dc6 <UART_SetConfig+0x376>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <UART_SetConfig+0x30c>
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	0052      	lsls	r2, r2, #1
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00e      	beq.n	8001d78 <UART_SetConfig+0x328>
 8001d5a:	e034      	b.n	8001dc6 <UART_SetConfig+0x376>
 8001d5c:	231b      	movs	r3, #27
 8001d5e:	2220      	movs	r2, #32
 8001d60:	189b      	adds	r3, r3, r2
 8001d62:	19db      	adds	r3, r3, r7
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	e03a      	b.n	8001de0 <UART_SetConfig+0x390>
 8001d6a:	231b      	movs	r3, #27
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	189b      	adds	r3, r3, r2
 8001d70:	19db      	adds	r3, r3, r7
 8001d72:	2202      	movs	r2, #2
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	e033      	b.n	8001de0 <UART_SetConfig+0x390>
 8001d78:	231b      	movs	r3, #27
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	189b      	adds	r3, r3, r2
 8001d7e:	19db      	adds	r3, r3, r7
 8001d80:	2204      	movs	r2, #4
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e02c      	b.n	8001de0 <UART_SetConfig+0x390>
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	cfff69f3 	.word	0xcfff69f3
 8001d8c:	ffffcfff 	.word	0xffffcfff
 8001d90:	40008000 	.word	0x40008000
 8001d94:	40008400 	.word	0x40008400
 8001d98:	11fff4ff 	.word	0x11fff4ff
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40021000 	.word	0x40021000
 8001da4:	40004400 	.word	0x40004400
 8001da8:	40004800 	.word	0x40004800
 8001dac:	40004c00 	.word	0x40004c00
 8001db0:	40005000 	.word	0x40005000
 8001db4:	40013c00 	.word	0x40013c00
 8001db8:	231b      	movs	r3, #27
 8001dba:	2220      	movs	r2, #32
 8001dbc:	189b      	adds	r3, r3, r2
 8001dbe:	19db      	adds	r3, r3, r7
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e00c      	b.n	8001de0 <UART_SetConfig+0x390>
 8001dc6:	231b      	movs	r3, #27
 8001dc8:	2220      	movs	r2, #32
 8001dca:	189b      	adds	r3, r3, r2
 8001dcc:	19db      	adds	r3, r3, r7
 8001dce:	2210      	movs	r2, #16
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e005      	b.n	8001de0 <UART_SetConfig+0x390>
 8001dd4:	231b      	movs	r3, #27
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	189b      	adds	r3, r3, r2
 8001dda:	19db      	adds	r3, r3, r7
 8001ddc:	2210      	movs	r2, #16
 8001dde:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4ac1      	ldr	r2, [pc, #772]	; (80020ec <UART_SetConfig+0x69c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d005      	beq.n	8001df6 <UART_SetConfig+0x3a6>
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4ac0      	ldr	r2, [pc, #768]	; (80020f0 <UART_SetConfig+0x6a0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d000      	beq.n	8001df6 <UART_SetConfig+0x3a6>
 8001df4:	e093      	b.n	8001f1e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001df6:	231b      	movs	r3, #27
 8001df8:	2220      	movs	r2, #32
 8001dfa:	189b      	adds	r3, r3, r2
 8001dfc:	19db      	adds	r3, r3, r7
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d015      	beq.n	8001e30 <UART_SetConfig+0x3e0>
 8001e04:	dc18      	bgt.n	8001e38 <UART_SetConfig+0x3e8>
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d00d      	beq.n	8001e26 <UART_SetConfig+0x3d6>
 8001e0a:	dc15      	bgt.n	8001e38 <UART_SetConfig+0x3e8>
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <UART_SetConfig+0x3c6>
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d005      	beq.n	8001e20 <UART_SetConfig+0x3d0>
 8001e14:	e010      	b.n	8001e38 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e16:	f7ff f963 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e1e:	e014      	b.n	8001e4a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e20:	4bb4      	ldr	r3, [pc, #720]	; (80020f4 <UART_SetConfig+0x6a4>)
 8001e22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e24:	e011      	b.n	8001e4a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e26:	f7ff f8cf 	bl	8000fc8 <HAL_RCC_GetSysClockFreq>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e2e:	e00c      	b.n	8001e4a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e30:	2380      	movs	r3, #128	; 0x80
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001e36:	e008      	b.n	8001e4a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001e3c:	231a      	movs	r3, #26
 8001e3e:	2220      	movs	r2, #32
 8001e40:	189b      	adds	r3, r3, r2
 8001e42:	19db      	adds	r3, r3, r7
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
        break;
 8001e48:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d100      	bne.n	8001e52 <UART_SetConfig+0x402>
 8001e50:	e135      	b.n	80020be <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e56:	4ba8      	ldr	r3, [pc, #672]	; (80020f8 <UART_SetConfig+0x6a8>)
 8001e58:	0052      	lsls	r2, r2, #1
 8001e5a:	5ad3      	ldrh	r3, [r2, r3]
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e60:	f7fe f962 	bl	8000128 <__udivsi3>
 8001e64:	0003      	movs	r3, r0
 8001e66:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	189b      	adds	r3, r3, r2
 8001e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d305      	bcc.n	8001e84 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d906      	bls.n	8001e92 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8001e84:	231a      	movs	r3, #26
 8001e86:	2220      	movs	r2, #32
 8001e88:	189b      	adds	r3, r3, r2
 8001e8a:	19db      	adds	r3, r3, r7
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	e044      	b.n	8001f1c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e94:	61bb      	str	r3, [r7, #24]
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9e:	4b96      	ldr	r3, [pc, #600]	; (80020f8 <UART_SetConfig+0x6a8>)
 8001ea0:	0052      	lsls	r2, r2, #1
 8001ea2:	5ad3      	ldrh	r3, [r2, r3]
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	69b8      	ldr	r0, [r7, #24]
 8001eb0:	69f9      	ldr	r1, [r7, #28]
 8001eb2:	f7fe f9c5 	bl	8000240 <__aeabi_uldivmod>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	000b      	movs	r3, r1
 8001eba:	0e11      	lsrs	r1, r2, #24
 8001ebc:	021d      	lsls	r5, r3, #8
 8001ebe:	430d      	orrs	r5, r1
 8001ec0:	0214      	lsls	r4, r2, #8
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68b8      	ldr	r0, [r7, #8]
 8001ed0:	68f9      	ldr	r1, [r7, #12]
 8001ed2:	1900      	adds	r0, r0, r4
 8001ed4:	4169      	adcs	r1, r5
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f7fe f9ac 	bl	8000240 <__aeabi_uldivmod>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	000b      	movs	r3, r1
 8001eec:	0013      	movs	r3, r2
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d309      	bcc.n	8001f0e <UART_SetConfig+0x4be>
 8001efa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	035b      	lsls	r3, r3, #13
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d204      	bcs.n	8001f0e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	e006      	b.n	8001f1c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8001f0e:	231a      	movs	r3, #26
 8001f10:	2220      	movs	r2, #32
 8001f12:	189b      	adds	r3, r3, r2
 8001f14:	19db      	adds	r3, r3, r7
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8001f1a:	e0d0      	b.n	80020be <UART_SetConfig+0x66e>
 8001f1c:	e0cf      	b.n	80020be <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d000      	beq.n	8001f2c <UART_SetConfig+0x4dc>
 8001f2a:	e070      	b.n	800200e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8001f2c:	231b      	movs	r3, #27
 8001f2e:	2220      	movs	r2, #32
 8001f30:	189b      	adds	r3, r3, r2
 8001f32:	19db      	adds	r3, r3, r7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b08      	cmp	r3, #8
 8001f38:	d015      	beq.n	8001f66 <UART_SetConfig+0x516>
 8001f3a:	dc18      	bgt.n	8001f6e <UART_SetConfig+0x51e>
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d00d      	beq.n	8001f5c <UART_SetConfig+0x50c>
 8001f40:	dc15      	bgt.n	8001f6e <UART_SetConfig+0x51e>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <UART_SetConfig+0x4fc>
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d005      	beq.n	8001f56 <UART_SetConfig+0x506>
 8001f4a:	e010      	b.n	8001f6e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f4c:	f7ff f8c8 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8001f50:	0003      	movs	r3, r0
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f54:	e014      	b.n	8001f80 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f56:	4b67      	ldr	r3, [pc, #412]	; (80020f4 <UART_SetConfig+0x6a4>)
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f5a:	e011      	b.n	8001f80 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f5c:	f7ff f834 	bl	8000fc8 <HAL_RCC_GetSysClockFreq>
 8001f60:	0003      	movs	r3, r0
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f64:	e00c      	b.n	8001f80 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001f6c:	e008      	b.n	8001f80 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001f72:	231a      	movs	r3, #26
 8001f74:	2220      	movs	r2, #32
 8001f76:	189b      	adds	r3, r3, r2
 8001f78:	19db      	adds	r3, r3, r7
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
        break;
 8001f7e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d100      	bne.n	8001f88 <UART_SetConfig+0x538>
 8001f86:	e09a      	b.n	80020be <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <UART_SetConfig+0x6a8>)
 8001f8e:	0052      	lsls	r2, r2, #1
 8001f90:	5ad3      	ldrh	r3, [r2, r3]
 8001f92:	0019      	movs	r1, r3
 8001f94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f96:	f7fe f8c7 	bl	8000128 <__udivsi3>
 8001f9a:	0003      	movs	r3, r0
 8001f9c:	005a      	lsls	r2, r3, #1
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	18d2      	adds	r2, r2, r3
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	0019      	movs	r1, r3
 8001fac:	0010      	movs	r0, r2
 8001fae:	f7fe f8bb 	bl	8000128 <__udivsi3>
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb8:	2b0f      	cmp	r3, #15
 8001fba:	d921      	bls.n	8002000 <UART_SetConfig+0x5b0>
 8001fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	025b      	lsls	r3, r3, #9
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d21c      	bcs.n	8002000 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	200e      	movs	r0, #14
 8001fcc:	2420      	movs	r4, #32
 8001fce:	1903      	adds	r3, r0, r4
 8001fd0:	19db      	adds	r3, r3, r7
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	438a      	bics	r2, r1
 8001fd6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fda:	085b      	lsrs	r3, r3, #1
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	2207      	movs	r2, #7
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	1903      	adds	r3, r0, r4
 8001fe6:	19db      	adds	r3, r3, r7
 8001fe8:	1902      	adds	r2, r0, r4
 8001fea:	19d2      	adds	r2, r2, r7
 8001fec:	8812      	ldrh	r2, [r2, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	1902      	adds	r2, r0, r4
 8001ff8:	19d2      	adds	r2, r2, r7
 8001ffa:	8812      	ldrh	r2, [r2, #0]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	e05e      	b.n	80020be <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8002000:	231a      	movs	r3, #26
 8002002:	2220      	movs	r2, #32
 8002004:	189b      	adds	r3, r3, r2
 8002006:	19db      	adds	r3, r3, r7
 8002008:	2201      	movs	r2, #1
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e057      	b.n	80020be <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800200e:	231b      	movs	r3, #27
 8002010:	2220      	movs	r2, #32
 8002012:	189b      	adds	r3, r3, r2
 8002014:	19db      	adds	r3, r3, r7
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d015      	beq.n	8002048 <UART_SetConfig+0x5f8>
 800201c:	dc18      	bgt.n	8002050 <UART_SetConfig+0x600>
 800201e:	2b04      	cmp	r3, #4
 8002020:	d00d      	beq.n	800203e <UART_SetConfig+0x5ee>
 8002022:	dc15      	bgt.n	8002050 <UART_SetConfig+0x600>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <UART_SetConfig+0x5de>
 8002028:	2b02      	cmp	r3, #2
 800202a:	d005      	beq.n	8002038 <UART_SetConfig+0x5e8>
 800202c:	e010      	b.n	8002050 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800202e:	f7ff f857 	bl	80010e0 <HAL_RCC_GetPCLK1Freq>
 8002032:	0003      	movs	r3, r0
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002036:	e014      	b.n	8002062 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <UART_SetConfig+0x6a4>)
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800203c:	e011      	b.n	8002062 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800203e:	f7fe ffc3 	bl	8000fc8 <HAL_RCC_GetSysClockFreq>
 8002042:	0003      	movs	r3, r0
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002046:	e00c      	b.n	8002062 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800204e:	e008      	b.n	8002062 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002054:	231a      	movs	r3, #26
 8002056:	2220      	movs	r2, #32
 8002058:	189b      	adds	r3, r3, r2
 800205a:	19db      	adds	r3, r3, r7
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
        break;
 8002060:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002064:	2b00      	cmp	r3, #0
 8002066:	d02a      	beq.n	80020be <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800206c:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <UART_SetConfig+0x6a8>)
 800206e:	0052      	lsls	r2, r2, #1
 8002070:	5ad3      	ldrh	r3, [r2, r3]
 8002072:	0019      	movs	r1, r3
 8002074:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002076:	f7fe f857 	bl	8000128 <__udivsi3>
 800207a:	0003      	movs	r3, r0
 800207c:	001a      	movs	r2, r3
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	18d2      	adds	r2, r2, r3
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0019      	movs	r1, r3
 800208c:	0010      	movs	r0, r2
 800208e:	f7fe f84b 	bl	8000128 <__udivsi3>
 8002092:	0003      	movs	r3, r0
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002098:	2b0f      	cmp	r3, #15
 800209a:	d90a      	bls.n	80020b2 <UART_SetConfig+0x662>
 800209c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	025b      	lsls	r3, r3, #9
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d205      	bcs.n	80020b2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60da      	str	r2, [r3, #12]
 80020b0:	e005      	b.n	80020be <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80020b2:	231a      	movs	r3, #26
 80020b4:	2220      	movs	r2, #32
 80020b6:	189b      	adds	r3, r3, r2
 80020b8:	19db      	adds	r3, r3, r7
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	226a      	movs	r2, #106	; 0x6a
 80020c2:	2101      	movs	r1, #1
 80020c4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	2268      	movs	r2, #104	; 0x68
 80020ca:	2101      	movs	r1, #1
 80020cc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	2200      	movs	r2, #0
 80020d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	2200      	movs	r2, #0
 80020d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80020da:	231a      	movs	r3, #26
 80020dc:	2220      	movs	r2, #32
 80020de:	189b      	adds	r3, r3, r2
 80020e0:	19db      	adds	r3, r3, r7
 80020e2:	781b      	ldrb	r3, [r3, #0]
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b010      	add	sp, #64	; 0x40
 80020ea:	bdb0      	pop	{r4, r5, r7, pc}
 80020ec:	40008000 	.word	0x40008000
 80020f0:	40008400 	.word	0x40008400
 80020f4:	00f42400 	.word	0x00f42400
 80020f8:	08003fdc 	.word	0x08003fdc

080020fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002108:	2208      	movs	r2, #8
 800210a:	4013      	ands	r3, r2
 800210c:	d00b      	beq.n	8002126 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a4a      	ldr	r2, [pc, #296]	; (8002240 <UART_AdvFeatureConfig+0x144>)
 8002116:	4013      	ands	r3, r2
 8002118:	0019      	movs	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	2201      	movs	r2, #1
 800212c:	4013      	ands	r3, r2
 800212e:	d00b      	beq.n	8002148 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4a43      	ldr	r2, [pc, #268]	; (8002244 <UART_AdvFeatureConfig+0x148>)
 8002138:	4013      	ands	r3, r2
 800213a:	0019      	movs	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	2202      	movs	r2, #2
 800214e:	4013      	ands	r3, r2
 8002150:	d00b      	beq.n	800216a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <UART_AdvFeatureConfig+0x14c>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	2204      	movs	r2, #4
 8002170:	4013      	ands	r3, r2
 8002172:	d00b      	beq.n	800218c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a34      	ldr	r2, [pc, #208]	; (800224c <UART_AdvFeatureConfig+0x150>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	2210      	movs	r2, #16
 8002192:	4013      	ands	r3, r2
 8002194:	d00b      	beq.n	80021ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a2c      	ldr	r2, [pc, #176]	; (8002250 <UART_AdvFeatureConfig+0x154>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	2220      	movs	r2, #32
 80021b4:	4013      	ands	r3, r2
 80021b6:	d00b      	beq.n	80021d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	4a25      	ldr	r2, [pc, #148]	; (8002254 <UART_AdvFeatureConfig+0x158>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	0019      	movs	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	2240      	movs	r2, #64	; 0x40
 80021d6:	4013      	ands	r3, r2
 80021d8:	d01d      	beq.n	8002216 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <UART_AdvFeatureConfig+0x15c>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	035b      	lsls	r3, r3, #13
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d10b      	bne.n	8002216 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a15      	ldr	r2, [pc, #84]	; (800225c <UART_AdvFeatureConfig+0x160>)
 8002206:	4013      	ands	r3, r2
 8002208:	0019      	movs	r1, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	4013      	ands	r3, r2
 800221e:	d00b      	beq.n	8002238 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <UART_AdvFeatureConfig+0x164>)
 8002228:	4013      	ands	r3, r2
 800222a:	0019      	movs	r1, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
  }
}
 8002238:	46c0      	nop			; (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}
 8002240:	ffff7fff 	.word	0xffff7fff
 8002244:	fffdffff 	.word	0xfffdffff
 8002248:	fffeffff 	.word	0xfffeffff
 800224c:	fffbffff 	.word	0xfffbffff
 8002250:	ffffefff 	.word	0xffffefff
 8002254:	ffffdfff 	.word	0xffffdfff
 8002258:	ffefffff 	.word	0xffefffff
 800225c:	ff9fffff 	.word	0xff9fffff
 8002260:	fff7ffff 	.word	0xfff7ffff

08002264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b092      	sub	sp, #72	; 0x48
 8002268:	af02      	add	r7, sp, #8
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2290      	movs	r2, #144	; 0x90
 8002270:	2100      	movs	r1, #0
 8002272:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002274:	f7fe fb74 	bl	8000960 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2208      	movs	r2, #8
 8002284:	4013      	ands	r3, r2
 8002286:	2b08      	cmp	r3, #8
 8002288:	d12d      	bne.n	80022e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800228a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	0391      	lsls	r1, r2, #14
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4a47      	ldr	r2, [pc, #284]	; (80023b0 <UART_CheckIdleState+0x14c>)
 8002294:	9200      	str	r2, [sp, #0]
 8002296:	2200      	movs	r2, #0
 8002298:	f000 f88e 	bl	80023b8 <UART_WaitOnFlagUntilTimeout>
 800229c:	1e03      	subs	r3, r0, #0
 800229e:	d022      	beq.n	80022e6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a0:	f3ef 8310 	mrs	r3, PRIMASK
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80022a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80022aa:	2301      	movs	r3, #1
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	f383 8810 	msr	PRIMASK, r3
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	438a      	bics	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	f383 8810 	msr	PRIMASK, r3
}
 80022d0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2288      	movs	r2, #136	; 0x88
 80022d6:	2120      	movs	r1, #32
 80022d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2284      	movs	r2, #132	; 0x84
 80022de:	2100      	movs	r1, #0
 80022e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e060      	b.n	80023a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2204      	movs	r2, #4
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d146      	bne.n	8002382 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f6:	2280      	movs	r2, #128	; 0x80
 80022f8:	03d1      	lsls	r1, r2, #15
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	4a2c      	ldr	r2, [pc, #176]	; (80023b0 <UART_CheckIdleState+0x14c>)
 80022fe:	9200      	str	r2, [sp, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	f000 f859 	bl	80023b8 <UART_WaitOnFlagUntilTimeout>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d03b      	beq.n	8002382 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800230a:	f3ef 8310 	mrs	r3, PRIMASK
 800230e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002310:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002312:	637b      	str	r3, [r7, #52]	; 0x34
 8002314:	2301      	movs	r3, #1
 8002316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f383 8810 	msr	PRIMASK, r3
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4922      	ldr	r1, [pc, #136]	; (80023b4 <UART_CheckIdleState+0x150>)
 800232c:	400a      	ands	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002332:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f383 8810 	msr	PRIMASK, r3
}
 800233a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233c:	f3ef 8310 	mrs	r3, PRIMASK
 8002340:	61bb      	str	r3, [r7, #24]
  return(result);
 8002342:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
 8002346:	2301      	movs	r3, #1
 8002348:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	f383 8810 	msr	PRIMASK, r3
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	438a      	bics	r2, r1
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f383 8810 	msr	PRIMASK, r3
}
 800236c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	228c      	movs	r2, #140	; 0x8c
 8002372:	2120      	movs	r1, #32
 8002374:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2284      	movs	r2, #132	; 0x84
 800237a:	2100      	movs	r1, #0
 800237c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e012      	b.n	80023a8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2288      	movs	r2, #136	; 0x88
 8002386:	2120      	movs	r1, #32
 8002388:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	228c      	movs	r2, #140	; 0x8c
 800238e:	2120      	movs	r1, #32
 8002390:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2284      	movs	r2, #132	; 0x84
 80023a2:	2100      	movs	r1, #0
 80023a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b010      	add	sp, #64	; 0x40
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	01ffffff 	.word	0x01ffffff
 80023b4:	fffffedf 	.word	0xfffffedf

080023b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c8:	e051      	b.n	800246e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	3301      	adds	r3, #1
 80023ce:	d04e      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d0:	f7fe fac6 	bl	8000960 <HAL_GetTick>
 80023d4:	0002      	movs	r2, r0
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d302      	bcc.n	80023e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e051      	b.n	800248e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2204      	movs	r2, #4
 80023f2:	4013      	ands	r3, r2
 80023f4:	d03b      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0xb6>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b80      	cmp	r3, #128	; 0x80
 80023fa:	d038      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0xb6>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d035      	beq.n	800246e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2208      	movs	r2, #8
 800240a:	4013      	ands	r3, r2
 800240c:	2b08      	cmp	r3, #8
 800240e:	d111      	bne.n	8002434 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2208      	movs	r2, #8
 8002416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	0018      	movs	r0, r3
 800241c:	f000 f960 	bl	80026e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2290      	movs	r2, #144	; 0x90
 8002424:	2108      	movs	r1, #8
 8002426:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2284      	movs	r2, #132	; 0x84
 800242c:	2100      	movs	r1, #0
 800242e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e02c      	b.n	800248e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	69da      	ldr	r2, [r3, #28]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	401a      	ands	r2, r3
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	429a      	cmp	r2, r3
 8002446:	d112      	bne.n	800246e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	0018      	movs	r0, r3
 8002456:	f000 f943 	bl	80026e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2290      	movs	r2, #144	; 0x90
 800245e:	2120      	movs	r1, #32
 8002460:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2284      	movs	r2, #132	; 0x84
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e00f      	b.n	800248e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	4013      	ands	r3, r2
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	425a      	negs	r2, r3
 800247e:	4153      	adcs	r3, r2
 8002480:	b2db      	uxtb	r3, r3
 8002482:	001a      	movs	r2, r3
 8002484:	1dfb      	adds	r3, r7, #7
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d09e      	beq.n	80023ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	0018      	movs	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	b004      	add	sp, #16
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b098      	sub	sp, #96	; 0x60
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	1dbb      	adds	r3, r7, #6
 80024a4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1dba      	adds	r2, r7, #6
 80024b0:	215c      	movs	r1, #92	; 0x5c
 80024b2:	8812      	ldrh	r2, [r2, #0]
 80024b4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1dba      	adds	r2, r7, #6
 80024ba:	215e      	movs	r1, #94	; 0x5e
 80024bc:	8812      	ldrh	r2, [r2, #0]
 80024be:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	015b      	lsls	r3, r3, #5
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d10d      	bne.n	80024ee <UART_Start_Receive_IT+0x56>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <UART_Start_Receive_IT+0x4c>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2260      	movs	r2, #96	; 0x60
 80024de:	497b      	ldr	r1, [pc, #492]	; (80026cc <UART_Start_Receive_IT+0x234>)
 80024e0:	5299      	strh	r1, [r3, r2]
 80024e2:	e02e      	b.n	8002542 <UART_Start_Receive_IT+0xaa>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2260      	movs	r2, #96	; 0x60
 80024e8:	21ff      	movs	r1, #255	; 0xff
 80024ea:	5299      	strh	r1, [r3, r2]
 80024ec:	e029      	b.n	8002542 <UART_Start_Receive_IT+0xaa>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <UART_Start_Receive_IT+0x7a>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d104      	bne.n	8002508 <UART_Start_Receive_IT+0x70>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2260      	movs	r2, #96	; 0x60
 8002502:	21ff      	movs	r1, #255	; 0xff
 8002504:	5299      	strh	r1, [r3, r2]
 8002506:	e01c      	b.n	8002542 <UART_Start_Receive_IT+0xaa>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2260      	movs	r2, #96	; 0x60
 800250c:	217f      	movs	r1, #127	; 0x7f
 800250e:	5299      	strh	r1, [r3, r2]
 8002510:	e017      	b.n	8002542 <UART_Start_Receive_IT+0xaa>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	055b      	lsls	r3, r3, #21
 800251a:	429a      	cmp	r2, r3
 800251c:	d10d      	bne.n	800253a <UART_Start_Receive_IT+0xa2>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d104      	bne.n	8002530 <UART_Start_Receive_IT+0x98>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2260      	movs	r2, #96	; 0x60
 800252a:	217f      	movs	r1, #127	; 0x7f
 800252c:	5299      	strh	r1, [r3, r2]
 800252e:	e008      	b.n	8002542 <UART_Start_Receive_IT+0xaa>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2260      	movs	r2, #96	; 0x60
 8002534:	213f      	movs	r1, #63	; 0x3f
 8002536:	5299      	strh	r1, [r3, r2]
 8002538:	e003      	b.n	8002542 <UART_Start_Receive_IT+0xaa>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2260      	movs	r2, #96	; 0x60
 800253e:	2100      	movs	r1, #0
 8002540:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2290      	movs	r2, #144	; 0x90
 8002546:	2100      	movs	r1, #0
 8002548:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	228c      	movs	r2, #140	; 0x8c
 800254e:	2122      	movs	r1, #34	; 0x22
 8002550:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002552:	f3ef 8310 	mrs	r3, PRIMASK
 8002556:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8002558:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800255a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800255c:	2301      	movs	r3, #1
 800255e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002562:	f383 8810 	msr	PRIMASK, r3
}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2101      	movs	r1, #1
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800257e:	f383 8810 	msr	PRIMASK, r3
}
 8002582:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	059b      	lsls	r3, r3, #22
 800258c:	429a      	cmp	r2, r3
 800258e:	d150      	bne.n	8002632 <UART_Start_Receive_IT+0x19a>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2268      	movs	r2, #104	; 0x68
 8002594:	5a9b      	ldrh	r3, [r3, r2]
 8002596:	1dba      	adds	r2, r7, #6
 8002598:	8812      	ldrh	r2, [r2, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d349      	bcc.n	8002632 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d107      	bne.n	80025ba <UART_Start_Receive_IT+0x122>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d103      	bne.n	80025ba <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a46      	ldr	r2, [pc, #280]	; (80026d0 <UART_Start_Receive_IT+0x238>)
 80025b6:	675a      	str	r2, [r3, #116]	; 0x74
 80025b8:	e002      	b.n	80025c0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a45      	ldr	r2, [pc, #276]	; (80026d4 <UART_Start_Receive_IT+0x23c>)
 80025be:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d019      	beq.n	80025fc <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c8:	f3ef 8310 	mrs	r3, PRIMASK
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80025d2:	2301      	movs	r3, #1
 80025d4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	f383 8810 	msr	PRIMASK, r3
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2180      	movs	r1, #128	; 0x80
 80025ea:	0049      	lsls	r1, r1, #1
 80025ec:	430a      	orrs	r2, r1
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f6:	f383 8810 	msr	PRIMASK, r3
}
 80025fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fc:	f3ef 8310 	mrs	r3, PRIMASK
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002604:	657b      	str	r3, [r7, #84]	; 0x54
 8002606:	2301      	movs	r3, #1
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	f383 8810 	msr	PRIMASK, r3
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2180      	movs	r1, #128	; 0x80
 800261e:	0549      	lsls	r1, r1, #21
 8002620:	430a      	orrs	r2, r1
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	f383 8810 	msr	PRIMASK, r3
}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	e047      	b.n	80026c2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	015b      	lsls	r3, r3, #5
 800263a:	429a      	cmp	r2, r3
 800263c:	d107      	bne.n	800264e <UART_Start_Receive_IT+0x1b6>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d103      	bne.n	800264e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <UART_Start_Receive_IT+0x240>)
 800264a:	675a      	str	r2, [r3, #116]	; 0x74
 800264c:	e002      	b.n	8002654 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4a22      	ldr	r2, [pc, #136]	; (80026dc <UART_Start_Receive_IT+0x244>)
 8002652:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265c:	f3ef 8310 	mrs	r3, PRIMASK
 8002660:	61fb      	str	r3, [r7, #28]
  return(result);
 8002662:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002664:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002666:	2301      	movs	r3, #1
 8002668:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f383 8810 	msr	PRIMASK, r3
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2190      	movs	r1, #144	; 0x90
 800267e:	0049      	lsls	r1, r1, #1
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	f383 8810 	msr	PRIMASK, r3
}
 800268e:	e018      	b.n	80026c2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002690:	f3ef 8310 	mrs	r3, PRIMASK
 8002694:	613b      	str	r3, [r7, #16]
  return(result);
 8002696:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002698:	653b      	str	r3, [r7, #80]	; 0x50
 800269a:	2301      	movs	r3, #1
 800269c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	f383 8810 	msr	PRIMASK, r3
}
 80026a4:	46c0      	nop			; (mov r8, r8)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2120      	movs	r1, #32
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ba:	69bb      	ldr	r3, [r7, #24]
 80026bc:	f383 8810 	msr	PRIMASK, r3
}
 80026c0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b018      	add	sp, #96	; 0x60
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	000001ff 	.word	0x000001ff
 80026d0:	08002f29 	.word	0x08002f29
 80026d4:	08002bdd 	.word	0x08002bdd
 80026d8:	08002a09 	.word	0x08002a09
 80026dc:	08002835 	.word	0x08002835

080026e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026e8:	f3ef 8310 	mrs	r3, PRIMASK
 80026ec:	617b      	str	r3, [r7, #20]
  return(result);
 80026ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
 80026f2:	2301      	movs	r3, #1
 80026f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f383 8810 	msr	PRIMASK, r3
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4926      	ldr	r1, [pc, #152]	; (80027a4 <UART_EndRxTransfer+0xc4>)
 800270a:	400a      	ands	r2, r1
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002710:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f383 8810 	msr	PRIMASK, r3
}
 8002718:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271a:	f3ef 8310 	mrs	r3, PRIMASK
 800271e:	623b      	str	r3, [r7, #32]
  return(result);
 8002720:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002722:	633b      	str	r3, [r7, #48]	; 0x30
 8002724:	2301      	movs	r3, #1
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	f383 8810 	msr	PRIMASK, r3
}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	491b      	ldr	r1, [pc, #108]	; (80027a8 <UART_EndRxTransfer+0xc8>)
 800273c:	400a      	ands	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	f383 8810 	msr	PRIMASK, r3
}
 800274a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002750:	2b01      	cmp	r3, #1
 8002752:	d118      	bne.n	8002786 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002754:	f3ef 8310 	mrs	r3, PRIMASK
 8002758:	60bb      	str	r3, [r7, #8]
  return(result);
 800275a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275e:	2301      	movs	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f383 8810 	msr	PRIMASK, r3
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2110      	movs	r1, #16
 8002776:	438a      	bics	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	228c      	movs	r2, #140	; 0x8c
 800278a:	2120      	movs	r1, #32
 800278c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	675a      	str	r2, [r3, #116]	; 0x74
}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	b00e      	add	sp, #56	; 0x38
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	fffffedf 	.word	0xfffffedf
 80027a8:	effffffe 	.word	0xeffffffe

080027ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	225e      	movs	r2, #94	; 0x5e
 80027be:	2100      	movs	r1, #0
 80027c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2256      	movs	r2, #86	; 0x56
 80027c6:	2100      	movs	r1, #0
 80027c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7ff f92b 	bl	8001a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}

080027da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e2:	f3ef 8310 	mrs	r3, PRIMASK
 80027e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80027e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	2301      	movs	r3, #1
 80027ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f383 8810 	msr	PRIMASK, r3
}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2140      	movs	r1, #64	; 0x40
 8002804:	438a      	bics	r2, r1
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f383 8810 	msr	PRIMASK, r3
}
 8002812:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2288      	movs	r2, #136	; 0x88
 8002818:	2120      	movs	r1, #32
 800281a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0018      	movs	r0, r3
 8002826:	f7ff f8f7 	bl	8001a18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b006      	add	sp, #24
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b094      	sub	sp, #80	; 0x50
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800283c:	204e      	movs	r0, #78	; 0x4e
 800283e:	183b      	adds	r3, r7, r0
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	2160      	movs	r1, #96	; 0x60
 8002844:	5a52      	ldrh	r2, [r2, r1]
 8002846:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	228c      	movs	r2, #140	; 0x8c
 800284c:	589b      	ldr	r3, [r3, r2]
 800284e:	2b22      	cmp	r3, #34	; 0x22
 8002850:	d000      	beq.n	8002854 <UART_RxISR_8BIT+0x20>
 8002852:	e0c4      	b.n	80029de <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285a:	214c      	movs	r1, #76	; 0x4c
 800285c:	187b      	adds	r3, r7, r1
 800285e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002860:	187b      	adds	r3, r7, r1
 8002862:	881b      	ldrh	r3, [r3, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	183b      	adds	r3, r7, r0
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b2d9      	uxtb	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	400a      	ands	r2, r1
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	225e      	movs	r2, #94	; 0x5e
 8002884:	5a9b      	ldrh	r3, [r3, r2]
 8002886:	b29b      	uxth	r3, r3
 8002888:	3b01      	subs	r3, #1
 800288a:	b299      	uxth	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	225e      	movs	r2, #94	; 0x5e
 8002890:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	225e      	movs	r2, #94	; 0x5e
 8002896:	5a9b      	ldrh	r3, [r3, r2]
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d000      	beq.n	80028a0 <UART_RxISR_8BIT+0x6c>
 800289e:	e0a6      	b.n	80029ee <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a0:	f3ef 8310 	mrs	r3, PRIMASK
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80028a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80028aa:	2301      	movs	r3, #1
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	f383 8810 	msr	PRIMASK, r3
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	494d      	ldr	r1, [pc, #308]	; (80029f8 <UART_RxISR_8BIT+0x1c4>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	f383 8810 	msr	PRIMASK, r3
}
 80028d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d2:	f3ef 8310 	mrs	r3, PRIMASK
 80028d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028da:	647b      	str	r3, [r7, #68]	; 0x44
 80028dc:	2301      	movs	r3, #1
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e2:	f383 8810 	msr	PRIMASK, r3
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2101      	movs	r1, #1
 80028f4:	438a      	bics	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fe:	f383 8810 	msr	PRIMASK, r3
}
 8002902:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	228c      	movs	r2, #140	; 0x8c
 8002908:	2120      	movs	r1, #32
 800290a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a37      	ldr	r2, [pc, #220]	; (80029fc <UART_RxISR_8BIT+0x1c8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d024      	beq.n	800296c <UART_RxISR_8BIT+0x138>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a36      	ldr	r2, [pc, #216]	; (8002a00 <UART_RxISR_8BIT+0x1cc>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d01f      	beq.n	800296c <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	4013      	ands	r3, r2
 8002938:	d018      	beq.n	800296c <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293a:	f3ef 8310 	mrs	r3, PRIMASK
 800293e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002940:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002942:	643b      	str	r3, [r7, #64]	; 0x40
 8002944:	2301      	movs	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f383 8810 	msr	PRIMASK, r3
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	492a      	ldr	r1, [pc, #168]	; (8002a04 <UART_RxISR_8BIT+0x1d0>)
 800295c:	400a      	ands	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002962:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f383 8810 	msr	PRIMASK, r3
}
 800296a:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d12f      	bne.n	80029d4 <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800297a:	f3ef 8310 	mrs	r3, PRIMASK
 800297e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002980:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002984:	2301      	movs	r3, #1
 8002986:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f383 8810 	msr	PRIMASK, r3
}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2110      	movs	r1, #16
 800299c:	438a      	bics	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f383 8810 	msr	PRIMASK, r3
}
 80029aa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	2210      	movs	r2, #16
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d103      	bne.n	80029c2 <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2210      	movs	r2, #16
 80029c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	225c      	movs	r2, #92	; 0x5c
 80029c6:	5a9a      	ldrh	r2, [r3, r2]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0011      	movs	r1, r2
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff f833 	bl	8001a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80029d2:	e00c      	b.n	80029ee <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f7fd fe34 	bl	8000644 <HAL_UART_RxCpltCallback>
}
 80029dc:	e007      	b.n	80029ee <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2108      	movs	r1, #8
 80029ea:	430a      	orrs	r2, r1
 80029ec:	619a      	str	r2, [r3, #24]
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b014      	add	sp, #80	; 0x50
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	fffffedf 	.word	0xfffffedf
 80029fc:	40008000 	.word	0x40008000
 8002a00:	40008400 	.word	0x40008400
 8002a04:	fbffffff 	.word	0xfbffffff

08002a08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b094      	sub	sp, #80	; 0x50
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002a10:	204e      	movs	r0, #78	; 0x4e
 8002a12:	183b      	adds	r3, r7, r0
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	2160      	movs	r1, #96	; 0x60
 8002a18:	5a52      	ldrh	r2, [r2, r1]
 8002a1a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	228c      	movs	r2, #140	; 0x8c
 8002a20:	589b      	ldr	r3, [r3, r2]
 8002a22:	2b22      	cmp	r3, #34	; 0x22
 8002a24:	d000      	beq.n	8002a28 <UART_RxISR_16BIT+0x20>
 8002a26:	e0c4      	b.n	8002bb2 <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2e:	214c      	movs	r1, #76	; 0x4c
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	183a      	adds	r2, r7, r0
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	8812      	ldrh	r2, [r2, #0]
 8002a42:	4013      	ands	r3, r2
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4e:	1c9a      	adds	r2, r3, #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	225e      	movs	r2, #94	; 0x5e
 8002a58:	5a9b      	ldrh	r3, [r3, r2]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b299      	uxth	r1, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	225e      	movs	r2, #94	; 0x5e
 8002a64:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	225e      	movs	r2, #94	; 0x5e
 8002a6a:	5a9b      	ldrh	r3, [r3, r2]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d000      	beq.n	8002a74 <UART_RxISR_16BIT+0x6c>
 8002a72:	e0a6      	b.n	8002bc2 <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a74:	f3ef 8310 	mrs	r3, PRIMASK
 8002a78:	623b      	str	r3, [r7, #32]
  return(result);
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a7e:	2301      	movs	r3, #1
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	f383 8810 	msr	PRIMASK, r3
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	494d      	ldr	r1, [pc, #308]	; (8002bcc <UART_RxISR_16BIT+0x1c4>)
 8002a96:	400a      	ands	r2, r1
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	f383 8810 	msr	PRIMASK, r3
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aae:	643b      	str	r3, [r7, #64]	; 0x40
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	f383 8810 	msr	PRIMASK, r3
}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	438a      	bics	r2, r1
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad2:	f383 8810 	msr	PRIMASK, r3
}
 8002ad6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	228c      	movs	r2, #140	; 0x8c
 8002adc:	2120      	movs	r1, #32
 8002ade:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a37      	ldr	r2, [pc, #220]	; (8002bd0 <UART_RxISR_16BIT+0x1c8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d024      	beq.n	8002b40 <UART_RxISR_16BIT+0x138>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a36      	ldr	r2, [pc, #216]	; (8002bd4 <UART_RxISR_16BIT+0x1cc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d01f      	beq.n	8002b40 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	2380      	movs	r3, #128	; 0x80
 8002b08:	041b      	lsls	r3, r3, #16
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d018      	beq.n	8002b40 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b12:	617b      	str	r3, [r7, #20]
  return(result);
 8002b14:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b18:	2301      	movs	r3, #1
 8002b1a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	f383 8810 	msr	PRIMASK, r3
}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	492a      	ldr	r1, [pc, #168]	; (8002bd8 <UART_RxISR_16BIT+0x1d0>)
 8002b30:	400a      	ands	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f383 8810 	msr	PRIMASK, r3
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d12f      	bne.n	8002ba8 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b52:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b54:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b58:	2301      	movs	r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f383 8810 	msr	PRIMASK, r3
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2110      	movs	r1, #16
 8002b70:	438a      	bics	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	f383 8810 	msr	PRIMASK, r3
}
 8002b7e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	2210      	movs	r2, #16
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d103      	bne.n	8002b96 <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2210      	movs	r2, #16
 8002b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	225c      	movs	r2, #92	; 0x5c
 8002b9a:	5a9a      	ldrh	r2, [r3, r2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0011      	movs	r1, r2
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	f7fe ff49 	bl	8001a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002ba6:	e00c      	b.n	8002bc2 <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7fd fd4a 	bl	8000644 <HAL_UART_RxCpltCallback>
}
 8002bb0:	e007      	b.n	8002bc2 <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699a      	ldr	r2, [r3, #24]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2108      	movs	r1, #8
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	619a      	str	r2, [r3, #24]
}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b014      	add	sp, #80	; 0x50
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	fffffedf 	.word	0xfffffedf
 8002bd0:	40008000 	.word	0x40008000
 8002bd4:	40008400 	.word	0x40008400
 8002bd8:	fbffffff 	.word	0xfbffffff

08002bdc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b0a0      	sub	sp, #128	; 0x80
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8002be4:	237a      	movs	r3, #122	; 0x7a
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	2160      	movs	r1, #96	; 0x60
 8002bec:	5a52      	ldrh	r2, [r2, r1]
 8002bee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	228c      	movs	r2, #140	; 0x8c
 8002c0c:	589b      	ldr	r3, [r3, r2]
 8002c0e:	2b22      	cmp	r3, #34	; 0x22
 8002c10:	d000      	beq.n	8002c14 <UART_RxISR_8BIT_FIFOEN+0x38>
 8002c12:	e16f      	b.n	8002ef4 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002c14:	236e      	movs	r3, #110	; 0x6e
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	2168      	movs	r1, #104	; 0x68
 8002c1c:	5a52      	ldrh	r2, [r2, r1]
 8002c1e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002c20:	e116      	b.n	8002e50 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c28:	216c      	movs	r1, #108	; 0x6c
 8002c2a:	187b      	adds	r3, r7, r1
 8002c2c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	237a      	movs	r3, #122	; 0x7a
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b2d9      	uxtb	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	400a      	ands	r2, r1
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	225e      	movs	r2, #94	; 0x5e
 8002c54:	5a9b      	ldrh	r3, [r3, r2]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b299      	uxth	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	225e      	movs	r2, #94	; 0x5e
 8002c60:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d049      	beq.n	8002d06 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c74:	2201      	movs	r2, #1
 8002c76:	4013      	ands	r3, r2
 8002c78:	d010      	beq.n	8002c9c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8002c7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4013      	ands	r3, r2
 8002c82:	d00b      	beq.n	8002c9c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2290      	movs	r2, #144	; 0x90
 8002c90:	589b      	ldr	r3, [r3, r2]
 8002c92:	2201      	movs	r2, #1
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2190      	movs	r1, #144	; 0x90
 8002c9a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d00f      	beq.n	8002cc4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8002ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d00b      	beq.n	8002cc4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2290      	movs	r2, #144	; 0x90
 8002cb8:	589b      	ldr	r3, [r3, r2]
 8002cba:	2204      	movs	r2, #4
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2190      	movs	r1, #144	; 0x90
 8002cc2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d00f      	beq.n	8002cec <UART_RxISR_8BIT_FIFOEN+0x110>
 8002ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d00b      	beq.n	8002cec <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2204      	movs	r2, #4
 8002cda:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2290      	movs	r2, #144	; 0x90
 8002ce0:	589b      	ldr	r3, [r3, r2]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2190      	movs	r1, #144	; 0x90
 8002cea:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2290      	movs	r2, #144	; 0x90
 8002cf0:	589b      	ldr	r3, [r3, r2]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7fe fe95 	bl	8001a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2290      	movs	r2, #144	; 0x90
 8002d02:	2100      	movs	r1, #0
 8002d04:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	225e      	movs	r2, #94	; 0x5e
 8002d0a:	5a9b      	ldrh	r3, [r3, r2]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d000      	beq.n	8002d14 <UART_RxISR_8BIT_FIFOEN+0x138>
 8002d12:	e09d      	b.n	8002e50 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d14:	f3ef 8310 	mrs	r3, PRIMASK
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d1e:	2301      	movs	r3, #1
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4975      	ldr	r1, [pc, #468]	; (8002f0c <UART_RxISR_8BIT_FIFOEN+0x330>)
 8002d36:	400a      	ands	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d3c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d46:	f3ef 8310 	mrs	r3, PRIMASK
 8002d4a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d50:	2301      	movs	r3, #1
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d56:	f383 8810 	msr	PRIMASK, r3
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	496a      	ldr	r1, [pc, #424]	; (8002f10 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8002d68:	400a      	ands	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d72:	f383 8810 	msr	PRIMASK, r3
}
 8002d76:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	228c      	movs	r2, #140	; 0x8c
 8002d7c:	2120      	movs	r1, #32
 8002d7e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a60      	ldr	r2, [pc, #384]	; (8002f14 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d024      	beq.n	8002de0 <UART_RxISR_8BIT_FIFOEN+0x204>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d01f      	beq.n	8002de0 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	4013      	ands	r3, r2
 8002dac:	d018      	beq.n	8002de0 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dae:	f3ef 8310 	mrs	r3, PRIMASK
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002db6:	663b      	str	r3, [r7, #96]	; 0x60
 8002db8:	2301      	movs	r3, #1
 8002dba:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	f383 8810 	msr	PRIMASK, r3
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4953      	ldr	r1, [pc, #332]	; (8002f1c <UART_RxISR_8BIT_FIFOEN+0x340>)
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dd6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dda:	f383 8810 	msr	PRIMASK, r3
}
 8002dde:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d12f      	bne.n	8002e48 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dee:	f3ef 8310 	mrs	r3, PRIMASK
 8002df2:	623b      	str	r3, [r7, #32]
  return(result);
 8002df4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002df8:	2301      	movs	r3, #1
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	f383 8810 	msr	PRIMASK, r3
}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2110      	movs	r1, #16
 8002e10:	438a      	bics	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e16:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1a:	f383 8810 	msr	PRIMASK, r3
}
 8002e1e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	2210      	movs	r2, #16
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	d103      	bne.n	8002e36 <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2210      	movs	r2, #16
 8002e34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	225c      	movs	r2, #92	; 0x5c
 8002e3a:	5a9a      	ldrh	r2, [r3, r2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0011      	movs	r1, r2
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7fe fdf9 	bl	8001a38 <HAL_UARTEx_RxEventCallback>
 8002e46:	e003      	b.n	8002e50 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f7fd fbfa 	bl	8000644 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002e50:	236e      	movs	r3, #110	; 0x6e
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d004      	beq.n	8002e64 <UART_RxISR_8BIT_FIFOEN+0x288>
 8002e5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d000      	beq.n	8002e64 <UART_RxISR_8BIT_FIFOEN+0x288>
 8002e62:	e6de      	b.n	8002c22 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002e64:	205a      	movs	r0, #90	; 0x5a
 8002e66:	183b      	adds	r3, r7, r0
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	215e      	movs	r1, #94	; 0x5e
 8002e6c:	5a52      	ldrh	r2, [r2, r1]
 8002e6e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002e70:	0001      	movs	r1, r0
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d044      	beq.n	8002f04 <UART_RxISR_8BIT_FIFOEN+0x328>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2268      	movs	r2, #104	; 0x68
 8002e7e:	5a9b      	ldrh	r3, [r3, r2]
 8002e80:	187a      	adds	r2, r7, r1
 8002e82:	8812      	ldrh	r2, [r2, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d23d      	bcs.n	8002f04 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e88:	f3ef 8310 	mrs	r3, PRIMASK
 8002e8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002e90:	657b      	str	r3, [r7, #84]	; 0x54
 8002e92:	2301      	movs	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f383 8810 	msr	PRIMASK, r3
}
 8002e9c:	46c0      	nop			; (mov r8, r8)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	491d      	ldr	r1, [pc, #116]	; (8002f20 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8002eaa:	400a      	ands	r2, r1
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f383 8810 	msr	PRIMASK, r3
}
 8002eb8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <UART_RxISR_8BIT_FIFOEN+0x348>)
 8002ebe:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec4:	617b      	str	r3, [r7, #20]
  return(result);
 8002ec6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002ec8:	653b      	str	r3, [r7, #80]	; 0x50
 8002eca:	2301      	movs	r3, #1
 8002ecc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	f383 8810 	msr	PRIMASK, r3
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2120      	movs	r1, #32
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ee8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	f383 8810 	msr	PRIMASK, r3
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002ef2:	e007      	b.n	8002f04 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2108      	movs	r1, #8
 8002f00:	430a      	orrs	r2, r1
 8002f02:	619a      	str	r2, [r3, #24]
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b020      	add	sp, #128	; 0x80
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	fffffeff 	.word	0xfffffeff
 8002f10:	effffffe 	.word	0xeffffffe
 8002f14:	40008000 	.word	0x40008000
 8002f18:	40008400 	.word	0x40008400
 8002f1c:	fbffffff 	.word	0xfbffffff
 8002f20:	efffffff 	.word	0xefffffff
 8002f24:	08002835 	.word	0x08002835

08002f28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b0a2      	sub	sp, #136	; 0x88
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8002f30:	2382      	movs	r3, #130	; 0x82
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	2160      	movs	r1, #96	; 0x60
 8002f38:	5a52      	ldrh	r2, [r2, r1]
 8002f3a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	2284      	movs	r2, #132	; 0x84
 8002f44:	18ba      	adds	r2, r7, r2
 8002f46:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	228c      	movs	r2, #140	; 0x8c
 8002f5c:	589b      	ldr	r3, [r3, r2]
 8002f5e:	2b22      	cmp	r3, #34	; 0x22
 8002f60:	d000      	beq.n	8002f64 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8002f62:	e179      	b.n	8003258 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002f64:	2376      	movs	r3, #118	; 0x76
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	2168      	movs	r1, #104	; 0x68
 8002f6c:	5a52      	ldrh	r2, [r2, r1]
 8002f6e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002f70:	e11e      	b.n	80031b0 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f78:	2174      	movs	r1, #116	; 0x74
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	2282      	movs	r2, #130	; 0x82
 8002f88:	18ba      	adds	r2, r7, r2
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	8812      	ldrh	r2, [r2, #0]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	225e      	movs	r2, #94	; 0x5e
 8002fa4:	5a9b      	ldrh	r3, [r3, r2]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b299      	uxth	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	225e      	movs	r2, #94	; 0x5e
 8002fb0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	2184      	movs	r1, #132	; 0x84
 8002fba:	187a      	adds	r2, r7, r1
 8002fbc:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002fbe:	187b      	adds	r3, r7, r1
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2207      	movs	r2, #7
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d04e      	beq.n	8003066 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002fc8:	187b      	adds	r3, r7, r1
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d010      	beq.n	8002ff4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8002fd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002fd4:	2380      	movs	r3, #128	; 0x80
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2290      	movs	r2, #144	; 0x90
 8002fe8:	589b      	ldr	r3, [r3, r2]
 8002fea:	2201      	movs	r2, #1
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2190      	movs	r1, #144	; 0x90
 8002ff2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ff4:	2384      	movs	r3, #132	; 0x84
 8002ff6:	18fb      	adds	r3, r7, r3
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00f      	beq.n	8003020 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003002:	2201      	movs	r2, #1
 8003004:	4013      	ands	r3, r2
 8003006:	d00b      	beq.n	8003020 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2202      	movs	r2, #2
 800300e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2290      	movs	r2, #144	; 0x90
 8003014:	589b      	ldr	r3, [r3, r2]
 8003016:	2204      	movs	r2, #4
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2190      	movs	r1, #144	; 0x90
 800301e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003020:	2384      	movs	r3, #132	; 0x84
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2204      	movs	r2, #4
 8003028:	4013      	ands	r3, r2
 800302a:	d00f      	beq.n	800304c <UART_RxISR_16BIT_FIFOEN+0x124>
 800302c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	d00b      	beq.n	800304c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2204      	movs	r2, #4
 800303a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2290      	movs	r2, #144	; 0x90
 8003040:	589b      	ldr	r3, [r3, r2]
 8003042:	2202      	movs	r2, #2
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2190      	movs	r1, #144	; 0x90
 800304a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2290      	movs	r2, #144	; 0x90
 8003050:	589b      	ldr	r3, [r3, r2]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	0018      	movs	r0, r3
 800305a:	f7fe fce5 	bl	8001a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2290      	movs	r2, #144	; 0x90
 8003062:	2100      	movs	r1, #0
 8003064:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	225e      	movs	r2, #94	; 0x5e
 800306a:	5a9b      	ldrh	r3, [r3, r2]
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d000      	beq.n	8003074 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8003072:	e09d      	b.n	80031b0 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003074:	f3ef 8310 	mrs	r3, PRIMASK
 8003078:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800307c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800307e:	2301      	movs	r3, #1
 8003080:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			; (mov r8, r8)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4976      	ldr	r1, [pc, #472]	; (8003270 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8003096:	400a      	ands	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a0:	f383 8810 	msr	PRIMASK, r3
}
 80030a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a6:	f3ef 8310 	mrs	r3, PRIMASK
 80030aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80030ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80030b0:	2301      	movs	r3, #1
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b6:	f383 8810 	msr	PRIMASK, r3
}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	496b      	ldr	r1, [pc, #428]	; (8003274 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80030c8:	400a      	ands	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030d2:	f383 8810 	msr	PRIMASK, r3
}
 80030d6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	228c      	movs	r2, #140	; 0x8c
 80030dc:	2120      	movs	r1, #32
 80030de:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a61      	ldr	r2, [pc, #388]	; (8003278 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d024      	beq.n	8003140 <UART_RxISR_16BIT_FIFOEN+0x218>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a60      	ldr	r2, [pc, #384]	; (800327c <UART_RxISR_16BIT_FIFOEN+0x354>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d01f      	beq.n	8003140 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	041b      	lsls	r3, r3, #16
 800310a:	4013      	ands	r3, r2
 800310c:	d018      	beq.n	8003140 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310e:	f3ef 8310 	mrs	r3, PRIMASK
 8003112:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003116:	667b      	str	r3, [r7, #100]	; 0x64
 8003118:	2301      	movs	r3, #1
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311e:	f383 8810 	msr	PRIMASK, r3
}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4954      	ldr	r1, [pc, #336]	; (8003280 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8003130:	400a      	ands	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003136:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313a:	f383 8810 	msr	PRIMASK, r3
}
 800313e:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d12f      	bne.n	80031a8 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314e:	f3ef 8310 	mrs	r3, PRIMASK
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003156:	663b      	str	r3, [r7, #96]	; 0x60
 8003158:	2301      	movs	r3, #1
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	f383 8810 	msr	PRIMASK, r3
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2110      	movs	r1, #16
 8003170:	438a      	bics	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	2210      	movs	r2, #16
 8003188:	4013      	ands	r3, r2
 800318a:	2b10      	cmp	r3, #16
 800318c:	d103      	bne.n	8003196 <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2210      	movs	r2, #16
 8003194:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	225c      	movs	r2, #92	; 0x5c
 800319a:	5a9a      	ldrh	r2, [r3, r2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0011      	movs	r1, r2
 80031a0:	0018      	movs	r0, r3
 80031a2:	f7fe fc49 	bl	8001a38 <HAL_UARTEx_RxEventCallback>
 80031a6:	e003      	b.n	80031b0 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f7fd fa4a 	bl	8000644 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80031b0:	2376      	movs	r3, #118	; 0x76
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80031ba:	2384      	movs	r3, #132	; 0x84
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2220      	movs	r2, #32
 80031c2:	4013      	ands	r3, r2
 80031c4:	d000      	beq.n	80031c8 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80031c6:	e6d4      	b.n	8002f72 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80031c8:	205e      	movs	r0, #94	; 0x5e
 80031ca:	183b      	adds	r3, r7, r0
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	215e      	movs	r1, #94	; 0x5e
 80031d0:	5a52      	ldrh	r2, [r2, r1]
 80031d2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80031d4:	0001      	movs	r1, r0
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d044      	beq.n	8003268 <UART_RxISR_16BIT_FIFOEN+0x340>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2268      	movs	r2, #104	; 0x68
 80031e2:	5a9b      	ldrh	r3, [r3, r2]
 80031e4:	187a      	adds	r2, r7, r1
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d23d      	bcs.n	8003268 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ec:	f3ef 8310 	mrs	r3, PRIMASK
 80031f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80031f2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80031f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031f6:	2301      	movs	r3, #1
 80031f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f383 8810 	msr	PRIMASK, r3
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	491d      	ldr	r1, [pc, #116]	; (8003284 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800320e:	400a      	ands	r2, r1
 8003210:	609a      	str	r2, [r3, #8]
 8003212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f383 8810 	msr	PRIMASK, r3
}
 800321c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a19      	ldr	r2, [pc, #100]	; (8003288 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8003222:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003224:	f3ef 8310 	mrs	r3, PRIMASK
 8003228:	61bb      	str	r3, [r7, #24]
  return(result);
 800322a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800322c:	657b      	str	r3, [r7, #84]	; 0x54
 800322e:	2301      	movs	r3, #1
 8003230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f383 8810 	msr	PRIMASK, r3
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2120      	movs	r1, #32
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f383 8810 	msr	PRIMASK, r3
}
 8003254:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003256:	e007      	b.n	8003268 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2108      	movs	r1, #8
 8003264:	430a      	orrs	r2, r1
 8003266:	619a      	str	r2, [r3, #24]
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b022      	add	sp, #136	; 0x88
 800326e:	bd80      	pop	{r7, pc}
 8003270:	fffffeff 	.word	0xfffffeff
 8003274:	effffffe 	.word	0xeffffffe
 8003278:	40008000 	.word	0x40008000
 800327c:	40008400 	.word	0x40008400
 8003280:	fbffffff 	.word	0xfbffffff
 8003284:	efffffff 	.word	0xefffffff
 8003288:	08002a09 	.word	0x08002a09

0800328c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b002      	add	sp, #8
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}

080032bc <siscanf>:
 80032bc:	b40e      	push	{r1, r2, r3}
 80032be:	b530      	push	{r4, r5, lr}
 80032c0:	2381      	movs	r3, #129	; 0x81
 80032c2:	b09c      	sub	sp, #112	; 0x70
 80032c4:	466a      	mov	r2, sp
 80032c6:	ac1f      	add	r4, sp, #124	; 0x7c
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	cc20      	ldmia	r4!, {r5}
 80032cc:	8293      	strh	r3, [r2, #20]
 80032ce:	9002      	str	r0, [sp, #8]
 80032d0:	9006      	str	r0, [sp, #24]
 80032d2:	f7fc ff17 	bl	8000104 <strlen>
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <siscanf+0x48>)
 80032d8:	466a      	mov	r2, sp
 80032da:	930b      	str	r3, [sp, #44]	; 0x2c
 80032dc:	2300      	movs	r3, #0
 80032de:	9003      	str	r0, [sp, #12]
 80032e0:	9007      	str	r0, [sp, #28]
 80032e2:	4809      	ldr	r0, [pc, #36]	; (8003308 <siscanf+0x4c>)
 80032e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80032e6:	9314      	str	r3, [sp, #80]	; 0x50
 80032e8:	3b01      	subs	r3, #1
 80032ea:	82d3      	strh	r3, [r2, #22]
 80032ec:	a902      	add	r1, sp, #8
 80032ee:	0023      	movs	r3, r4
 80032f0:	002a      	movs	r2, r5
 80032f2:	6800      	ldr	r0, [r0, #0]
 80032f4:	9401      	str	r4, [sp, #4]
 80032f6:	f000 f999 	bl	800362c <__ssvfiscanf_r>
 80032fa:	b01c      	add	sp, #112	; 0x70
 80032fc:	bc30      	pop	{r4, r5}
 80032fe:	bc08      	pop	{r3}
 8003300:	b003      	add	sp, #12
 8003302:	4718      	bx	r3
 8003304:	0800330d 	.word	0x0800330d
 8003308:	20000078 	.word	0x20000078

0800330c <__seofread>:
 800330c:	2000      	movs	r0, #0
 800330e:	4770      	bx	lr

08003310 <memset>:
 8003310:	0003      	movs	r3, r0
 8003312:	1882      	adds	r2, r0, r2
 8003314:	4293      	cmp	r3, r2
 8003316:	d100      	bne.n	800331a <memset+0xa>
 8003318:	4770      	bx	lr
 800331a:	7019      	strb	r1, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	e7f9      	b.n	8003314 <memset+0x4>

08003320 <__errno>:
 8003320:	4b01      	ldr	r3, [pc, #4]	; (8003328 <__errno+0x8>)
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	4770      	bx	lr
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	20000078 	.word	0x20000078

0800332c <__libc_init_array>:
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	2600      	movs	r6, #0
 8003330:	4c0c      	ldr	r4, [pc, #48]	; (8003364 <__libc_init_array+0x38>)
 8003332:	4d0d      	ldr	r5, [pc, #52]	; (8003368 <__libc_init_array+0x3c>)
 8003334:	1b64      	subs	r4, r4, r5
 8003336:	10a4      	asrs	r4, r4, #2
 8003338:	42a6      	cmp	r6, r4
 800333a:	d109      	bne.n	8003350 <__libc_init_array+0x24>
 800333c:	2600      	movs	r6, #0
 800333e:	f000 fe29 	bl	8003f94 <_init>
 8003342:	4c0a      	ldr	r4, [pc, #40]	; (800336c <__libc_init_array+0x40>)
 8003344:	4d0a      	ldr	r5, [pc, #40]	; (8003370 <__libc_init_array+0x44>)
 8003346:	1b64      	subs	r4, r4, r5
 8003348:	10a4      	asrs	r4, r4, #2
 800334a:	42a6      	cmp	r6, r4
 800334c:	d105      	bne.n	800335a <__libc_init_array+0x2e>
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	00b3      	lsls	r3, r6, #2
 8003352:	58eb      	ldr	r3, [r5, r3]
 8003354:	4798      	blx	r3
 8003356:	3601      	adds	r6, #1
 8003358:	e7ee      	b.n	8003338 <__libc_init_array+0xc>
 800335a:	00b3      	lsls	r3, r6, #2
 800335c:	58eb      	ldr	r3, [r5, r3]
 800335e:	4798      	blx	r3
 8003360:	3601      	adds	r6, #1
 8003362:	e7f2      	b.n	800334a <__libc_init_array+0x1e>
 8003364:	0800411c 	.word	0x0800411c
 8003368:	0800411c 	.word	0x0800411c
 800336c:	08004120 	.word	0x08004120
 8003370:	0800411c 	.word	0x0800411c

08003374 <__retarget_lock_acquire_recursive>:
 8003374:	4770      	bx	lr

08003376 <__retarget_lock_release_recursive>:
 8003376:	4770      	bx	lr

08003378 <_free_r>:
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	0005      	movs	r5, r0
 800337c:	2900      	cmp	r1, #0
 800337e:	d010      	beq.n	80033a2 <_free_r+0x2a>
 8003380:	1f0c      	subs	r4, r1, #4
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	da00      	bge.n	800338a <_free_r+0x12>
 8003388:	18e4      	adds	r4, r4, r3
 800338a:	0028      	movs	r0, r5
 800338c:	f000 f8e2 	bl	8003554 <__malloc_lock>
 8003390:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <_free_r+0x90>)
 8003392:	6813      	ldr	r3, [r2, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <_free_r+0x2c>
 8003398:	6063      	str	r3, [r4, #4]
 800339a:	6014      	str	r4, [r2, #0]
 800339c:	0028      	movs	r0, r5
 800339e:	f000 f8e1 	bl	8003564 <__malloc_unlock>
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
 80033a4:	42a3      	cmp	r3, r4
 80033a6:	d908      	bls.n	80033ba <_free_r+0x42>
 80033a8:	6820      	ldr	r0, [r4, #0]
 80033aa:	1821      	adds	r1, r4, r0
 80033ac:	428b      	cmp	r3, r1
 80033ae:	d1f3      	bne.n	8003398 <_free_r+0x20>
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	1809      	adds	r1, r1, r0
 80033b6:	6021      	str	r1, [r4, #0]
 80033b8:	e7ee      	b.n	8003398 <_free_r+0x20>
 80033ba:	001a      	movs	r2, r3
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <_free_r+0x4e>
 80033c2:	42a3      	cmp	r3, r4
 80033c4:	d9f9      	bls.n	80033ba <_free_r+0x42>
 80033c6:	6811      	ldr	r1, [r2, #0]
 80033c8:	1850      	adds	r0, r2, r1
 80033ca:	42a0      	cmp	r0, r4
 80033cc:	d10b      	bne.n	80033e6 <_free_r+0x6e>
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	1809      	adds	r1, r1, r0
 80033d2:	1850      	adds	r0, r2, r1
 80033d4:	6011      	str	r1, [r2, #0]
 80033d6:	4283      	cmp	r3, r0
 80033d8:	d1e0      	bne.n	800339c <_free_r+0x24>
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	1841      	adds	r1, r0, r1
 80033e0:	6011      	str	r1, [r2, #0]
 80033e2:	6053      	str	r3, [r2, #4]
 80033e4:	e7da      	b.n	800339c <_free_r+0x24>
 80033e6:	42a0      	cmp	r0, r4
 80033e8:	d902      	bls.n	80033f0 <_free_r+0x78>
 80033ea:	230c      	movs	r3, #12
 80033ec:	602b      	str	r3, [r5, #0]
 80033ee:	e7d5      	b.n	800339c <_free_r+0x24>
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	1821      	adds	r1, r4, r0
 80033f4:	428b      	cmp	r3, r1
 80033f6:	d103      	bne.n	8003400 <_free_r+0x88>
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	1809      	adds	r1, r1, r0
 80033fe:	6021      	str	r1, [r4, #0]
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	6054      	str	r4, [r2, #4]
 8003404:	e7ca      	b.n	800339c <_free_r+0x24>
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	20000548 	.word	0x20000548

0800340c <sbrk_aligned>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	4e0f      	ldr	r6, [pc, #60]	; (800344c <sbrk_aligned+0x40>)
 8003410:	000d      	movs	r5, r1
 8003412:	6831      	ldr	r1, [r6, #0]
 8003414:	0004      	movs	r4, r0
 8003416:	2900      	cmp	r1, #0
 8003418:	d102      	bne.n	8003420 <sbrk_aligned+0x14>
 800341a:	f000 fc4d 	bl	8003cb8 <_sbrk_r>
 800341e:	6030      	str	r0, [r6, #0]
 8003420:	0029      	movs	r1, r5
 8003422:	0020      	movs	r0, r4
 8003424:	f000 fc48 	bl	8003cb8 <_sbrk_r>
 8003428:	1c43      	adds	r3, r0, #1
 800342a:	d00a      	beq.n	8003442 <sbrk_aligned+0x36>
 800342c:	2303      	movs	r3, #3
 800342e:	1cc5      	adds	r5, r0, #3
 8003430:	439d      	bics	r5, r3
 8003432:	42a8      	cmp	r0, r5
 8003434:	d007      	beq.n	8003446 <sbrk_aligned+0x3a>
 8003436:	1a29      	subs	r1, r5, r0
 8003438:	0020      	movs	r0, r4
 800343a:	f000 fc3d 	bl	8003cb8 <_sbrk_r>
 800343e:	3001      	adds	r0, #1
 8003440:	d101      	bne.n	8003446 <sbrk_aligned+0x3a>
 8003442:	2501      	movs	r5, #1
 8003444:	426d      	negs	r5, r5
 8003446:	0028      	movs	r0, r5
 8003448:	bd70      	pop	{r4, r5, r6, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	2000054c 	.word	0x2000054c

08003450 <_malloc_r>:
 8003450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003452:	2203      	movs	r2, #3
 8003454:	1ccb      	adds	r3, r1, #3
 8003456:	4393      	bics	r3, r2
 8003458:	3308      	adds	r3, #8
 800345a:	0006      	movs	r6, r0
 800345c:	001f      	movs	r7, r3
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d238      	bcs.n	80034d4 <_malloc_r+0x84>
 8003462:	270c      	movs	r7, #12
 8003464:	42b9      	cmp	r1, r7
 8003466:	d837      	bhi.n	80034d8 <_malloc_r+0x88>
 8003468:	0030      	movs	r0, r6
 800346a:	f000 f873 	bl	8003554 <__malloc_lock>
 800346e:	4b38      	ldr	r3, [pc, #224]	; (8003550 <_malloc_r+0x100>)
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	001c      	movs	r4, r3
 8003476:	2c00      	cmp	r4, #0
 8003478:	d133      	bne.n	80034e2 <_malloc_r+0x92>
 800347a:	0039      	movs	r1, r7
 800347c:	0030      	movs	r0, r6
 800347e:	f7ff ffc5 	bl	800340c <sbrk_aligned>
 8003482:	0004      	movs	r4, r0
 8003484:	1c43      	adds	r3, r0, #1
 8003486:	d15e      	bne.n	8003546 <_malloc_r+0xf6>
 8003488:	9b00      	ldr	r3, [sp, #0]
 800348a:	681c      	ldr	r4, [r3, #0]
 800348c:	0025      	movs	r5, r4
 800348e:	2d00      	cmp	r5, #0
 8003490:	d14e      	bne.n	8003530 <_malloc_r+0xe0>
 8003492:	2c00      	cmp	r4, #0
 8003494:	d051      	beq.n	800353a <_malloc_r+0xea>
 8003496:	6823      	ldr	r3, [r4, #0]
 8003498:	0029      	movs	r1, r5
 800349a:	18e3      	adds	r3, r4, r3
 800349c:	0030      	movs	r0, r6
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	f000 fc0a 	bl	8003cb8 <_sbrk_r>
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	4283      	cmp	r3, r0
 80034a8:	d147      	bne.n	800353a <_malloc_r+0xea>
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	0030      	movs	r0, r6
 80034ae:	1aff      	subs	r7, r7, r3
 80034b0:	0039      	movs	r1, r7
 80034b2:	f7ff ffab 	bl	800340c <sbrk_aligned>
 80034b6:	3001      	adds	r0, #1
 80034b8:	d03f      	beq.n	800353a <_malloc_r+0xea>
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	19db      	adds	r3, r3, r7
 80034be:	6023      	str	r3, [r4, #0]
 80034c0:	9b00      	ldr	r3, [sp, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d040      	beq.n	800354a <_malloc_r+0xfa>
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	42a2      	cmp	r2, r4
 80034cc:	d133      	bne.n	8003536 <_malloc_r+0xe6>
 80034ce:	2200      	movs	r2, #0
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e014      	b.n	80034fe <_malloc_r+0xae>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	dac5      	bge.n	8003464 <_malloc_r+0x14>
 80034d8:	230c      	movs	r3, #12
 80034da:	2500      	movs	r5, #0
 80034dc:	6033      	str	r3, [r6, #0]
 80034de:	0028      	movs	r0, r5
 80034e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034e2:	6821      	ldr	r1, [r4, #0]
 80034e4:	1bc9      	subs	r1, r1, r7
 80034e6:	d420      	bmi.n	800352a <_malloc_r+0xda>
 80034e8:	290b      	cmp	r1, #11
 80034ea:	d918      	bls.n	800351e <_malloc_r+0xce>
 80034ec:	19e2      	adds	r2, r4, r7
 80034ee:	6027      	str	r7, [r4, #0]
 80034f0:	42a3      	cmp	r3, r4
 80034f2:	d112      	bne.n	800351a <_malloc_r+0xca>
 80034f4:	9b00      	ldr	r3, [sp, #0]
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	6863      	ldr	r3, [r4, #4]
 80034fa:	6011      	str	r1, [r2, #0]
 80034fc:	6053      	str	r3, [r2, #4]
 80034fe:	0030      	movs	r0, r6
 8003500:	0025      	movs	r5, r4
 8003502:	f000 f82f 	bl	8003564 <__malloc_unlock>
 8003506:	2207      	movs	r2, #7
 8003508:	350b      	adds	r5, #11
 800350a:	1d23      	adds	r3, r4, #4
 800350c:	4395      	bics	r5, r2
 800350e:	1aea      	subs	r2, r5, r3
 8003510:	429d      	cmp	r5, r3
 8003512:	d0e4      	beq.n	80034de <_malloc_r+0x8e>
 8003514:	1b5b      	subs	r3, r3, r5
 8003516:	50a3      	str	r3, [r4, r2]
 8003518:	e7e1      	b.n	80034de <_malloc_r+0x8e>
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	e7ec      	b.n	80034f8 <_malloc_r+0xa8>
 800351e:	6862      	ldr	r2, [r4, #4]
 8003520:	42a3      	cmp	r3, r4
 8003522:	d1d5      	bne.n	80034d0 <_malloc_r+0x80>
 8003524:	9b00      	ldr	r3, [sp, #0]
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e7e9      	b.n	80034fe <_malloc_r+0xae>
 800352a:	0023      	movs	r3, r4
 800352c:	6864      	ldr	r4, [r4, #4]
 800352e:	e7a2      	b.n	8003476 <_malloc_r+0x26>
 8003530:	002c      	movs	r4, r5
 8003532:	686d      	ldr	r5, [r5, #4]
 8003534:	e7ab      	b.n	800348e <_malloc_r+0x3e>
 8003536:	0013      	movs	r3, r2
 8003538:	e7c4      	b.n	80034c4 <_malloc_r+0x74>
 800353a:	230c      	movs	r3, #12
 800353c:	0030      	movs	r0, r6
 800353e:	6033      	str	r3, [r6, #0]
 8003540:	f000 f810 	bl	8003564 <__malloc_unlock>
 8003544:	e7cb      	b.n	80034de <_malloc_r+0x8e>
 8003546:	6027      	str	r7, [r4, #0]
 8003548:	e7d9      	b.n	80034fe <_malloc_r+0xae>
 800354a:	605b      	str	r3, [r3, #4]
 800354c:	deff      	udf	#255	; 0xff
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	20000548 	.word	0x20000548

08003554 <__malloc_lock>:
 8003554:	b510      	push	{r4, lr}
 8003556:	4802      	ldr	r0, [pc, #8]	; (8003560 <__malloc_lock+0xc>)
 8003558:	f7ff ff0c 	bl	8003374 <__retarget_lock_acquire_recursive>
 800355c:	bd10      	pop	{r4, pc}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	20000544 	.word	0x20000544

08003564 <__malloc_unlock>:
 8003564:	b510      	push	{r4, lr}
 8003566:	4802      	ldr	r0, [pc, #8]	; (8003570 <__malloc_unlock+0xc>)
 8003568:	f7ff ff05 	bl	8003376 <__retarget_lock_release_recursive>
 800356c:	bd10      	pop	{r4, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	20000544 	.word	0x20000544

08003574 <_sungetc_r>:
 8003574:	b570      	push	{r4, r5, r6, lr}
 8003576:	0014      	movs	r4, r2
 8003578:	1c4b      	adds	r3, r1, #1
 800357a:	d103      	bne.n	8003584 <_sungetc_r+0x10>
 800357c:	2501      	movs	r5, #1
 800357e:	426d      	negs	r5, r5
 8003580:	0028      	movs	r0, r5
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	8993      	ldrh	r3, [r2, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	4393      	bics	r3, r2
 800358a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	b2ce      	uxtb	r6, r1
 8003590:	6863      	ldr	r3, [r4, #4]
 8003592:	b2cd      	uxtb	r5, r1
 8003594:	2a00      	cmp	r2, #0
 8003596:	d010      	beq.n	80035ba <_sungetc_r+0x46>
 8003598:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800359a:	429a      	cmp	r2, r3
 800359c:	dd07      	ble.n	80035ae <_sungetc_r+0x3a>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	6023      	str	r3, [r4, #0]
 80035a4:	701e      	strb	r6, [r3, #0]
 80035a6:	6863      	ldr	r3, [r4, #4]
 80035a8:	3301      	adds	r3, #1
 80035aa:	6063      	str	r3, [r4, #4]
 80035ac:	e7e8      	b.n	8003580 <_sungetc_r+0xc>
 80035ae:	0021      	movs	r1, r4
 80035b0:	f000 fb44 	bl	8003c3c <__submore>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d0f2      	beq.n	800359e <_sungetc_r+0x2a>
 80035b8:	e7e0      	b.n	800357c <_sungetc_r+0x8>
 80035ba:	6921      	ldr	r1, [r4, #16]
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	2900      	cmp	r1, #0
 80035c0:	d007      	beq.n	80035d2 <_sungetc_r+0x5e>
 80035c2:	4291      	cmp	r1, r2
 80035c4:	d205      	bcs.n	80035d2 <_sungetc_r+0x5e>
 80035c6:	1e51      	subs	r1, r2, #1
 80035c8:	7808      	ldrb	r0, [r1, #0]
 80035ca:	42a8      	cmp	r0, r5
 80035cc:	d101      	bne.n	80035d2 <_sungetc_r+0x5e>
 80035ce:	6021      	str	r1, [r4, #0]
 80035d0:	e7ea      	b.n	80035a8 <_sungetc_r+0x34>
 80035d2:	6423      	str	r3, [r4, #64]	; 0x40
 80035d4:	0023      	movs	r3, r4
 80035d6:	3344      	adds	r3, #68	; 0x44
 80035d8:	6363      	str	r3, [r4, #52]	; 0x34
 80035da:	2303      	movs	r3, #3
 80035dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80035de:	0023      	movs	r3, r4
 80035e0:	3346      	adds	r3, #70	; 0x46
 80035e2:	63e2      	str	r2, [r4, #60]	; 0x3c
 80035e4:	701e      	strb	r6, [r3, #0]
 80035e6:	6023      	str	r3, [r4, #0]
 80035e8:	2301      	movs	r3, #1
 80035ea:	e7de      	b.n	80035aa <_sungetc_r+0x36>

080035ec <__ssrefill_r>:
 80035ec:	b510      	push	{r4, lr}
 80035ee:	000c      	movs	r4, r1
 80035f0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80035f2:	2900      	cmp	r1, #0
 80035f4:	d00e      	beq.n	8003614 <__ssrefill_r+0x28>
 80035f6:	0023      	movs	r3, r4
 80035f8:	3344      	adds	r3, #68	; 0x44
 80035fa:	4299      	cmp	r1, r3
 80035fc:	d001      	beq.n	8003602 <__ssrefill_r+0x16>
 80035fe:	f7ff febb 	bl	8003378 <_free_r>
 8003602:	2000      	movs	r0, #0
 8003604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003606:	6360      	str	r0, [r4, #52]	; 0x34
 8003608:	6063      	str	r3, [r4, #4]
 800360a:	4283      	cmp	r3, r0
 800360c:	d002      	beq.n	8003614 <__ssrefill_r+0x28>
 800360e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	bd10      	pop	{r4, pc}
 8003614:	6923      	ldr	r3, [r4, #16]
 8003616:	2001      	movs	r0, #1
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	2300      	movs	r3, #0
 800361c:	89a2      	ldrh	r2, [r4, #12]
 800361e:	6063      	str	r3, [r4, #4]
 8003620:	3320      	adds	r3, #32
 8003622:	4313      	orrs	r3, r2
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	4240      	negs	r0, r0
 8003628:	e7f3      	b.n	8003612 <__ssrefill_r+0x26>
	...

0800362c <__ssvfiscanf_r>:
 800362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362e:	4cae      	ldr	r4, [pc, #696]	; (80038e8 <__ssvfiscanf_r+0x2bc>)
 8003630:	0006      	movs	r6, r0
 8003632:	44a5      	add	sp, r4
 8003634:	000c      	movs	r4, r1
 8003636:	2100      	movs	r1, #0
 8003638:	20be      	movs	r0, #190	; 0xbe
 800363a:	9146      	str	r1, [sp, #280]	; 0x118
 800363c:	9147      	str	r1, [sp, #284]	; 0x11c
 800363e:	a903      	add	r1, sp, #12
 8003640:	9148      	str	r1, [sp, #288]	; 0x120
 8003642:	49aa      	ldr	r1, [pc, #680]	; (80038ec <__ssvfiscanf_r+0x2c0>)
 8003644:	0040      	lsls	r0, r0, #1
 8003646:	ad43      	add	r5, sp, #268	; 0x10c
 8003648:	5029      	str	r1, [r5, r0]
 800364a:	25c0      	movs	r5, #192	; 0xc0
 800364c:	49a8      	ldr	r1, [pc, #672]	; (80038f0 <__ssvfiscanf_r+0x2c4>)
 800364e:	006d      	lsls	r5, r5, #1
 8003650:	a843      	add	r0, sp, #268	; 0x10c
 8003652:	5141      	str	r1, [r0, r5]
 8003654:	9302      	str	r3, [sp, #8]
 8003656:	7815      	ldrb	r5, [r2, #0]
 8003658:	2d00      	cmp	r5, #0
 800365a:	d100      	bne.n	800365e <__ssvfiscanf_r+0x32>
 800365c:	e141      	b.n	80038e2 <__ssvfiscanf_r+0x2b6>
 800365e:	4ba5      	ldr	r3, [pc, #660]	; (80038f4 <__ssvfiscanf_r+0x2c8>)
 8003660:	2008      	movs	r0, #8
 8003662:	5d59      	ldrb	r1, [r3, r5]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	2308      	movs	r3, #8
 8003668:	1c57      	adds	r7, r2, #1
 800366a:	400b      	ands	r3, r1
 800366c:	4201      	tst	r1, r0
 800366e:	d01e      	beq.n	80036ae <__ssvfiscanf_r+0x82>
 8003670:	6863      	ldr	r3, [r4, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	dd11      	ble.n	800369a <__ssvfiscanf_r+0x6e>
 8003676:	6823      	ldr	r3, [r4, #0]
 8003678:	9900      	ldr	r1, [sp, #0]
 800367a:	781a      	ldrb	r2, [r3, #0]
 800367c:	5c8a      	ldrb	r2, [r1, r2]
 800367e:	2108      	movs	r1, #8
 8003680:	420a      	tst	r2, r1
 8003682:	d101      	bne.n	8003688 <__ssvfiscanf_r+0x5c>
 8003684:	003a      	movs	r2, r7
 8003686:	e7e6      	b.n	8003656 <__ssvfiscanf_r+0x2a>
 8003688:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800368a:	3301      	adds	r3, #1
 800368c:	3201      	adds	r2, #1
 800368e:	9247      	str	r2, [sp, #284]	; 0x11c
 8003690:	6862      	ldr	r2, [r4, #4]
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	3a01      	subs	r2, #1
 8003696:	6062      	str	r2, [r4, #4]
 8003698:	e7ea      	b.n	8003670 <__ssvfiscanf_r+0x44>
 800369a:	22c0      	movs	r2, #192	; 0xc0
 800369c:	ab43      	add	r3, sp, #268	; 0x10c
 800369e:	0052      	lsls	r2, r2, #1
 80036a0:	0021      	movs	r1, r4
 80036a2:	0030      	movs	r0, r6
 80036a4:	589b      	ldr	r3, [r3, r2]
 80036a6:	4798      	blx	r3
 80036a8:	2800      	cmp	r0, #0
 80036aa:	d0e4      	beq.n	8003676 <__ssvfiscanf_r+0x4a>
 80036ac:	e7ea      	b.n	8003684 <__ssvfiscanf_r+0x58>
 80036ae:	2d25      	cmp	r5, #37	; 0x25
 80036b0:	d162      	bne.n	8003778 <__ssvfiscanf_r+0x14c>
 80036b2:	9345      	str	r3, [sp, #276]	; 0x114
 80036b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80036b6:	7853      	ldrb	r3, [r2, #1]
 80036b8:	2b2a      	cmp	r3, #42	; 0x2a
 80036ba:	d102      	bne.n	80036c2 <__ssvfiscanf_r+0x96>
 80036bc:	3b1a      	subs	r3, #26
 80036be:	9343      	str	r3, [sp, #268]	; 0x10c
 80036c0:	1c97      	adds	r7, r2, #2
 80036c2:	003d      	movs	r5, r7
 80036c4:	220a      	movs	r2, #10
 80036c6:	7829      	ldrb	r1, [r5, #0]
 80036c8:	1c6b      	adds	r3, r5, #1
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	000b      	movs	r3, r1
 80036ce:	3b30      	subs	r3, #48	; 0x30
 80036d0:	2b09      	cmp	r3, #9
 80036d2:	d91e      	bls.n	8003712 <__ssvfiscanf_r+0xe6>
 80036d4:	4f88      	ldr	r7, [pc, #544]	; (80038f8 <__ssvfiscanf_r+0x2cc>)
 80036d6:	2203      	movs	r2, #3
 80036d8:	0038      	movs	r0, r7
 80036da:	f000 faff 	bl	8003cdc <memchr>
 80036de:	2800      	cmp	r0, #0
 80036e0:	d006      	beq.n	80036f0 <__ssvfiscanf_r+0xc4>
 80036e2:	2301      	movs	r3, #1
 80036e4:	1bc0      	subs	r0, r0, r7
 80036e6:	4083      	lsls	r3, r0
 80036e8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80036ea:	9d01      	ldr	r5, [sp, #4]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	9343      	str	r3, [sp, #268]	; 0x10c
 80036f0:	1c6f      	adds	r7, r5, #1
 80036f2:	782d      	ldrb	r5, [r5, #0]
 80036f4:	2d78      	cmp	r5, #120	; 0x78
 80036f6:	d807      	bhi.n	8003708 <__ssvfiscanf_r+0xdc>
 80036f8:	2d57      	cmp	r5, #87	; 0x57
 80036fa:	d811      	bhi.n	8003720 <__ssvfiscanf_r+0xf4>
 80036fc:	2d25      	cmp	r5, #37	; 0x25
 80036fe:	d03b      	beq.n	8003778 <__ssvfiscanf_r+0x14c>
 8003700:	d835      	bhi.n	800376e <__ssvfiscanf_r+0x142>
 8003702:	2d00      	cmp	r5, #0
 8003704:	d100      	bne.n	8003708 <__ssvfiscanf_r+0xdc>
 8003706:	e0e9      	b.n	80038dc <__ssvfiscanf_r+0x2b0>
 8003708:	2303      	movs	r3, #3
 800370a:	9349      	str	r3, [sp, #292]	; 0x124
 800370c:	3307      	adds	r3, #7
 800370e:	9344      	str	r3, [sp, #272]	; 0x110
 8003710:	e06d      	b.n	80037ee <__ssvfiscanf_r+0x1c2>
 8003712:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003714:	9d01      	ldr	r5, [sp, #4]
 8003716:	4353      	muls	r3, r2
 8003718:	3b30      	subs	r3, #48	; 0x30
 800371a:	185b      	adds	r3, r3, r1
 800371c:	9345      	str	r3, [sp, #276]	; 0x114
 800371e:	e7d2      	b.n	80036c6 <__ssvfiscanf_r+0x9a>
 8003720:	0028      	movs	r0, r5
 8003722:	3858      	subs	r0, #88	; 0x58
 8003724:	2820      	cmp	r0, #32
 8003726:	d8ef      	bhi.n	8003708 <__ssvfiscanf_r+0xdc>
 8003728:	f7fc fcf4 	bl	8000114 <__gnu_thumb1_case_shi>
 800372c:	ffee004d 	.word	0xffee004d
 8003730:	007fffee 	.word	0x007fffee
 8003734:	ffeeffee 	.word	0xffeeffee
 8003738:	ffeeffee 	.word	0xffeeffee
 800373c:	ffeeffee 	.word	0xffeeffee
 8003740:	008affee 	.word	0x008affee
 8003744:	0024007d 	.word	0x0024007d
 8003748:	00240024 	.word	0x00240024
 800374c:	0059ffee 	.word	0x0059ffee
 8003750:	ffeeffee 	.word	0xffeeffee
 8003754:	ffeeffee 	.word	0xffeeffee
 8003758:	005d0092 	.word	0x005d0092
 800375c:	ffee0049 	.word	0xffee0049
 8003760:	0090ffee 	.word	0x0090ffee
 8003764:	007dffee 	.word	0x007dffee
 8003768:	ffeeffee 	.word	0xffeeffee
 800376c:	004d      	.short	0x004d
 800376e:	3d45      	subs	r5, #69	; 0x45
 8003770:	2d02      	cmp	r5, #2
 8003772:	d8c9      	bhi.n	8003708 <__ssvfiscanf_r+0xdc>
 8003774:	2305      	movs	r3, #5
 8003776:	e039      	b.n	80037ec <__ssvfiscanf_r+0x1c0>
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	dd0d      	ble.n	800379a <__ssvfiscanf_r+0x16e>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	42aa      	cmp	r2, r5
 8003784:	d000      	beq.n	8003788 <__ssvfiscanf_r+0x15c>
 8003786:	e0ac      	b.n	80038e2 <__ssvfiscanf_r+0x2b6>
 8003788:	3301      	adds	r3, #1
 800378a:	6862      	ldr	r2, [r4, #4]
 800378c:	6023      	str	r3, [r4, #0]
 800378e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003790:	3a01      	subs	r2, #1
 8003792:	3301      	adds	r3, #1
 8003794:	6062      	str	r2, [r4, #4]
 8003796:	9347      	str	r3, [sp, #284]	; 0x11c
 8003798:	e774      	b.n	8003684 <__ssvfiscanf_r+0x58>
 800379a:	22c0      	movs	r2, #192	; 0xc0
 800379c:	ab43      	add	r3, sp, #268	; 0x10c
 800379e:	0052      	lsls	r2, r2, #1
 80037a0:	0021      	movs	r1, r4
 80037a2:	0030      	movs	r0, r6
 80037a4:	589b      	ldr	r3, [r3, r2]
 80037a6:	4798      	blx	r3
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d0e8      	beq.n	800377e <__ssvfiscanf_r+0x152>
 80037ac:	9846      	ldr	r0, [sp, #280]	; 0x118
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d000      	beq.n	80037b4 <__ssvfiscanf_r+0x188>
 80037b2:	e08f      	b.n	80038d4 <__ssvfiscanf_r+0x2a8>
 80037b4:	3801      	subs	r0, #1
 80037b6:	23a5      	movs	r3, #165	; 0xa5
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	449d      	add	sp, r3
 80037bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037be:	2320      	movs	r3, #32
 80037c0:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80037c2:	4313      	orrs	r3, r2
 80037c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80037c6:	2380      	movs	r3, #128	; 0x80
 80037c8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4313      	orrs	r3, r2
 80037ce:	9343      	str	r3, [sp, #268]	; 0x10c
 80037d0:	2310      	movs	r3, #16
 80037d2:	9344      	str	r3, [sp, #272]	; 0x110
 80037d4:	236e      	movs	r3, #110	; 0x6e
 80037d6:	42ab      	cmp	r3, r5
 80037d8:	419b      	sbcs	r3, r3
 80037da:	425b      	negs	r3, r3
 80037dc:	e001      	b.n	80037e2 <__ssvfiscanf_r+0x1b6>
 80037de:	2300      	movs	r3, #0
 80037e0:	9344      	str	r3, [sp, #272]	; 0x110
 80037e2:	3303      	adds	r3, #3
 80037e4:	e002      	b.n	80037ec <__ssvfiscanf_r+0x1c0>
 80037e6:	2308      	movs	r3, #8
 80037e8:	9344      	str	r3, [sp, #272]	; 0x110
 80037ea:	3b04      	subs	r3, #4
 80037ec:	9349      	str	r3, [sp, #292]	; 0x124
 80037ee:	6863      	ldr	r3, [r4, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dd3c      	ble.n	800386e <__ssvfiscanf_r+0x242>
 80037f4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80037f6:	065b      	lsls	r3, r3, #25
 80037f8:	d406      	bmi.n	8003808 <__ssvfiscanf_r+0x1dc>
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	9900      	ldr	r1, [sp, #0]
 80037fe:	781a      	ldrb	r2, [r3, #0]
 8003800:	5c8a      	ldrb	r2, [r1, r2]
 8003802:	2108      	movs	r1, #8
 8003804:	420a      	tst	r2, r1
 8003806:	d13c      	bne.n	8003882 <__ssvfiscanf_r+0x256>
 8003808:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800380a:	2b02      	cmp	r3, #2
 800380c:	dc4e      	bgt.n	80038ac <__ssvfiscanf_r+0x280>
 800380e:	0022      	movs	r2, r4
 8003810:	0030      	movs	r0, r6
 8003812:	ab02      	add	r3, sp, #8
 8003814:	a943      	add	r1, sp, #268	; 0x10c
 8003816:	f000 f873 	bl	8003900 <_scanf_chars>
 800381a:	2801      	cmp	r0, #1
 800381c:	d061      	beq.n	80038e2 <__ssvfiscanf_r+0x2b6>
 800381e:	2802      	cmp	r0, #2
 8003820:	d000      	beq.n	8003824 <__ssvfiscanf_r+0x1f8>
 8003822:	e72f      	b.n	8003684 <__ssvfiscanf_r+0x58>
 8003824:	e7c2      	b.n	80037ac <__ssvfiscanf_r+0x180>
 8003826:	230a      	movs	r3, #10
 8003828:	e7d3      	b.n	80037d2 <__ssvfiscanf_r+0x1a6>
 800382a:	0039      	movs	r1, r7
 800382c:	a803      	add	r0, sp, #12
 800382e:	f000 f9c9 	bl	8003bc4 <__sccl>
 8003832:	2340      	movs	r3, #64	; 0x40
 8003834:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003836:	0007      	movs	r7, r0
 8003838:	4313      	orrs	r3, r2
 800383a:	9343      	str	r3, [sp, #268]	; 0x10c
 800383c:	2301      	movs	r3, #1
 800383e:	e7d5      	b.n	80037ec <__ssvfiscanf_r+0x1c0>
 8003840:	2340      	movs	r3, #64	; 0x40
 8003842:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003844:	4313      	orrs	r3, r2
 8003846:	9343      	str	r3, [sp, #268]	; 0x10c
 8003848:	2300      	movs	r3, #0
 800384a:	e7cf      	b.n	80037ec <__ssvfiscanf_r+0x1c0>
 800384c:	2302      	movs	r3, #2
 800384e:	e7cd      	b.n	80037ec <__ssvfiscanf_r+0x1c0>
 8003850:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8003852:	06d3      	lsls	r3, r2, #27
 8003854:	d500      	bpl.n	8003858 <__ssvfiscanf_r+0x22c>
 8003856:	e715      	b.n	8003684 <__ssvfiscanf_r+0x58>
 8003858:	9b02      	ldr	r3, [sp, #8]
 800385a:	9947      	ldr	r1, [sp, #284]	; 0x11c
 800385c:	1d18      	adds	r0, r3, #4
 800385e:	9002      	str	r0, [sp, #8]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	07d5      	lsls	r5, r2, #31
 8003864:	d501      	bpl.n	800386a <__ssvfiscanf_r+0x23e>
 8003866:	8019      	strh	r1, [r3, #0]
 8003868:	e70c      	b.n	8003684 <__ssvfiscanf_r+0x58>
 800386a:	6019      	str	r1, [r3, #0]
 800386c:	e70a      	b.n	8003684 <__ssvfiscanf_r+0x58>
 800386e:	22c0      	movs	r2, #192	; 0xc0
 8003870:	ab43      	add	r3, sp, #268	; 0x10c
 8003872:	0052      	lsls	r2, r2, #1
 8003874:	0021      	movs	r1, r4
 8003876:	0030      	movs	r0, r6
 8003878:	589b      	ldr	r3, [r3, r2]
 800387a:	4798      	blx	r3
 800387c:	2800      	cmp	r0, #0
 800387e:	d0b9      	beq.n	80037f4 <__ssvfiscanf_r+0x1c8>
 8003880:	e794      	b.n	80037ac <__ssvfiscanf_r+0x180>
 8003882:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8003884:	3201      	adds	r2, #1
 8003886:	9247      	str	r2, [sp, #284]	; 0x11c
 8003888:	6862      	ldr	r2, [r4, #4]
 800388a:	3a01      	subs	r2, #1
 800388c:	6062      	str	r2, [r4, #4]
 800388e:	2a00      	cmp	r2, #0
 8003890:	dd02      	ble.n	8003898 <__ssvfiscanf_r+0x26c>
 8003892:	3301      	adds	r3, #1
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	e7b0      	b.n	80037fa <__ssvfiscanf_r+0x1ce>
 8003898:	22c0      	movs	r2, #192	; 0xc0
 800389a:	ab43      	add	r3, sp, #268	; 0x10c
 800389c:	0052      	lsls	r2, r2, #1
 800389e:	0021      	movs	r1, r4
 80038a0:	0030      	movs	r0, r6
 80038a2:	589b      	ldr	r3, [r3, r2]
 80038a4:	4798      	blx	r3
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d0a7      	beq.n	80037fa <__ssvfiscanf_r+0x1ce>
 80038aa:	e77f      	b.n	80037ac <__ssvfiscanf_r+0x180>
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	dc06      	bgt.n	80038be <__ssvfiscanf_r+0x292>
 80038b0:	0022      	movs	r2, r4
 80038b2:	0030      	movs	r0, r6
 80038b4:	ab02      	add	r3, sp, #8
 80038b6:	a943      	add	r1, sp, #268	; 0x10c
 80038b8:	f000 f880 	bl	80039bc <_scanf_i>
 80038bc:	e7ad      	b.n	800381a <__ssvfiscanf_r+0x1ee>
 80038be:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <__ssvfiscanf_r+0x2d0>)
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d100      	bne.n	80038c6 <__ssvfiscanf_r+0x29a>
 80038c4:	e6de      	b.n	8003684 <__ssvfiscanf_r+0x58>
 80038c6:	0022      	movs	r2, r4
 80038c8:	0030      	movs	r0, r6
 80038ca:	ab02      	add	r3, sp, #8
 80038cc:	a943      	add	r1, sp, #268	; 0x10c
 80038ce:	e000      	b.n	80038d2 <__ssvfiscanf_r+0x2a6>
 80038d0:	bf00      	nop
 80038d2:	e7a2      	b.n	800381a <__ssvfiscanf_r+0x1ee>
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	065b      	lsls	r3, r3, #25
 80038d8:	d400      	bmi.n	80038dc <__ssvfiscanf_r+0x2b0>
 80038da:	e76c      	b.n	80037b6 <__ssvfiscanf_r+0x18a>
 80038dc:	2001      	movs	r0, #1
 80038de:	4240      	negs	r0, r0
 80038e0:	e769      	b.n	80037b6 <__ssvfiscanf_r+0x18a>
 80038e2:	9846      	ldr	r0, [sp, #280]	; 0x118
 80038e4:	e767      	b.n	80037b6 <__ssvfiscanf_r+0x18a>
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	fffffd6c 	.word	0xfffffd6c
 80038ec:	08003575 	.word	0x08003575
 80038f0:	080035ed 	.word	0x080035ed
 80038f4:	08004014 	.word	0x08004014
 80038f8:	08003ff4 	.word	0x08003ff4
 80038fc:	00000000 	.word	0x00000000

08003900 <_scanf_chars>:
 8003900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003902:	0015      	movs	r5, r2
 8003904:	688a      	ldr	r2, [r1, #8]
 8003906:	000c      	movs	r4, r1
 8003908:	9001      	str	r0, [sp, #4]
 800390a:	2a00      	cmp	r2, #0
 800390c:	d105      	bne.n	800391a <_scanf_chars+0x1a>
 800390e:	6989      	ldr	r1, [r1, #24]
 8003910:	3201      	adds	r2, #1
 8003912:	2900      	cmp	r1, #0
 8003914:	d000      	beq.n	8003918 <_scanf_chars+0x18>
 8003916:	3a02      	subs	r2, #2
 8003918:	60a2      	str	r2, [r4, #8]
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	06d2      	lsls	r2, r2, #27
 800391e:	d403      	bmi.n	8003928 <_scanf_chars+0x28>
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	1d11      	adds	r1, r2, #4
 8003924:	6019      	str	r1, [r3, #0]
 8003926:	6817      	ldr	r7, [r2, #0]
 8003928:	2600      	movs	r6, #0
 800392a:	69a0      	ldr	r0, [r4, #24]
 800392c:	2800      	cmp	r0, #0
 800392e:	d013      	beq.n	8003958 <_scanf_chars+0x58>
 8003930:	2801      	cmp	r0, #1
 8003932:	d108      	bne.n	8003946 <_scanf_chars+0x46>
 8003934:	682b      	ldr	r3, [r5, #0]
 8003936:	6962      	ldr	r2, [r4, #20]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	5cd3      	ldrb	r3, [r2, r3]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <_scanf_chars+0x58>
 8003940:	2e00      	cmp	r6, #0
 8003942:	d038      	beq.n	80039b6 <_scanf_chars+0xb6>
 8003944:	e026      	b.n	8003994 <_scanf_chars+0x94>
 8003946:	2802      	cmp	r0, #2
 8003948:	d124      	bne.n	8003994 <_scanf_chars+0x94>
 800394a:	682b      	ldr	r3, [r5, #0]
 800394c:	4a1a      	ldr	r2, [pc, #104]	; (80039b8 <_scanf_chars+0xb8>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	5cd3      	ldrb	r3, [r2, r3]
 8003952:	2208      	movs	r2, #8
 8003954:	4213      	tst	r3, r2
 8003956:	d11d      	bne.n	8003994 <_scanf_chars+0x94>
 8003958:	2210      	movs	r2, #16
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	3601      	adds	r6, #1
 800395e:	4213      	tst	r3, r2
 8003960:	d103      	bne.n	800396a <_scanf_chars+0x6a>
 8003962:	682b      	ldr	r3, [r5, #0]
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	703b      	strb	r3, [r7, #0]
 8003968:	3701      	adds	r7, #1
 800396a:	682a      	ldr	r2, [r5, #0]
 800396c:	686b      	ldr	r3, [r5, #4]
 800396e:	3201      	adds	r2, #1
 8003970:	602a      	str	r2, [r5, #0]
 8003972:	68a2      	ldr	r2, [r4, #8]
 8003974:	3b01      	subs	r3, #1
 8003976:	3a01      	subs	r2, #1
 8003978:	606b      	str	r3, [r5, #4]
 800397a:	60a2      	str	r2, [r4, #8]
 800397c:	2a00      	cmp	r2, #0
 800397e:	d009      	beq.n	8003994 <_scanf_chars+0x94>
 8003980:	2b00      	cmp	r3, #0
 8003982:	dcd2      	bgt.n	800392a <_scanf_chars+0x2a>
 8003984:	23c0      	movs	r3, #192	; 0xc0
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	0029      	movs	r1, r5
 800398a:	58e3      	ldr	r3, [r4, r3]
 800398c:	9801      	ldr	r0, [sp, #4]
 800398e:	4798      	blx	r3
 8003990:	2800      	cmp	r0, #0
 8003992:	d0ca      	beq.n	800392a <_scanf_chars+0x2a>
 8003994:	6822      	ldr	r2, [r4, #0]
 8003996:	2310      	movs	r3, #16
 8003998:	0011      	movs	r1, r2
 800399a:	4019      	ands	r1, r3
 800399c:	421a      	tst	r2, r3
 800399e:	d106      	bne.n	80039ae <_scanf_chars+0xae>
 80039a0:	68e3      	ldr	r3, [r4, #12]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60e3      	str	r3, [r4, #12]
 80039a6:	69a3      	ldr	r3, [r4, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d000      	beq.n	80039ae <_scanf_chars+0xae>
 80039ac:	7039      	strb	r1, [r7, #0]
 80039ae:	2000      	movs	r0, #0
 80039b0:	6923      	ldr	r3, [r4, #16]
 80039b2:	199b      	adds	r3, r3, r6
 80039b4:	6123      	str	r3, [r4, #16]
 80039b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039b8:	08004014 	.word	0x08004014

080039bc <_scanf_i>:
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b08b      	sub	sp, #44	; 0x2c
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	4b7a      	ldr	r3, [pc, #488]	; (8003bac <_scanf_i+0x1f0>)
 80039c4:	0016      	movs	r6, r2
 80039c6:	9004      	str	r0, [sp, #16]
 80039c8:	aa07      	add	r2, sp, #28
 80039ca:	cba1      	ldmia	r3!, {r0, r5, r7}
 80039cc:	c2a1      	stmia	r2!, {r0, r5, r7}
 80039ce:	4a78      	ldr	r2, [pc, #480]	; (8003bb0 <_scanf_i+0x1f4>)
 80039d0:	698b      	ldr	r3, [r1, #24]
 80039d2:	000c      	movs	r4, r1
 80039d4:	9205      	str	r2, [sp, #20]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d001      	beq.n	80039de <_scanf_i+0x22>
 80039da:	4b76      	ldr	r3, [pc, #472]	; (8003bb4 <_scanf_i+0x1f8>)
 80039dc:	9305      	str	r3, [sp, #20]
 80039de:	22ae      	movs	r2, #174	; 0xae
 80039e0:	2000      	movs	r0, #0
 80039e2:	68a3      	ldr	r3, [r4, #8]
 80039e4:	0052      	lsls	r2, r2, #1
 80039e6:	1e59      	subs	r1, r3, #1
 80039e8:	9003      	str	r0, [sp, #12]
 80039ea:	4291      	cmp	r1, r2
 80039ec:	d905      	bls.n	80039fa <_scanf_i+0x3e>
 80039ee:	3b5e      	subs	r3, #94	; 0x5e
 80039f0:	3bff      	subs	r3, #255	; 0xff
 80039f2:	9303      	str	r3, [sp, #12]
 80039f4:	235e      	movs	r3, #94	; 0x5e
 80039f6:	33ff      	adds	r3, #255	; 0xff
 80039f8:	60a3      	str	r3, [r4, #8]
 80039fa:	0023      	movs	r3, r4
 80039fc:	331c      	adds	r3, #28
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	23d0      	movs	r3, #208	; 0xd0
 8003a02:	2700      	movs	r7, #0
 8003a04:	6822      	ldr	r2, [r4, #0]
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	9b00      	ldr	r3, [sp, #0]
 8003a0e:	9302      	str	r3, [sp, #8]
 8003a10:	6833      	ldr	r3, [r6, #0]
 8003a12:	a807      	add	r0, sp, #28
 8003a14:	7819      	ldrb	r1, [r3, #0]
 8003a16:	00bb      	lsls	r3, r7, #2
 8003a18:	2202      	movs	r2, #2
 8003a1a:	5818      	ldr	r0, [r3, r0]
 8003a1c:	f000 f95e 	bl	8003cdc <memchr>
 8003a20:	2800      	cmp	r0, #0
 8003a22:	d02a      	beq.n	8003a7a <_scanf_i+0xbe>
 8003a24:	2f01      	cmp	r7, #1
 8003a26:	d161      	bne.n	8003aec <_scanf_i+0x130>
 8003a28:	6863      	ldr	r3, [r4, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <_scanf_i+0x80>
 8003a2e:	3308      	adds	r3, #8
 8003a30:	6822      	ldr	r2, [r4, #0]
 8003a32:	6063      	str	r3, [r4, #4]
 8003a34:	33f9      	adds	r3, #249	; 0xf9
 8003a36:	33ff      	adds	r3, #255	; 0xff
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	4a5e      	ldr	r2, [pc, #376]	; (8003bb8 <_scanf_i+0x1fc>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	68a3      	ldr	r3, [r4, #8]
 8003a46:	1e5a      	subs	r2, r3, #1
 8003a48:	60a2      	str	r2, [r4, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d015      	beq.n	8003a7a <_scanf_i+0xbe>
 8003a4e:	6833      	ldr	r3, [r6, #0]
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	6032      	str	r2, [r6, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	9a02      	ldr	r2, [sp, #8]
 8003a58:	7013      	strb	r3, [r2, #0]
 8003a5a:	6873      	ldr	r3, [r6, #4]
 8003a5c:	1c55      	adds	r5, r2, #1
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	6073      	str	r3, [r6, #4]
 8003a62:	9502      	str	r5, [sp, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	dc08      	bgt.n	8003a7a <_scanf_i+0xbe>
 8003a68:	23c0      	movs	r3, #192	; 0xc0
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	0031      	movs	r1, r6
 8003a6e:	58e3      	ldr	r3, [r4, r3]
 8003a70:	9804      	ldr	r0, [sp, #16]
 8003a72:	4798      	blx	r3
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d000      	beq.n	8003a7a <_scanf_i+0xbe>
 8003a78:	e080      	b.n	8003b7c <_scanf_i+0x1c0>
 8003a7a:	3701      	adds	r7, #1
 8003a7c:	2f03      	cmp	r7, #3
 8003a7e:	d1c7      	bne.n	8003a10 <_scanf_i+0x54>
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <_scanf_i+0xce>
 8003a86:	330a      	adds	r3, #10
 8003a88:	6063      	str	r3, [r4, #4]
 8003a8a:	2110      	movs	r1, #16
 8003a8c:	2700      	movs	r7, #0
 8003a8e:	6863      	ldr	r3, [r4, #4]
 8003a90:	6960      	ldr	r0, [r4, #20]
 8003a92:	1ac9      	subs	r1, r1, r3
 8003a94:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <_scanf_i+0x200>)
 8003a96:	18c9      	adds	r1, r1, r3
 8003a98:	f000 f894 	bl	8003bc4 <__sccl>
 8003a9c:	9d02      	ldr	r5, [sp, #8]
 8003a9e:	68a3      	ldr	r3, [r4, #8]
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	9302      	str	r3, [sp, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d040      	beq.n	8003b2a <_scanf_i+0x16e>
 8003aa8:	6831      	ldr	r1, [r6, #0]
 8003aaa:	6963      	ldr	r3, [r4, #20]
 8003aac:	780a      	ldrb	r2, [r1, #0]
 8003aae:	5c9b      	ldrb	r3, [r3, r2]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d03a      	beq.n	8003b2a <_scanf_i+0x16e>
 8003ab4:	2a30      	cmp	r2, #48	; 0x30
 8003ab6:	d129      	bne.n	8003b0c <_scanf_i+0x150>
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	4218      	tst	r0, r3
 8003abe:	d025      	beq.n	8003b0c <_scanf_i+0x150>
 8003ac0:	9b03      	ldr	r3, [sp, #12]
 8003ac2:	3701      	adds	r7, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <_scanf_i+0x118>
 8003ac8:	001a      	movs	r2, r3
 8003aca:	9b02      	ldr	r3, [sp, #8]
 8003acc:	3a01      	subs	r2, #1
 8003ace:	3301      	adds	r3, #1
 8003ad0:	9203      	str	r2, [sp, #12]
 8003ad2:	60a3      	str	r3, [r4, #8]
 8003ad4:	6873      	ldr	r3, [r6, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	6073      	str	r3, [r6, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	dd1d      	ble.n	8003b1a <_scanf_i+0x15e>
 8003ade:	6833      	ldr	r3, [r6, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	6033      	str	r3, [r6, #0]
 8003ae4:	68a3      	ldr	r3, [r4, #8]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	60a3      	str	r3, [r4, #8]
 8003aea:	e7d8      	b.n	8003a9e <_scanf_i+0xe2>
 8003aec:	2f02      	cmp	r7, #2
 8003aee:	d1a9      	bne.n	8003a44 <_scanf_i+0x88>
 8003af0:	21c0      	movs	r1, #192	; 0xc0
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	00c9      	lsls	r1, r1, #3
 8003af8:	4011      	ands	r1, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4299      	cmp	r1, r3
 8003afe:	d1bf      	bne.n	8003a80 <_scanf_i+0xc4>
 8003b00:	3bf1      	subs	r3, #241	; 0xf1
 8003b02:	3bff      	subs	r3, #255	; 0xff
 8003b04:	6063      	str	r3, [r4, #4]
 8003b06:	33f0      	adds	r3, #240	; 0xf0
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	e79a      	b.n	8003a42 <_scanf_i+0x86>
 8003b0c:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <_scanf_i+0x204>)
 8003b0e:	4003      	ands	r3, r0
 8003b10:	6023      	str	r3, [r4, #0]
 8003b12:	780b      	ldrb	r3, [r1, #0]
 8003b14:	702b      	strb	r3, [r5, #0]
 8003b16:	3501      	adds	r5, #1
 8003b18:	e7dc      	b.n	8003ad4 <_scanf_i+0x118>
 8003b1a:	23c0      	movs	r3, #192	; 0xc0
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	0031      	movs	r1, r6
 8003b20:	58e3      	ldr	r3, [r4, r3]
 8003b22:	9804      	ldr	r0, [sp, #16]
 8003b24:	4798      	blx	r3
 8003b26:	2800      	cmp	r0, #0
 8003b28:	d0dc      	beq.n	8003ae4 <_scanf_i+0x128>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	d50e      	bpl.n	8003b4e <_scanf_i+0x192>
 8003b30:	9b00      	ldr	r3, [sp, #0]
 8003b32:	429d      	cmp	r5, r3
 8003b34:	d907      	bls.n	8003b46 <_scanf_i+0x18a>
 8003b36:	23be      	movs	r3, #190	; 0xbe
 8003b38:	3d01      	subs	r5, #1
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	0032      	movs	r2, r6
 8003b3e:	7829      	ldrb	r1, [r5, #0]
 8003b40:	58e3      	ldr	r3, [r4, r3]
 8003b42:	9804      	ldr	r0, [sp, #16]
 8003b44:	4798      	blx	r3
 8003b46:	9b00      	ldr	r3, [sp, #0]
 8003b48:	2001      	movs	r0, #1
 8003b4a:	429d      	cmp	r5, r3
 8003b4c:	d029      	beq.n	8003ba2 <_scanf_i+0x1e6>
 8003b4e:	6821      	ldr	r1, [r4, #0]
 8003b50:	2310      	movs	r3, #16
 8003b52:	000a      	movs	r2, r1
 8003b54:	401a      	ands	r2, r3
 8003b56:	4219      	tst	r1, r3
 8003b58:	d11c      	bne.n	8003b94 <_scanf_i+0x1d8>
 8003b5a:	702a      	strb	r2, [r5, #0]
 8003b5c:	6863      	ldr	r3, [r4, #4]
 8003b5e:	9900      	ldr	r1, [sp, #0]
 8003b60:	9804      	ldr	r0, [sp, #16]
 8003b62:	9e05      	ldr	r6, [sp, #20]
 8003b64:	47b0      	blx	r6
 8003b66:	9b01      	ldr	r3, [sp, #4]
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0691      	lsls	r1, r2, #26
 8003b6e:	d507      	bpl.n	8003b80 <_scanf_i+0x1c4>
 8003b70:	9901      	ldr	r1, [sp, #4]
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	600a      	str	r2, [r1, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6018      	str	r0, [r3, #0]
 8003b7a:	e008      	b.n	8003b8e <_scanf_i+0x1d2>
 8003b7c:	2700      	movs	r7, #0
 8003b7e:	e7d4      	b.n	8003b2a <_scanf_i+0x16e>
 8003b80:	1d19      	adds	r1, r3, #4
 8003b82:	07d6      	lsls	r6, r2, #31
 8003b84:	d50f      	bpl.n	8003ba6 <_scanf_i+0x1ea>
 8003b86:	9a01      	ldr	r2, [sp, #4]
 8003b88:	6011      	str	r1, [r2, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	8018      	strh	r0, [r3, #0]
 8003b8e:	68e3      	ldr	r3, [r4, #12]
 8003b90:	3301      	adds	r3, #1
 8003b92:	60e3      	str	r3, [r4, #12]
 8003b94:	2000      	movs	r0, #0
 8003b96:	9b00      	ldr	r3, [sp, #0]
 8003b98:	1aed      	subs	r5, r5, r3
 8003b9a:	6923      	ldr	r3, [r4, #16]
 8003b9c:	19ed      	adds	r5, r5, r7
 8003b9e:	195b      	adds	r3, r3, r5
 8003ba0:	6123      	str	r3, [r4, #16]
 8003ba2:	b00b      	add	sp, #44	; 0x2c
 8003ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ba6:	9a01      	ldr	r2, [sp, #4]
 8003ba8:	6011      	str	r1, [r2, #0]
 8003baa:	e7e4      	b.n	8003b76 <_scanf_i+0x1ba>
 8003bac:	08003fb0 	.word	0x08003fb0
 8003bb0:	08003e71 	.word	0x08003e71
 8003bb4:	08003f7d 	.word	0x08003f7d
 8003bb8:	fffffaff 	.word	0xfffffaff
 8003bbc:	08003ff8 	.word	0x08003ff8
 8003bc0:	fffff6ff 	.word	0xfffff6ff

08003bc4 <__sccl>:
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bc6:	780b      	ldrb	r3, [r1, #0]
 8003bc8:	0004      	movs	r4, r0
 8003bca:	2b5e      	cmp	r3, #94	; 0x5e
 8003bcc:	d019      	beq.n	8003c02 <__sccl+0x3e>
 8003bce:	2200      	movs	r2, #0
 8003bd0:	1c4d      	adds	r5, r1, #1
 8003bd2:	0021      	movs	r1, r4
 8003bd4:	1c60      	adds	r0, r4, #1
 8003bd6:	30ff      	adds	r0, #255	; 0xff
 8003bd8:	700a      	strb	r2, [r1, #0]
 8003bda:	3101      	adds	r1, #1
 8003bdc:	4281      	cmp	r1, r0
 8003bde:	d1fb      	bne.n	8003bd8 <__sccl+0x14>
 8003be0:	1e68      	subs	r0, r5, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00c      	beq.n	8003c00 <__sccl+0x3c>
 8003be6:	2101      	movs	r1, #1
 8003be8:	262d      	movs	r6, #45	; 0x2d
 8003bea:	404a      	eors	r2, r1
 8003bec:	0028      	movs	r0, r5
 8003bee:	54e2      	strb	r2, [r4, r3]
 8003bf0:	7801      	ldrb	r1, [r0, #0]
 8003bf2:	1c45      	adds	r5, r0, #1
 8003bf4:	292d      	cmp	r1, #45	; 0x2d
 8003bf6:	d00c      	beq.n	8003c12 <__sccl+0x4e>
 8003bf8:	295d      	cmp	r1, #93	; 0x5d
 8003bfa:	d01d      	beq.n	8003c38 <__sccl+0x74>
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	d104      	bne.n	8003c0a <__sccl+0x46>
 8003c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c02:	2201      	movs	r2, #1
 8003c04:	784b      	ldrb	r3, [r1, #1]
 8003c06:	1c8d      	adds	r5, r1, #2
 8003c08:	e7e3      	b.n	8003bd2 <__sccl+0xe>
 8003c0a:	000b      	movs	r3, r1
 8003c0c:	e7ee      	b.n	8003bec <__sccl+0x28>
 8003c0e:	0033      	movs	r3, r6
 8003c10:	e7ec      	b.n	8003bec <__sccl+0x28>
 8003c12:	7841      	ldrb	r1, [r0, #1]
 8003c14:	295d      	cmp	r1, #93	; 0x5d
 8003c16:	d0fa      	beq.n	8003c0e <__sccl+0x4a>
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	dcf8      	bgt.n	8003c0e <__sccl+0x4a>
 8003c1c:	001d      	movs	r5, r3
 8003c1e:	3002      	adds	r0, #2
 8003c20:	3501      	adds	r5, #1
 8003c22:	5562      	strb	r2, [r4, r5]
 8003c24:	42a9      	cmp	r1, r5
 8003c26:	dcfb      	bgt.n	8003c20 <__sccl+0x5c>
 8003c28:	2500      	movs	r5, #0
 8003c2a:	1c5f      	adds	r7, r3, #1
 8003c2c:	428b      	cmp	r3, r1
 8003c2e:	da01      	bge.n	8003c34 <__sccl+0x70>
 8003c30:	1acd      	subs	r5, r1, r3
 8003c32:	3d01      	subs	r5, #1
 8003c34:	197b      	adds	r3, r7, r5
 8003c36:	e7db      	b.n	8003bf0 <__sccl+0x2c>
 8003c38:	0028      	movs	r0, r5
 8003c3a:	e7e1      	b.n	8003c00 <__sccl+0x3c>

08003c3c <__submore>:
 8003c3c:	000b      	movs	r3, r1
 8003c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c40:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8003c42:	3344      	adds	r3, #68	; 0x44
 8003c44:	000c      	movs	r4, r1
 8003c46:	429d      	cmp	r5, r3
 8003c48:	d11c      	bne.n	8003c84 <__submore+0x48>
 8003c4a:	2680      	movs	r6, #128	; 0x80
 8003c4c:	00f6      	lsls	r6, r6, #3
 8003c4e:	0031      	movs	r1, r6
 8003c50:	f7ff fbfe 	bl	8003450 <_malloc_r>
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d102      	bne.n	8003c5e <__submore+0x22>
 8003c58:	2001      	movs	r0, #1
 8003c5a:	4240      	negs	r0, r0
 8003c5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c5e:	0023      	movs	r3, r4
 8003c60:	6360      	str	r0, [r4, #52]	; 0x34
 8003c62:	63a6      	str	r6, [r4, #56]	; 0x38
 8003c64:	3346      	adds	r3, #70	; 0x46
 8003c66:	781a      	ldrb	r2, [r3, #0]
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <__submore+0x70>)
 8003c6a:	54c2      	strb	r2, [r0, r3]
 8003c6c:	0023      	movs	r3, r4
 8003c6e:	3345      	adds	r3, #69	; 0x45
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <__submore+0x74>)
 8003c74:	54c2      	strb	r2, [r0, r3]
 8003c76:	782a      	ldrb	r2, [r5, #0]
 8003c78:	4b0e      	ldr	r3, [pc, #56]	; (8003cb4 <__submore+0x78>)
 8003c7a:	54c2      	strb	r2, [r0, r3]
 8003c7c:	18c0      	adds	r0, r0, r3
 8003c7e:	6020      	str	r0, [r4, #0]
 8003c80:	2000      	movs	r0, #0
 8003c82:	e7eb      	b.n	8003c5c <__submore+0x20>
 8003c84:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8003c86:	0029      	movs	r1, r5
 8003c88:	0073      	lsls	r3, r6, #1
 8003c8a:	001a      	movs	r2, r3
 8003c8c:	9301      	str	r3, [sp, #4]
 8003c8e:	f000 f839 	bl	8003d04 <_realloc_r>
 8003c92:	1e05      	subs	r5, r0, #0
 8003c94:	d0e0      	beq.n	8003c58 <__submore+0x1c>
 8003c96:	1987      	adds	r7, r0, r6
 8003c98:	0001      	movs	r1, r0
 8003c9a:	0032      	movs	r2, r6
 8003c9c:	0038      	movs	r0, r7
 8003c9e:	f000 f828 	bl	8003cf2 <memcpy>
 8003ca2:	9b01      	ldr	r3, [sp, #4]
 8003ca4:	6027      	str	r7, [r4, #0]
 8003ca6:	6365      	str	r5, [r4, #52]	; 0x34
 8003ca8:	63a3      	str	r3, [r4, #56]	; 0x38
 8003caa:	e7e9      	b.n	8003c80 <__submore+0x44>
 8003cac:	000003ff 	.word	0x000003ff
 8003cb0:	000003fe 	.word	0x000003fe
 8003cb4:	000003fd 	.word	0x000003fd

08003cb8 <_sbrk_r>:
 8003cb8:	2300      	movs	r3, #0
 8003cba:	b570      	push	{r4, r5, r6, lr}
 8003cbc:	4d06      	ldr	r5, [pc, #24]	; (8003cd8 <_sbrk_r+0x20>)
 8003cbe:	0004      	movs	r4, r0
 8003cc0:	0008      	movs	r0, r1
 8003cc2:	602b      	str	r3, [r5, #0]
 8003cc4:	f7fc fd6a 	bl	800079c <_sbrk>
 8003cc8:	1c43      	adds	r3, r0, #1
 8003cca:	d103      	bne.n	8003cd4 <_sbrk_r+0x1c>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d000      	beq.n	8003cd4 <_sbrk_r+0x1c>
 8003cd2:	6023      	str	r3, [r4, #0]
 8003cd4:	bd70      	pop	{r4, r5, r6, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	20000540 	.word	0x20000540

08003cdc <memchr>:
 8003cdc:	b2c9      	uxtb	r1, r1
 8003cde:	1882      	adds	r2, r0, r2
 8003ce0:	4290      	cmp	r0, r2
 8003ce2:	d101      	bne.n	8003ce8 <memchr+0xc>
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	4770      	bx	lr
 8003ce8:	7803      	ldrb	r3, [r0, #0]
 8003cea:	428b      	cmp	r3, r1
 8003cec:	d0fb      	beq.n	8003ce6 <memchr+0xa>
 8003cee:	3001      	adds	r0, #1
 8003cf0:	e7f6      	b.n	8003ce0 <memchr+0x4>

08003cf2 <memcpy>:
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d100      	bne.n	8003cfc <memcpy+0xa>
 8003cfa:	bd10      	pop	{r4, pc}
 8003cfc:	5ccc      	ldrb	r4, [r1, r3]
 8003cfe:	54c4      	strb	r4, [r0, r3]
 8003d00:	3301      	adds	r3, #1
 8003d02:	e7f8      	b.n	8003cf6 <memcpy+0x4>

08003d04 <_realloc_r>:
 8003d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d06:	0007      	movs	r7, r0
 8003d08:	000e      	movs	r6, r1
 8003d0a:	0014      	movs	r4, r2
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	d105      	bne.n	8003d1c <_realloc_r+0x18>
 8003d10:	0011      	movs	r1, r2
 8003d12:	f7ff fb9d 	bl	8003450 <_malloc_r>
 8003d16:	0005      	movs	r5, r0
 8003d18:	0028      	movs	r0, r5
 8003d1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	d103      	bne.n	8003d28 <_realloc_r+0x24>
 8003d20:	f7ff fb2a 	bl	8003378 <_free_r>
 8003d24:	0025      	movs	r5, r4
 8003d26:	e7f7      	b.n	8003d18 <_realloc_r+0x14>
 8003d28:	f000 f92c 	bl	8003f84 <_malloc_usable_size_r>
 8003d2c:	9001      	str	r0, [sp, #4]
 8003d2e:	4284      	cmp	r4, r0
 8003d30:	d803      	bhi.n	8003d3a <_realloc_r+0x36>
 8003d32:	0035      	movs	r5, r6
 8003d34:	0843      	lsrs	r3, r0, #1
 8003d36:	42a3      	cmp	r3, r4
 8003d38:	d3ee      	bcc.n	8003d18 <_realloc_r+0x14>
 8003d3a:	0021      	movs	r1, r4
 8003d3c:	0038      	movs	r0, r7
 8003d3e:	f7ff fb87 	bl	8003450 <_malloc_r>
 8003d42:	1e05      	subs	r5, r0, #0
 8003d44:	d0e8      	beq.n	8003d18 <_realloc_r+0x14>
 8003d46:	9b01      	ldr	r3, [sp, #4]
 8003d48:	0022      	movs	r2, r4
 8003d4a:	429c      	cmp	r4, r3
 8003d4c:	d900      	bls.n	8003d50 <_realloc_r+0x4c>
 8003d4e:	001a      	movs	r2, r3
 8003d50:	0031      	movs	r1, r6
 8003d52:	0028      	movs	r0, r5
 8003d54:	f7ff ffcd 	bl	8003cf2 <memcpy>
 8003d58:	0031      	movs	r1, r6
 8003d5a:	0038      	movs	r0, r7
 8003d5c:	f7ff fb0c 	bl	8003378 <_free_r>
 8003d60:	e7da      	b.n	8003d18 <_realloc_r+0x14>
	...

08003d64 <_strtol_l.constprop.0>:
 8003d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d66:	b087      	sub	sp, #28
 8003d68:	001e      	movs	r6, r3
 8003d6a:	9005      	str	r0, [sp, #20]
 8003d6c:	9101      	str	r1, [sp, #4]
 8003d6e:	9202      	str	r2, [sp, #8]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d048      	beq.n	8003e06 <_strtol_l.constprop.0+0xa2>
 8003d74:	000b      	movs	r3, r1
 8003d76:	2e24      	cmp	r6, #36	; 0x24
 8003d78:	d845      	bhi.n	8003e06 <_strtol_l.constprop.0+0xa2>
 8003d7a:	4a3b      	ldr	r2, [pc, #236]	; (8003e68 <_strtol_l.constprop.0+0x104>)
 8003d7c:	2108      	movs	r1, #8
 8003d7e:	4694      	mov	ip, r2
 8003d80:	001a      	movs	r2, r3
 8003d82:	4660      	mov	r0, ip
 8003d84:	7814      	ldrb	r4, [r2, #0]
 8003d86:	3301      	adds	r3, #1
 8003d88:	5d00      	ldrb	r0, [r0, r4]
 8003d8a:	001d      	movs	r5, r3
 8003d8c:	0007      	movs	r7, r0
 8003d8e:	400f      	ands	r7, r1
 8003d90:	4208      	tst	r0, r1
 8003d92:	d1f5      	bne.n	8003d80 <_strtol_l.constprop.0+0x1c>
 8003d94:	2c2d      	cmp	r4, #45	; 0x2d
 8003d96:	d13d      	bne.n	8003e14 <_strtol_l.constprop.0+0xb0>
 8003d98:	2701      	movs	r7, #1
 8003d9a:	781c      	ldrb	r4, [r3, #0]
 8003d9c:	1c95      	adds	r5, r2, #2
 8003d9e:	2e00      	cmp	r6, #0
 8003da0:	d05e      	beq.n	8003e60 <_strtol_l.constprop.0+0xfc>
 8003da2:	2e10      	cmp	r6, #16
 8003da4:	d109      	bne.n	8003dba <_strtol_l.constprop.0+0x56>
 8003da6:	2c30      	cmp	r4, #48	; 0x30
 8003da8:	d107      	bne.n	8003dba <_strtol_l.constprop.0+0x56>
 8003daa:	2220      	movs	r2, #32
 8003dac:	782b      	ldrb	r3, [r5, #0]
 8003dae:	4393      	bics	r3, r2
 8003db0:	2b58      	cmp	r3, #88	; 0x58
 8003db2:	d150      	bne.n	8003e56 <_strtol_l.constprop.0+0xf2>
 8003db4:	2610      	movs	r6, #16
 8003db6:	786c      	ldrb	r4, [r5, #1]
 8003db8:	3502      	adds	r5, #2
 8003dba:	4b2c      	ldr	r3, [pc, #176]	; (8003e6c <_strtol_l.constprop.0+0x108>)
 8003dbc:	0031      	movs	r1, r6
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	9303      	str	r3, [sp, #12]
 8003dc4:	f7fc fa36 	bl	8000234 <__aeabi_uidivmod>
 8003dc8:	2200      	movs	r2, #0
 8003dca:	9104      	str	r1, [sp, #16]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4684      	mov	ip, r0
 8003dd0:	0010      	movs	r0, r2
 8003dd2:	4249      	negs	r1, r1
 8003dd4:	0023      	movs	r3, r4
 8003dd6:	3b30      	subs	r3, #48	; 0x30
 8003dd8:	2b09      	cmp	r3, #9
 8003dda:	d903      	bls.n	8003de4 <_strtol_l.constprop.0+0x80>
 8003ddc:	3b11      	subs	r3, #17
 8003dde:	2b19      	cmp	r3, #25
 8003de0:	d81d      	bhi.n	8003e1e <_strtol_l.constprop.0+0xba>
 8003de2:	330a      	adds	r3, #10
 8003de4:	429e      	cmp	r6, r3
 8003de6:	dd1e      	ble.n	8003e26 <_strtol_l.constprop.0+0xc2>
 8003de8:	1c54      	adds	r4, r2, #1
 8003dea:	d009      	beq.n	8003e00 <_strtol_l.constprop.0+0x9c>
 8003dec:	000a      	movs	r2, r1
 8003dee:	4584      	cmp	ip, r0
 8003df0:	d306      	bcc.n	8003e00 <_strtol_l.constprop.0+0x9c>
 8003df2:	d102      	bne.n	8003dfa <_strtol_l.constprop.0+0x96>
 8003df4:	9c04      	ldr	r4, [sp, #16]
 8003df6:	429c      	cmp	r4, r3
 8003df8:	db02      	blt.n	8003e00 <_strtol_l.constprop.0+0x9c>
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	4370      	muls	r0, r6
 8003dfe:	1818      	adds	r0, r3, r0
 8003e00:	782c      	ldrb	r4, [r5, #0]
 8003e02:	3501      	adds	r5, #1
 8003e04:	e7e6      	b.n	8003dd4 <_strtol_l.constprop.0+0x70>
 8003e06:	f7ff fa8b 	bl	8003320 <__errno>
 8003e0a:	2316      	movs	r3, #22
 8003e0c:	6003      	str	r3, [r0, #0]
 8003e0e:	2000      	movs	r0, #0
 8003e10:	b007      	add	sp, #28
 8003e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e14:	2c2b      	cmp	r4, #43	; 0x2b
 8003e16:	d1c2      	bne.n	8003d9e <_strtol_l.constprop.0+0x3a>
 8003e18:	781c      	ldrb	r4, [r3, #0]
 8003e1a:	1c95      	adds	r5, r2, #2
 8003e1c:	e7bf      	b.n	8003d9e <_strtol_l.constprop.0+0x3a>
 8003e1e:	0023      	movs	r3, r4
 8003e20:	3b61      	subs	r3, #97	; 0x61
 8003e22:	2b19      	cmp	r3, #25
 8003e24:	d9dd      	bls.n	8003de2 <_strtol_l.constprop.0+0x7e>
 8003e26:	1c53      	adds	r3, r2, #1
 8003e28:	d109      	bne.n	8003e3e <_strtol_l.constprop.0+0xda>
 8003e2a:	2322      	movs	r3, #34	; 0x22
 8003e2c:	9a05      	ldr	r2, [sp, #20]
 8003e2e:	9803      	ldr	r0, [sp, #12]
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	9b02      	ldr	r3, [sp, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0eb      	beq.n	8003e10 <_strtol_l.constprop.0+0xac>
 8003e38:	1e6b      	subs	r3, r5, #1
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	e007      	b.n	8003e4e <_strtol_l.constprop.0+0xea>
 8003e3e:	2f00      	cmp	r7, #0
 8003e40:	d000      	beq.n	8003e44 <_strtol_l.constprop.0+0xe0>
 8003e42:	4240      	negs	r0, r0
 8003e44:	9b02      	ldr	r3, [sp, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0e2      	beq.n	8003e10 <_strtol_l.constprop.0+0xac>
 8003e4a:	2a00      	cmp	r2, #0
 8003e4c:	d1f4      	bne.n	8003e38 <_strtol_l.constprop.0+0xd4>
 8003e4e:	9b02      	ldr	r3, [sp, #8]
 8003e50:	9a01      	ldr	r2, [sp, #4]
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e7dc      	b.n	8003e10 <_strtol_l.constprop.0+0xac>
 8003e56:	2430      	movs	r4, #48	; 0x30
 8003e58:	2e00      	cmp	r6, #0
 8003e5a:	d1ae      	bne.n	8003dba <_strtol_l.constprop.0+0x56>
 8003e5c:	3608      	adds	r6, #8
 8003e5e:	e7ac      	b.n	8003dba <_strtol_l.constprop.0+0x56>
 8003e60:	2c30      	cmp	r4, #48	; 0x30
 8003e62:	d0a2      	beq.n	8003daa <_strtol_l.constprop.0+0x46>
 8003e64:	260a      	movs	r6, #10
 8003e66:	e7a8      	b.n	8003dba <_strtol_l.constprop.0+0x56>
 8003e68:	08004014 	.word	0x08004014
 8003e6c:	7fffffff 	.word	0x7fffffff

08003e70 <_strtol_r>:
 8003e70:	b510      	push	{r4, lr}
 8003e72:	f7ff ff77 	bl	8003d64 <_strtol_l.constprop.0>
 8003e76:	bd10      	pop	{r4, pc}

08003e78 <_strtoul_l.constprop.0>:
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	9202      	str	r2, [sp, #8]
 8003e7e:	4a3e      	ldr	r2, [pc, #248]	; (8003f78 <_strtoul_l.constprop.0+0x100>)
 8003e80:	001e      	movs	r6, r3
 8003e82:	9101      	str	r1, [sp, #4]
 8003e84:	000b      	movs	r3, r1
 8003e86:	4694      	mov	ip, r2
 8003e88:	2108      	movs	r1, #8
 8003e8a:	9005      	str	r0, [sp, #20]
 8003e8c:	001a      	movs	r2, r3
 8003e8e:	4660      	mov	r0, ip
 8003e90:	7814      	ldrb	r4, [r2, #0]
 8003e92:	3301      	adds	r3, #1
 8003e94:	5d00      	ldrb	r0, [r0, r4]
 8003e96:	001d      	movs	r5, r3
 8003e98:	0007      	movs	r7, r0
 8003e9a:	400f      	ands	r7, r1
 8003e9c:	4208      	tst	r0, r1
 8003e9e:	d1f5      	bne.n	8003e8c <_strtoul_l.constprop.0+0x14>
 8003ea0:	2c2d      	cmp	r4, #45	; 0x2d
 8003ea2:	d13d      	bne.n	8003f20 <_strtoul_l.constprop.0+0xa8>
 8003ea4:	2701      	movs	r7, #1
 8003ea6:	781c      	ldrb	r4, [r3, #0]
 8003ea8:	1c95      	adds	r5, r2, #2
 8003eaa:	2e00      	cmp	r6, #0
 8003eac:	d05f      	beq.n	8003f6e <_strtoul_l.constprop.0+0xf6>
 8003eae:	2e10      	cmp	r6, #16
 8003eb0:	d109      	bne.n	8003ec6 <_strtoul_l.constprop.0+0x4e>
 8003eb2:	2c30      	cmp	r4, #48	; 0x30
 8003eb4:	d107      	bne.n	8003ec6 <_strtoul_l.constprop.0+0x4e>
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	782b      	ldrb	r3, [r5, #0]
 8003eba:	4393      	bics	r3, r2
 8003ebc:	2b58      	cmp	r3, #88	; 0x58
 8003ebe:	d151      	bne.n	8003f64 <_strtoul_l.constprop.0+0xec>
 8003ec0:	2610      	movs	r6, #16
 8003ec2:	786c      	ldrb	r4, [r5, #1]
 8003ec4:	3502      	adds	r5, #2
 8003ec6:	2001      	movs	r0, #1
 8003ec8:	0031      	movs	r1, r6
 8003eca:	4240      	negs	r0, r0
 8003ecc:	f7fc f92c 	bl	8000128 <__udivsi3>
 8003ed0:	9003      	str	r0, [sp, #12]
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	0031      	movs	r1, r6
 8003ed6:	4240      	negs	r0, r0
 8003ed8:	f7fc f9ac 	bl	8000234 <__aeabi_uidivmod>
 8003edc:	2300      	movs	r3, #0
 8003ede:	2201      	movs	r2, #1
 8003ee0:	9104      	str	r1, [sp, #16]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	4694      	mov	ip, r2
 8003ee8:	4249      	negs	r1, r1
 8003eea:	0022      	movs	r2, r4
 8003eec:	3a30      	subs	r2, #48	; 0x30
 8003eee:	2a09      	cmp	r2, #9
 8003ef0:	d903      	bls.n	8003efa <_strtoul_l.constprop.0+0x82>
 8003ef2:	3a11      	subs	r2, #17
 8003ef4:	2a19      	cmp	r2, #25
 8003ef6:	d818      	bhi.n	8003f2a <_strtoul_l.constprop.0+0xb2>
 8003ef8:	320a      	adds	r2, #10
 8003efa:	4296      	cmp	r6, r2
 8003efc:	dd19      	ble.n	8003f32 <_strtoul_l.constprop.0+0xba>
 8003efe:	1c5c      	adds	r4, r3, #1
 8003f00:	d00b      	beq.n	8003f1a <_strtoul_l.constprop.0+0xa2>
 8003f02:	9c03      	ldr	r4, [sp, #12]
 8003f04:	000b      	movs	r3, r1
 8003f06:	4284      	cmp	r4, r0
 8003f08:	d307      	bcc.n	8003f1a <_strtoul_l.constprop.0+0xa2>
 8003f0a:	d103      	bne.n	8003f14 <_strtoul_l.constprop.0+0x9c>
 8003f0c:	9c04      	ldr	r4, [sp, #16]
 8003f0e:	000b      	movs	r3, r1
 8003f10:	4294      	cmp	r4, r2
 8003f12:	db02      	blt.n	8003f1a <_strtoul_l.constprop.0+0xa2>
 8003f14:	4663      	mov	r3, ip
 8003f16:	4370      	muls	r0, r6
 8003f18:	1810      	adds	r0, r2, r0
 8003f1a:	782c      	ldrb	r4, [r5, #0]
 8003f1c:	3501      	adds	r5, #1
 8003f1e:	e7e4      	b.n	8003eea <_strtoul_l.constprop.0+0x72>
 8003f20:	2c2b      	cmp	r4, #43	; 0x2b
 8003f22:	d1c2      	bne.n	8003eaa <_strtoul_l.constprop.0+0x32>
 8003f24:	781c      	ldrb	r4, [r3, #0]
 8003f26:	1c95      	adds	r5, r2, #2
 8003f28:	e7bf      	b.n	8003eaa <_strtoul_l.constprop.0+0x32>
 8003f2a:	0022      	movs	r2, r4
 8003f2c:	3a61      	subs	r2, #97	; 0x61
 8003f2e:	2a19      	cmp	r2, #25
 8003f30:	d9e2      	bls.n	8003ef8 <_strtoul_l.constprop.0+0x80>
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	d108      	bne.n	8003f48 <_strtoul_l.constprop.0+0xd0>
 8003f36:	2222      	movs	r2, #34	; 0x22
 8003f38:	9905      	ldr	r1, [sp, #20]
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	600a      	str	r2, [r1, #0]
 8003f3e:	9a02      	ldr	r2, [sp, #8]
 8003f40:	2a00      	cmp	r2, #0
 8003f42:	d109      	bne.n	8003f58 <_strtoul_l.constprop.0+0xe0>
 8003f44:	b007      	add	sp, #28
 8003f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f48:	2f00      	cmp	r7, #0
 8003f4a:	d000      	beq.n	8003f4e <_strtoul_l.constprop.0+0xd6>
 8003f4c:	4240      	negs	r0, r0
 8003f4e:	9a02      	ldr	r2, [sp, #8]
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	d0f7      	beq.n	8003f44 <_strtoul_l.constprop.0+0xcc>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <_strtoul_l.constprop.0+0xe4>
 8003f58:	1e6b      	subs	r3, r5, #1
 8003f5a:	9301      	str	r3, [sp, #4]
 8003f5c:	9b02      	ldr	r3, [sp, #8]
 8003f5e:	9a01      	ldr	r2, [sp, #4]
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e7ef      	b.n	8003f44 <_strtoul_l.constprop.0+0xcc>
 8003f64:	2430      	movs	r4, #48	; 0x30
 8003f66:	2e00      	cmp	r6, #0
 8003f68:	d1ad      	bne.n	8003ec6 <_strtoul_l.constprop.0+0x4e>
 8003f6a:	3608      	adds	r6, #8
 8003f6c:	e7ab      	b.n	8003ec6 <_strtoul_l.constprop.0+0x4e>
 8003f6e:	2c30      	cmp	r4, #48	; 0x30
 8003f70:	d0a1      	beq.n	8003eb6 <_strtoul_l.constprop.0+0x3e>
 8003f72:	260a      	movs	r6, #10
 8003f74:	e7a7      	b.n	8003ec6 <_strtoul_l.constprop.0+0x4e>
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	08004014 	.word	0x08004014

08003f7c <_strtoul_r>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	f7ff ff7b 	bl	8003e78 <_strtoul_l.constprop.0>
 8003f82:	bd10      	pop	{r4, pc}

08003f84 <_malloc_usable_size_r>:
 8003f84:	1f0b      	subs	r3, r1, #4
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1f18      	subs	r0, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	da01      	bge.n	8003f92 <_malloc_usable_size_r+0xe>
 8003f8e:	580b      	ldr	r3, [r1, r0]
 8003f90:	18c0      	adds	r0, r0, r3
 8003f92:	4770      	bx	lr

08003f94 <_init>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr

08003fa0 <_fini>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	469e      	mov	lr, r3
 8003faa:	4770      	bx	lr
