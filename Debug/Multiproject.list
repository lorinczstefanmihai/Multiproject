
Multiproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d8  080031d8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080031d8  080031d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031e0  080031e0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080031e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000002c  08003214  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003214  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a764  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017cd  00000000  00000000  0002a7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0002bfc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c3  00000000  00000000  0002c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a4f7  00000000  00000000  0002ccfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a436  00000000  00000000  000471f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac86b  00000000  00000000  00051628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019a8  00000000  00000000  000fde94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ff83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000002c 	.word	0x2000002c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003188 	.word	0x08003188

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000030 	.word	0x20000030
 8000100:	08003188 	.word	0x08003188

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SysTick_Handler>:
#include "main.h"

extern UART_HandleTypeDef uart_gps;

void SysTick_Handler (void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800044c:	f000 f9b8 	bl	80007c0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000450:	f000 fab0 	bl	80009b4 <HAL_SYSTICK_IRQHandler>
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&uart_gps);
 8000460:	4b03      	ldr	r3, [pc, #12]	; (8000470 <USART1_IRQHandler+0x14>)
 8000462:	0018      	movs	r0, r3
 8000464:	f000 fef4 	bl	8001250 <HAL_UART_IRQHandler>
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	200000dc 	.word	0x200000dc

08000474 <main>:

char start_console_message[30] = "---- STM32 RUNNNING ----";
char loading_console_message[40] = "GPS MODULE IS SEARCHING SIGNAL \n\r";

int main()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	HAL_Init();
 8000478:	f000 f938 	bl	80006ec <HAL_Init>
	UART_Init();
 800047c:	f000 f818 	bl	80004b0 <UART_Init>

	HAL_UART_Transmit(&console_output,(uint8_t*)&start_console_message, 24, HAL_UART_TIMEOUT_VALUE);
 8000480:	4b06      	ldr	r3, [pc, #24]	; (800049c <main+0x28>)
 8000482:	4907      	ldr	r1, [pc, #28]	; (80004a0 <main+0x2c>)
 8000484:	4807      	ldr	r0, [pc, #28]	; (80004a4 <main+0x30>)
 8000486:	2218      	movs	r2, #24
 8000488:	f000 fdd8 	bl	800103c <HAL_UART_Transmit>


	while(1)
	{
		HAL_UART_Receive_IT(&uart_gps,(uint8_t*)&data, 1);
 800048c:	4906      	ldr	r1, [pc, #24]	; (80004a8 <main+0x34>)
 800048e:	4b07      	ldr	r3, [pc, #28]	; (80004ac <main+0x38>)
 8000490:	2201      	movs	r2, #1
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fe76 	bl	8001184 <HAL_UART_Receive_IT>
 8000498:	e7f8      	b.n	800048c <main+0x18>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	01ffffff 	.word	0x01ffffff
 80004a0:	20000000 	.word	0x20000000
 80004a4:	20000048 	.word	0x20000048
 80004a8:	20000170 	.word	0x20000170
 80004ac:	200000dc 	.word	0x200000dc

080004b0 <UART_Init>:
	}
}

void UART_Init()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
	console_output.Instance = USART2;
 80004b4:	4b1f      	ldr	r3, [pc, #124]	; (8000534 <UART_Init+0x84>)
 80004b6:	4a20      	ldr	r2, [pc, #128]	; (8000538 <UART_Init+0x88>)
 80004b8:	601a      	str	r2, [r3, #0]
	console_output.Init.BaudRate = 115200;
 80004ba:	4b1e      	ldr	r3, [pc, #120]	; (8000534 <UART_Init+0x84>)
 80004bc:	22e1      	movs	r2, #225	; 0xe1
 80004be:	0252      	lsls	r2, r2, #9
 80004c0:	605a      	str	r2, [r3, #4]
	console_output.Init.Mode = UART_MODE_TX;
 80004c2:	4b1c      	ldr	r3, [pc, #112]	; (8000534 <UART_Init+0x84>)
 80004c4:	2208      	movs	r2, #8
 80004c6:	615a      	str	r2, [r3, #20]
	console_output.Init.Parity = UART_PARITY_NONE;
 80004c8:	4b1a      	ldr	r3, [pc, #104]	; (8000534 <UART_Init+0x84>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
	console_output.Init.StopBits = UART_STOPBITS_1;
 80004ce:	4b19      	ldr	r3, [pc, #100]	; (8000534 <UART_Init+0x84>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	60da      	str	r2, [r3, #12]
	console_output.Init.WordLength = UART_WORDLENGTH_8B;
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <UART_Init+0x84>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
	console_output.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <UART_Init+0x84>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&console_output) != HAL_OK)
 80004e0:	4b14      	ldr	r3, [pc, #80]	; (8000534 <UART_Init+0x84>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f000 fd54 	bl	8000f90 <HAL_UART_Init>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <UART_Init+0x40>
	{
		Error_handler();
 80004ec:	f000 f82a 	bl	8000544 <Error_handler>
	}

	uart_gps.Instance = USART1;
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <UART_Init+0x8c>)
 80004f2:	4a13      	ldr	r2, [pc, #76]	; (8000540 <UART_Init+0x90>)
 80004f4:	601a      	str	r2, [r3, #0]
	uart_gps.Init.BaudRate = 9600;
 80004f6:	4b11      	ldr	r3, [pc, #68]	; (800053c <UART_Init+0x8c>)
 80004f8:	2296      	movs	r2, #150	; 0x96
 80004fa:	0192      	lsls	r2, r2, #6
 80004fc:	605a      	str	r2, [r3, #4]
	uart_gps.Init.Mode = UART_MODE_TX_RX;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <UART_Init+0x8c>)
 8000500:	220c      	movs	r2, #12
 8000502:	615a      	str	r2, [r3, #20]
	uart_gps.Init.Parity = UART_PARITY_NONE;
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <UART_Init+0x8c>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
	uart_gps.Init.StopBits = UART_STOPBITS_1;
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <UART_Init+0x8c>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
	uart_gps.Init.WordLength = UART_WORDLENGTH_8B;
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <UART_Init+0x8c>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
	uart_gps.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <UART_Init+0x8c>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&uart_gps) != HAL_OK)
 800051c:	4b07      	ldr	r3, [pc, #28]	; (800053c <UART_Init+0x8c>)
 800051e:	0018      	movs	r0, r3
 8000520:	f000 fd36 	bl	8000f90 <HAL_UART_Init>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d001      	beq.n	800052c <UART_Init+0x7c>
	{
		Error_handler();
 8000528:	f000 f80c 	bl	8000544 <Error_handler>
	}
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	20000048 	.word	0x20000048
 8000538:	40004400 	.word	0x40004400
 800053c:	200000dc 	.word	0x200000dc
 8000540:	40013800 	.word	0x40013800

08000544 <Error_handler>:

void Error_handler()
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	while(1);
 8000548:	e7fe      	b.n	8000548 <Error_handler+0x4>
	...

0800054c <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&console_output, (uint8_t*)&data, 1, HAL_UART_TIMEOUT_VALUE);
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_UART_RxCpltCallback+0x1c>)
 8000556:	4905      	ldr	r1, [pc, #20]	; (800056c <HAL_UART_RxCpltCallback+0x20>)
 8000558:	4805      	ldr	r0, [pc, #20]	; (8000570 <HAL_UART_RxCpltCallback+0x24>)
 800055a:	2201      	movs	r2, #1
 800055c:	f000 fd6e 	bl	800103c <HAL_UART_Transmit>
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b002      	add	sp, #8
 8000566:	bd80      	pop	{r7, pc}
 8000568:	01ffffff 	.word	0x01ffffff
 800056c:	20000170 	.word	0x20000170
 8000570:	20000048 	.word	0x20000048

08000574 <HAL_MspInit>:
 *      Author: lorin
 */
#include "main.h"

void HAL_MspInit(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor


	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_MspInit+0x18>)
 800057a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <HAL_MspInit+0x18>)
 800057e:	21e0      	movs	r1, #224	; 0xe0
 8000580:	02c9      	lsls	r1, r1, #11
 8000582:	430a      	orrs	r2, r1
 8000584:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b08d      	sub	sp, #52	; 0x34
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;

  /********************enable clocks********************/

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <HAL_UART_MspInit+0xf4>)
 800059a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800059c:	4b39      	ldr	r3, [pc, #228]	; (8000684 <HAL_UART_MspInit+0xf4>)
 800059e:	2101      	movs	r1, #1
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
 80005a4:	4b37      	ldr	r3, [pc, #220]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a8:	2201      	movs	r2, #1
 80005aa:	4013      	ands	r3, r2
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005b4:	4b33      	ldr	r3, [pc, #204]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005b6:	2104      	movs	r1, #4
 80005b8:	430a      	orrs	r2, r1
 80005ba:	635a      	str	r2, [r3, #52]	; 0x34
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005c0:	2204      	movs	r2, #4
 80005c2:	4013      	ands	r3, r2
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	697b      	ldr	r3, [r7, #20]

  __HAL_RCC_USART1_CLK_ENABLE();
 80005c8:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005ce:	2180      	movs	r1, #128	; 0x80
 80005d0:	01c9      	lsls	r1, r1, #7
 80005d2:	430a      	orrs	r2, r1
 80005d4:	641a      	str	r2, [r3, #64]	; 0x40
 80005d6:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005da:	2380      	movs	r3, #128	; 0x80
 80005dc:	01db      	lsls	r3, r3, #7
 80005de:	4013      	ands	r3, r2
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_USART2_CLK_ENABLE();
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005e8:	4b26      	ldr	r3, [pc, #152]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005ea:	2180      	movs	r1, #128	; 0x80
 80005ec:	0289      	lsls	r1, r1, #10
 80005ee:	430a      	orrs	r2, r1
 80005f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80005f2:	4b24      	ldr	r3, [pc, #144]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	029b      	lsls	r3, r3, #10
 80005fa:	4013      	ands	r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]

  /********************pin muxing***********************/

  /* UART TX CONSOLE */
  gpio_uart.Pin = GPIO_PIN_2;
 8000600:	241c      	movs	r4, #28
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2204      	movs	r2, #4
 8000606:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2202      	movs	r2, #2
 800060c:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART2;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2201      	movs	r2, #1
 8000612:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2201      	movs	r2, #1
 8000618:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2202      	movs	r2, #2
 800061e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000620:	193a      	adds	r2, r7, r4
 8000622:	23a0      	movs	r3, #160	; 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fa97 	bl	8000b5c <HAL_GPIO_Init>

  /* UART TX GPS */
  gpio_uart.Pin = GPIO_PIN_4;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2210      	movs	r2, #16
 8000632:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	2202      	movs	r2, #2
 8000638:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART1;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2201      	movs	r2, #1
 800063e:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8000640:	193b      	adds	r3, r7, r4
 8000642:	2201      	movs	r2, #1
 8000644:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8000646:	193b      	adds	r3, r7, r4
 8000648:	2202      	movs	r2, #2
 800064a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 800064c:	193b      	adds	r3, r7, r4
 800064e:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <HAL_UART_MspInit+0xf8>)
 8000650:	0019      	movs	r1, r3
 8000652:	0010      	movs	r0, r2
 8000654:	f000 fa82 	bl	8000b5c <HAL_GPIO_Init>

  /* UART RX GPS */
  gpio_uart.Pin = GPIO_PIN_5;
 8000658:	0021      	movs	r1, r4
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2220      	movs	r2, #32
 800065e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 8000660:	187b      	adds	r3, r7, r1
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <HAL_UART_MspInit+0xf8>)
 8000664:	0019      	movs	r1, r3
 8000666:	0010      	movs	r0, r2
 8000668:	f000 fa78 	bl	8000b5c <HAL_GPIO_Init>

  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800066c:	201b      	movs	r0, #27
 800066e:	f000 f984 	bl	800097a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn,15,0);
 8000672:	2200      	movs	r2, #0
 8000674:	210f      	movs	r1, #15
 8000676:	201b      	movs	r0, #27
 8000678:	f000 f96a 	bl	8000950 <HAL_NVIC_SetPriority>

}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b00d      	add	sp, #52	; 0x34
 8000682:	bd90      	pop	{r4, r7, pc}
 8000684:	40021000 	.word	0x40021000
 8000688:	50000800 	.word	0x50000800

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800069c:	f7ff fff6 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	; (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c6:	f002 fd3b 	bl	8003140 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006ca:	f7ff fed3 	bl	8000474 <main>

080006ce <LoopForever>:

LoopForever:
  b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   r0, =_estack
 80006d0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80006dc:	080031e8 	.word	0x080031e8
  ldr r2, =_sbss
 80006e0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80006e4:	20000178 	.word	0x20000178

080006e8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_COMP_IRQHandler>
	...

080006ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <HAL_Init+0x3c>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_Init+0x3c>)
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	0049      	lsls	r1, r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000706:	2000      	movs	r0, #0
 8000708:	f000 f810 	bl	800072c <HAL_InitTick>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d003      	beq.n	8000718 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
 8000716:	e001      	b.n	800071c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000718:	f7ff ff2c 	bl	8000574 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800071c:	1dfb      	adds	r3, r7, #7
 800071e:	781b      	ldrb	r3, [r3, #0]
}
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	b002      	add	sp, #8
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40022000 	.word	0x40022000

0800072c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000734:	230f      	movs	r3, #15
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800073c:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <HAL_InitTick+0x88>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d02b      	beq.n	800079c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_InitTick+0x8c>)
 8000746:	681c      	ldr	r4, [r3, #0]
 8000748:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <HAL_InitTick+0x88>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	0019      	movs	r1, r3
 800074e:	23fa      	movs	r3, #250	; 0xfa
 8000750:	0098      	lsls	r0, r3, #2
 8000752:	f7ff fcd7 	bl	8000104 <__udivsi3>
 8000756:	0003      	movs	r3, r0
 8000758:	0019      	movs	r1, r3
 800075a:	0020      	movs	r0, r4
 800075c:	f7ff fcd2 	bl	8000104 <__udivsi3>
 8000760:	0003      	movs	r3, r0
 8000762:	0018      	movs	r0, r3
 8000764:	f000 f919 	bl	800099a <HAL_SYSTICK_Config>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d112      	bne.n	8000792 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b03      	cmp	r3, #3
 8000770:	d80a      	bhi.n	8000788 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	2301      	movs	r3, #1
 8000776:	425b      	negs	r3, r3
 8000778:	2200      	movs	r2, #0
 800077a:	0018      	movs	r0, r3
 800077c:	f000 f8e8 	bl	8000950 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <HAL_InitTick+0x90>)
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	e00d      	b.n	80007a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	2201      	movs	r2, #1
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	e008      	b.n	80007a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000792:	230f      	movs	r3, #15
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
 800079a:	e003      	b.n	80007a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800079c:	230f      	movs	r3, #15
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007a4:	230f      	movs	r3, #15
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	781b      	ldrb	r3, [r3, #0]
}
 80007aa:	0018      	movs	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b005      	add	sp, #20
 80007b0:	bd90      	pop	{r4, r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	20000028 	.word	0x20000028
 80007b8:	20000020 	.word	0x20000020
 80007bc:	20000024 	.word	0x20000024

080007c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_IncTick+0x1c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	001a      	movs	r2, r3
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x20>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	18d2      	adds	r2, r2, r3
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <HAL_IncTick+0x20>)
 80007d2:	601a      	str	r2, [r3, #0]
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	20000028 	.word	0x20000028
 80007e0:	20000174 	.word	0x20000174

080007e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <HAL_GetTick+0x10>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	20000174 	.word	0x20000174

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	0002      	movs	r2, r0
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000804:	1dfb      	adds	r3, r7, #7
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b7f      	cmp	r3, #127	; 0x7f
 800080a:	d809      	bhi.n	8000820 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	001a      	movs	r2, r3
 8000812:	231f      	movs	r3, #31
 8000814:	401a      	ands	r2, r3
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <__NVIC_EnableIRQ+0x30>)
 8000818:	2101      	movs	r1, #1
 800081a:	4091      	lsls	r1, r2
 800081c:	000a      	movs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}
 8000828:	e000e100 	.word	0xe000e100

0800082c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	0002      	movs	r2, r0
 8000834:	6039      	str	r1, [r7, #0]
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b7f      	cmp	r3, #127	; 0x7f
 8000840:	d828      	bhi.n	8000894 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000842:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <__NVIC_SetPriority+0xd4>)
 8000844:	1dfb      	adds	r3, r7, #7
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	b25b      	sxtb	r3, r3
 800084a:	089b      	lsrs	r3, r3, #2
 800084c:	33c0      	adds	r3, #192	; 0xc0
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	589b      	ldr	r3, [r3, r2]
 8000852:	1dfa      	adds	r2, r7, #7
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	0011      	movs	r1, r2
 8000858:	2203      	movs	r2, #3
 800085a:	400a      	ands	r2, r1
 800085c:	00d2      	lsls	r2, r2, #3
 800085e:	21ff      	movs	r1, #255	; 0xff
 8000860:	4091      	lsls	r1, r2
 8000862:	000a      	movs	r2, r1
 8000864:	43d2      	mvns	r2, r2
 8000866:	401a      	ands	r2, r3
 8000868:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	019b      	lsls	r3, r3, #6
 800086e:	22ff      	movs	r2, #255	; 0xff
 8000870:	401a      	ands	r2, r3
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0018      	movs	r0, r3
 8000878:	2303      	movs	r3, #3
 800087a:	4003      	ands	r3, r0
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000880:	481f      	ldr	r0, [pc, #124]	; (8000900 <__NVIC_SetPriority+0xd4>)
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b25b      	sxtb	r3, r3
 8000888:	089b      	lsrs	r3, r3, #2
 800088a:	430a      	orrs	r2, r1
 800088c:	33c0      	adds	r3, #192	; 0xc0
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000892:	e031      	b.n	80008f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <__NVIC_SetPriority+0xd8>)
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	0019      	movs	r1, r3
 800089c:	230f      	movs	r3, #15
 800089e:	400b      	ands	r3, r1
 80008a0:	3b08      	subs	r3, #8
 80008a2:	089b      	lsrs	r3, r3, #2
 80008a4:	3306      	adds	r3, #6
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	3304      	adds	r3, #4
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	1dfa      	adds	r2, r7, #7
 80008b0:	7812      	ldrb	r2, [r2, #0]
 80008b2:	0011      	movs	r1, r2
 80008b4:	2203      	movs	r2, #3
 80008b6:	400a      	ands	r2, r1
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	21ff      	movs	r1, #255	; 0xff
 80008bc:	4091      	lsls	r1, r2
 80008be:	000a      	movs	r2, r1
 80008c0:	43d2      	mvns	r2, r2
 80008c2:	401a      	ands	r2, r3
 80008c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	019b      	lsls	r3, r3, #6
 80008ca:	22ff      	movs	r2, #255	; 0xff
 80008cc:	401a      	ands	r2, r3
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	0018      	movs	r0, r3
 80008d4:	2303      	movs	r3, #3
 80008d6:	4003      	ands	r3, r0
 80008d8:	00db      	lsls	r3, r3, #3
 80008da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	4809      	ldr	r0, [pc, #36]	; (8000904 <__NVIC_SetPriority+0xd8>)
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	001c      	movs	r4, r3
 80008e4:	230f      	movs	r3, #15
 80008e6:	4023      	ands	r3, r4
 80008e8:	3b08      	subs	r3, #8
 80008ea:	089b      	lsrs	r3, r3, #2
 80008ec:	430a      	orrs	r2, r1
 80008ee:	3306      	adds	r3, #6
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	18c3      	adds	r3, r0, r3
 80008f4:	3304      	adds	r3, #4
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b003      	add	sp, #12
 80008fe:	bd90      	pop	{r4, r7, pc}
 8000900:	e000e100 	.word	0xe000e100
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1e5a      	subs	r2, r3, #1
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	045b      	lsls	r3, r3, #17
 8000918:	429a      	cmp	r2, r3
 800091a:	d301      	bcc.n	8000920 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800091c:	2301      	movs	r3, #1
 800091e:	e010      	b.n	8000942 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <SysTick_Config+0x44>)
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	3a01      	subs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000928:	2301      	movs	r3, #1
 800092a:	425b      	negs	r3, r3
 800092c:	2103      	movs	r1, #3
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff ff7c 	bl	800082c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <SysTick_Config+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <SysTick_Config+0x44>)
 800093c:	2207      	movs	r2, #7
 800093e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000940:	2300      	movs	r3, #0
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	60b9      	str	r1, [r7, #8]
 8000958:	607a      	str	r2, [r7, #4]
 800095a:	210f      	movs	r1, #15
 800095c:	187b      	adds	r3, r7, r1
 800095e:	1c02      	adds	r2, r0, #0
 8000960:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	187b      	adds	r3, r7, r1
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	0011      	movs	r1, r2
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ff5d 	bl	800082c <__NVIC_SetPriority>
}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b004      	add	sp, #16
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	0002      	movs	r2, r0
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b25b      	sxtb	r3, r3
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff ff33 	bl	80007f8 <__NVIC_EnableIRQ>
}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}

0800099a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	b082      	sub	sp, #8
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ffaf 	bl	8000908 <SysTick_Config>
 80009aa:	0003      	movs	r3, r0
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009b8:	f000 f803 	bl	80009c2 <HAL_SYSTICK_Callback>
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d101      	bne.n	80009de <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e04f      	b.n	8000a7e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2225      	movs	r2, #37	; 0x25
 80009e2:	5c9b      	ldrb	r3, [r3, r2]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d008      	beq.n	80009fc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2204      	movs	r2, #4
 80009ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2224      	movs	r2, #36	; 0x24
 80009f4:	2100      	movs	r1, #0
 80009f6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80009f8:	2301      	movs	r3, #1
 80009fa:	e040      	b.n	8000a7e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	210e      	movs	r1, #14
 8000a08:	438a      	bics	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a16:	491c      	ldr	r1, [pc, #112]	; (8000a88 <HAL_DMA_Abort+0xbc>)
 8000a18:	400a      	ands	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2101      	movs	r1, #1
 8000a28:	438a      	bics	r2, r1
 8000a2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a30:	221c      	movs	r2, #28
 8000a32:	401a      	ands	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4091      	lsls	r1, r2
 8000a3c:	000a      	movs	r2, r1
 8000a3e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000a48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d00c      	beq.n	8000a6c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a5c:	490a      	ldr	r1, [pc, #40]	; (8000a88 <HAL_DMA_Abort+0xbc>)
 8000a5e:	400a      	ands	r2, r1
 8000a60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000a6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2225      	movs	r2, #37	; 0x25
 8000a70:	2101      	movs	r1, #1
 8000a72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2224      	movs	r2, #36	; 0x24
 8000a78:	2100      	movs	r1, #0
 8000a7a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	0018      	movs	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	fffffeff 	.word	0xfffffeff

08000a8c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a94:	210f      	movs	r1, #15
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2225      	movs	r2, #37	; 0x25
 8000aa0:	5c9b      	ldrb	r3, [r3, r2]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d006      	beq.n	8000ab6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2204      	movs	r2, #4
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	e048      	b.n	8000b48 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	210e      	movs	r1, #14
 8000ac2:	438a      	bics	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	438a      	bics	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ae0:	491d      	ldr	r1, [pc, #116]	; (8000b58 <HAL_DMA_Abort_IT+0xcc>)
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	221c      	movs	r2, #28
 8000aec:	401a      	ands	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	2101      	movs	r1, #1
 8000af4:	4091      	lsls	r1, r2
 8000af6:	000a      	movs	r2, r1
 8000af8:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000b02:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00c      	beq.n	8000b26 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b16:	4910      	ldr	r1, [pc, #64]	; (8000b58 <HAL_DMA_Abort_IT+0xcc>)
 8000b18:	400a      	ands	r2, r1
 8000b1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000b24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2225      	movs	r2, #37	; 0x25
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2224      	movs	r2, #36	; 0x24
 8000b32:	2100      	movs	r1, #0
 8000b34:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d004      	beq.n	8000b48 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	0010      	movs	r0, r2
 8000b46:	4798      	blx	r3
    }
  }
  return status;
 8000b48:	230f      	movs	r3, #15
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	781b      	ldrb	r3, [r3, #0]
}
 8000b4e:	0018      	movs	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b004      	add	sp, #16
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	fffffeff 	.word	0xfffffeff

08000b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6a:	e14d      	b.n	8000e08 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2101      	movs	r1, #1
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	4091      	lsls	r1, r2
 8000b76:	000a      	movs	r2, r1
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d100      	bne.n	8000b84 <HAL_GPIO_Init+0x28>
 8000b82:	e13e      	b.n	8000e02 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	2203      	movs	r2, #3
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d005      	beq.n	8000b9c <HAL_GPIO_Init+0x40>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	d130      	bne.n	8000bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	409a      	lsls	r2, r3
 8000baa:	0013      	movs	r3, r2
 8000bac:	43da      	mvns	r2, r3
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	409a      	lsls	r2, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	43da      	mvns	r2, r3
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4013      	ands	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	091b      	lsrs	r3, r3, #4
 8000be8:	2201      	movs	r2, #1
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	2203      	movs	r2, #3
 8000c04:	4013      	ands	r3, r2
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d017      	beq.n	8000c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	2203      	movs	r2, #3
 8000c16:	409a      	lsls	r2, r3
 8000c18:	0013      	movs	r3, r2
 8000c1a:	43da      	mvns	r2, r3
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2203      	movs	r2, #3
 8000c40:	4013      	ands	r3, r2
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d123      	bne.n	8000c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	08da      	lsrs	r2, r3, #3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3208      	adds	r2, #8
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	58d3      	ldr	r3, [r2, r3]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2207      	movs	r2, #7
 8000c58:	4013      	ands	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	0013      	movs	r3, r2
 8000c62:	43da      	mvns	r2, r3
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	4013      	ands	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	691a      	ldr	r2, [r3, #16]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2107      	movs	r1, #7
 8000c72:	400b      	ands	r3, r1
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	0092      	lsls	r2, r2, #2
 8000c8a:	6939      	ldr	r1, [r7, #16]
 8000c8c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	409a      	lsls	r2, r3
 8000c9c:	0013      	movs	r3, r2
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2203      	movs	r2, #3
 8000cac:	401a      	ands	r2, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	409a      	lsls	r2, r3
 8000cb4:	0013      	movs	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	23c0      	movs	r3, #192	; 0xc0
 8000cc8:	029b      	lsls	r3, r3, #10
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d100      	bne.n	8000cd0 <HAL_GPIO_Init+0x174>
 8000cce:	e098      	b.n	8000e02 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000cd0:	4a53      	ldr	r2, [pc, #332]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3318      	adds	r3, #24
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	589b      	ldr	r3, [r3, r2]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	23a0      	movs	r3, #160	; 0xa0
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d019      	beq.n	8000d32 <HAL_GPIO_Init+0x1d6>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a48      	ldr	r2, [pc, #288]	; (8000e24 <HAL_GPIO_Init+0x2c8>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d013      	beq.n	8000d2e <HAL_GPIO_Init+0x1d2>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a47      	ldr	r2, [pc, #284]	; (8000e28 <HAL_GPIO_Init+0x2cc>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d00d      	beq.n	8000d2a <HAL_GPIO_Init+0x1ce>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a46      	ldr	r2, [pc, #280]	; (8000e2c <HAL_GPIO_Init+0x2d0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d007      	beq.n	8000d26 <HAL_GPIO_Init+0x1ca>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <HAL_GPIO_Init+0x2d4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_GPIO_Init+0x1c6>
 8000d1e:	2304      	movs	r3, #4
 8000d20:	e008      	b.n	8000d34 <HAL_GPIO_Init+0x1d8>
 8000d22:	2305      	movs	r3, #5
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x1d8>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x1d8>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x1d8>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x1d8>
 8000d32:	2300      	movs	r3, #0
 8000d34:	697a      	ldr	r2, [r7, #20]
 8000d36:	2103      	movs	r1, #3
 8000d38:	400a      	ands	r2, r1
 8000d3a:	00d2      	lsls	r2, r2, #3
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000d44:	4936      	ldr	r1, [pc, #216]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3318      	adds	r3, #24
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d52:	4b33      	ldr	r3, [pc, #204]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685a      	ldr	r2, [r3, #4]
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	035b      	lsls	r3, r3, #13
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43da      	mvns	r2, r3
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685a      	ldr	r2, [r3, #4]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	039b      	lsls	r3, r3, #14
 8000d94:	4013      	ands	r3, r2
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000da6:	4a1e      	ldr	r2, [pc, #120]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000da8:	2384      	movs	r3, #132	; 0x84
 8000daa:	58d3      	ldr	r3, [r2, r3]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43da      	mvns	r2, r3
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	029b      	lsls	r3, r3, #10
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dcc:	4914      	ldr	r1, [pc, #80]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000dce:	2284      	movs	r2, #132	; 0x84
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000dd4:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	58d3      	ldr	r3, [r2, r3]
 8000dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43da      	mvns	r2, r3
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4013      	ands	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	025b      	lsls	r3, r3, #9
 8000dee:	4013      	ands	r3, r2
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dfa:	4909      	ldr	r1, [pc, #36]	; (8000e20 <HAL_GPIO_Init+0x2c4>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	40da      	lsrs	r2, r3
 8000e10:	1e13      	subs	r3, r2, #0
 8000e12:	d000      	beq.n	8000e16 <HAL_GPIO_Init+0x2ba>
 8000e14:	e6aa      	b.n	8000b6c <HAL_GPIO_Init+0x10>
  }
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b006      	add	sp, #24
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40021800 	.word	0x40021800
 8000e24:	50000400 	.word	0x50000400
 8000e28:	50000800 	.word	0x50000800
 8000e2c:	50000c00 	.word	0x50000c00
 8000e30:	50001000 	.word	0x50001000

08000e34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	23e0      	movs	r3, #224	; 0xe0
 8000e3e:	01db      	lsls	r3, r3, #7
 8000e40:	4013      	ands	r3, r2
}
 8000e42:	0018      	movs	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e52:	4b3c      	ldr	r3, [pc, #240]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2238      	movs	r2, #56	; 0x38
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d10f      	bne.n	8000e7c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000e5c:	4b39      	ldr	r3, [pc, #228]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	0adb      	lsrs	r3, r3, #11
 8000e62:	2207      	movs	r2, #7
 8000e64:	4013      	ands	r3, r2
 8000e66:	2201      	movs	r2, #1
 8000e68:	409a      	lsls	r2, r3
 8000e6a:	0013      	movs	r3, r2
 8000e6c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000e6e:	6839      	ldr	r1, [r7, #0]
 8000e70:	4835      	ldr	r0, [pc, #212]	; (8000f48 <HAL_RCC_GetSysClockFreq+0xfc>)
 8000e72:	f7ff f947 	bl	8000104 <__udivsi3>
 8000e76:	0003      	movs	r3, r0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	e05d      	b.n	8000f38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e7c:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2238      	movs	r2, #56	; 0x38
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d102      	bne.n	8000e8e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <HAL_RCC_GetSysClockFreq+0x100>)
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e054      	b.n	8000f38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	2238      	movs	r2, #56	; 0x38
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b10      	cmp	r3, #16
 8000e98:	d138      	bne.n	8000f0c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	2207      	movs	r2, #7
 8000eac:	4013      	ands	r3, r2
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d10d      	bne.n	8000ed4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000eb8:	68b9      	ldr	r1, [r7, #8]
 8000eba:	4824      	ldr	r0, [pc, #144]	; (8000f4c <HAL_RCC_GetSysClockFreq+0x100>)
 8000ebc:	f7ff f922 	bl	8000104 <__udivsi3>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	227f      	movs	r2, #127	; 0x7f
 8000ecc:	4013      	ands	r3, r2
 8000ece:	434b      	muls	r3, r1
 8000ed0:	617b      	str	r3, [r7, #20]
        break;
 8000ed2:	e00d      	b.n	8000ef0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	481c      	ldr	r0, [pc, #112]	; (8000f48 <HAL_RCC_GetSysClockFreq+0xfc>)
 8000ed8:	f7ff f914 	bl	8000104 <__udivsi3>
 8000edc:	0003      	movs	r3, r0
 8000ede:	0019      	movs	r1, r3
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	227f      	movs	r2, #127	; 0x7f
 8000ee8:	4013      	ands	r3, r2
 8000eea:	434b      	muls	r3, r1
 8000eec:	617b      	str	r3, [r7, #20]
        break;
 8000eee:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0f5b      	lsrs	r3, r3, #29
 8000ef6:	2207      	movs	r2, #7
 8000ef8:	4013      	ands	r3, r2
 8000efa:	3301      	adds	r3, #1
 8000efc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	6978      	ldr	r0, [r7, #20]
 8000f02:	f7ff f8ff 	bl	8000104 <__udivsi3>
 8000f06:	0003      	movs	r3, r0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	e015      	b.n	8000f38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2238      	movs	r2, #56	; 0x38
 8000f12:	4013      	ands	r3, r2
 8000f14:	2b20      	cmp	r3, #32
 8000f16:	d103      	bne.n	8000f20 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	021b      	lsls	r3, r3, #8
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	e00b      	b.n	8000f38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	2238      	movs	r2, #56	; 0x38
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b18      	cmp	r3, #24
 8000f2a:	d103      	bne.n	8000f34 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8000f2c:	23fa      	movs	r3, #250	; 0xfa
 8000f2e:	01db      	lsls	r3, r3, #7
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	e001      	b.n	8000f38 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8000f38:	693b      	ldr	r3, [r7, #16]
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b006      	add	sp, #24
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40021000 	.word	0x40021000
 8000f48:	00f42400 	.word	0x00f42400
 8000f4c:	007a1200 	.word	0x007a1200

08000f50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <HAL_RCC_GetHCLKFreq+0x10>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	20000020 	.word	0x20000020

08000f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f64:	b5b0      	push	{r4, r5, r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8000f68:	f7ff fff2 	bl	8000f50 <HAL_RCC_GetHCLKFreq>
 8000f6c:	0004      	movs	r4, r0
 8000f6e:	f7ff ff61 	bl	8000e34 <LL_RCC_GetAPB1Prescaler>
 8000f72:	0003      	movs	r3, r0
 8000f74:	0b1a      	lsrs	r2, r3, #12
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	58d3      	ldr	r3, [r2, r3]
 8000f7c:	221f      	movs	r2, #31
 8000f7e:	4013      	ands	r3, r2
 8000f80:	40dc      	lsrs	r4, r3
 8000f82:	0023      	movs	r3, r4
}
 8000f84:	0018      	movs	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bdb0      	pop	{r4, r5, r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	080031a0 	.word	0x080031a0

08000f90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e046      	b.n	8001030 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2288      	movs	r2, #136	; 0x88
 8000fa6:	589b      	ldr	r3, [r3, r2]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d107      	bne.n	8000fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2284      	movs	r2, #132	; 0x84
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff faea 	bl	8000590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2288      	movs	r2, #136	; 0x88
 8000fc0:	2124      	movs	r1, #36	; 0x24
 8000fc2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2101      	movs	r1, #1
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 ffce 	bl	8001f80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 fc74 	bl	80018d4 <UART_SetConfig>
 8000fec:	0003      	movs	r3, r0
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e01c      	b.n	8001030 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	490d      	ldr	r1, [pc, #52]	; (8001038 <HAL_UART_Init+0xa8>)
 8001002:	400a      	ands	r2, r1
 8001004:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	212a      	movs	r1, #42	; 0x2a
 8001012:	438a      	bics	r2, r1
 8001014:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	0018      	movs	r0, r3
 800102a:	f001 f85d 	bl	80020e8 <UART_CheckIdleState>
 800102e:	0003      	movs	r3, r0
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b002      	add	sp, #8
 8001036:	bd80      	pop	{r7, pc}
 8001038:	ffffb7ff 	.word	0xffffb7ff

0800103c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af02      	add	r7, sp, #8
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	1dbb      	adds	r3, r7, #6
 800104a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2288      	movs	r2, #136	; 0x88
 8001050:	589b      	ldr	r3, [r3, r2]
 8001052:	2b20      	cmp	r3, #32
 8001054:	d000      	beq.n	8001058 <HAL_UART_Transmit+0x1c>
 8001056:	e090      	b.n	800117a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_UART_Transmit+0x2a>
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e088      	b.n	800117c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	015b      	lsls	r3, r3, #5
 8001072:	429a      	cmp	r2, r3
 8001074:	d109      	bne.n	800108a <HAL_UART_Transmit+0x4e>
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d105      	bne.n	800108a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2201      	movs	r2, #1
 8001082:	4013      	ands	r3, r2
 8001084:	d001      	beq.n	800108a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e078      	b.n	800117c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2290      	movs	r2, #144	; 0x90
 800108e:	2100      	movs	r1, #0
 8001090:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2288      	movs	r2, #136	; 0x88
 8001096:	2121      	movs	r1, #33	; 0x21
 8001098:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800109a:	f7ff fba3 	bl	80007e4 <HAL_GetTick>
 800109e:	0003      	movs	r3, r0
 80010a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1dba      	adds	r2, r7, #6
 80010a6:	2154      	movs	r1, #84	; 0x54
 80010a8:	8812      	ldrh	r2, [r2, #0]
 80010aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	1dba      	adds	r2, r7, #6
 80010b0:	2156      	movs	r1, #86	; 0x56
 80010b2:	8812      	ldrh	r2, [r2, #0]
 80010b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	015b      	lsls	r3, r3, #5
 80010be:	429a      	cmp	r2, r3
 80010c0:	d108      	bne.n	80010d4 <HAL_UART_Transmit+0x98>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d104      	bne.n	80010d4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	e003      	b.n	80010dc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80010dc:	e030      	b.n	8001140 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	0013      	movs	r3, r2
 80010e8:	2200      	movs	r2, #0
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	f001 f8a6 	bl	800223c <UART_WaitOnFlagUntilTimeout>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d005      	beq.n	8001100 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2288      	movs	r2, #136	; 0x88
 80010f8:	2120      	movs	r1, #32
 80010fa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e03d      	b.n	800117c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10b      	bne.n	800111e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	001a      	movs	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	05d2      	lsls	r2, r2, #23
 8001112:	0dd2      	lsrs	r2, r2, #23
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	3302      	adds	r3, #2
 800111a:	61bb      	str	r3, [r7, #24]
 800111c:	e007      	b.n	800112e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	781a      	ldrb	r2, [r3, #0]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	3301      	adds	r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2256      	movs	r2, #86	; 0x56
 8001132:	5a9b      	ldrh	r3, [r3, r2]
 8001134:	b29b      	uxth	r3, r3
 8001136:	3b01      	subs	r3, #1
 8001138:	b299      	uxth	r1, r3
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2256      	movs	r2, #86	; 0x56
 800113e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2256      	movs	r2, #86	; 0x56
 8001144:	5a9b      	ldrh	r3, [r3, r2]
 8001146:	b29b      	uxth	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1c8      	bne.n	80010de <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	0013      	movs	r3, r2
 8001156:	2200      	movs	r2, #0
 8001158:	2140      	movs	r1, #64	; 0x40
 800115a:	f001 f86f 	bl	800223c <UART_WaitOnFlagUntilTimeout>
 800115e:	1e03      	subs	r3, r0, #0
 8001160:	d005      	beq.n	800116e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2288      	movs	r2, #136	; 0x88
 8001166:	2120      	movs	r1, #32
 8001168:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e006      	b.n	800117c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2288      	movs	r2, #136	; 0x88
 8001172:	2120      	movs	r1, #32
 8001174:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800117a:	2302      	movs	r3, #2
  }
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b008      	add	sp, #32
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	1dbb      	adds	r3, r7, #6
 8001190:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	228c      	movs	r2, #140	; 0x8c
 8001196:	589b      	ldr	r3, [r3, r2]
 8001198:	2b20      	cmp	r3, #32
 800119a:	d14f      	bne.n	800123c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_UART_Receive_IT+0x26>
 80011a2:	1dbb      	adds	r3, r7, #6
 80011a4:	881b      	ldrh	r3, [r3, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e047      	b.n	800123e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d109      	bne.n	80011ce <HAL_UART_Receive_IT+0x4a>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d105      	bne.n	80011ce <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4013      	ands	r3, r2
 80011c8:	d001      	beq.n	80011ce <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e037      	b.n	800123e <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1b      	ldr	r2, [pc, #108]	; (8001248 <HAL_UART_Receive_IT+0xc4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d025      	beq.n	800122a <HAL_UART_Receive_IT+0xa6>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <HAL_UART_Receive_IT+0xc8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d020      	beq.n	800122a <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	041b      	lsls	r3, r3, #16
 80011f2:	4013      	ands	r3, r2
 80011f4:	d019      	beq.n	800122a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011f6:	f3ef 8310 	mrs	r3, PRIMASK
 80011fa:	613b      	str	r3, [r7, #16]
  return(result);
 80011fc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	2301      	movs	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f383 8810 	msr	PRIMASK, r3
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2180      	movs	r1, #128	; 0x80
 8001218:	04c9      	lsls	r1, r1, #19
 800121a:	430a      	orrs	r2, r1
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	f383 8810 	msr	PRIMASK, r3
}
 8001228:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800122a:	1dbb      	adds	r3, r7, #6
 800122c:	881a      	ldrh	r2, [r3, #0]
 800122e:	68b9      	ldr	r1, [r7, #8]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	0018      	movs	r0, r3
 8001234:	f001 f872 	bl	800231c <UART_Start_Receive_IT>
 8001238:	0003      	movs	r3, r0
 800123a:	e000      	b.n	800123e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800123c:	2302      	movs	r3, #2
  }
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b008      	add	sp, #32
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40008000 	.word	0x40008000
 800124c:	40008400 	.word	0x40008400

08001250 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b0aa      	sub	sp, #168	; 0xa8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	22a4      	movs	r2, #164	; 0xa4
 8001260:	18b9      	adds	r1, r7, r2
 8001262:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	20a0      	movs	r0, #160	; 0xa0
 800126c:	1839      	adds	r1, r7, r0
 800126e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	249c      	movs	r4, #156	; 0x9c
 8001278:	1939      	adds	r1, r7, r4
 800127a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800127c:	0011      	movs	r1, r2
 800127e:	18bb      	adds	r3, r7, r2
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4aa2      	ldr	r2, [pc, #648]	; (800150c <HAL_UART_IRQHandler+0x2bc>)
 8001284:	4013      	ands	r3, r2
 8001286:	2298      	movs	r2, #152	; 0x98
 8001288:	18bd      	adds	r5, r7, r2
 800128a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800128c:	18bb      	adds	r3, r7, r2
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11a      	bne.n	80012ca <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001294:	187b      	adds	r3, r7, r1
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2220      	movs	r2, #32
 800129a:	4013      	ands	r3, r2
 800129c:	d015      	beq.n	80012ca <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800129e:	183b      	adds	r3, r7, r0
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2220      	movs	r2, #32
 80012a4:	4013      	ands	r3, r2
 80012a6:	d105      	bne.n	80012b4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	055b      	lsls	r3, r3, #21
 80012b0:	4013      	ands	r3, r2
 80012b2:	d00a      	beq.n	80012ca <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <HAL_UART_IRQHandler+0x6e>
 80012bc:	e2dc      	b.n	8001878 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	0010      	movs	r0, r2
 80012c6:	4798      	blx	r3
      }
      return;
 80012c8:	e2d6      	b.n	8001878 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80012ca:	2398      	movs	r3, #152	; 0x98
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d100      	bne.n	80012d6 <HAL_UART_IRQHandler+0x86>
 80012d4:	e122      	b.n	800151c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80012d6:	239c      	movs	r3, #156	; 0x9c
 80012d8:	18fb      	adds	r3, r7, r3
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a8c      	ldr	r2, [pc, #560]	; (8001510 <HAL_UART_IRQHandler+0x2c0>)
 80012de:	4013      	ands	r3, r2
 80012e0:	d106      	bne.n	80012f0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80012e2:	23a0      	movs	r3, #160	; 0xa0
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a8a      	ldr	r2, [pc, #552]	; (8001514 <HAL_UART_IRQHandler+0x2c4>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	d100      	bne.n	80012f0 <HAL_UART_IRQHandler+0xa0>
 80012ee:	e115      	b.n	800151c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80012f0:	23a4      	movs	r3, #164	; 0xa4
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2201      	movs	r2, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	d012      	beq.n	8001322 <HAL_UART_IRQHandler+0xd2>
 80012fc:	23a0      	movs	r3, #160	; 0xa0
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4013      	ands	r3, r2
 8001308:	d00b      	beq.n	8001322 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2201      	movs	r2, #1
 8001310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2290      	movs	r2, #144	; 0x90
 8001316:	589b      	ldr	r3, [r3, r2]
 8001318:	2201      	movs	r2, #1
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2190      	movs	r1, #144	; 0x90
 8001320:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001322:	23a4      	movs	r3, #164	; 0xa4
 8001324:	18fb      	adds	r3, r7, r3
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d011      	beq.n	8001352 <HAL_UART_IRQHandler+0x102>
 800132e:	239c      	movs	r3, #156	; 0x9c
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2201      	movs	r2, #1
 8001336:	4013      	ands	r3, r2
 8001338:	d00b      	beq.n	8001352 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2202      	movs	r2, #2
 8001340:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2290      	movs	r2, #144	; 0x90
 8001346:	589b      	ldr	r3, [r3, r2]
 8001348:	2204      	movs	r2, #4
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2190      	movs	r1, #144	; 0x90
 8001350:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001352:	23a4      	movs	r3, #164	; 0xa4
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2204      	movs	r2, #4
 800135a:	4013      	ands	r3, r2
 800135c:	d011      	beq.n	8001382 <HAL_UART_IRQHandler+0x132>
 800135e:	239c      	movs	r3, #156	; 0x9c
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	d00b      	beq.n	8001382 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2204      	movs	r2, #4
 8001370:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2290      	movs	r2, #144	; 0x90
 8001376:	589b      	ldr	r3, [r3, r2]
 8001378:	2202      	movs	r2, #2
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2190      	movs	r1, #144	; 0x90
 8001380:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001382:	23a4      	movs	r3, #164	; 0xa4
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2208      	movs	r2, #8
 800138a:	4013      	ands	r3, r2
 800138c:	d017      	beq.n	80013be <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2220      	movs	r2, #32
 8001396:	4013      	ands	r3, r2
 8001398:	d105      	bne.n	80013a6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800139a:	239c      	movs	r3, #156	; 0x9c
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a5b      	ldr	r2, [pc, #364]	; (8001510 <HAL_UART_IRQHandler+0x2c0>)
 80013a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80013a4:	d00b      	beq.n	80013be <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2208      	movs	r2, #8
 80013ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2290      	movs	r2, #144	; 0x90
 80013b2:	589b      	ldr	r3, [r3, r2]
 80013b4:	2208      	movs	r2, #8
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2190      	movs	r1, #144	; 0x90
 80013bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80013be:	23a4      	movs	r3, #164	; 0xa4
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	011b      	lsls	r3, r3, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	d013      	beq.n	80013f4 <HAL_UART_IRQHandler+0x1a4>
 80013cc:	23a0      	movs	r3, #160	; 0xa0
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	04db      	lsls	r3, r3, #19
 80013d6:	4013      	ands	r3, r2
 80013d8:	d00c      	beq.n	80013f4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2290      	movs	r2, #144	; 0x90
 80013e8:	589b      	ldr	r3, [r3, r2]
 80013ea:	2220      	movs	r2, #32
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2190      	movs	r1, #144	; 0x90
 80013f2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2290      	movs	r2, #144	; 0x90
 80013f8:	589b      	ldr	r3, [r3, r2]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d100      	bne.n	8001400 <HAL_UART_IRQHandler+0x1b0>
 80013fe:	e23d      	b.n	800187c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001400:	23a4      	movs	r3, #164	; 0xa4
 8001402:	18fb      	adds	r3, r7, r3
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2220      	movs	r2, #32
 8001408:	4013      	ands	r3, r2
 800140a:	d015      	beq.n	8001438 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800140c:	23a0      	movs	r3, #160	; 0xa0
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2220      	movs	r2, #32
 8001414:	4013      	ands	r3, r2
 8001416:	d106      	bne.n	8001426 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001418:	239c      	movs	r3, #156	; 0x9c
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	055b      	lsls	r3, r3, #21
 8001422:	4013      	ands	r3, r2
 8001424:	d008      	beq.n	8001438 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	0010      	movs	r0, r2
 8001436:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2290      	movs	r2, #144	; 0x90
 800143c:	589b      	ldr	r3, [r3, r2]
 800143e:	2194      	movs	r1, #148	; 0x94
 8001440:	187a      	adds	r2, r7, r1
 8001442:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	4013      	ands	r3, r2
 800144e:	2b40      	cmp	r3, #64	; 0x40
 8001450:	d004      	beq.n	800145c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001452:	187b      	adds	r3, r7, r1
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2228      	movs	r2, #40	; 0x28
 8001458:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800145a:	d04c      	beq.n	80014f6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	0018      	movs	r0, r3
 8001460:	f001 f880 	bl	8002564 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2240      	movs	r2, #64	; 0x40
 800146c:	4013      	ands	r3, r2
 800146e:	2b40      	cmp	r3, #64	; 0x40
 8001470:	d13c      	bne.n	80014ec <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001472:	f3ef 8310 	mrs	r3, PRIMASK
 8001476:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8001478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800147a:	2090      	movs	r0, #144	; 0x90
 800147c:	183a      	adds	r2, r7, r0
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001486:	f383 8810 	msr	PRIMASK, r3
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2140      	movs	r1, #64	; 0x40
 8001498:	438a      	bics	r2, r1
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	183b      	adds	r3, r7, r0
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014a4:	f383 8810 	msr	PRIMASK, r3
}
 80014a8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	589b      	ldr	r3, [r3, r2]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d016      	beq.n	80014e2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	589b      	ldr	r3, [r3, r2]
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_UART_IRQHandler+0x2c8>)
 80014bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	589b      	ldr	r3, [r3, r2]
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fae1 	bl	8000a8c <HAL_DMA_Abort_IT>
 80014ca:	1e03      	subs	r3, r0, #0
 80014cc:	d01c      	beq.n	8001508 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	589b      	ldr	r3, [r3, r2]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	2180      	movs	r1, #128	; 0x80
 80014da:	5852      	ldr	r2, [r2, r1]
 80014dc:	0010      	movs	r0, r2
 80014de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80014e0:	e012      	b.n	8001508 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 f9e1 	bl	80018ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80014ea:	e00d      	b.n	8001508 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 f9dc 	bl	80018ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80014f4:	e008      	b.n	8001508 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f000 f9d7 	bl	80018ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2290      	movs	r2, #144	; 0x90
 8001502:	2100      	movs	r1, #0
 8001504:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001506:	e1b9      	b.n	800187c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001508:	46c0      	nop			; (mov r8, r8)
    return;
 800150a:	e1b7      	b.n	800187c <HAL_UART_IRQHandler+0x62c>
 800150c:	0000080f 	.word	0x0000080f
 8001510:	10000001 	.word	0x10000001
 8001514:	04000120 	.word	0x04000120
 8001518:	08002631 	.word	0x08002631

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001520:	2b01      	cmp	r3, #1
 8001522:	d000      	beq.n	8001526 <HAL_UART_IRQHandler+0x2d6>
 8001524:	e13e      	b.n	80017a4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001526:	23a4      	movs	r3, #164	; 0xa4
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2210      	movs	r2, #16
 800152e:	4013      	ands	r3, r2
 8001530:	d100      	bne.n	8001534 <HAL_UART_IRQHandler+0x2e4>
 8001532:	e137      	b.n	80017a4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001534:	23a0      	movs	r3, #160	; 0xa0
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2210      	movs	r2, #16
 800153c:	4013      	ands	r3, r2
 800153e:	d100      	bne.n	8001542 <HAL_UART_IRQHandler+0x2f2>
 8001540:	e130      	b.n	80017a4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2210      	movs	r2, #16
 8001548:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2240      	movs	r2, #64	; 0x40
 8001552:	4013      	ands	r3, r2
 8001554:	2b40      	cmp	r3, #64	; 0x40
 8001556:	d000      	beq.n	800155a <HAL_UART_IRQHandler+0x30a>
 8001558:	e0a4      	b.n	80016a4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	589b      	ldr	r3, [r3, r2]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	217e      	movs	r1, #126	; 0x7e
 8001566:	187b      	adds	r3, r7, r1
 8001568:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800156a:	187b      	adds	r3, r7, r1
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d100      	bne.n	8001574 <HAL_UART_IRQHandler+0x324>
 8001572:	e185      	b.n	8001880 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	225c      	movs	r2, #92	; 0x5c
 8001578:	5a9b      	ldrh	r3, [r3, r2]
 800157a:	187a      	adds	r2, r7, r1
 800157c:	8812      	ldrh	r2, [r2, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d300      	bcc.n	8001584 <HAL_UART_IRQHandler+0x334>
 8001582:	e17d      	b.n	8001880 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	187a      	adds	r2, r7, r1
 8001588:	215e      	movs	r1, #94	; 0x5e
 800158a:	8812      	ldrh	r2, [r2, #0]
 800158c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	589b      	ldr	r3, [r3, r2]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2220      	movs	r2, #32
 800159a:	4013      	ands	r3, r2
 800159c:	d170      	bne.n	8001680 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800159e:	f3ef 8310 	mrs	r3, PRIMASK
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80015a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80015a6:	67bb      	str	r3, [r7, #120]	; 0x78
 80015a8:	2301      	movs	r3, #1
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ae:	f383 8810 	msr	PRIMASK, r3
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	49b4      	ldr	r1, [pc, #720]	; (8001890 <HAL_UART_IRQHandler+0x640>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ca:	f383 8810 	msr	PRIMASK, r3
}
 80015ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015d0:	f3ef 8310 	mrs	r3, PRIMASK
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80015d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015d8:	677b      	str	r3, [r7, #116]	; 0x74
 80015da:	2301      	movs	r3, #1
 80015dc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e0:	f383 8810 	msr	PRIMASK, r3
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	438a      	bics	r2, r1
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015f8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015fc:	f383 8810 	msr	PRIMASK, r3
}
 8001600:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001602:	f3ef 8310 	mrs	r3, PRIMASK
 8001606:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8001608:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800160a:	673b      	str	r3, [r7, #112]	; 0x70
 800160c:	2301      	movs	r3, #1
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001612:	f383 8810 	msr	PRIMASK, r3
}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2140      	movs	r1, #64	; 0x40
 8001624:	438a      	bics	r2, r1
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800162a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800162c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800162e:	f383 8810 	msr	PRIMASK, r3
}
 8001632:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	228c      	movs	r2, #140	; 0x8c
 8001638:	2120      	movs	r1, #32
 800163a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001642:	f3ef 8310 	mrs	r3, PRIMASK
 8001646:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8001648:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800164a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800164c:	2301      	movs	r3, #1
 800164e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001652:	f383 8810 	msr	PRIMASK, r3
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2110      	movs	r1, #16
 8001664:	438a      	bics	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800166a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800166c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166e:	f383 8810 	msr	PRIMASK, r3
}
 8001672:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	589b      	ldr	r3, [r3, r2]
 800167a:	0018      	movs	r0, r3
 800167c:	f7ff f9a6 	bl	80009cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	225c      	movs	r2, #92	; 0x5c
 800168a:	5a9a      	ldrh	r2, [r3, r2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	215e      	movs	r1, #94	; 0x5e
 8001690:	5a5b      	ldrh	r3, [r3, r1]
 8001692:	b29b      	uxth	r3, r3
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	b29a      	uxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	0011      	movs	r1, r2
 800169c:	0018      	movs	r0, r3
 800169e:	f000 f90d 	bl	80018bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80016a2:	e0ed      	b.n	8001880 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	225c      	movs	r2, #92	; 0x5c
 80016a8:	5a99      	ldrh	r1, [r3, r2]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	225e      	movs	r2, #94	; 0x5e
 80016ae:	5a9b      	ldrh	r3, [r3, r2]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	208e      	movs	r0, #142	; 0x8e
 80016b4:	183b      	adds	r3, r7, r0
 80016b6:	1a8a      	subs	r2, r1, r2
 80016b8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	225e      	movs	r2, #94	; 0x5e
 80016be:	5a9b      	ldrh	r3, [r3, r2]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d100      	bne.n	80016c8 <HAL_UART_IRQHandler+0x478>
 80016c6:	e0dd      	b.n	8001884 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80016c8:	183b      	adds	r3, r7, r0
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d100      	bne.n	80016d2 <HAL_UART_IRQHandler+0x482>
 80016d0:	e0d8      	b.n	8001884 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016d2:	f3ef 8310 	mrs	r3, PRIMASK
 80016d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80016d8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80016da:	2488      	movs	r4, #136	; 0x88
 80016dc:	193a      	adds	r2, r7, r4
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	2301      	movs	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	f383 8810 	msr	PRIMASK, r3
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4967      	ldr	r1, [pc, #412]	; (8001894 <HAL_UART_IRQHandler+0x644>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	f383 8810 	msr	PRIMASK, r3
}
 8001708:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800170a:	f3ef 8310 	mrs	r3, PRIMASK
 800170e:	61bb      	str	r3, [r7, #24]
  return(result);
 8001710:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001712:	2484      	movs	r4, #132	; 0x84
 8001714:	193a      	adds	r2, r7, r4
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	2301      	movs	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f383 8810 	msr	PRIMASK, r3
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	495a      	ldr	r1, [pc, #360]	; (8001898 <HAL_UART_IRQHandler+0x648>)
 8001730:	400a      	ands	r2, r1
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	193b      	adds	r3, r7, r4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f383 8810 	msr	PRIMASK, r3
}
 8001740:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	228c      	movs	r2, #140	; 0x8c
 8001746:	2120      	movs	r1, #32
 8001748:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001756:	f3ef 8310 	mrs	r3, PRIMASK
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800175e:	2480      	movs	r4, #128	; 0x80
 8001760:	193a      	adds	r2, r7, r4
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	2301      	movs	r3, #1
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176a:	f383 8810 	msr	PRIMASK, r3
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2110      	movs	r1, #16
 800177c:	438a      	bics	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	193b      	adds	r3, r7, r4
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	f383 8810 	msr	PRIMASK, r3
}
 800178c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2202      	movs	r2, #2
 8001792:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001794:	183b      	adds	r3, r7, r0
 8001796:	881a      	ldrh	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	0011      	movs	r1, r2
 800179c:	0018      	movs	r0, r3
 800179e:	f000 f88d 	bl	80018bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80017a2:	e06f      	b.n	8001884 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80017a4:	23a4      	movs	r3, #164	; 0xa4
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	035b      	lsls	r3, r3, #13
 80017ae:	4013      	ands	r3, r2
 80017b0:	d010      	beq.n	80017d4 <HAL_UART_IRQHandler+0x584>
 80017b2:	239c      	movs	r3, #156	; 0x9c
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	03db      	lsls	r3, r3, #15
 80017bc:	4013      	ands	r3, r2
 80017be:	d009      	beq.n	80017d4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	0352      	lsls	r2, r2, #13
 80017c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f001 fc9f 	bl	8003110 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80017d2:	e05a      	b.n	800188a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80017d4:	23a4      	movs	r3, #164	; 0xa4
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	4013      	ands	r3, r2
 80017de:	d016      	beq.n	800180e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80017e0:	23a0      	movs	r3, #160	; 0xa0
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2280      	movs	r2, #128	; 0x80
 80017e8:	4013      	ands	r3, r2
 80017ea:	d106      	bne.n	80017fa <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80017ec:	239c      	movs	r3, #156	; 0x9c
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	041b      	lsls	r3, r3, #16
 80017f6:	4013      	ands	r3, r2
 80017f8:	d009      	beq.n	800180e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d042      	beq.n	8001888 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	0010      	movs	r0, r2
 800180a:	4798      	blx	r3
    }
    return;
 800180c:	e03c      	b.n	8001888 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800180e:	23a4      	movs	r3, #164	; 0xa4
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	4013      	ands	r3, r2
 8001818:	d00a      	beq.n	8001830 <HAL_UART_IRQHandler+0x5e0>
 800181a:	23a0      	movs	r3, #160	; 0xa0
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	4013      	ands	r3, r2
 8001824:	d004      	beq.n	8001830 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f000 ff18 	bl	800265e <UART_EndTransmit_IT>
    return;
 800182e:	e02c      	b.n	800188a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8001830:	23a4      	movs	r3, #164	; 0xa4
 8001832:	18fb      	adds	r3, r7, r3
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	4013      	ands	r3, r2
 800183c:	d00b      	beq.n	8001856 <HAL_UART_IRQHandler+0x606>
 800183e:	23a0      	movs	r3, #160	; 0xa0
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	05db      	lsls	r3, r3, #23
 8001848:	4013      	ands	r3, r2
 800184a:	d004      	beq.n	8001856 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	0018      	movs	r0, r3
 8001850:	f001 fc6e 	bl	8003130 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001854:	e019      	b.n	800188a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8001856:	23a4      	movs	r3, #164	; 0xa4
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	045b      	lsls	r3, r3, #17
 8001860:	4013      	ands	r3, r2
 8001862:	d012      	beq.n	800188a <HAL_UART_IRQHandler+0x63a>
 8001864:	23a0      	movs	r3, #160	; 0xa0
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	da0d      	bge.n	800188a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	0018      	movs	r0, r3
 8001872:	f001 fc55 	bl	8003120 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8001876:	e008      	b.n	800188a <HAL_UART_IRQHandler+0x63a>
      return;
 8001878:	46c0      	nop			; (mov r8, r8)
 800187a:	e006      	b.n	800188a <HAL_UART_IRQHandler+0x63a>
    return;
 800187c:	46c0      	nop			; (mov r8, r8)
 800187e:	e004      	b.n	800188a <HAL_UART_IRQHandler+0x63a>
      return;
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	e002      	b.n	800188a <HAL_UART_IRQHandler+0x63a>
      return;
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	e000      	b.n	800188a <HAL_UART_IRQHandler+0x63a>
    return;
 8001888:	46c0      	nop			; (mov r8, r8)
  }
}
 800188a:	46bd      	mov	sp, r7
 800188c:	b02a      	add	sp, #168	; 0xa8
 800188e:	bdb0      	pop	{r4, r5, r7, pc}
 8001890:	fffffeff 	.word	0xfffffeff
 8001894:	fffffedf 	.word	0xfffffedf
 8001898:	effffffe 	.word	0xeffffffe

0800189c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b002      	add	sp, #8
 80018aa:	bd80      	pop	{r7, pc}

080018ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	000a      	movs	r2, r1
 80018c6:	1cbb      	adds	r3, r7, #2
 80018c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b090      	sub	sp, #64	; 0x40
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80018dc:	231a      	movs	r3, #26
 80018de:	2220      	movs	r2, #32
 80018e0:	189b      	adds	r3, r3, r2
 80018e2:	19db      	adds	r3, r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4ac1      	ldr	r2, [pc, #772]	; (8001c0c <UART_SetConfig+0x338>)
 8001908:	4013      	ands	r3, r2
 800190a:	0019      	movs	r1, r3
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001912:	430b      	orrs	r3, r1
 8001914:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4abc      	ldr	r2, [pc, #752]	; (8001c10 <UART_SetConfig+0x33c>)
 800191e:	4013      	ands	r3, r2
 8001920:	0018      	movs	r0, r3
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	68d9      	ldr	r1, [r3, #12]
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	0003      	movs	r3, r0
 800192c:	430b      	orrs	r3, r1
 800192e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4ab6      	ldr	r2, [pc, #728]	; (8001c14 <UART_SetConfig+0x340>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d009      	beq.n	8001954 <UART_SetConfig+0x80>
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4ab4      	ldr	r2, [pc, #720]	; (8001c18 <UART_SetConfig+0x344>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d004      	beq.n	8001954 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001950:	4313      	orrs	r3, r2
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4ab0      	ldr	r2, [pc, #704]	; (8001c1c <UART_SetConfig+0x348>)
 800195c:	4013      	ands	r3, r2
 800195e:	0019      	movs	r1, r3
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001966:	430b      	orrs	r3, r1
 8001968:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	220f      	movs	r2, #15
 8001972:	4393      	bics	r3, r2
 8001974:	0018      	movs	r0, r3
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	0003      	movs	r3, r0
 8001980:	430b      	orrs	r3, r1
 8001982:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4aa5      	ldr	r2, [pc, #660]	; (8001c20 <UART_SetConfig+0x34c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d131      	bne.n	80019f2 <UART_SetConfig+0x11e>
 800198e:	4ba5      	ldr	r3, [pc, #660]	; (8001c24 <UART_SetConfig+0x350>)
 8001990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001992:	2203      	movs	r2, #3
 8001994:	4013      	ands	r3, r2
 8001996:	2b03      	cmp	r3, #3
 8001998:	d01d      	beq.n	80019d6 <UART_SetConfig+0x102>
 800199a:	d823      	bhi.n	80019e4 <UART_SetConfig+0x110>
 800199c:	2b02      	cmp	r3, #2
 800199e:	d00c      	beq.n	80019ba <UART_SetConfig+0xe6>
 80019a0:	d820      	bhi.n	80019e4 <UART_SetConfig+0x110>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <UART_SetConfig+0xd8>
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d00e      	beq.n	80019c8 <UART_SetConfig+0xf4>
 80019aa:	e01b      	b.n	80019e4 <UART_SetConfig+0x110>
 80019ac:	231b      	movs	r3, #27
 80019ae:	2220      	movs	r2, #32
 80019b0:	189b      	adds	r3, r3, r2
 80019b2:	19db      	adds	r3, r3, r7
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e154      	b.n	8001c64 <UART_SetConfig+0x390>
 80019ba:	231b      	movs	r3, #27
 80019bc:	2220      	movs	r2, #32
 80019be:	189b      	adds	r3, r3, r2
 80019c0:	19db      	adds	r3, r3, r7
 80019c2:	2202      	movs	r2, #2
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e14d      	b.n	8001c64 <UART_SetConfig+0x390>
 80019c8:	231b      	movs	r3, #27
 80019ca:	2220      	movs	r2, #32
 80019cc:	189b      	adds	r3, r3, r2
 80019ce:	19db      	adds	r3, r3, r7
 80019d0:	2204      	movs	r2, #4
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	e146      	b.n	8001c64 <UART_SetConfig+0x390>
 80019d6:	231b      	movs	r3, #27
 80019d8:	2220      	movs	r2, #32
 80019da:	189b      	adds	r3, r3, r2
 80019dc:	19db      	adds	r3, r3, r7
 80019de:	2208      	movs	r2, #8
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e13f      	b.n	8001c64 <UART_SetConfig+0x390>
 80019e4:	231b      	movs	r3, #27
 80019e6:	2220      	movs	r2, #32
 80019e8:	189b      	adds	r3, r3, r2
 80019ea:	19db      	adds	r3, r3, r7
 80019ec:	2210      	movs	r2, #16
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e138      	b.n	8001c64 <UART_SetConfig+0x390>
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a8c      	ldr	r2, [pc, #560]	; (8001c28 <UART_SetConfig+0x354>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d131      	bne.n	8001a60 <UART_SetConfig+0x18c>
 80019fc:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <UART_SetConfig+0x350>)
 80019fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a00:	220c      	movs	r2, #12
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b0c      	cmp	r3, #12
 8001a06:	d01d      	beq.n	8001a44 <UART_SetConfig+0x170>
 8001a08:	d823      	bhi.n	8001a52 <UART_SetConfig+0x17e>
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d00c      	beq.n	8001a28 <UART_SetConfig+0x154>
 8001a0e:	d820      	bhi.n	8001a52 <UART_SetConfig+0x17e>
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <UART_SetConfig+0x146>
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d00e      	beq.n	8001a36 <UART_SetConfig+0x162>
 8001a18:	e01b      	b.n	8001a52 <UART_SetConfig+0x17e>
 8001a1a:	231b      	movs	r3, #27
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	189b      	adds	r3, r3, r2
 8001a20:	19db      	adds	r3, r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e11d      	b.n	8001c64 <UART_SetConfig+0x390>
 8001a28:	231b      	movs	r3, #27
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	189b      	adds	r3, r3, r2
 8001a2e:	19db      	adds	r3, r3, r7
 8001a30:	2202      	movs	r2, #2
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	e116      	b.n	8001c64 <UART_SetConfig+0x390>
 8001a36:	231b      	movs	r3, #27
 8001a38:	2220      	movs	r2, #32
 8001a3a:	189b      	adds	r3, r3, r2
 8001a3c:	19db      	adds	r3, r3, r7
 8001a3e:	2204      	movs	r2, #4
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e10f      	b.n	8001c64 <UART_SetConfig+0x390>
 8001a44:	231b      	movs	r3, #27
 8001a46:	2220      	movs	r2, #32
 8001a48:	189b      	adds	r3, r3, r2
 8001a4a:	19db      	adds	r3, r3, r7
 8001a4c:	2208      	movs	r2, #8
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e108      	b.n	8001c64 <UART_SetConfig+0x390>
 8001a52:	231b      	movs	r3, #27
 8001a54:	2220      	movs	r2, #32
 8001a56:	189b      	adds	r3, r3, r2
 8001a58:	19db      	adds	r3, r3, r7
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	e101      	b.n	8001c64 <UART_SetConfig+0x390>
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a71      	ldr	r2, [pc, #452]	; (8001c2c <UART_SetConfig+0x358>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d131      	bne.n	8001ace <UART_SetConfig+0x1fa>
 8001a6a:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <UART_SetConfig+0x350>)
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6e:	2230      	movs	r2, #48	; 0x30
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b30      	cmp	r3, #48	; 0x30
 8001a74:	d01d      	beq.n	8001ab2 <UART_SetConfig+0x1de>
 8001a76:	d823      	bhi.n	8001ac0 <UART_SetConfig+0x1ec>
 8001a78:	2b20      	cmp	r3, #32
 8001a7a:	d00c      	beq.n	8001a96 <UART_SetConfig+0x1c2>
 8001a7c:	d820      	bhi.n	8001ac0 <UART_SetConfig+0x1ec>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <UART_SetConfig+0x1b4>
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d00e      	beq.n	8001aa4 <UART_SetConfig+0x1d0>
 8001a86:	e01b      	b.n	8001ac0 <UART_SetConfig+0x1ec>
 8001a88:	231b      	movs	r3, #27
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	189b      	adds	r3, r3, r2
 8001a8e:	19db      	adds	r3, r3, r7
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	e0e6      	b.n	8001c64 <UART_SetConfig+0x390>
 8001a96:	231b      	movs	r3, #27
 8001a98:	2220      	movs	r2, #32
 8001a9a:	189b      	adds	r3, r3, r2
 8001a9c:	19db      	adds	r3, r3, r7
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e0df      	b.n	8001c64 <UART_SetConfig+0x390>
 8001aa4:	231b      	movs	r3, #27
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	189b      	adds	r3, r3, r2
 8001aaa:	19db      	adds	r3, r3, r7
 8001aac:	2204      	movs	r2, #4
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e0d8      	b.n	8001c64 <UART_SetConfig+0x390>
 8001ab2:	231b      	movs	r3, #27
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	189b      	adds	r3, r3, r2
 8001ab8:	19db      	adds	r3, r3, r7
 8001aba:	2208      	movs	r2, #8
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e0d1      	b.n	8001c64 <UART_SetConfig+0x390>
 8001ac0:	231b      	movs	r3, #27
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	189b      	adds	r3, r3, r2
 8001ac6:	19db      	adds	r3, r3, r7
 8001ac8:	2210      	movs	r2, #16
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e0ca      	b.n	8001c64 <UART_SetConfig+0x390>
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <UART_SetConfig+0x35c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d106      	bne.n	8001ae6 <UART_SetConfig+0x212>
 8001ad8:	231b      	movs	r3, #27
 8001ada:	2220      	movs	r2, #32
 8001adc:	189b      	adds	r3, r3, r2
 8001ade:	19db      	adds	r3, r3, r7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
 8001ae4:	e0be      	b.n	8001c64 <UART_SetConfig+0x390>
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <UART_SetConfig+0x360>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d106      	bne.n	8001afe <UART_SetConfig+0x22a>
 8001af0:	231b      	movs	r3, #27
 8001af2:	2220      	movs	r2, #32
 8001af4:	189b      	adds	r3, r3, r2
 8001af6:	19db      	adds	r3, r3, r7
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
 8001afc:	e0b2      	b.n	8001c64 <UART_SetConfig+0x390>
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a4d      	ldr	r2, [pc, #308]	; (8001c38 <UART_SetConfig+0x364>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d106      	bne.n	8001b16 <UART_SetConfig+0x242>
 8001b08:	231b      	movs	r3, #27
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	189b      	adds	r3, r3, r2
 8001b0e:	19db      	adds	r3, r3, r7
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e0a6      	b.n	8001c64 <UART_SetConfig+0x390>
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a3e      	ldr	r2, [pc, #248]	; (8001c14 <UART_SetConfig+0x340>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d13e      	bne.n	8001b9e <UART_SetConfig+0x2ca>
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <UART_SetConfig+0x350>)
 8001b22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b24:	23c0      	movs	r3, #192	; 0xc0
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	4013      	ands	r3, r2
 8001b2a:	22c0      	movs	r2, #192	; 0xc0
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d027      	beq.n	8001b82 <UART_SetConfig+0x2ae>
 8001b32:	22c0      	movs	r2, #192	; 0xc0
 8001b34:	0112      	lsls	r2, r2, #4
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d82a      	bhi.n	8001b90 <UART_SetConfig+0x2bc>
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d011      	beq.n	8001b66 <UART_SetConfig+0x292>
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d822      	bhi.n	8001b90 <UART_SetConfig+0x2bc>
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <UART_SetConfig+0x284>
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	00d2      	lsls	r2, r2, #3
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00e      	beq.n	8001b74 <UART_SetConfig+0x2a0>
 8001b56:	e01b      	b.n	8001b90 <UART_SetConfig+0x2bc>
 8001b58:	231b      	movs	r3, #27
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	189b      	adds	r3, r3, r2
 8001b5e:	19db      	adds	r3, r3, r7
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e07e      	b.n	8001c64 <UART_SetConfig+0x390>
 8001b66:	231b      	movs	r3, #27
 8001b68:	2220      	movs	r2, #32
 8001b6a:	189b      	adds	r3, r3, r2
 8001b6c:	19db      	adds	r3, r3, r7
 8001b6e:	2202      	movs	r2, #2
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e077      	b.n	8001c64 <UART_SetConfig+0x390>
 8001b74:	231b      	movs	r3, #27
 8001b76:	2220      	movs	r2, #32
 8001b78:	189b      	adds	r3, r3, r2
 8001b7a:	19db      	adds	r3, r3, r7
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e070      	b.n	8001c64 <UART_SetConfig+0x390>
 8001b82:	231b      	movs	r3, #27
 8001b84:	2220      	movs	r2, #32
 8001b86:	189b      	adds	r3, r3, r2
 8001b88:	19db      	adds	r3, r3, r7
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	701a      	strb	r2, [r3, #0]
 8001b8e:	e069      	b.n	8001c64 <UART_SetConfig+0x390>
 8001b90:	231b      	movs	r3, #27
 8001b92:	2220      	movs	r2, #32
 8001b94:	189b      	adds	r3, r3, r2
 8001b96:	19db      	adds	r3, r3, r7
 8001b98:	2210      	movs	r2, #16
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	e062      	b.n	8001c64 <UART_SetConfig+0x390>
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <UART_SetConfig+0x344>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d157      	bne.n	8001c58 <UART_SetConfig+0x384>
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <UART_SetConfig+0x350>)
 8001baa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001bac:	23c0      	movs	r3, #192	; 0xc0
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	22c0      	movs	r2, #192	; 0xc0
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d040      	beq.n	8001c3c <UART_SetConfig+0x368>
 8001bba:	22c0      	movs	r2, #192	; 0xc0
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d843      	bhi.n	8001c4a <UART_SetConfig+0x376>
 8001bc2:	2280      	movs	r2, #128	; 0x80
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d011      	beq.n	8001bee <UART_SetConfig+0x31a>
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d83b      	bhi.n	8001c4a <UART_SetConfig+0x376>
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <UART_SetConfig+0x30c>
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	0052      	lsls	r2, r2, #1
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00e      	beq.n	8001bfc <UART_SetConfig+0x328>
 8001bde:	e034      	b.n	8001c4a <UART_SetConfig+0x376>
 8001be0:	231b      	movs	r3, #27
 8001be2:	2220      	movs	r2, #32
 8001be4:	189b      	adds	r3, r3, r2
 8001be6:	19db      	adds	r3, r3, r7
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e03a      	b.n	8001c64 <UART_SetConfig+0x390>
 8001bee:	231b      	movs	r3, #27
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	189b      	adds	r3, r3, r2
 8001bf4:	19db      	adds	r3, r3, r7
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	e033      	b.n	8001c64 <UART_SetConfig+0x390>
 8001bfc:	231b      	movs	r3, #27
 8001bfe:	2220      	movs	r2, #32
 8001c00:	189b      	adds	r3, r3, r2
 8001c02:	19db      	adds	r3, r3, r7
 8001c04:	2204      	movs	r2, #4
 8001c06:	701a      	strb	r2, [r3, #0]
 8001c08:	e02c      	b.n	8001c64 <UART_SetConfig+0x390>
 8001c0a:	46c0      	nop			; (mov r8, r8)
 8001c0c:	cfff69f3 	.word	0xcfff69f3
 8001c10:	ffffcfff 	.word	0xffffcfff
 8001c14:	40008000 	.word	0x40008000
 8001c18:	40008400 	.word	0x40008400
 8001c1c:	11fff4ff 	.word	0x11fff4ff
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	40004800 	.word	0x40004800
 8001c30:	40004c00 	.word	0x40004c00
 8001c34:	40005000 	.word	0x40005000
 8001c38:	40013c00 	.word	0x40013c00
 8001c3c:	231b      	movs	r3, #27
 8001c3e:	2220      	movs	r2, #32
 8001c40:	189b      	adds	r3, r3, r2
 8001c42:	19db      	adds	r3, r3, r7
 8001c44:	2208      	movs	r2, #8
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	e00c      	b.n	8001c64 <UART_SetConfig+0x390>
 8001c4a:	231b      	movs	r3, #27
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	189b      	adds	r3, r3, r2
 8001c50:	19db      	adds	r3, r3, r7
 8001c52:	2210      	movs	r2, #16
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	e005      	b.n	8001c64 <UART_SetConfig+0x390>
 8001c58:	231b      	movs	r3, #27
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	189b      	adds	r3, r3, r2
 8001c5e:	19db      	adds	r3, r3, r7
 8001c60:	2210      	movs	r2, #16
 8001c62:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4ac1      	ldr	r2, [pc, #772]	; (8001f70 <UART_SetConfig+0x69c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d005      	beq.n	8001c7a <UART_SetConfig+0x3a6>
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4ac0      	ldr	r2, [pc, #768]	; (8001f74 <UART_SetConfig+0x6a0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d000      	beq.n	8001c7a <UART_SetConfig+0x3a6>
 8001c78:	e093      	b.n	8001da2 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001c7a:	231b      	movs	r3, #27
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	189b      	adds	r3, r3, r2
 8001c80:	19db      	adds	r3, r3, r7
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b08      	cmp	r3, #8
 8001c86:	d015      	beq.n	8001cb4 <UART_SetConfig+0x3e0>
 8001c88:	dc18      	bgt.n	8001cbc <UART_SetConfig+0x3e8>
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d00d      	beq.n	8001caa <UART_SetConfig+0x3d6>
 8001c8e:	dc15      	bgt.n	8001cbc <UART_SetConfig+0x3e8>
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <UART_SetConfig+0x3c6>
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d005      	beq.n	8001ca4 <UART_SetConfig+0x3d0>
 8001c98:	e010      	b.n	8001cbc <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001c9a:	f7ff f963 	bl	8000f64 <HAL_RCC_GetPCLK1Freq>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ca2:	e014      	b.n	8001cce <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ca4:	4bb4      	ldr	r3, [pc, #720]	; (8001f78 <UART_SetConfig+0x6a4>)
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ca8:	e011      	b.n	8001cce <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001caa:	f7ff f8cf 	bl	8000e4c <HAL_RCC_GetSysClockFreq>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001cb2:	e00c      	b.n	8001cce <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001cba:	e008      	b.n	8001cce <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001cc0:	231a      	movs	r3, #26
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	189b      	adds	r3, r3, r2
 8001cc6:	19db      	adds	r3, r3, r7
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
        break;
 8001ccc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d100      	bne.n	8001cd6 <UART_SetConfig+0x402>
 8001cd4:	e135      	b.n	8001f42 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cda:	4ba8      	ldr	r3, [pc, #672]	; (8001f7c <UART_SetConfig+0x6a8>)
 8001cdc:	0052      	lsls	r2, r2, #1
 8001cde:	5ad3      	ldrh	r3, [r2, r3]
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ce4:	f7fe fa0e 	bl	8000104 <__udivsi3>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	0013      	movs	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	189b      	adds	r3, r3, r2
 8001cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d305      	bcc.n	8001d08 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d906      	bls.n	8001d16 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8001d08:	231a      	movs	r3, #26
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	189b      	adds	r3, r3, r2
 8001d0e:	19db      	adds	r3, r3, r7
 8001d10:	2201      	movs	r2, #1
 8001d12:	701a      	strb	r2, [r3, #0]
 8001d14:	e044      	b.n	8001da0 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d22:	4b96      	ldr	r3, [pc, #600]	; (8001f7c <UART_SetConfig+0x6a8>)
 8001d24:	0052      	lsls	r2, r2, #1
 8001d26:	5ad3      	ldrh	r3, [r2, r3]
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	69b8      	ldr	r0, [r7, #24]
 8001d34:	69f9      	ldr	r1, [r7, #28]
 8001d36:	f7fe fa71 	bl	800021c <__aeabi_uldivmod>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	000b      	movs	r3, r1
 8001d3e:	0e11      	lsrs	r1, r2, #24
 8001d40:	021d      	lsls	r5, r3, #8
 8001d42:	430d      	orrs	r5, r1
 8001d44:	0214      	lsls	r4, r2, #8
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	1900      	adds	r0, r0, r4
 8001d58:	4169      	adcs	r1, r5
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	2300      	movs	r3, #0
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f7fe fa58 	bl	800021c <__aeabi_uldivmod>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	000b      	movs	r3, r1
 8001d70:	0013      	movs	r3, r2
 8001d72:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d76:	23c0      	movs	r3, #192	; 0xc0
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d309      	bcc.n	8001d92 <UART_SetConfig+0x4be>
 8001d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	035b      	lsls	r3, r3, #13
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d204      	bcs.n	8001d92 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d8e:	60da      	str	r2, [r3, #12]
 8001d90:	e006      	b.n	8001da0 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8001d92:	231a      	movs	r3, #26
 8001d94:	2220      	movs	r2, #32
 8001d96:	189b      	adds	r3, r3, r2
 8001d98:	19db      	adds	r3, r3, r7
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8001d9e:	e0d0      	b.n	8001f42 <UART_SetConfig+0x66e>
 8001da0:	e0cf      	b.n	8001f42 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d000      	beq.n	8001db0 <UART_SetConfig+0x4dc>
 8001dae:	e070      	b.n	8001e92 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8001db0:	231b      	movs	r3, #27
 8001db2:	2220      	movs	r2, #32
 8001db4:	189b      	adds	r3, r3, r2
 8001db6:	19db      	adds	r3, r3, r7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d015      	beq.n	8001dea <UART_SetConfig+0x516>
 8001dbe:	dc18      	bgt.n	8001df2 <UART_SetConfig+0x51e>
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d00d      	beq.n	8001de0 <UART_SetConfig+0x50c>
 8001dc4:	dc15      	bgt.n	8001df2 <UART_SetConfig+0x51e>
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <UART_SetConfig+0x4fc>
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d005      	beq.n	8001dda <UART_SetConfig+0x506>
 8001dce:	e010      	b.n	8001df2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001dd0:	f7ff f8c8 	bl	8000f64 <HAL_RCC_GetPCLK1Freq>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001dd8:	e014      	b.n	8001e04 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <UART_SetConfig+0x6a4>)
 8001ddc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001dde:	e011      	b.n	8001e04 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001de0:	f7ff f834 	bl	8000e4c <HAL_RCC_GetSysClockFreq>
 8001de4:	0003      	movs	r3, r0
 8001de6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001de8:	e00c      	b.n	8001e04 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001df0:	e008      	b.n	8001e04 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001df6:	231a      	movs	r3, #26
 8001df8:	2220      	movs	r2, #32
 8001dfa:	189b      	adds	r3, r3, r2
 8001dfc:	19db      	adds	r3, r3, r7
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
        break;
 8001e02:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d100      	bne.n	8001e0c <UART_SetConfig+0x538>
 8001e0a:	e09a      	b.n	8001f42 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e10:	4b5a      	ldr	r3, [pc, #360]	; (8001f7c <UART_SetConfig+0x6a8>)
 8001e12:	0052      	lsls	r2, r2, #1
 8001e14:	5ad3      	ldrh	r3, [r2, r3]
 8001e16:	0019      	movs	r1, r3
 8001e18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e1a:	f7fe f973 	bl	8000104 <__udivsi3>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	005a      	lsls	r2, r3, #1
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	18d2      	adds	r2, r2, r3
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	0019      	movs	r1, r3
 8001e30:	0010      	movs	r0, r2
 8001e32:	f7fe f967 	bl	8000104 <__udivsi3>
 8001e36:	0003      	movs	r3, r0
 8001e38:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d921      	bls.n	8001e84 <UART_SetConfig+0x5b0>
 8001e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	025b      	lsls	r3, r3, #9
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d21c      	bcs.n	8001e84 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	200e      	movs	r0, #14
 8001e50:	2420      	movs	r4, #32
 8001e52:	1903      	adds	r3, r0, r4
 8001e54:	19db      	adds	r3, r3, r7
 8001e56:	210f      	movs	r1, #15
 8001e58:	438a      	bics	r2, r1
 8001e5a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5e:	085b      	lsrs	r3, r3, #1
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	2207      	movs	r2, #7
 8001e64:	4013      	ands	r3, r2
 8001e66:	b299      	uxth	r1, r3
 8001e68:	1903      	adds	r3, r0, r4
 8001e6a:	19db      	adds	r3, r3, r7
 8001e6c:	1902      	adds	r2, r0, r4
 8001e6e:	19d2      	adds	r2, r2, r7
 8001e70:	8812      	ldrh	r2, [r2, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	1902      	adds	r2, r0, r4
 8001e7c:	19d2      	adds	r2, r2, r7
 8001e7e:	8812      	ldrh	r2, [r2, #0]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	e05e      	b.n	8001f42 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8001e84:	231a      	movs	r3, #26
 8001e86:	2220      	movs	r2, #32
 8001e88:	189b      	adds	r3, r3, r2
 8001e8a:	19db      	adds	r3, r3, r7
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	e057      	b.n	8001f42 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001e92:	231b      	movs	r3, #27
 8001e94:	2220      	movs	r2, #32
 8001e96:	189b      	adds	r3, r3, r2
 8001e98:	19db      	adds	r3, r3, r7
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d015      	beq.n	8001ecc <UART_SetConfig+0x5f8>
 8001ea0:	dc18      	bgt.n	8001ed4 <UART_SetConfig+0x600>
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d00d      	beq.n	8001ec2 <UART_SetConfig+0x5ee>
 8001ea6:	dc15      	bgt.n	8001ed4 <UART_SetConfig+0x600>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <UART_SetConfig+0x5de>
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d005      	beq.n	8001ebc <UART_SetConfig+0x5e8>
 8001eb0:	e010      	b.n	8001ed4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001eb2:	f7ff f857 	bl	8000f64 <HAL_RCC_GetPCLK1Freq>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001eba:	e014      	b.n	8001ee6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <UART_SetConfig+0x6a4>)
 8001ebe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ec0:	e011      	b.n	8001ee6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ec2:	f7fe ffc3 	bl	8000e4c <HAL_RCC_GetSysClockFreq>
 8001ec6:	0003      	movs	r3, r0
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001eca:	e00c      	b.n	8001ee6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001ed2:	e008      	b.n	8001ee6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001ed8:	231a      	movs	r3, #26
 8001eda:	2220      	movs	r2, #32
 8001edc:	189b      	adds	r3, r3, r2
 8001ede:	19db      	adds	r3, r3, r7
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
        break;
 8001ee4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d02a      	beq.n	8001f42 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <UART_SetConfig+0x6a8>)
 8001ef2:	0052      	lsls	r2, r2, #1
 8001ef4:	5ad3      	ldrh	r3, [r2, r3]
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001efa:	f7fe f903 	bl	8000104 <__udivsi3>
 8001efe:	0003      	movs	r3, r0
 8001f00:	001a      	movs	r2, r3
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	18d2      	adds	r2, r2, r3
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	0019      	movs	r1, r3
 8001f10:	0010      	movs	r0, r2
 8001f12:	f7fe f8f7 	bl	8000104 <__udivsi3>
 8001f16:	0003      	movs	r3, r0
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d90a      	bls.n	8001f36 <UART_SetConfig+0x662>
 8001f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	025b      	lsls	r3, r3, #9
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d205      	bcs.n	8001f36 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	e005      	b.n	8001f42 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8001f36:	231a      	movs	r3, #26
 8001f38:	2220      	movs	r2, #32
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	19db      	adds	r3, r3, r7
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	226a      	movs	r2, #106	; 0x6a
 8001f46:	2101      	movs	r1, #1
 8001f48:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	2268      	movs	r2, #104	; 0x68
 8001f4e:	2101      	movs	r1, #1
 8001f50:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	2200      	movs	r2, #0
 8001f56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8001f5e:	231a      	movs	r3, #26
 8001f60:	2220      	movs	r2, #32
 8001f62:	189b      	adds	r3, r3, r2
 8001f64:	19db      	adds	r3, r3, r7
 8001f66:	781b      	ldrb	r3, [r3, #0]
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b010      	add	sp, #64	; 0x40
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f70:	40008000 	.word	0x40008000
 8001f74:	40008400 	.word	0x40008400
 8001f78:	00f42400 	.word	0x00f42400
 8001f7c:	080031c0 	.word	0x080031c0

08001f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d00b      	beq.n	8001faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4a4a      	ldr	r2, [pc, #296]	; (80020c4 <UART_AdvFeatureConfig+0x144>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d00b      	beq.n	8001fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4a43      	ldr	r2, [pc, #268]	; (80020c8 <UART_AdvFeatureConfig+0x148>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <UART_AdvFeatureConfig+0x14c>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d00b      	beq.n	8002010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a34      	ldr	r2, [pc, #208]	; (80020d0 <UART_AdvFeatureConfig+0x150>)
 8002000:	4013      	ands	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	2210      	movs	r2, #16
 8002016:	4013      	ands	r3, r2
 8002018:	d00b      	beq.n	8002032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <UART_AdvFeatureConfig+0x154>)
 8002022:	4013      	ands	r3, r2
 8002024:	0019      	movs	r1, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002036:	2220      	movs	r2, #32
 8002038:	4013      	ands	r3, r2
 800203a:	d00b      	beq.n	8002054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4a25      	ldr	r2, [pc, #148]	; (80020d8 <UART_AdvFeatureConfig+0x158>)
 8002044:	4013      	ands	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	2240      	movs	r2, #64	; 0x40
 800205a:	4013      	ands	r3, r2
 800205c:	d01d      	beq.n	800209a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a1d      	ldr	r2, [pc, #116]	; (80020dc <UART_AdvFeatureConfig+0x15c>)
 8002066:	4013      	ands	r3, r2
 8002068:	0019      	movs	r1, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	035b      	lsls	r3, r3, #13
 800207e:	429a      	cmp	r2, r3
 8002080:	d10b      	bne.n	800209a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <UART_AdvFeatureConfig+0x160>)
 800208a:	4013      	ands	r3, r2
 800208c:	0019      	movs	r1, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	4013      	ands	r3, r2
 80020a2:	d00b      	beq.n	80020bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <UART_AdvFeatureConfig+0x164>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
  }
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b002      	add	sp, #8
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	ffff7fff 	.word	0xffff7fff
 80020c8:	fffdffff 	.word	0xfffdffff
 80020cc:	fffeffff 	.word	0xfffeffff
 80020d0:	fffbffff 	.word	0xfffbffff
 80020d4:	ffffefff 	.word	0xffffefff
 80020d8:	ffffdfff 	.word	0xffffdfff
 80020dc:	ffefffff 	.word	0xffefffff
 80020e0:	ff9fffff 	.word	0xff9fffff
 80020e4:	fff7ffff 	.word	0xfff7ffff

080020e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b092      	sub	sp, #72	; 0x48
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2290      	movs	r2, #144	; 0x90
 80020f4:	2100      	movs	r1, #0
 80020f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80020f8:	f7fe fb74 	bl	80007e4 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2208      	movs	r2, #8
 8002108:	4013      	ands	r3, r2
 800210a:	2b08      	cmp	r3, #8
 800210c:	d12d      	bne.n	800216a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800210e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	0391      	lsls	r1, r2, #14
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	4a47      	ldr	r2, [pc, #284]	; (8002234 <UART_CheckIdleState+0x14c>)
 8002118:	9200      	str	r2, [sp, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	f000 f88e 	bl	800223c <UART_WaitOnFlagUntilTimeout>
 8002120:	1e03      	subs	r3, r0, #0
 8002122:	d022      	beq.n	800216a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002124:	f3ef 8310 	mrs	r3, PRIMASK
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
 800212e:	2301      	movs	r3, #1
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	f383 8810 	msr	PRIMASK, r3
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	438a      	bics	r2, r1
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	f383 8810 	msr	PRIMASK, r3
}
 8002154:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2288      	movs	r2, #136	; 0x88
 800215a:	2120      	movs	r1, #32
 800215c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2284      	movs	r2, #132	; 0x84
 8002162:	2100      	movs	r1, #0
 8002164:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e060      	b.n	800222c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2204      	movs	r2, #4
 8002172:	4013      	ands	r3, r2
 8002174:	2b04      	cmp	r3, #4
 8002176:	d146      	bne.n	8002206 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	03d1      	lsls	r1, r2, #15
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <UART_CheckIdleState+0x14c>)
 8002182:	9200      	str	r2, [sp, #0]
 8002184:	2200      	movs	r2, #0
 8002186:	f000 f859 	bl	800223c <UART_WaitOnFlagUntilTimeout>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d03b      	beq.n	8002206 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800218e:	f3ef 8310 	mrs	r3, PRIMASK
 8002192:	60fb      	str	r3, [r7, #12]
  return(result);
 8002194:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
 8002198:	2301      	movs	r3, #1
 800219a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f383 8810 	msr	PRIMASK, r3
}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4922      	ldr	r1, [pc, #136]	; (8002238 <UART_CheckIdleState+0x150>)
 80021b0:	400a      	ands	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f383 8810 	msr	PRIMASK, r3
}
 80021be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021c0:	f3ef 8310 	mrs	r3, PRIMASK
 80021c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80021c6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ca:	2301      	movs	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f383 8810 	msr	PRIMASK, r3
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	438a      	bics	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f383 8810 	msr	PRIMASK, r3
}
 80021f0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	228c      	movs	r2, #140	; 0x8c
 80021f6:	2120      	movs	r1, #32
 80021f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2284      	movs	r2, #132	; 0x84
 80021fe:	2100      	movs	r1, #0
 8002200:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e012      	b.n	800222c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2288      	movs	r2, #136	; 0x88
 800220a:	2120      	movs	r1, #32
 800220c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	228c      	movs	r2, #140	; 0x8c
 8002212:	2120      	movs	r1, #32
 8002214:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2284      	movs	r2, #132	; 0x84
 8002226:	2100      	movs	r1, #0
 8002228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b010      	add	sp, #64	; 0x40
 8002232:	bd80      	pop	{r7, pc}
 8002234:	01ffffff 	.word	0x01ffffff
 8002238:	fffffedf 	.word	0xfffffedf

0800223c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	1dfb      	adds	r3, r7, #7
 800224a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800224c:	e051      	b.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	3301      	adds	r3, #1
 8002252:	d04e      	beq.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7fe fac6 	bl	80007e4 <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e051      	b.n	8002312 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2204      	movs	r2, #4
 8002276:	4013      	ands	r3, r2
 8002278:	d03b      	beq.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b80      	cmp	r3, #128	; 0x80
 800227e:	d038      	beq.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b40      	cmp	r3, #64	; 0x40
 8002284:	d035      	beq.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2208      	movs	r2, #8
 800228e:	4013      	ands	r3, r2
 8002290:	2b08      	cmp	r3, #8
 8002292:	d111      	bne.n	80022b8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2208      	movs	r2, #8
 800229a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	0018      	movs	r0, r3
 80022a0:	f000 f960 	bl	8002564 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2290      	movs	r2, #144	; 0x90
 80022a8:	2108      	movs	r1, #8
 80022aa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2284      	movs	r2, #132	; 0x84
 80022b0:	2100      	movs	r1, #0
 80022b2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e02c      	b.n	8002312 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	401a      	ands	r2, r3
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d112      	bne.n	80022f2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f943 	bl	8002564 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2290      	movs	r2, #144	; 0x90
 80022e2:	2120      	movs	r1, #32
 80022e4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2284      	movs	r2, #132	; 0x84
 80022ea:	2100      	movs	r1, #0
 80022ec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e00f      	b.n	8002312 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	4013      	ands	r3, r2
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	425a      	negs	r2, r3
 8002302:	4153      	adcs	r3, r2
 8002304:	b2db      	uxtb	r3, r3
 8002306:	001a      	movs	r2, r3
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d09e      	beq.n	800224e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b098      	sub	sp, #96	; 0x60
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1dba      	adds	r2, r7, #6
 8002334:	215c      	movs	r1, #92	; 0x5c
 8002336:	8812      	ldrh	r2, [r2, #0]
 8002338:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1dba      	adds	r2, r7, #6
 800233e:	215e      	movs	r1, #94	; 0x5e
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689a      	ldr	r2, [r3, #8]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	015b      	lsls	r3, r3, #5
 8002352:	429a      	cmp	r2, r3
 8002354:	d10d      	bne.n	8002372 <UART_Start_Receive_IT+0x56>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d104      	bne.n	8002368 <UART_Start_Receive_IT+0x4c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2260      	movs	r2, #96	; 0x60
 8002362:	497b      	ldr	r1, [pc, #492]	; (8002550 <UART_Start_Receive_IT+0x234>)
 8002364:	5299      	strh	r1, [r3, r2]
 8002366:	e02e      	b.n	80023c6 <UART_Start_Receive_IT+0xaa>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2260      	movs	r2, #96	; 0x60
 800236c:	21ff      	movs	r1, #255	; 0xff
 800236e:	5299      	strh	r1, [r3, r2]
 8002370:	e029      	b.n	80023c6 <UART_Start_Receive_IT+0xaa>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10d      	bne.n	8002396 <UART_Start_Receive_IT+0x7a>
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d104      	bne.n	800238c <UART_Start_Receive_IT+0x70>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2260      	movs	r2, #96	; 0x60
 8002386:	21ff      	movs	r1, #255	; 0xff
 8002388:	5299      	strh	r1, [r3, r2]
 800238a:	e01c      	b.n	80023c6 <UART_Start_Receive_IT+0xaa>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2260      	movs	r2, #96	; 0x60
 8002390:	217f      	movs	r1, #127	; 0x7f
 8002392:	5299      	strh	r1, [r3, r2]
 8002394:	e017      	b.n	80023c6 <UART_Start_Receive_IT+0xaa>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	055b      	lsls	r3, r3, #21
 800239e:	429a      	cmp	r2, r3
 80023a0:	d10d      	bne.n	80023be <UART_Start_Receive_IT+0xa2>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <UART_Start_Receive_IT+0x98>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2260      	movs	r2, #96	; 0x60
 80023ae:	217f      	movs	r1, #127	; 0x7f
 80023b0:	5299      	strh	r1, [r3, r2]
 80023b2:	e008      	b.n	80023c6 <UART_Start_Receive_IT+0xaa>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2260      	movs	r2, #96	; 0x60
 80023b8:	213f      	movs	r1, #63	; 0x3f
 80023ba:	5299      	strh	r1, [r3, r2]
 80023bc:	e003      	b.n	80023c6 <UART_Start_Receive_IT+0xaa>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2260      	movs	r2, #96	; 0x60
 80023c2:	2100      	movs	r1, #0
 80023c4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2290      	movs	r2, #144	; 0x90
 80023ca:	2100      	movs	r1, #0
 80023cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	228c      	movs	r2, #140	; 0x8c
 80023d2:	2122      	movs	r1, #34	; 0x22
 80023d4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d6:	f3ef 8310 	mrs	r3, PRIMASK
 80023da:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80023dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023e0:	2301      	movs	r3, #1
 80023e2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e6:	f383 8810 	msr	PRIMASK, r3
}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	430a      	orrs	r2, r1
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023fe:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002402:	f383 8810 	msr	PRIMASK, r3
}
 8002406:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	059b      	lsls	r3, r3, #22
 8002410:	429a      	cmp	r2, r3
 8002412:	d150      	bne.n	80024b6 <UART_Start_Receive_IT+0x19a>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2268      	movs	r2, #104	; 0x68
 8002418:	5a9b      	ldrh	r3, [r3, r2]
 800241a:	1dba      	adds	r2, r7, #6
 800241c:	8812      	ldrh	r2, [r2, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d349      	bcc.n	80024b6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	015b      	lsls	r3, r3, #5
 800242a:	429a      	cmp	r2, r3
 800242c:	d107      	bne.n	800243e <UART_Start_Receive_IT+0x122>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a46      	ldr	r2, [pc, #280]	; (8002554 <UART_Start_Receive_IT+0x238>)
 800243a:	675a      	str	r2, [r3, #116]	; 0x74
 800243c:	e002      	b.n	8002444 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4a45      	ldr	r2, [pc, #276]	; (8002558 <UART_Start_Receive_IT+0x23c>)
 8002442:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d019      	beq.n	8002480 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244c:	f3ef 8310 	mrs	r3, PRIMASK
 8002450:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002454:	65bb      	str	r3, [r7, #88]	; 0x58
 8002456:	2301      	movs	r3, #1
 8002458:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800245a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800245c:	f383 8810 	msr	PRIMASK, r3
}
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0049      	lsls	r1, r1, #1
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002476:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247a:	f383 8810 	msr	PRIMASK, r3
}
 800247e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002480:	f3ef 8310 	mrs	r3, PRIMASK
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002488:	657b      	str	r3, [r7, #84]	; 0x54
 800248a:	2301      	movs	r3, #1
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	0549      	lsls	r1, r1, #21
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	f383 8810 	msr	PRIMASK, r3
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	e047      	b.n	8002546 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	015b      	lsls	r3, r3, #5
 80024be:	429a      	cmp	r2, r3
 80024c0:	d107      	bne.n	80024d2 <UART_Start_Receive_IT+0x1b6>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d103      	bne.n	80024d2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a23      	ldr	r2, [pc, #140]	; (800255c <UART_Start_Receive_IT+0x240>)
 80024ce:	675a      	str	r2, [r3, #116]	; 0x74
 80024d0:	e002      	b.n	80024d8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a22      	ldr	r2, [pc, #136]	; (8002560 <UART_Start_Receive_IT+0x244>)
 80024d6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d019      	beq.n	8002514 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e0:	f3ef 8310 	mrs	r3, PRIMASK
 80024e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80024e6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80024e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ea:	2301      	movs	r3, #1
 80024ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	f383 8810 	msr	PRIMASK, r3
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2190      	movs	r1, #144	; 0x90
 8002502:	0049      	lsls	r1, r1, #1
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f383 8810 	msr	PRIMASK, r3
}
 8002512:	e018      	b.n	8002546 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002514:	f3ef 8310 	mrs	r3, PRIMASK
 8002518:	613b      	str	r3, [r7, #16]
  return(result);
 800251a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800251c:	653b      	str	r3, [r7, #80]	; 0x50
 800251e:	2301      	movs	r3, #1
 8002520:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f383 8810 	msr	PRIMASK, r3
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2120      	movs	r1, #32
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800253c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f383 8810 	msr	PRIMASK, r3
}
 8002544:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b018      	add	sp, #96	; 0x60
 800254e:	bd80      	pop	{r7, pc}
 8002550:	000001ff 	.word	0x000001ff
 8002554:	08002dad 	.word	0x08002dad
 8002558:	08002a61 	.word	0x08002a61
 800255c:	0800288d 	.word	0x0800288d
 8002560:	080026b9 	.word	0x080026b9

08002564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08e      	sub	sp, #56	; 0x38
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800256c:	f3ef 8310 	mrs	r3, PRIMASK
 8002570:	617b      	str	r3, [r7, #20]
  return(result);
 8002572:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
 8002576:	2301      	movs	r3, #1
 8002578:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f383 8810 	msr	PRIMASK, r3
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4926      	ldr	r1, [pc, #152]	; (8002628 <UART_EndRxTransfer+0xc4>)
 800258e:	400a      	ands	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002594:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	f383 8810 	msr	PRIMASK, r3
}
 800259c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800259e:	f3ef 8310 	mrs	r3, PRIMASK
 80025a2:	623b      	str	r3, [r7, #32]
  return(result);
 80025a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
 80025a8:	2301      	movs	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	f383 8810 	msr	PRIMASK, r3
}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	491b      	ldr	r1, [pc, #108]	; (800262c <UART_EndRxTransfer+0xc8>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	f383 8810 	msr	PRIMASK, r3
}
 80025ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d118      	bne.n	800260a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d8:	f3ef 8310 	mrs	r3, PRIMASK
 80025dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80025de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025e2:	2301      	movs	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f383 8810 	msr	PRIMASK, r3
}
 80025ec:	46c0      	nop			; (mov r8, r8)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2110      	movs	r1, #16
 80025fa:	438a      	bics	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002600:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f383 8810 	msr	PRIMASK, r3
}
 8002608:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	228c      	movs	r2, #140	; 0x8c
 800260e:	2120      	movs	r1, #32
 8002610:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	46bd      	mov	sp, r7
 8002622:	b00e      	add	sp, #56	; 0x38
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	fffffedf 	.word	0xfffffedf
 800262c:	effffffe 	.word	0xeffffffe

08002630 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	225e      	movs	r2, #94	; 0x5e
 8002642:	2100      	movs	r1, #0
 8002644:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2256      	movs	r2, #86	; 0x56
 800264a:	2100      	movs	r1, #0
 800264c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	0018      	movs	r0, r3
 8002652:	f7ff f92b 	bl	80018ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b004      	add	sp, #16
 800265c:	bd80      	pop	{r7, pc}

0800265e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002666:	f3ef 8310 	mrs	r3, PRIMASK
 800266a:	60bb      	str	r3, [r7, #8]
  return(result);
 800266c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	2301      	movs	r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f383 8810 	msr	PRIMASK, r3
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	438a      	bics	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2288      	movs	r2, #136	; 0x88
 800269c:	2120      	movs	r1, #32
 800269e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7ff f8f7 	bl	800189c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b006      	add	sp, #24
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b094      	sub	sp, #80	; 0x50
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80026c0:	204e      	movs	r0, #78	; 0x4e
 80026c2:	183b      	adds	r3, r7, r0
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	2160      	movs	r1, #96	; 0x60
 80026c8:	5a52      	ldrh	r2, [r2, r1]
 80026ca:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	228c      	movs	r2, #140	; 0x8c
 80026d0:	589b      	ldr	r3, [r3, r2]
 80026d2:	2b22      	cmp	r3, #34	; 0x22
 80026d4:	d000      	beq.n	80026d8 <UART_RxISR_8BIT+0x20>
 80026d6:	e0c4      	b.n	8002862 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026de:	214c      	movs	r1, #76	; 0x4c
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	183b      	adds	r3, r7, r0
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b2d9      	uxtb	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	400a      	ands	r2, r1
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	225e      	movs	r2, #94	; 0x5e
 8002708:	5a9b      	ldrh	r3, [r3, r2]
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b299      	uxth	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	225e      	movs	r2, #94	; 0x5e
 8002714:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	225e      	movs	r2, #94	; 0x5e
 800271a:	5a9b      	ldrh	r3, [r3, r2]
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d000      	beq.n	8002724 <UART_RxISR_8BIT+0x6c>
 8002722:	e0a6      	b.n	8002872 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002724:	f3ef 8310 	mrs	r3, PRIMASK
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800272c:	64bb      	str	r3, [r7, #72]	; 0x48
 800272e:	2301      	movs	r3, #1
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	f383 8810 	msr	PRIMASK, r3
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	494d      	ldr	r1, [pc, #308]	; (800287c <UART_RxISR_8BIT+0x1c4>)
 8002746:	400a      	ands	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	f383 8810 	msr	PRIMASK, r3
}
 8002754:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002756:	f3ef 8310 	mrs	r3, PRIMASK
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800275e:	647b      	str	r3, [r7, #68]	; 0x44
 8002760:	2301      	movs	r3, #1
 8002762:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	f383 8810 	msr	PRIMASK, r3
}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2101      	movs	r1, #1
 8002778:	438a      	bics	r2, r1
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	f383 8810 	msr	PRIMASK, r3
}
 8002786:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	228c      	movs	r2, #140	; 0x8c
 800278c:	2120      	movs	r1, #32
 800278e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a37      	ldr	r2, [pc, #220]	; (8002880 <UART_RxISR_8BIT+0x1c8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d024      	beq.n	80027f0 <UART_RxISR_8BIT+0x138>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a36      	ldr	r2, [pc, #216]	; (8002884 <UART_RxISR_8BIT+0x1cc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d01f      	beq.n	80027f0 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	4013      	ands	r3, r2
 80027bc:	d018      	beq.n	80027f0 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027be:	f3ef 8310 	mrs	r3, PRIMASK
 80027c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80027c4:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40
 80027c8:	2301      	movs	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f383 8810 	msr	PRIMASK, r3
}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	492a      	ldr	r1, [pc, #168]	; (8002888 <UART_RxISR_8BIT+0x1d0>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f383 8810 	msr	PRIMASK, r3
}
 80027ee:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d12f      	bne.n	8002858 <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002802:	60fb      	str	r3, [r7, #12]
  return(result);
 8002804:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002808:	2301      	movs	r3, #1
 800280a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f383 8810 	msr	PRIMASK, r3
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2110      	movs	r1, #16
 8002820:	438a      	bics	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002826:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f383 8810 	msr	PRIMASK, r3
}
 800282e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	2210      	movs	r2, #16
 8002838:	4013      	ands	r3, r2
 800283a:	2b10      	cmp	r3, #16
 800283c:	d103      	bne.n	8002846 <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2210      	movs	r2, #16
 8002844:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	225c      	movs	r2, #92	; 0x5c
 800284a:	5a9a      	ldrh	r2, [r3, r2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0011      	movs	r1, r2
 8002850:	0018      	movs	r0, r3
 8002852:	f7ff f833 	bl	80018bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002856:	e00c      	b.n	8002872 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	0018      	movs	r0, r3
 800285c:	f7fd fe76 	bl	800054c <HAL_UART_RxCpltCallback>
}
 8002860:	e007      	b.n	8002872 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699a      	ldr	r2, [r3, #24]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2108      	movs	r1, #8
 800286e:	430a      	orrs	r2, r1
 8002870:	619a      	str	r2, [r3, #24]
}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b014      	add	sp, #80	; 0x50
 8002878:	bd80      	pop	{r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	fffffedf 	.word	0xfffffedf
 8002880:	40008000 	.word	0x40008000
 8002884:	40008400 	.word	0x40008400
 8002888:	fbffffff 	.word	0xfbffffff

0800288c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b094      	sub	sp, #80	; 0x50
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002894:	204e      	movs	r0, #78	; 0x4e
 8002896:	183b      	adds	r3, r7, r0
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	2160      	movs	r1, #96	; 0x60
 800289c:	5a52      	ldrh	r2, [r2, r1]
 800289e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	228c      	movs	r2, #140	; 0x8c
 80028a4:	589b      	ldr	r3, [r3, r2]
 80028a6:	2b22      	cmp	r3, #34	; 0x22
 80028a8:	d000      	beq.n	80028ac <UART_RxISR_16BIT+0x20>
 80028aa:	e0c4      	b.n	8002a36 <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b2:	214c      	movs	r1, #76	; 0x4c
 80028b4:	187b      	adds	r3, r7, r1
 80028b6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80028be:	187b      	adds	r3, r7, r1
 80028c0:	183a      	adds	r2, r7, r0
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	8812      	ldrh	r2, [r2, #0]
 80028c6:	4013      	ands	r3, r2
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	1c9a      	adds	r2, r3, #2
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	225e      	movs	r2, #94	; 0x5e
 80028dc:	5a9b      	ldrh	r3, [r3, r2]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b299      	uxth	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	225e      	movs	r2, #94	; 0x5e
 80028e8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	225e      	movs	r2, #94	; 0x5e
 80028ee:	5a9b      	ldrh	r3, [r3, r2]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d000      	beq.n	80028f8 <UART_RxISR_16BIT+0x6c>
 80028f6:	e0a6      	b.n	8002a46 <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f8:	f3ef 8310 	mrs	r3, PRIMASK
 80028fc:	623b      	str	r3, [r7, #32]
  return(result);
 80028fe:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
 8002902:	2301      	movs	r3, #1
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	f383 8810 	msr	PRIMASK, r3
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	494d      	ldr	r1, [pc, #308]	; (8002a50 <UART_RxISR_16BIT+0x1c4>)
 800291a:	400a      	ands	r2, r1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	f383 8810 	msr	PRIMASK, r3
}
 8002928:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292a:	f3ef 8310 	mrs	r3, PRIMASK
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002932:	643b      	str	r3, [r7, #64]	; 0x40
 8002934:	2301      	movs	r3, #1
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	f383 8810 	msr	PRIMASK, r3
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2101      	movs	r1, #1
 800294c:	438a      	bics	r2, r1
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	f383 8810 	msr	PRIMASK, r3
}
 800295a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	228c      	movs	r2, #140	; 0x8c
 8002960:	2120      	movs	r1, #32
 8002962:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a37      	ldr	r2, [pc, #220]	; (8002a54 <UART_RxISR_16BIT+0x1c8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d024      	beq.n	80029c4 <UART_RxISR_16BIT+0x138>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a36      	ldr	r2, [pc, #216]	; (8002a58 <UART_RxISR_16BIT+0x1cc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d01f      	beq.n	80029c4 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	4013      	ands	r3, r2
 8002990:	d018      	beq.n	80029c4 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002992:	f3ef 8310 	mrs	r3, PRIMASK
 8002996:	617b      	str	r3, [r7, #20]
  return(result);
 8002998:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299c:	2301      	movs	r3, #1
 800299e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	492a      	ldr	r1, [pc, #168]	; (8002a5c <UART_RxISR_16BIT+0x1d0>)
 80029b4:	400a      	ands	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f383 8810 	msr	PRIMASK, r3
}
 80029c2:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d12f      	bne.n	8002a2c <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029d2:	f3ef 8310 	mrs	r3, PRIMASK
 80029d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80029d8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38
 80029dc:	2301      	movs	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f383 8810 	msr	PRIMASK, r3
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2110      	movs	r1, #16
 80029f4:	438a      	bics	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f383 8810 	msr	PRIMASK, r3
}
 8002a02:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d103      	bne.n	8002a1a <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2210      	movs	r2, #16
 8002a18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	225c      	movs	r2, #92	; 0x5c
 8002a1e:	5a9a      	ldrh	r2, [r3, r2]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	0011      	movs	r1, r2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f7fe ff49 	bl	80018bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002a2a:	e00c      	b.n	8002a46 <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7fd fd8c 	bl	800054c <HAL_UART_RxCpltCallback>
}
 8002a34:	e007      	b.n	8002a46 <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699a      	ldr	r2, [r3, #24]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2108      	movs	r1, #8
 8002a42:	430a      	orrs	r2, r1
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b014      	add	sp, #80	; 0x50
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	fffffedf 	.word	0xfffffedf
 8002a54:	40008000 	.word	0x40008000
 8002a58:	40008400 	.word	0x40008400
 8002a5c:	fbffffff 	.word	0xfbffffff

08002a60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0a0      	sub	sp, #128	; 0x80
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8002a68:	237a      	movs	r3, #122	; 0x7a
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	2160      	movs	r1, #96	; 0x60
 8002a70:	5a52      	ldrh	r2, [r2, r1]
 8002a72:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	228c      	movs	r2, #140	; 0x8c
 8002a90:	589b      	ldr	r3, [r3, r2]
 8002a92:	2b22      	cmp	r3, #34	; 0x22
 8002a94:	d000      	beq.n	8002a98 <UART_RxISR_8BIT_FIFOEN+0x38>
 8002a96:	e16f      	b.n	8002d78 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002a98:	236e      	movs	r3, #110	; 0x6e
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	2168      	movs	r1, #104	; 0x68
 8002aa0:	5a52      	ldrh	r2, [r2, r1]
 8002aa2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002aa4:	e116      	b.n	8002cd4 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aac:	216c      	movs	r1, #108	; 0x6c
 8002aae:	187b      	adds	r3, r7, r1
 8002ab0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	237a      	movs	r3, #122	; 0x7a
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	b2d9      	uxtb	r1, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	225e      	movs	r2, #94	; 0x5e
 8002ad8:	5a9b      	ldrh	r3, [r3, r2]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b299      	uxth	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	225e      	movs	r2, #94	; 0x5e
 8002ae4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002aee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002af0:	2207      	movs	r2, #7
 8002af2:	4013      	ands	r3, r2
 8002af4:	d049      	beq.n	8002b8a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002af6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002af8:	2201      	movs	r2, #1
 8002afa:	4013      	ands	r3, r2
 8002afc:	d010      	beq.n	8002b20 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8002afe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4013      	ands	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2290      	movs	r2, #144	; 0x90
 8002b14:	589b      	ldr	r3, [r3, r2]
 8002b16:	2201      	movs	r2, #1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2190      	movs	r1, #144	; 0x90
 8002b1e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b22:	2202      	movs	r2, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	d00f      	beq.n	8002b48 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8002b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d00b      	beq.n	8002b48 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2202      	movs	r2, #2
 8002b36:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2290      	movs	r2, #144	; 0x90
 8002b3c:	589b      	ldr	r3, [r3, r2]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2190      	movs	r1, #144	; 0x90
 8002b46:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d00f      	beq.n	8002b70 <UART_RxISR_8BIT_FIFOEN+0x110>
 8002b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b52:	2201      	movs	r2, #1
 8002b54:	4013      	ands	r3, r2
 8002b56:	d00b      	beq.n	8002b70 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2290      	movs	r2, #144	; 0x90
 8002b64:	589b      	ldr	r3, [r3, r2]
 8002b66:	2202      	movs	r2, #2
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2190      	movs	r1, #144	; 0x90
 8002b6e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2290      	movs	r2, #144	; 0x90
 8002b74:	589b      	ldr	r3, [r3, r2]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fe fe95 	bl	80018ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2290      	movs	r2, #144	; 0x90
 8002b86:	2100      	movs	r1, #0
 8002b88:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	225e      	movs	r2, #94	; 0x5e
 8002b8e:	5a9b      	ldrh	r3, [r3, r2]
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d000      	beq.n	8002b98 <UART_RxISR_8BIT_FIFOEN+0x138>
 8002b96:	e09d      	b.n	8002cd4 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b98:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba8:	f383 8810 	msr	PRIMASK, r3
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4975      	ldr	r1, [pc, #468]	; (8002d90 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc4:	f383 8810 	msr	PRIMASK, r3
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bca:	f3ef 8310 	mrs	r3, PRIMASK
 8002bce:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8002bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bda:	f383 8810 	msr	PRIMASK, r3
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	496a      	ldr	r1, [pc, #424]	; (8002d94 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8002bec:	400a      	ands	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf6:	f383 8810 	msr	PRIMASK, r3
}
 8002bfa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	228c      	movs	r2, #140	; 0x8c
 8002c00:	2120      	movs	r1, #32
 8002c02:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a60      	ldr	r2, [pc, #384]	; (8002d98 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d024      	beq.n	8002c64 <UART_RxISR_8BIT_FIFOEN+0x204>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5f      	ldr	r2, [pc, #380]	; (8002d9c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d01f      	beq.n	8002c64 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d018      	beq.n	8002c64 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c32:	f3ef 8310 	mrs	r3, PRIMASK
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	f383 8810 	msr	PRIMASK, r3
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4953      	ldr	r1, [pc, #332]	; (8002da0 <UART_RxISR_8BIT_FIFOEN+0x340>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5e:	f383 8810 	msr	PRIMASK, r3
}
 8002c62:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d12f      	bne.n	8002ccc <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c72:	f3ef 8310 	mrs	r3, PRIMASK
 8002c76:	623b      	str	r3, [r7, #32]
  return(result);
 8002c78:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	f383 8810 	msr	PRIMASK, r3
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2110      	movs	r1, #16
 8002c94:	438a      	bics	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ca2:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2210      	movs	r2, #16
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b10      	cmp	r3, #16
 8002cb0:	d103      	bne.n	8002cba <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2210      	movs	r2, #16
 8002cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	225c      	movs	r2, #92	; 0x5c
 8002cbe:	5a9a      	ldrh	r2, [r3, r2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7fe fdf9 	bl	80018bc <HAL_UARTEx_RxEventCallback>
 8002cca:	e003      	b.n	8002cd4 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7fd fc3c 	bl	800054c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002cd4:	236e      	movs	r3, #110	; 0x6e
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <UART_RxISR_8BIT_FIFOEN+0x288>
 8002cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d000      	beq.n	8002ce8 <UART_RxISR_8BIT_FIFOEN+0x288>
 8002ce6:	e6de      	b.n	8002aa6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8002ce8:	205a      	movs	r0, #90	; 0x5a
 8002cea:	183b      	adds	r3, r7, r0
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	215e      	movs	r1, #94	; 0x5e
 8002cf0:	5a52      	ldrh	r2, [r2, r1]
 8002cf2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8002cf4:	0001      	movs	r1, r0
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d044      	beq.n	8002d88 <UART_RxISR_8BIT_FIFOEN+0x328>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2268      	movs	r2, #104	; 0x68
 8002d02:	5a9b      	ldrh	r3, [r3, r2]
 8002d04:	187a      	adds	r2, r7, r1
 8002d06:	8812      	ldrh	r2, [r2, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d23d      	bcs.n	8002d88 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d10:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d12:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002d14:	657b      	str	r3, [r7, #84]	; 0x54
 8002d16:	2301      	movs	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f383 8810 	msr	PRIMASK, r3
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	491d      	ldr	r1, [pc, #116]	; (8002da4 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f383 8810 	msr	PRIMASK, r3
}
 8002d3c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <UART_RxISR_8BIT_FIFOEN+0x348>)
 8002d42:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d44:	f3ef 8310 	mrs	r3, PRIMASK
 8002d48:	617b      	str	r3, [r7, #20]
  return(result);
 8002d4a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002d4c:	653b      	str	r3, [r7, #80]	; 0x50
 8002d4e:	2301      	movs	r3, #1
 8002d50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f383 8810 	msr	PRIMASK, r3
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2120      	movs	r1, #32
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f383 8810 	msr	PRIMASK, r3
}
 8002d74:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002d76:	e007      	b.n	8002d88 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2108      	movs	r1, #8
 8002d84:	430a      	orrs	r2, r1
 8002d86:	619a      	str	r2, [r3, #24]
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b020      	add	sp, #128	; 0x80
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	fffffeff 	.word	0xfffffeff
 8002d94:	effffffe 	.word	0xeffffffe
 8002d98:	40008000 	.word	0x40008000
 8002d9c:	40008400 	.word	0x40008400
 8002da0:	fbffffff 	.word	0xfbffffff
 8002da4:	efffffff 	.word	0xefffffff
 8002da8:	080026b9 	.word	0x080026b9

08002dac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0a2      	sub	sp, #136	; 0x88
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8002db4:	2382      	movs	r3, #130	; 0x82
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	2160      	movs	r1, #96	; 0x60
 8002dbc:	5a52      	ldrh	r2, [r2, r1]
 8002dbe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	2284      	movs	r2, #132	; 0x84
 8002dc8:	18ba      	adds	r2, r7, r2
 8002dca:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	228c      	movs	r2, #140	; 0x8c
 8002de0:	589b      	ldr	r3, [r3, r2]
 8002de2:	2b22      	cmp	r3, #34	; 0x22
 8002de4:	d000      	beq.n	8002de8 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8002de6:	e179      	b.n	80030dc <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8002de8:	2376      	movs	r3, #118	; 0x76
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	2168      	movs	r1, #104	; 0x68
 8002df0:	5a52      	ldrh	r2, [r2, r1]
 8002df2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8002df4:	e11e      	b.n	8003034 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfc:	2174      	movs	r1, #116	; 0x74
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8002e08:	187b      	adds	r3, r7, r1
 8002e0a:	2282      	movs	r2, #130	; 0x82
 8002e0c:	18ba      	adds	r2, r7, r2
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	8812      	ldrh	r2, [r2, #0]
 8002e12:	4013      	ands	r3, r2
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	1c9a      	adds	r2, r3, #2
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	225e      	movs	r2, #94	; 0x5e
 8002e28:	5a9b      	ldrh	r3, [r3, r2]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b299      	uxth	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	225e      	movs	r2, #94	; 0x5e
 8002e34:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2184      	movs	r1, #132	; 0x84
 8002e3e:	187a      	adds	r2, r7, r1
 8002e40:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8002e42:	187b      	adds	r3, r7, r1
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2207      	movs	r2, #7
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d04e      	beq.n	8002eea <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2201      	movs	r2, #1
 8002e52:	4013      	ands	r3, r2
 8002e54:	d010      	beq.n	8002e78 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8002e56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d00b      	beq.n	8002e78 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2201      	movs	r2, #1
 8002e66:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2290      	movs	r2, #144	; 0x90
 8002e6c:	589b      	ldr	r3, [r3, r2]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2190      	movs	r1, #144	; 0x90
 8002e76:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e78:	2384      	movs	r3, #132	; 0x84
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	4013      	ands	r3, r2
 8002e82:	d00f      	beq.n	8002ea4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8002e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e86:	2201      	movs	r2, #1
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d00b      	beq.n	8002ea4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2202      	movs	r2, #2
 8002e92:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2290      	movs	r2, #144	; 0x90
 8002e98:	589b      	ldr	r3, [r3, r2]
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2190      	movs	r1, #144	; 0x90
 8002ea2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ea4:	2384      	movs	r3, #132	; 0x84
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2204      	movs	r2, #4
 8002eac:	4013      	ands	r3, r2
 8002eae:	d00f      	beq.n	8002ed0 <UART_RxISR_16BIT_FIFOEN+0x124>
 8002eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2290      	movs	r2, #144	; 0x90
 8002ec4:	589b      	ldr	r3, [r3, r2]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2190      	movs	r1, #144	; 0x90
 8002ece:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2290      	movs	r2, #144	; 0x90
 8002ed4:	589b      	ldr	r3, [r3, r2]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	0018      	movs	r0, r3
 8002ede:	f7fe fce5 	bl	80018ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2290      	movs	r2, #144	; 0x90
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	225e      	movs	r2, #94	; 0x5e
 8002eee:	5a9b      	ldrh	r3, [r3, r2]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d000      	beq.n	8002ef8 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8002ef6:	e09d      	b.n	8003034 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8002efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f02:	2301      	movs	r3, #1
 8002f04:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4976      	ldr	r1, [pc, #472]	; (80030f4 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f20:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f24:	f383 8810 	msr	PRIMASK, r3
}
 8002f28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f34:	2301      	movs	r3, #1
 8002f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	496b      	ldr	r1, [pc, #428]	; (80030f8 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f52:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f56:	f383 8810 	msr	PRIMASK, r3
}
 8002f5a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	228c      	movs	r2, #140	; 0x8c
 8002f60:	2120      	movs	r1, #32
 8002f62:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a61      	ldr	r2, [pc, #388]	; (80030fc <UART_RxISR_16BIT_FIFOEN+0x350>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d024      	beq.n	8002fc4 <UART_RxISR_16BIT_FIFOEN+0x218>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a60      	ldr	r2, [pc, #384]	; (8003100 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d01f      	beq.n	8002fc4 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	041b      	lsls	r3, r3, #16
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f92:	f3ef 8310 	mrs	r3, PRIMASK
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f9a:	667b      	str	r3, [r7, #100]	; 0x64
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	f383 8810 	msr	PRIMASK, r3
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4954      	ldr	r1, [pc, #336]	; (8003104 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8002fb4:	400a      	ands	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbe:	f383 8810 	msr	PRIMASK, r3
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d12f      	bne.n	800302c <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fda:	663b      	str	r3, [r7, #96]	; 0x60
 8002fdc:	2301      	movs	r3, #1
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	f383 8810 	msr	PRIMASK, r3
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2110      	movs	r1, #16
 8002ff4:	438a      	bics	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2210      	movs	r2, #16
 800300c:	4013      	ands	r3, r2
 800300e:	2b10      	cmp	r3, #16
 8003010:	d103      	bne.n	800301a <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2210      	movs	r2, #16
 8003018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	225c      	movs	r2, #92	; 0x5c
 800301e:	5a9a      	ldrh	r2, [r3, r2]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0011      	movs	r1, r2
 8003024:	0018      	movs	r0, r3
 8003026:	f7fe fc49 	bl	80018bc <HAL_UARTEx_RxEventCallback>
 800302a:	e003      	b.n	8003034 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	0018      	movs	r0, r3
 8003030:	f7fd fa8c 	bl	800054c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003034:	2376      	movs	r3, #118	; 0x76
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d006      	beq.n	800304c <UART_RxISR_16BIT_FIFOEN+0x2a0>
 800303e:	2384      	movs	r3, #132	; 0x84
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2220      	movs	r2, #32
 8003046:	4013      	ands	r3, r2
 8003048:	d000      	beq.n	800304c <UART_RxISR_16BIT_FIFOEN+0x2a0>
 800304a:	e6d4      	b.n	8002df6 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800304c:	205e      	movs	r0, #94	; 0x5e
 800304e:	183b      	adds	r3, r7, r0
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	215e      	movs	r1, #94	; 0x5e
 8003054:	5a52      	ldrh	r2, [r2, r1]
 8003056:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003058:	0001      	movs	r1, r0
 800305a:	187b      	adds	r3, r7, r1
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d044      	beq.n	80030ec <UART_RxISR_16BIT_FIFOEN+0x340>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2268      	movs	r2, #104	; 0x68
 8003066:	5a9b      	ldrh	r3, [r3, r2]
 8003068:	187a      	adds	r2, r7, r1
 800306a:	8812      	ldrh	r2, [r2, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d23d      	bcs.n	80030ec <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003070:	f3ef 8310 	mrs	r3, PRIMASK
 8003074:	60fb      	str	r3, [r7, #12]
  return(result);
 8003076:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003078:	65bb      	str	r3, [r7, #88]	; 0x58
 800307a:	2301      	movs	r3, #1
 800307c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f383 8810 	msr	PRIMASK, r3
}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	491d      	ldr	r1, [pc, #116]	; (8003108 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8003092:	400a      	ands	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003098:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a19      	ldr	r2, [pc, #100]	; (800310c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80030a6:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a8:	f3ef 8310 	mrs	r3, PRIMASK
 80030ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80030ae:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80030b0:	657b      	str	r3, [r7, #84]	; 0x54
 80030b2:	2301      	movs	r3, #1
 80030b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2120      	movs	r1, #32
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	f383 8810 	msr	PRIMASK, r3
}
 80030d8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80030da:	e007      	b.n	80030ec <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2108      	movs	r1, #8
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b022      	add	sp, #136	; 0x88
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	fffffeff 	.word	0xfffffeff
 80030f8:	effffffe 	.word	0xeffffffe
 80030fc:	40008000 	.word	0x40008000
 8003100:	40008400 	.word	0x40008400
 8003104:	fbffffff 	.word	0xfbffffff
 8003108:	efffffff 	.word	0xefffffff
 800310c:	0800288d 	.word	0x0800288d

08003110 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b002      	add	sp, #8
 800311e:	bd80      	pop	{r7, pc}

08003120 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003128:	46c0      	nop			; (mov r8, r8)
 800312a:	46bd      	mov	sp, r7
 800312c:	b002      	add	sp, #8
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}

08003140 <__libc_init_array>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	2600      	movs	r6, #0
 8003144:	4c0c      	ldr	r4, [pc, #48]	; (8003178 <__libc_init_array+0x38>)
 8003146:	4d0d      	ldr	r5, [pc, #52]	; (800317c <__libc_init_array+0x3c>)
 8003148:	1b64      	subs	r4, r4, r5
 800314a:	10a4      	asrs	r4, r4, #2
 800314c:	42a6      	cmp	r6, r4
 800314e:	d109      	bne.n	8003164 <__libc_init_array+0x24>
 8003150:	2600      	movs	r6, #0
 8003152:	f000 f819 	bl	8003188 <_init>
 8003156:	4c0a      	ldr	r4, [pc, #40]	; (8003180 <__libc_init_array+0x40>)
 8003158:	4d0a      	ldr	r5, [pc, #40]	; (8003184 <__libc_init_array+0x44>)
 800315a:	1b64      	subs	r4, r4, r5
 800315c:	10a4      	asrs	r4, r4, #2
 800315e:	42a6      	cmp	r6, r4
 8003160:	d105      	bne.n	800316e <__libc_init_array+0x2e>
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	00b3      	lsls	r3, r6, #2
 8003166:	58eb      	ldr	r3, [r5, r3]
 8003168:	4798      	blx	r3
 800316a:	3601      	adds	r6, #1
 800316c:	e7ee      	b.n	800314c <__libc_init_array+0xc>
 800316e:	00b3      	lsls	r3, r6, #2
 8003170:	58eb      	ldr	r3, [r5, r3]
 8003172:	4798      	blx	r3
 8003174:	3601      	adds	r6, #1
 8003176:	e7f2      	b.n	800315e <__libc_init_array+0x1e>
 8003178:	080031e0 	.word	0x080031e0
 800317c:	080031e0 	.word	0x080031e0
 8003180:	080031e4 	.word	0x080031e4
 8003184:	080031e0 	.word	0x080031e0

08003188 <_init>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr

08003194 <_fini>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr
