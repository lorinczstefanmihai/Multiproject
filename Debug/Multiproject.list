
Multiproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007938  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080079f8  080079f8  000179f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c68  08007c68  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c70  08007c70  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c74  08007c74  00017c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007c78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000090  08007d08  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08007d08  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae93  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a7c  00000000  00000000  0002af8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0002ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f1  00000000  00000000  0002d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b75c  00000000  00000000  0002d7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b618  00000000  00000000  00048f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0e3b  00000000  00000000  0005452d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002724  00000000  00000000  00105368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00107a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000090 	.word	0x20000090
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080079dc 	.word	0x080079dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000094 	.word	0x20000094
 8000100:	080079dc 	.word	0x080079dc

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0010      	movs	r0, r2
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	0019      	movs	r1, r3
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 f867 	bl	80014f8 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ffb7 	bl	80013a8 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f859 	bl	80014f8 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f84f 	bl	80014f8 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffdf 	bl	800142c <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffd5 	bl	800142c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_uldivmod>:
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000494:	2a00      	cmp	r2, #0
 8000496:	d10f      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000498:	2900      	cmp	r1, #0
 800049a:	d100      	bne.n	800049e <__aeabi_uldivmod+0xe>
 800049c:	2800      	cmp	r0, #0
 800049e:	d002      	beq.n	80004a6 <__aeabi_uldivmod+0x16>
 80004a0:	2100      	movs	r1, #0
 80004a2:	43c9      	mvns	r1, r1
 80004a4:	0008      	movs	r0, r1
 80004a6:	b407      	push	{r0, r1, r2}
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <__aeabi_uldivmod+0x24>)
 80004aa:	a102      	add	r1, pc, #8	; (adr r1, 80004b4 <__aeabi_uldivmod+0x24>)
 80004ac:	1840      	adds	r0, r0, r1
 80004ae:	9002      	str	r0, [sp, #8]
 80004b0:	bd03      	pop	{r0, r1, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	ffffff5d 	.word	0xffffff5d
 80004b8:	b403      	push	{r0, r1}
 80004ba:	4668      	mov	r0, sp
 80004bc:	b501      	push	{r0, lr}
 80004be:	9802      	ldr	r0, [sp, #8]
 80004c0:	f000 f806 	bl	80004d0 <__udivmoddi4>
 80004c4:	9b01      	ldr	r3, [sp, #4]
 80004c6:	469e      	mov	lr, r3
 80004c8:	b002      	add	sp, #8
 80004ca:	bc0c      	pop	{r2, r3}
 80004cc:	4770      	bx	lr
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__udivmoddi4>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	4657      	mov	r7, sl
 80004d4:	464e      	mov	r6, r9
 80004d6:	4645      	mov	r5, r8
 80004d8:	46de      	mov	lr, fp
 80004da:	b5e0      	push	{r5, r6, r7, lr}
 80004dc:	0004      	movs	r4, r0
 80004de:	000d      	movs	r5, r1
 80004e0:	4692      	mov	sl, r2
 80004e2:	4699      	mov	r9, r3
 80004e4:	b083      	sub	sp, #12
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d830      	bhi.n	800054c <__udivmoddi4+0x7c>
 80004ea:	d02d      	beq.n	8000548 <__udivmoddi4+0x78>
 80004ec:	4649      	mov	r1, r9
 80004ee:	4650      	mov	r0, sl
 80004f0:	f001 ffc2 	bl	8002478 <__clzdi2>
 80004f4:	0029      	movs	r1, r5
 80004f6:	0006      	movs	r6, r0
 80004f8:	0020      	movs	r0, r4
 80004fa:	f001 ffbd 	bl	8002478 <__clzdi2>
 80004fe:	1a33      	subs	r3, r6, r0
 8000500:	4698      	mov	r8, r3
 8000502:	3b20      	subs	r3, #32
 8000504:	d434      	bmi.n	8000570 <__udivmoddi4+0xa0>
 8000506:	469b      	mov	fp, r3
 8000508:	4653      	mov	r3, sl
 800050a:	465a      	mov	r2, fp
 800050c:	4093      	lsls	r3, r2
 800050e:	4642      	mov	r2, r8
 8000510:	001f      	movs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d83b      	bhi.n	8000594 <__udivmoddi4+0xc4>
 800051c:	42af      	cmp	r7, r5
 800051e:	d100      	bne.n	8000522 <__udivmoddi4+0x52>
 8000520:	e079      	b.n	8000616 <__udivmoddi4+0x146>
 8000522:	465b      	mov	r3, fp
 8000524:	1ba4      	subs	r4, r4, r6
 8000526:	41bd      	sbcs	r5, r7
 8000528:	2b00      	cmp	r3, #0
 800052a:	da00      	bge.n	800052e <__udivmoddi4+0x5e>
 800052c:	e076      	b.n	800061c <__udivmoddi4+0x14c>
 800052e:	2200      	movs	r2, #0
 8000530:	2300      	movs	r3, #0
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	465a      	mov	r2, fp
 800053a:	4093      	lsls	r3, r2
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	4642      	mov	r2, r8
 8000542:	4093      	lsls	r3, r2
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	e029      	b.n	800059c <__udivmoddi4+0xcc>
 8000548:	4282      	cmp	r2, r0
 800054a:	d9cf      	bls.n	80004ec <__udivmoddi4+0x1c>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <__udivmoddi4+0x8e>
 800055a:	601c      	str	r4, [r3, #0]
 800055c:	605d      	str	r5, [r3, #4]
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	b003      	add	sp, #12
 8000564:	bcf0      	pop	{r4, r5, r6, r7}
 8000566:	46bb      	mov	fp, r7
 8000568:	46b2      	mov	sl, r6
 800056a:	46a9      	mov	r9, r5
 800056c:	46a0      	mov	r8, r4
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	4642      	mov	r2, r8
 8000572:	469b      	mov	fp, r3
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	4652      	mov	r2, sl
 800057a:	40da      	lsrs	r2, r3
 800057c:	4641      	mov	r1, r8
 800057e:	0013      	movs	r3, r2
 8000580:	464a      	mov	r2, r9
 8000582:	408a      	lsls	r2, r1
 8000584:	0017      	movs	r7, r2
 8000586:	4642      	mov	r2, r8
 8000588:	431f      	orrs	r7, r3
 800058a:	4653      	mov	r3, sl
 800058c:	4093      	lsls	r3, r2
 800058e:	001e      	movs	r6, r3
 8000590:	42af      	cmp	r7, r5
 8000592:	d9c3      	bls.n	800051c <__udivmoddi4+0x4c>
 8000594:	2200      	movs	r2, #0
 8000596:	2300      	movs	r3, #0
 8000598:	9200      	str	r2, [sp, #0]
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	4643      	mov	r3, r8
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0d8      	beq.n	8000554 <__udivmoddi4+0x84>
 80005a2:	07fb      	lsls	r3, r7, #31
 80005a4:	0872      	lsrs	r2, r6, #1
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4646      	mov	r6, r8
 80005aa:	087b      	lsrs	r3, r7, #1
 80005ac:	e00e      	b.n	80005cc <__udivmoddi4+0xfc>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d101      	bne.n	80005b6 <__udivmoddi4+0xe6>
 80005b2:	42a2      	cmp	r2, r4
 80005b4:	d80c      	bhi.n	80005d0 <__udivmoddi4+0x100>
 80005b6:	1aa4      	subs	r4, r4, r2
 80005b8:	419d      	sbcs	r5, r3
 80005ba:	2001      	movs	r0, #1
 80005bc:	1924      	adds	r4, r4, r4
 80005be:	416d      	adcs	r5, r5
 80005c0:	2100      	movs	r1, #0
 80005c2:	3e01      	subs	r6, #1
 80005c4:	1824      	adds	r4, r4, r0
 80005c6:	414d      	adcs	r5, r1
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d006      	beq.n	80005da <__udivmoddi4+0x10a>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d9ee      	bls.n	80005ae <__udivmoddi4+0xde>
 80005d0:	3e01      	subs	r6, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d1f8      	bne.n	80005cc <__udivmoddi4+0xfc>
 80005da:	9800      	ldr	r0, [sp, #0]
 80005dc:	9901      	ldr	r1, [sp, #4]
 80005de:	465b      	mov	r3, fp
 80005e0:	1900      	adds	r0, r0, r4
 80005e2:	4169      	adcs	r1, r5
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	db24      	blt.n	8000632 <__udivmoddi4+0x162>
 80005e8:	002b      	movs	r3, r5
 80005ea:	465a      	mov	r2, fp
 80005ec:	4644      	mov	r4, r8
 80005ee:	40d3      	lsrs	r3, r2
 80005f0:	002a      	movs	r2, r5
 80005f2:	40e2      	lsrs	r2, r4
 80005f4:	001c      	movs	r4, r3
 80005f6:	465b      	mov	r3, fp
 80005f8:	0015      	movs	r5, r2
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db2a      	blt.n	8000654 <__udivmoddi4+0x184>
 80005fe:	0026      	movs	r6, r4
 8000600:	409e      	lsls	r6, r3
 8000602:	0033      	movs	r3, r6
 8000604:	0026      	movs	r6, r4
 8000606:	4647      	mov	r7, r8
 8000608:	40be      	lsls	r6, r7
 800060a:	0032      	movs	r2, r6
 800060c:	1a80      	subs	r0, r0, r2
 800060e:	4199      	sbcs	r1, r3
 8000610:	9000      	str	r0, [sp, #0]
 8000612:	9101      	str	r1, [sp, #4]
 8000614:	e79e      	b.n	8000554 <__udivmoddi4+0x84>
 8000616:	42a3      	cmp	r3, r4
 8000618:	d8bc      	bhi.n	8000594 <__udivmoddi4+0xc4>
 800061a:	e782      	b.n	8000522 <__udivmoddi4+0x52>
 800061c:	4642      	mov	r2, r8
 800061e:	2320      	movs	r3, #32
 8000620:	2100      	movs	r1, #0
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	2200      	movs	r2, #0
 8000626:	9100      	str	r1, [sp, #0]
 8000628:	9201      	str	r2, [sp, #4]
 800062a:	2201      	movs	r2, #1
 800062c:	40da      	lsrs	r2, r3
 800062e:	9201      	str	r2, [sp, #4]
 8000630:	e785      	b.n	800053e <__udivmoddi4+0x6e>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	002a      	movs	r2, r5
 800063a:	4646      	mov	r6, r8
 800063c:	409a      	lsls	r2, r3
 800063e:	0023      	movs	r3, r4
 8000640:	40f3      	lsrs	r3, r6
 8000642:	4644      	mov	r4, r8
 8000644:	4313      	orrs	r3, r2
 8000646:	002a      	movs	r2, r5
 8000648:	40e2      	lsrs	r2, r4
 800064a:	001c      	movs	r4, r3
 800064c:	465b      	mov	r3, fp
 800064e:	0015      	movs	r5, r2
 8000650:	2b00      	cmp	r3, #0
 8000652:	dad4      	bge.n	80005fe <__udivmoddi4+0x12e>
 8000654:	4642      	mov	r2, r8
 8000656:	002f      	movs	r7, r5
 8000658:	2320      	movs	r3, #32
 800065a:	0026      	movs	r6, r4
 800065c:	4097      	lsls	r7, r2
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	40de      	lsrs	r6, r3
 8000662:	003b      	movs	r3, r7
 8000664:	4333      	orrs	r3, r6
 8000666:	e7cd      	b.n	8000604 <__udivmoddi4+0x134>

08000668 <__aeabi_i2f>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	2800      	cmp	r0, #0
 800066c:	d013      	beq.n	8000696 <__aeabi_i2f+0x2e>
 800066e:	17c3      	asrs	r3, r0, #31
 8000670:	18c5      	adds	r5, r0, r3
 8000672:	405d      	eors	r5, r3
 8000674:	0fc4      	lsrs	r4, r0, #31
 8000676:	0028      	movs	r0, r5
 8000678:	f001 fee0 	bl	800243c <__clzsi2>
 800067c:	239e      	movs	r3, #158	; 0x9e
 800067e:	0001      	movs	r1, r0
 8000680:	1a1b      	subs	r3, r3, r0
 8000682:	2b96      	cmp	r3, #150	; 0x96
 8000684:	dc0f      	bgt.n	80006a6 <__aeabi_i2f+0x3e>
 8000686:	2808      	cmp	r0, #8
 8000688:	d031      	beq.n	80006ee <__aeabi_i2f+0x86>
 800068a:	3908      	subs	r1, #8
 800068c:	408d      	lsls	r5, r1
 800068e:	026d      	lsls	r5, r5, #9
 8000690:	0a6d      	lsrs	r5, r5, #9
 8000692:	b2d8      	uxtb	r0, r3
 8000694:	e002      	b.n	800069c <__aeabi_i2f+0x34>
 8000696:	2400      	movs	r4, #0
 8000698:	2000      	movs	r0, #0
 800069a:	2500      	movs	r5, #0
 800069c:	05c0      	lsls	r0, r0, #23
 800069e:	4328      	orrs	r0, r5
 80006a0:	07e4      	lsls	r4, r4, #31
 80006a2:	4320      	orrs	r0, r4
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
 80006a6:	2b99      	cmp	r3, #153	; 0x99
 80006a8:	dd0c      	ble.n	80006c4 <__aeabi_i2f+0x5c>
 80006aa:	2205      	movs	r2, #5
 80006ac:	1a12      	subs	r2, r2, r0
 80006ae:	0028      	movs	r0, r5
 80006b0:	40d0      	lsrs	r0, r2
 80006b2:	0002      	movs	r2, r0
 80006b4:	0008      	movs	r0, r1
 80006b6:	301b      	adds	r0, #27
 80006b8:	4085      	lsls	r5, r0
 80006ba:	0028      	movs	r0, r5
 80006bc:	1e45      	subs	r5, r0, #1
 80006be:	41a8      	sbcs	r0, r5
 80006c0:	4302      	orrs	r2, r0
 80006c2:	0015      	movs	r5, r2
 80006c4:	2905      	cmp	r1, #5
 80006c6:	dc16      	bgt.n	80006f6 <__aeabi_i2f+0x8e>
 80006c8:	002a      	movs	r2, r5
 80006ca:	480f      	ldr	r0, [pc, #60]	; (8000708 <__aeabi_i2f+0xa0>)
 80006cc:	4002      	ands	r2, r0
 80006ce:	076e      	lsls	r6, r5, #29
 80006d0:	d009      	beq.n	80006e6 <__aeabi_i2f+0x7e>
 80006d2:	260f      	movs	r6, #15
 80006d4:	4035      	ands	r5, r6
 80006d6:	2d04      	cmp	r5, #4
 80006d8:	d005      	beq.n	80006e6 <__aeabi_i2f+0x7e>
 80006da:	3204      	adds	r2, #4
 80006dc:	0155      	lsls	r5, r2, #5
 80006de:	d502      	bpl.n	80006e6 <__aeabi_i2f+0x7e>
 80006e0:	239f      	movs	r3, #159	; 0x9f
 80006e2:	4002      	ands	r2, r0
 80006e4:	1a5b      	subs	r3, r3, r1
 80006e6:	0192      	lsls	r2, r2, #6
 80006e8:	0a55      	lsrs	r5, r2, #9
 80006ea:	b2d8      	uxtb	r0, r3
 80006ec:	e7d6      	b.n	800069c <__aeabi_i2f+0x34>
 80006ee:	026d      	lsls	r5, r5, #9
 80006f0:	2096      	movs	r0, #150	; 0x96
 80006f2:	0a6d      	lsrs	r5, r5, #9
 80006f4:	e7d2      	b.n	800069c <__aeabi_i2f+0x34>
 80006f6:	1f4a      	subs	r2, r1, #5
 80006f8:	4095      	lsls	r5, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <__aeabi_i2f+0xa0>)
 80006fe:	4002      	ands	r2, r0
 8000700:	076e      	lsls	r6, r5, #29
 8000702:	d0f0      	beq.n	80006e6 <__aeabi_i2f+0x7e>
 8000704:	e7e5      	b.n	80006d2 <__aeabi_i2f+0x6a>
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	fbffffff 	.word	0xfbffffff

0800070c <__aeabi_dadd>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	464f      	mov	r7, r9
 8000710:	4646      	mov	r6, r8
 8000712:	46d6      	mov	lr, sl
 8000714:	0004      	movs	r4, r0
 8000716:	b5c0      	push	{r6, r7, lr}
 8000718:	001f      	movs	r7, r3
 800071a:	030b      	lsls	r3, r1, #12
 800071c:	0010      	movs	r0, r2
 800071e:	004e      	lsls	r6, r1, #1
 8000720:	0a5b      	lsrs	r3, r3, #9
 8000722:	0fcd      	lsrs	r5, r1, #31
 8000724:	0f61      	lsrs	r1, r4, #29
 8000726:	007a      	lsls	r2, r7, #1
 8000728:	4319      	orrs	r1, r3
 800072a:	00e3      	lsls	r3, r4, #3
 800072c:	033c      	lsls	r4, r7, #12
 800072e:	0fff      	lsrs	r7, r7, #31
 8000730:	46bc      	mov	ip, r7
 8000732:	0a64      	lsrs	r4, r4, #9
 8000734:	0f47      	lsrs	r7, r0, #29
 8000736:	4327      	orrs	r7, r4
 8000738:	0d76      	lsrs	r6, r6, #21
 800073a:	0d52      	lsrs	r2, r2, #21
 800073c:	00c0      	lsls	r0, r0, #3
 800073e:	46b9      	mov	r9, r7
 8000740:	4680      	mov	r8, r0
 8000742:	1ab7      	subs	r7, r6, r2
 8000744:	4565      	cmp	r5, ip
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x3e>
 8000748:	e09b      	b.n	8000882 <__aeabi_dadd+0x176>
 800074a:	2f00      	cmp	r7, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_dadd+0x44>
 800074e:	e084      	b.n	800085a <__aeabi_dadd+0x14e>
 8000750:	2a00      	cmp	r2, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x4a>
 8000754:	e0be      	b.n	80008d4 <__aeabi_dadd+0x1c8>
 8000756:	4ac8      	ldr	r2, [pc, #800]	; (8000a78 <__aeabi_dadd+0x36c>)
 8000758:	4296      	cmp	r6, r2
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x52>
 800075c:	e124      	b.n	80009a8 <__aeabi_dadd+0x29c>
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	464c      	mov	r4, r9
 8000762:	0412      	lsls	r2, r2, #16
 8000764:	4314      	orrs	r4, r2
 8000766:	46a1      	mov	r9, r4
 8000768:	2f38      	cmp	r7, #56	; 0x38
 800076a:	dd00      	ble.n	800076e <__aeabi_dadd+0x62>
 800076c:	e167      	b.n	8000a3e <__aeabi_dadd+0x332>
 800076e:	2f1f      	cmp	r7, #31
 8000770:	dd00      	ble.n	8000774 <__aeabi_dadd+0x68>
 8000772:	e1d6      	b.n	8000b22 <__aeabi_dadd+0x416>
 8000774:	2220      	movs	r2, #32
 8000776:	464c      	mov	r4, r9
 8000778:	1bd2      	subs	r2, r2, r7
 800077a:	4094      	lsls	r4, r2
 800077c:	46a2      	mov	sl, r4
 800077e:	4644      	mov	r4, r8
 8000780:	40fc      	lsrs	r4, r7
 8000782:	0020      	movs	r0, r4
 8000784:	4654      	mov	r4, sl
 8000786:	4304      	orrs	r4, r0
 8000788:	4640      	mov	r0, r8
 800078a:	4090      	lsls	r0, r2
 800078c:	1e42      	subs	r2, r0, #1
 800078e:	4190      	sbcs	r0, r2
 8000790:	464a      	mov	r2, r9
 8000792:	40fa      	lsrs	r2, r7
 8000794:	4304      	orrs	r4, r0
 8000796:	1a89      	subs	r1, r1, r2
 8000798:	1b1c      	subs	r4, r3, r4
 800079a:	42a3      	cmp	r3, r4
 800079c:	4192      	sbcs	r2, r2
 800079e:	4252      	negs	r2, r2
 80007a0:	1a8b      	subs	r3, r1, r2
 80007a2:	469a      	mov	sl, r3
 80007a4:	4653      	mov	r3, sl
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	d400      	bmi.n	80007ac <__aeabi_dadd+0xa0>
 80007aa:	e0d4      	b.n	8000956 <__aeabi_dadd+0x24a>
 80007ac:	4653      	mov	r3, sl
 80007ae:	025a      	lsls	r2, r3, #9
 80007b0:	0a53      	lsrs	r3, r2, #9
 80007b2:	469a      	mov	sl, r3
 80007b4:	4653      	mov	r3, sl
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0xb0>
 80007ba:	e104      	b.n	80009c6 <__aeabi_dadd+0x2ba>
 80007bc:	4650      	mov	r0, sl
 80007be:	f001 fe3d 	bl	800243c <__clzsi2>
 80007c2:	0003      	movs	r3, r0
 80007c4:	3b08      	subs	r3, #8
 80007c6:	2220      	movs	r2, #32
 80007c8:	0020      	movs	r0, r4
 80007ca:	1ad2      	subs	r2, r2, r3
 80007cc:	4651      	mov	r1, sl
 80007ce:	40d0      	lsrs	r0, r2
 80007d0:	4099      	lsls	r1, r3
 80007d2:	0002      	movs	r2, r0
 80007d4:	409c      	lsls	r4, r3
 80007d6:	430a      	orrs	r2, r1
 80007d8:	42b3      	cmp	r3, r6
 80007da:	da00      	bge.n	80007de <__aeabi_dadd+0xd2>
 80007dc:	e102      	b.n	80009e4 <__aeabi_dadd+0x2d8>
 80007de:	1b9b      	subs	r3, r3, r6
 80007e0:	1c59      	adds	r1, r3, #1
 80007e2:	291f      	cmp	r1, #31
 80007e4:	dd00      	ble.n	80007e8 <__aeabi_dadd+0xdc>
 80007e6:	e0a7      	b.n	8000938 <__aeabi_dadd+0x22c>
 80007e8:	2320      	movs	r3, #32
 80007ea:	0010      	movs	r0, r2
 80007ec:	0026      	movs	r6, r4
 80007ee:	1a5b      	subs	r3, r3, r1
 80007f0:	409c      	lsls	r4, r3
 80007f2:	4098      	lsls	r0, r3
 80007f4:	40ce      	lsrs	r6, r1
 80007f6:	40ca      	lsrs	r2, r1
 80007f8:	1e63      	subs	r3, r4, #1
 80007fa:	419c      	sbcs	r4, r3
 80007fc:	4330      	orrs	r0, r6
 80007fe:	4692      	mov	sl, r2
 8000800:	2600      	movs	r6, #0
 8000802:	4304      	orrs	r4, r0
 8000804:	0763      	lsls	r3, r4, #29
 8000806:	d009      	beq.n	800081c <__aeabi_dadd+0x110>
 8000808:	230f      	movs	r3, #15
 800080a:	4023      	ands	r3, r4
 800080c:	2b04      	cmp	r3, #4
 800080e:	d005      	beq.n	800081c <__aeabi_dadd+0x110>
 8000810:	1d23      	adds	r3, r4, #4
 8000812:	42a3      	cmp	r3, r4
 8000814:	41a4      	sbcs	r4, r4
 8000816:	4264      	negs	r4, r4
 8000818:	44a2      	add	sl, r4
 800081a:	001c      	movs	r4, r3
 800081c:	4653      	mov	r3, sl
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	d400      	bmi.n	8000824 <__aeabi_dadd+0x118>
 8000822:	e09b      	b.n	800095c <__aeabi_dadd+0x250>
 8000824:	4b94      	ldr	r3, [pc, #592]	; (8000a78 <__aeabi_dadd+0x36c>)
 8000826:	3601      	adds	r6, #1
 8000828:	429e      	cmp	r6, r3
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x122>
 800082c:	e0b8      	b.n	80009a0 <__aeabi_dadd+0x294>
 800082e:	4653      	mov	r3, sl
 8000830:	4992      	ldr	r1, [pc, #584]	; (8000a7c <__aeabi_dadd+0x370>)
 8000832:	08e4      	lsrs	r4, r4, #3
 8000834:	400b      	ands	r3, r1
 8000836:	0019      	movs	r1, r3
 8000838:	075b      	lsls	r3, r3, #29
 800083a:	4323      	orrs	r3, r4
 800083c:	0572      	lsls	r2, r6, #21
 800083e:	024c      	lsls	r4, r1, #9
 8000840:	0b24      	lsrs	r4, r4, #12
 8000842:	0d52      	lsrs	r2, r2, #21
 8000844:	0512      	lsls	r2, r2, #20
 8000846:	07ed      	lsls	r5, r5, #31
 8000848:	4322      	orrs	r2, r4
 800084a:	432a      	orrs	r2, r5
 800084c:	0018      	movs	r0, r3
 800084e:	0011      	movs	r1, r2
 8000850:	bce0      	pop	{r5, r6, r7}
 8000852:	46ba      	mov	sl, r7
 8000854:	46b1      	mov	r9, r6
 8000856:	46a8      	mov	r8, r5
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085a:	2f00      	cmp	r7, #0
 800085c:	d048      	beq.n	80008f0 <__aeabi_dadd+0x1e4>
 800085e:	1b97      	subs	r7, r2, r6
 8000860:	2e00      	cmp	r6, #0
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x15a>
 8000864:	e10e      	b.n	8000a84 <__aeabi_dadd+0x378>
 8000866:	000c      	movs	r4, r1
 8000868:	431c      	orrs	r4, r3
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x162>
 800086c:	e1b7      	b.n	8000bde <__aeabi_dadd+0x4d2>
 800086e:	1e7c      	subs	r4, r7, #1
 8000870:	2f01      	cmp	r7, #1
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x16a>
 8000874:	e226      	b.n	8000cc4 <__aeabi_dadd+0x5b8>
 8000876:	4d80      	ldr	r5, [pc, #512]	; (8000a78 <__aeabi_dadd+0x36c>)
 8000878:	42af      	cmp	r7, r5
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x172>
 800087c:	e1d5      	b.n	8000c2a <__aeabi_dadd+0x51e>
 800087e:	0027      	movs	r7, r4
 8000880:	e107      	b.n	8000a92 <__aeabi_dadd+0x386>
 8000882:	2f00      	cmp	r7, #0
 8000884:	dc00      	bgt.n	8000888 <__aeabi_dadd+0x17c>
 8000886:	e0b2      	b.n	80009ee <__aeabi_dadd+0x2e2>
 8000888:	2a00      	cmp	r2, #0
 800088a:	d047      	beq.n	800091c <__aeabi_dadd+0x210>
 800088c:	4a7a      	ldr	r2, [pc, #488]	; (8000a78 <__aeabi_dadd+0x36c>)
 800088e:	4296      	cmp	r6, r2
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x188>
 8000892:	e089      	b.n	80009a8 <__aeabi_dadd+0x29c>
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	464c      	mov	r4, r9
 8000898:	0412      	lsls	r2, r2, #16
 800089a:	4314      	orrs	r4, r2
 800089c:	46a1      	mov	r9, r4
 800089e:	2f38      	cmp	r7, #56	; 0x38
 80008a0:	dc6b      	bgt.n	800097a <__aeabi_dadd+0x26e>
 80008a2:	2f1f      	cmp	r7, #31
 80008a4:	dc00      	bgt.n	80008a8 <__aeabi_dadd+0x19c>
 80008a6:	e16e      	b.n	8000b86 <__aeabi_dadd+0x47a>
 80008a8:	003a      	movs	r2, r7
 80008aa:	4648      	mov	r0, r9
 80008ac:	3a20      	subs	r2, #32
 80008ae:	40d0      	lsrs	r0, r2
 80008b0:	4684      	mov	ip, r0
 80008b2:	2f20      	cmp	r7, #32
 80008b4:	d007      	beq.n	80008c6 <__aeabi_dadd+0x1ba>
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	4648      	mov	r0, r9
 80008ba:	1bd2      	subs	r2, r2, r7
 80008bc:	4090      	lsls	r0, r2
 80008be:	0002      	movs	r2, r0
 80008c0:	4640      	mov	r0, r8
 80008c2:	4310      	orrs	r0, r2
 80008c4:	4680      	mov	r8, r0
 80008c6:	4640      	mov	r0, r8
 80008c8:	1e42      	subs	r2, r0, #1
 80008ca:	4190      	sbcs	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	0004      	movs	r4, r0
 80008d0:	4314      	orrs	r4, r2
 80008d2:	e057      	b.n	8000984 <__aeabi_dadd+0x278>
 80008d4:	464a      	mov	r2, r9
 80008d6:	4302      	orrs	r2, r0
 80008d8:	d100      	bne.n	80008dc <__aeabi_dadd+0x1d0>
 80008da:	e103      	b.n	8000ae4 <__aeabi_dadd+0x3d8>
 80008dc:	1e7a      	subs	r2, r7, #1
 80008de:	2f01      	cmp	r7, #1
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x1d8>
 80008e2:	e193      	b.n	8000c0c <__aeabi_dadd+0x500>
 80008e4:	4c64      	ldr	r4, [pc, #400]	; (8000a78 <__aeabi_dadd+0x36c>)
 80008e6:	42a7      	cmp	r7, r4
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x1e0>
 80008ea:	e18a      	b.n	8000c02 <__aeabi_dadd+0x4f6>
 80008ec:	0017      	movs	r7, r2
 80008ee:	e73b      	b.n	8000768 <__aeabi_dadd+0x5c>
 80008f0:	4c63      	ldr	r4, [pc, #396]	; (8000a80 <__aeabi_dadd+0x374>)
 80008f2:	1c72      	adds	r2, r6, #1
 80008f4:	4222      	tst	r2, r4
 80008f6:	d000      	beq.n	80008fa <__aeabi_dadd+0x1ee>
 80008f8:	e0e0      	b.n	8000abc <__aeabi_dadd+0x3b0>
 80008fa:	000a      	movs	r2, r1
 80008fc:	431a      	orrs	r2, r3
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_dadd+0x1f8>
 8000902:	e174      	b.n	8000bee <__aeabi_dadd+0x4e2>
 8000904:	2a00      	cmp	r2, #0
 8000906:	d100      	bne.n	800090a <__aeabi_dadd+0x1fe>
 8000908:	e1d0      	b.n	8000cac <__aeabi_dadd+0x5a0>
 800090a:	464a      	mov	r2, r9
 800090c:	4302      	orrs	r2, r0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x206>
 8000910:	e1e3      	b.n	8000cda <__aeabi_dadd+0x5ce>
 8000912:	074a      	lsls	r2, r1, #29
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	4313      	orrs	r3, r2
 8000918:	08c9      	lsrs	r1, r1, #3
 800091a:	e029      	b.n	8000970 <__aeabi_dadd+0x264>
 800091c:	464a      	mov	r2, r9
 800091e:	4302      	orrs	r2, r0
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x218>
 8000922:	e17d      	b.n	8000c20 <__aeabi_dadd+0x514>
 8000924:	1e7a      	subs	r2, r7, #1
 8000926:	2f01      	cmp	r7, #1
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x220>
 800092a:	e0e0      	b.n	8000aee <__aeabi_dadd+0x3e2>
 800092c:	4c52      	ldr	r4, [pc, #328]	; (8000a78 <__aeabi_dadd+0x36c>)
 800092e:	42a7      	cmp	r7, r4
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x228>
 8000932:	e166      	b.n	8000c02 <__aeabi_dadd+0x4f6>
 8000934:	0017      	movs	r7, r2
 8000936:	e7b2      	b.n	800089e <__aeabi_dadd+0x192>
 8000938:	0010      	movs	r0, r2
 800093a:	3b1f      	subs	r3, #31
 800093c:	40d8      	lsrs	r0, r3
 800093e:	2920      	cmp	r1, #32
 8000940:	d003      	beq.n	800094a <__aeabi_dadd+0x23e>
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	409a      	lsls	r2, r3
 8000948:	4314      	orrs	r4, r2
 800094a:	1e63      	subs	r3, r4, #1
 800094c:	419c      	sbcs	r4, r3
 800094e:	2300      	movs	r3, #0
 8000950:	2600      	movs	r6, #0
 8000952:	469a      	mov	sl, r3
 8000954:	4304      	orrs	r4, r0
 8000956:	0763      	lsls	r3, r4, #29
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x250>
 800095a:	e755      	b.n	8000808 <__aeabi_dadd+0xfc>
 800095c:	4652      	mov	r2, sl
 800095e:	08e3      	lsrs	r3, r4, #3
 8000960:	0752      	lsls	r2, r2, #29
 8000962:	4313      	orrs	r3, r2
 8000964:	4652      	mov	r2, sl
 8000966:	0037      	movs	r7, r6
 8000968:	08d1      	lsrs	r1, r2, #3
 800096a:	4a43      	ldr	r2, [pc, #268]	; (8000a78 <__aeabi_dadd+0x36c>)
 800096c:	4297      	cmp	r7, r2
 800096e:	d01f      	beq.n	80009b0 <__aeabi_dadd+0x2a4>
 8000970:	0309      	lsls	r1, r1, #12
 8000972:	057a      	lsls	r2, r7, #21
 8000974:	0b0c      	lsrs	r4, r1, #12
 8000976:	0d52      	lsrs	r2, r2, #21
 8000978:	e764      	b.n	8000844 <__aeabi_dadd+0x138>
 800097a:	4642      	mov	r2, r8
 800097c:	464c      	mov	r4, r9
 800097e:	4314      	orrs	r4, r2
 8000980:	1e62      	subs	r2, r4, #1
 8000982:	4194      	sbcs	r4, r2
 8000984:	18e4      	adds	r4, r4, r3
 8000986:	429c      	cmp	r4, r3
 8000988:	4192      	sbcs	r2, r2
 800098a:	4252      	negs	r2, r2
 800098c:	4692      	mov	sl, r2
 800098e:	448a      	add	sl, r1
 8000990:	4653      	mov	r3, sl
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	d5df      	bpl.n	8000956 <__aeabi_dadd+0x24a>
 8000996:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <__aeabi_dadd+0x36c>)
 8000998:	3601      	adds	r6, #1
 800099a:	429e      	cmp	r6, r3
 800099c:	d000      	beq.n	80009a0 <__aeabi_dadd+0x294>
 800099e:	e0b3      	b.n	8000b08 <__aeabi_dadd+0x3fc>
 80009a0:	0032      	movs	r2, r6
 80009a2:	2400      	movs	r4, #0
 80009a4:	2300      	movs	r3, #0
 80009a6:	e74d      	b.n	8000844 <__aeabi_dadd+0x138>
 80009a8:	074a      	lsls	r2, r1, #29
 80009aa:	08db      	lsrs	r3, r3, #3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	08c9      	lsrs	r1, r1, #3
 80009b0:	001a      	movs	r2, r3
 80009b2:	430a      	orrs	r2, r1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dadd+0x2ac>
 80009b6:	e200      	b.n	8000dba <__aeabi_dadd+0x6ae>
 80009b8:	2480      	movs	r4, #128	; 0x80
 80009ba:	0324      	lsls	r4, r4, #12
 80009bc:	430c      	orrs	r4, r1
 80009be:	0324      	lsls	r4, r4, #12
 80009c0:	4a2d      	ldr	r2, [pc, #180]	; (8000a78 <__aeabi_dadd+0x36c>)
 80009c2:	0b24      	lsrs	r4, r4, #12
 80009c4:	e73e      	b.n	8000844 <__aeabi_dadd+0x138>
 80009c6:	0020      	movs	r0, r4
 80009c8:	f001 fd38 	bl	800243c <__clzsi2>
 80009cc:	0003      	movs	r3, r0
 80009ce:	3318      	adds	r3, #24
 80009d0:	2b1f      	cmp	r3, #31
 80009d2:	dc00      	bgt.n	80009d6 <__aeabi_dadd+0x2ca>
 80009d4:	e6f7      	b.n	80007c6 <__aeabi_dadd+0xba>
 80009d6:	0022      	movs	r2, r4
 80009d8:	3808      	subs	r0, #8
 80009da:	4082      	lsls	r2, r0
 80009dc:	2400      	movs	r4, #0
 80009de:	42b3      	cmp	r3, r6
 80009e0:	db00      	blt.n	80009e4 <__aeabi_dadd+0x2d8>
 80009e2:	e6fc      	b.n	80007de <__aeabi_dadd+0xd2>
 80009e4:	1af6      	subs	r6, r6, r3
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <__aeabi_dadd+0x370>)
 80009e8:	401a      	ands	r2, r3
 80009ea:	4692      	mov	sl, r2
 80009ec:	e70a      	b.n	8000804 <__aeabi_dadd+0xf8>
 80009ee:	2f00      	cmp	r7, #0
 80009f0:	d02b      	beq.n	8000a4a <__aeabi_dadd+0x33e>
 80009f2:	1b97      	subs	r7, r2, r6
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x2ee>
 80009f8:	e0b8      	b.n	8000b6c <__aeabi_dadd+0x460>
 80009fa:	4c1f      	ldr	r4, [pc, #124]	; (8000a78 <__aeabi_dadd+0x36c>)
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x2f6>
 8000a00:	e11c      	b.n	8000c3c <__aeabi_dadd+0x530>
 8000a02:	2480      	movs	r4, #128	; 0x80
 8000a04:	0424      	lsls	r4, r4, #16
 8000a06:	4321      	orrs	r1, r4
 8000a08:	2f38      	cmp	r7, #56	; 0x38
 8000a0a:	dd00      	ble.n	8000a0e <__aeabi_dadd+0x302>
 8000a0c:	e11e      	b.n	8000c4c <__aeabi_dadd+0x540>
 8000a0e:	2f1f      	cmp	r7, #31
 8000a10:	dd00      	ble.n	8000a14 <__aeabi_dadd+0x308>
 8000a12:	e19e      	b.n	8000d52 <__aeabi_dadd+0x646>
 8000a14:	2620      	movs	r6, #32
 8000a16:	000c      	movs	r4, r1
 8000a18:	1bf6      	subs	r6, r6, r7
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	40b3      	lsls	r3, r6
 8000a1e:	40b4      	lsls	r4, r6
 8000a20:	40f8      	lsrs	r0, r7
 8000a22:	1e5e      	subs	r6, r3, #1
 8000a24:	41b3      	sbcs	r3, r6
 8000a26:	40f9      	lsrs	r1, r7
 8000a28:	4304      	orrs	r4, r0
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	4489      	add	r9, r1
 8000a2e:	4444      	add	r4, r8
 8000a30:	4544      	cmp	r4, r8
 8000a32:	419b      	sbcs	r3, r3
 8000a34:	425b      	negs	r3, r3
 8000a36:	444b      	add	r3, r9
 8000a38:	469a      	mov	sl, r3
 8000a3a:	0016      	movs	r6, r2
 8000a3c:	e7a8      	b.n	8000990 <__aeabi_dadd+0x284>
 8000a3e:	4642      	mov	r2, r8
 8000a40:	464c      	mov	r4, r9
 8000a42:	4314      	orrs	r4, r2
 8000a44:	1e62      	subs	r2, r4, #1
 8000a46:	4194      	sbcs	r4, r2
 8000a48:	e6a6      	b.n	8000798 <__aeabi_dadd+0x8c>
 8000a4a:	4c0d      	ldr	r4, [pc, #52]	; (8000a80 <__aeabi_dadd+0x374>)
 8000a4c:	1c72      	adds	r2, r6, #1
 8000a4e:	4222      	tst	r2, r4
 8000a50:	d000      	beq.n	8000a54 <__aeabi_dadd+0x348>
 8000a52:	e0a8      	b.n	8000ba6 <__aeabi_dadd+0x49a>
 8000a54:	000a      	movs	r2, r1
 8000a56:	431a      	orrs	r2, r3
 8000a58:	2e00      	cmp	r6, #0
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_dadd+0x352>
 8000a5c:	e10a      	b.n	8000c74 <__aeabi_dadd+0x568>
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x358>
 8000a62:	e15e      	b.n	8000d22 <__aeabi_dadd+0x616>
 8000a64:	464a      	mov	r2, r9
 8000a66:	4302      	orrs	r2, r0
 8000a68:	d000      	beq.n	8000a6c <__aeabi_dadd+0x360>
 8000a6a:	e161      	b.n	8000d30 <__aeabi_dadd+0x624>
 8000a6c:	074a      	lsls	r2, r1, #29
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	e77c      	b.n	8000970 <__aeabi_dadd+0x264>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	000007ff 	.word	0x000007ff
 8000a7c:	ff7fffff 	.word	0xff7fffff
 8000a80:	000007fe 	.word	0x000007fe
 8000a84:	4ccf      	ldr	r4, [pc, #828]	; (8000dc4 <__aeabi_dadd+0x6b8>)
 8000a86:	42a2      	cmp	r2, r4
 8000a88:	d100      	bne.n	8000a8c <__aeabi_dadd+0x380>
 8000a8a:	e0ce      	b.n	8000c2a <__aeabi_dadd+0x51e>
 8000a8c:	2480      	movs	r4, #128	; 0x80
 8000a8e:	0424      	lsls	r4, r4, #16
 8000a90:	4321      	orrs	r1, r4
 8000a92:	2f38      	cmp	r7, #56	; 0x38
 8000a94:	dc5b      	bgt.n	8000b4e <__aeabi_dadd+0x442>
 8000a96:	2f1f      	cmp	r7, #31
 8000a98:	dd00      	ble.n	8000a9c <__aeabi_dadd+0x390>
 8000a9a:	e0dc      	b.n	8000c56 <__aeabi_dadd+0x54a>
 8000a9c:	2520      	movs	r5, #32
 8000a9e:	000c      	movs	r4, r1
 8000aa0:	1bed      	subs	r5, r5, r7
 8000aa2:	001e      	movs	r6, r3
 8000aa4:	40ab      	lsls	r3, r5
 8000aa6:	40ac      	lsls	r4, r5
 8000aa8:	40fe      	lsrs	r6, r7
 8000aaa:	1e5d      	subs	r5, r3, #1
 8000aac:	41ab      	sbcs	r3, r5
 8000aae:	4334      	orrs	r4, r6
 8000ab0:	40f9      	lsrs	r1, r7
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	464b      	mov	r3, r9
 8000ab6:	1a5b      	subs	r3, r3, r1
 8000ab8:	4699      	mov	r9, r3
 8000aba:	e04c      	b.n	8000b56 <__aeabi_dadd+0x44a>
 8000abc:	464a      	mov	r2, r9
 8000abe:	1a1c      	subs	r4, r3, r0
 8000ac0:	1a88      	subs	r0, r1, r2
 8000ac2:	42a3      	cmp	r3, r4
 8000ac4:	4192      	sbcs	r2, r2
 8000ac6:	4252      	negs	r2, r2
 8000ac8:	4692      	mov	sl, r2
 8000aca:	0002      	movs	r2, r0
 8000acc:	4650      	mov	r0, sl
 8000ace:	1a12      	subs	r2, r2, r0
 8000ad0:	4692      	mov	sl, r2
 8000ad2:	0212      	lsls	r2, r2, #8
 8000ad4:	d478      	bmi.n	8000bc8 <__aeabi_dadd+0x4bc>
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	4323      	orrs	r3, r4
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x3d2>
 8000adc:	e66a      	b.n	80007b4 <__aeabi_dadd+0xa8>
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2500      	movs	r5, #0
 8000ae2:	e745      	b.n	8000970 <__aeabi_dadd+0x264>
 8000ae4:	074a      	lsls	r2, r1, #29
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	08c9      	lsrs	r1, r1, #3
 8000aec:	e73d      	b.n	800096a <__aeabi_dadd+0x25e>
 8000aee:	181c      	adds	r4, r3, r0
 8000af0:	429c      	cmp	r4, r3
 8000af2:	419b      	sbcs	r3, r3
 8000af4:	4449      	add	r1, r9
 8000af6:	468a      	mov	sl, r1
 8000af8:	425b      	negs	r3, r3
 8000afa:	449a      	add	sl, r3
 8000afc:	4653      	mov	r3, sl
 8000afe:	2601      	movs	r6, #1
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	d400      	bmi.n	8000b06 <__aeabi_dadd+0x3fa>
 8000b04:	e727      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000b06:	2602      	movs	r6, #2
 8000b08:	4652      	mov	r2, sl
 8000b0a:	4baf      	ldr	r3, [pc, #700]	; (8000dc8 <__aeabi_dadd+0x6bc>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	401a      	ands	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	4021      	ands	r1, r4
 8000b14:	0862      	lsrs	r2, r4, #1
 8000b16:	430a      	orrs	r2, r1
 8000b18:	07dc      	lsls	r4, r3, #31
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	4314      	orrs	r4, r2
 8000b20:	e670      	b.n	8000804 <__aeabi_dadd+0xf8>
 8000b22:	003a      	movs	r2, r7
 8000b24:	464c      	mov	r4, r9
 8000b26:	3a20      	subs	r2, #32
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	46a4      	mov	ip, r4
 8000b2c:	2f20      	cmp	r7, #32
 8000b2e:	d007      	beq.n	8000b40 <__aeabi_dadd+0x434>
 8000b30:	2240      	movs	r2, #64	; 0x40
 8000b32:	4648      	mov	r0, r9
 8000b34:	1bd2      	subs	r2, r2, r7
 8000b36:	4090      	lsls	r0, r2
 8000b38:	0002      	movs	r2, r0
 8000b3a:	4640      	mov	r0, r8
 8000b3c:	4310      	orrs	r0, r2
 8000b3e:	4680      	mov	r8, r0
 8000b40:	4640      	mov	r0, r8
 8000b42:	1e42      	subs	r2, r0, #1
 8000b44:	4190      	sbcs	r0, r2
 8000b46:	4662      	mov	r2, ip
 8000b48:	0004      	movs	r4, r0
 8000b4a:	4314      	orrs	r4, r2
 8000b4c:	e624      	b.n	8000798 <__aeabi_dadd+0x8c>
 8000b4e:	4319      	orrs	r1, r3
 8000b50:	000c      	movs	r4, r1
 8000b52:	1e63      	subs	r3, r4, #1
 8000b54:	419c      	sbcs	r4, r3
 8000b56:	4643      	mov	r3, r8
 8000b58:	1b1c      	subs	r4, r3, r4
 8000b5a:	45a0      	cmp	r8, r4
 8000b5c:	419b      	sbcs	r3, r3
 8000b5e:	4649      	mov	r1, r9
 8000b60:	425b      	negs	r3, r3
 8000b62:	1acb      	subs	r3, r1, r3
 8000b64:	469a      	mov	sl, r3
 8000b66:	4665      	mov	r5, ip
 8000b68:	0016      	movs	r6, r2
 8000b6a:	e61b      	b.n	80007a4 <__aeabi_dadd+0x98>
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	431c      	orrs	r4, r3
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x468>
 8000b72:	e0c7      	b.n	8000d04 <__aeabi_dadd+0x5f8>
 8000b74:	1e7c      	subs	r4, r7, #1
 8000b76:	2f01      	cmp	r7, #1
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x470>
 8000b7a:	e0f9      	b.n	8000d70 <__aeabi_dadd+0x664>
 8000b7c:	4e91      	ldr	r6, [pc, #580]	; (8000dc4 <__aeabi_dadd+0x6b8>)
 8000b7e:	42b7      	cmp	r7, r6
 8000b80:	d05c      	beq.n	8000c3c <__aeabi_dadd+0x530>
 8000b82:	0027      	movs	r7, r4
 8000b84:	e740      	b.n	8000a08 <__aeabi_dadd+0x2fc>
 8000b86:	2220      	movs	r2, #32
 8000b88:	464c      	mov	r4, r9
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	1bd2      	subs	r2, r2, r7
 8000b8e:	4094      	lsls	r4, r2
 8000b90:	40f8      	lsrs	r0, r7
 8000b92:	4304      	orrs	r4, r0
 8000b94:	4640      	mov	r0, r8
 8000b96:	4090      	lsls	r0, r2
 8000b98:	1e42      	subs	r2, r0, #1
 8000b9a:	4190      	sbcs	r0, r2
 8000b9c:	464a      	mov	r2, r9
 8000b9e:	40fa      	lsrs	r2, r7
 8000ba0:	4304      	orrs	r4, r0
 8000ba2:	1889      	adds	r1, r1, r2
 8000ba4:	e6ee      	b.n	8000984 <__aeabi_dadd+0x278>
 8000ba6:	4c87      	ldr	r4, [pc, #540]	; (8000dc4 <__aeabi_dadd+0x6b8>)
 8000ba8:	42a2      	cmp	r2, r4
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x4a2>
 8000bac:	e6f9      	b.n	80009a2 <__aeabi_dadd+0x296>
 8000bae:	1818      	adds	r0, r3, r0
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	419b      	sbcs	r3, r3
 8000bb4:	4449      	add	r1, r9
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	18cb      	adds	r3, r1, r3
 8000bba:	07dc      	lsls	r4, r3, #31
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	085b      	lsrs	r3, r3, #1
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	0016      	movs	r6, r2
 8000bc4:	4304      	orrs	r4, r0
 8000bc6:	e6c6      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000bc8:	4642      	mov	r2, r8
 8000bca:	1ad4      	subs	r4, r2, r3
 8000bcc:	45a0      	cmp	r8, r4
 8000bce:	4180      	sbcs	r0, r0
 8000bd0:	464b      	mov	r3, r9
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	1a0b      	subs	r3, r1, r0
 8000bd8:	469a      	mov	sl, r3
 8000bda:	4665      	mov	r5, ip
 8000bdc:	e5ea      	b.n	80007b4 <__aeabi_dadd+0xa8>
 8000bde:	464b      	mov	r3, r9
 8000be0:	464a      	mov	r2, r9
 8000be2:	08c0      	lsrs	r0, r0, #3
 8000be4:	075b      	lsls	r3, r3, #29
 8000be6:	4665      	mov	r5, ip
 8000be8:	4303      	orrs	r3, r0
 8000bea:	08d1      	lsrs	r1, r2, #3
 8000bec:	e6bd      	b.n	800096a <__aeabi_dadd+0x25e>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_dadd+0x4e8>
 8000bf2:	e08e      	b.n	8000d12 <__aeabi_dadd+0x606>
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	4303      	orrs	r3, r0
 8000bf8:	d117      	bne.n	8000c2a <__aeabi_dadd+0x51e>
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	0309      	lsls	r1, r1, #12
 8000c00:	e6da      	b.n	80009b8 <__aeabi_dadd+0x2ac>
 8000c02:	074a      	lsls	r2, r1, #29
 8000c04:	08db      	lsrs	r3, r3, #3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	08c9      	lsrs	r1, r1, #3
 8000c0a:	e6d1      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000c0c:	1a1c      	subs	r4, r3, r0
 8000c0e:	464a      	mov	r2, r9
 8000c10:	42a3      	cmp	r3, r4
 8000c12:	419b      	sbcs	r3, r3
 8000c14:	1a89      	subs	r1, r1, r2
 8000c16:	425b      	negs	r3, r3
 8000c18:	1acb      	subs	r3, r1, r3
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	e5c1      	b.n	80007a4 <__aeabi_dadd+0x98>
 8000c20:	074a      	lsls	r2, r1, #29
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	08c9      	lsrs	r1, r1, #3
 8000c28:	e69f      	b.n	800096a <__aeabi_dadd+0x25e>
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	08d8      	lsrs	r0, r3, #3
 8000c2e:	464b      	mov	r3, r9
 8000c30:	464a      	mov	r2, r9
 8000c32:	075b      	lsls	r3, r3, #29
 8000c34:	4665      	mov	r5, ip
 8000c36:	4303      	orrs	r3, r0
 8000c38:	08d1      	lsrs	r1, r2, #3
 8000c3a:	e6b9      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	08d8      	lsrs	r0, r3, #3
 8000c40:	464b      	mov	r3, r9
 8000c42:	464a      	mov	r2, r9
 8000c44:	075b      	lsls	r3, r3, #29
 8000c46:	4303      	orrs	r3, r0
 8000c48:	08d1      	lsrs	r1, r2, #3
 8000c4a:	e6b1      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	000c      	movs	r4, r1
 8000c50:	1e63      	subs	r3, r4, #1
 8000c52:	419c      	sbcs	r4, r3
 8000c54:	e6eb      	b.n	8000a2e <__aeabi_dadd+0x322>
 8000c56:	003c      	movs	r4, r7
 8000c58:	000d      	movs	r5, r1
 8000c5a:	3c20      	subs	r4, #32
 8000c5c:	40e5      	lsrs	r5, r4
 8000c5e:	2f20      	cmp	r7, #32
 8000c60:	d003      	beq.n	8000c6a <__aeabi_dadd+0x55e>
 8000c62:	2440      	movs	r4, #64	; 0x40
 8000c64:	1be4      	subs	r4, r4, r7
 8000c66:	40a1      	lsls	r1, r4
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	001c      	movs	r4, r3
 8000c6c:	1e63      	subs	r3, r4, #1
 8000c6e:	419c      	sbcs	r4, r3
 8000c70:	432c      	orrs	r4, r5
 8000c72:	e770      	b.n	8000b56 <__aeabi_dadd+0x44a>
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	d0e1      	beq.n	8000c3c <__aeabi_dadd+0x530>
 8000c78:	464a      	mov	r2, r9
 8000c7a:	4302      	orrs	r2, r0
 8000c7c:	d0c1      	beq.n	8000c02 <__aeabi_dadd+0x4f6>
 8000c7e:	074a      	lsls	r2, r1, #29
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	08c9      	lsrs	r1, r1, #3
 8000c88:	0312      	lsls	r2, r2, #12
 8000c8a:	4211      	tst	r1, r2
 8000c8c:	d008      	beq.n	8000ca0 <__aeabi_dadd+0x594>
 8000c8e:	4648      	mov	r0, r9
 8000c90:	08c4      	lsrs	r4, r0, #3
 8000c92:	4214      	tst	r4, r2
 8000c94:	d104      	bne.n	8000ca0 <__aeabi_dadd+0x594>
 8000c96:	4643      	mov	r3, r8
 8000c98:	0021      	movs	r1, r4
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	0742      	lsls	r2, r0, #29
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	0f5a      	lsrs	r2, r3, #29
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	0752      	lsls	r2, r2, #29
 8000ca6:	08db      	lsrs	r3, r3, #3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	e681      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000cac:	464b      	mov	r3, r9
 8000cae:	4303      	orrs	r3, r0
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_dadd+0x5a8>
 8000cb2:	e714      	b.n	8000ade <__aeabi_dadd+0x3d2>
 8000cb4:	464b      	mov	r3, r9
 8000cb6:	464a      	mov	r2, r9
 8000cb8:	08c0      	lsrs	r0, r0, #3
 8000cba:	075b      	lsls	r3, r3, #29
 8000cbc:	4665      	mov	r5, ip
 8000cbe:	4303      	orrs	r3, r0
 8000cc0:	08d1      	lsrs	r1, r2, #3
 8000cc2:	e655      	b.n	8000970 <__aeabi_dadd+0x264>
 8000cc4:	1ac4      	subs	r4, r0, r3
 8000cc6:	45a0      	cmp	r8, r4
 8000cc8:	4180      	sbcs	r0, r0
 8000cca:	464b      	mov	r3, r9
 8000ccc:	4240      	negs	r0, r0
 8000cce:	1a59      	subs	r1, r3, r1
 8000cd0:	1a0b      	subs	r3, r1, r0
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	4665      	mov	r5, ip
 8000cd6:	2601      	movs	r6, #1
 8000cd8:	e564      	b.n	80007a4 <__aeabi_dadd+0x98>
 8000cda:	1a1c      	subs	r4, r3, r0
 8000cdc:	464a      	mov	r2, r9
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	4180      	sbcs	r0, r0
 8000ce2:	1a8a      	subs	r2, r1, r2
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	1a12      	subs	r2, r2, r0
 8000ce8:	4692      	mov	sl, r2
 8000cea:	0212      	lsls	r2, r2, #8
 8000cec:	d549      	bpl.n	8000d82 <__aeabi_dadd+0x676>
 8000cee:	4642      	mov	r2, r8
 8000cf0:	1ad4      	subs	r4, r2, r3
 8000cf2:	45a0      	cmp	r8, r4
 8000cf4:	4180      	sbcs	r0, r0
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	1a59      	subs	r1, r3, r1
 8000cfc:	1a0b      	subs	r3, r1, r0
 8000cfe:	469a      	mov	sl, r3
 8000d00:	4665      	mov	r5, ip
 8000d02:	e57f      	b.n	8000804 <__aeabi_dadd+0xf8>
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	075b      	lsls	r3, r3, #29
 8000d0c:	4303      	orrs	r3, r0
 8000d0e:	08d1      	lsrs	r1, r2, #3
 8000d10:	e62b      	b.n	800096a <__aeabi_dadd+0x25e>
 8000d12:	464a      	mov	r2, r9
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	4302      	orrs	r2, r0
 8000d18:	d138      	bne.n	8000d8c <__aeabi_dadd+0x680>
 8000d1a:	074a      	lsls	r2, r1, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	08c9      	lsrs	r1, r1, #3
 8000d20:	e646      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000d22:	464b      	mov	r3, r9
 8000d24:	464a      	mov	r2, r9
 8000d26:	08c0      	lsrs	r0, r0, #3
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	4303      	orrs	r3, r0
 8000d2c:	08d1      	lsrs	r1, r2, #3
 8000d2e:	e61f      	b.n	8000970 <__aeabi_dadd+0x264>
 8000d30:	181c      	adds	r4, r3, r0
 8000d32:	429c      	cmp	r4, r3
 8000d34:	419b      	sbcs	r3, r3
 8000d36:	4449      	add	r1, r9
 8000d38:	468a      	mov	sl, r1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	449a      	add	sl, r3
 8000d3e:	4653      	mov	r3, sl
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	d400      	bmi.n	8000d46 <__aeabi_dadd+0x63a>
 8000d44:	e607      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000d46:	4652      	mov	r2, sl
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <__aeabi_dadd+0x6bc>)
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	4692      	mov	sl, r2
 8000d50:	e601      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000d52:	003c      	movs	r4, r7
 8000d54:	000e      	movs	r6, r1
 8000d56:	3c20      	subs	r4, #32
 8000d58:	40e6      	lsrs	r6, r4
 8000d5a:	2f20      	cmp	r7, #32
 8000d5c:	d003      	beq.n	8000d66 <__aeabi_dadd+0x65a>
 8000d5e:	2440      	movs	r4, #64	; 0x40
 8000d60:	1be4      	subs	r4, r4, r7
 8000d62:	40a1      	lsls	r1, r4
 8000d64:	430b      	orrs	r3, r1
 8000d66:	001c      	movs	r4, r3
 8000d68:	1e63      	subs	r3, r4, #1
 8000d6a:	419c      	sbcs	r4, r3
 8000d6c:	4334      	orrs	r4, r6
 8000d6e:	e65e      	b.n	8000a2e <__aeabi_dadd+0x322>
 8000d70:	4443      	add	r3, r8
 8000d72:	4283      	cmp	r3, r0
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	4449      	add	r1, r9
 8000d78:	468a      	mov	sl, r1
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	001c      	movs	r4, r3
 8000d7e:	4482      	add	sl, r0
 8000d80:	e6bc      	b.n	8000afc <__aeabi_dadd+0x3f0>
 8000d82:	4653      	mov	r3, sl
 8000d84:	4323      	orrs	r3, r4
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dadd+0x67e>
 8000d88:	e6a9      	b.n	8000ade <__aeabi_dadd+0x3d2>
 8000d8a:	e5e4      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000d8c:	074a      	lsls	r2, r1, #29
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	08c9      	lsrs	r1, r1, #3
 8000d94:	0312      	lsls	r2, r2, #12
 8000d96:	4211      	tst	r1, r2
 8000d98:	d009      	beq.n	8000dae <__aeabi_dadd+0x6a2>
 8000d9a:	4648      	mov	r0, r9
 8000d9c:	08c4      	lsrs	r4, r0, #3
 8000d9e:	4214      	tst	r4, r2
 8000da0:	d105      	bne.n	8000dae <__aeabi_dadd+0x6a2>
 8000da2:	4643      	mov	r3, r8
 8000da4:	4665      	mov	r5, ip
 8000da6:	0021      	movs	r1, r4
 8000da8:	08db      	lsrs	r3, r3, #3
 8000daa:	0742      	lsls	r2, r0, #29
 8000dac:	4313      	orrs	r3, r2
 8000dae:	0f5a      	lsrs	r2, r3, #29
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	0752      	lsls	r2, r2, #29
 8000db6:	4313      	orrs	r3, r2
 8000db8:	e5fa      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	4a01      	ldr	r2, [pc, #4]	; (8000dc4 <__aeabi_dadd+0x6b8>)
 8000dbe:	001c      	movs	r4, r3
 8000dc0:	e540      	b.n	8000844 <__aeabi_dadd+0x138>
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	000007ff 	.word	0x000007ff
 8000dc8:	ff7fffff 	.word	0xff7fffff

08000dcc <__aeabi_ddiv>:
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dce:	4657      	mov	r7, sl
 8000dd0:	464e      	mov	r6, r9
 8000dd2:	4645      	mov	r5, r8
 8000dd4:	46de      	mov	lr, fp
 8000dd6:	b5e0      	push	{r5, r6, r7, lr}
 8000dd8:	030c      	lsls	r4, r1, #12
 8000dda:	001f      	movs	r7, r3
 8000ddc:	004b      	lsls	r3, r1, #1
 8000dde:	4681      	mov	r9, r0
 8000de0:	4692      	mov	sl, r2
 8000de2:	0005      	movs	r5, r0
 8000de4:	b085      	sub	sp, #20
 8000de6:	0b24      	lsrs	r4, r4, #12
 8000de8:	0d5b      	lsrs	r3, r3, #21
 8000dea:	0fce      	lsrs	r6, r1, #31
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_ddiv+0x26>
 8000df0:	e152      	b.n	8001098 <__aeabi_ddiv+0x2cc>
 8000df2:	4ad2      	ldr	r2, [pc, #840]	; (800113c <__aeabi_ddiv+0x370>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x2e>
 8000df8:	e16e      	b.n	80010d8 <__aeabi_ddiv+0x30c>
 8000dfa:	0f42      	lsrs	r2, r0, #29
 8000dfc:	00e4      	lsls	r4, r4, #3
 8000dfe:	4314      	orrs	r4, r2
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	0412      	lsls	r2, r2, #16
 8000e04:	4322      	orrs	r2, r4
 8000e06:	4690      	mov	r8, r2
 8000e08:	4acd      	ldr	r2, [pc, #820]	; (8001140 <__aeabi_ddiv+0x374>)
 8000e0a:	00c5      	lsls	r5, r0, #3
 8000e0c:	4693      	mov	fp, r2
 8000e0e:	449b      	add	fp, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	4699      	mov	r9, r3
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	033c      	lsls	r4, r7, #12
 8000e18:	007b      	lsls	r3, r7, #1
 8000e1a:	4650      	mov	r0, sl
 8000e1c:	0b24      	lsrs	r4, r4, #12
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	0fff      	lsrs	r7, r7, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x5c>
 8000e26:	e11a      	b.n	800105e <__aeabi_ddiv+0x292>
 8000e28:	4ac4      	ldr	r2, [pc, #784]	; (800113c <__aeabi_ddiv+0x370>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x64>
 8000e2e:	e15e      	b.n	80010ee <__aeabi_ddiv+0x322>
 8000e30:	0f42      	lsrs	r2, r0, #29
 8000e32:	00e4      	lsls	r4, r4, #3
 8000e34:	4322      	orrs	r2, r4
 8000e36:	2480      	movs	r4, #128	; 0x80
 8000e38:	0424      	lsls	r4, r4, #16
 8000e3a:	4314      	orrs	r4, r2
 8000e3c:	4ac0      	ldr	r2, [pc, #768]	; (8001140 <__aeabi_ddiv+0x374>)
 8000e3e:	00c1      	lsls	r1, r0, #3
 8000e40:	4694      	mov	ip, r2
 8000e42:	465a      	mov	r2, fp
 8000e44:	4463      	add	r3, ip
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	469b      	mov	fp, r3
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	0033      	movs	r3, r6
 8000e4e:	407b      	eors	r3, r7
 8000e50:	469a      	mov	sl, r3
 8000e52:	464b      	mov	r3, r9
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d827      	bhi.n	8000ea8 <__aeabi_ddiv+0xdc>
 8000e58:	4aba      	ldr	r2, [pc, #744]	; (8001144 <__aeabi_ddiv+0x378>)
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	58d3      	ldr	r3, [r2, r3]
 8000e5e:	469f      	mov	pc, r3
 8000e60:	46b2      	mov	sl, r6
 8000e62:	9b00      	ldr	r3, [sp, #0]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d016      	beq.n	8000e96 <__aeabi_ddiv+0xca>
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_ddiv+0xa2>
 8000e6c:	e287      	b.n	800137e <__aeabi_ddiv+0x5b2>
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d000      	beq.n	8000e74 <__aeabi_ddiv+0xa8>
 8000e72:	e0d5      	b.n	8001020 <__aeabi_ddiv+0x254>
 8000e74:	2300      	movs	r3, #0
 8000e76:	2200      	movs	r2, #0
 8000e78:	2500      	movs	r5, #0
 8000e7a:	051b      	lsls	r3, r3, #20
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	4652      	mov	r2, sl
 8000e80:	07d2      	lsls	r2, r2, #31
 8000e82:	4313      	orrs	r3, r2
 8000e84:	0028      	movs	r0, r5
 8000e86:	0019      	movs	r1, r3
 8000e88:	b005      	add	sp, #20
 8000e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e8c:	46bb      	mov	fp, r7
 8000e8e:	46b2      	mov	sl, r6
 8000e90:	46a9      	mov	r9, r5
 8000e92:	46a0      	mov	r8, r4
 8000e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e96:	2200      	movs	r2, #0
 8000e98:	2500      	movs	r5, #0
 8000e9a:	4ba8      	ldr	r3, [pc, #672]	; (800113c <__aeabi_ddiv+0x370>)
 8000e9c:	e7ed      	b.n	8000e7a <__aeabi_ddiv+0xae>
 8000e9e:	46ba      	mov	sl, r7
 8000ea0:	46a0      	mov	r8, r4
 8000ea2:	000d      	movs	r5, r1
 8000ea4:	9000      	str	r0, [sp, #0]
 8000ea6:	e7dc      	b.n	8000e62 <__aeabi_ddiv+0x96>
 8000ea8:	4544      	cmp	r4, r8
 8000eaa:	d200      	bcs.n	8000eae <__aeabi_ddiv+0xe2>
 8000eac:	e1c4      	b.n	8001238 <__aeabi_ddiv+0x46c>
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0xe6>
 8000eb0:	e1bf      	b.n	8001232 <__aeabi_ddiv+0x466>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	002e      	movs	r6, r5
 8000eba:	4640      	mov	r0, r8
 8000ebc:	2500      	movs	r5, #0
 8000ebe:	44e3      	add	fp, ip
 8000ec0:	0223      	lsls	r3, r4, #8
 8000ec2:	0e0c      	lsrs	r4, r1, #24
 8000ec4:	431c      	orrs	r4, r3
 8000ec6:	0c1b      	lsrs	r3, r3, #16
 8000ec8:	4699      	mov	r9, r3
 8000eca:	0423      	lsls	r3, r4, #16
 8000ecc:	020a      	lsls	r2, r1, #8
 8000ece:	0c1f      	lsrs	r7, r3, #16
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	9200      	str	r2, [sp, #0]
 8000ed4:	9701      	str	r7, [sp, #4]
 8000ed6:	f7ff f9ad 	bl	8000234 <__aeabi_uidivmod>
 8000eda:	0002      	movs	r2, r0
 8000edc:	437a      	muls	r2, r7
 8000ede:	040b      	lsls	r3, r1, #16
 8000ee0:	0c31      	lsrs	r1, r6, #16
 8000ee2:	4680      	mov	r8, r0
 8000ee4:	4319      	orrs	r1, r3
 8000ee6:	428a      	cmp	r2, r1
 8000ee8:	d907      	bls.n	8000efa <__aeabi_ddiv+0x12e>
 8000eea:	2301      	movs	r3, #1
 8000eec:	425b      	negs	r3, r3
 8000eee:	469c      	mov	ip, r3
 8000ef0:	1909      	adds	r1, r1, r4
 8000ef2:	44e0      	add	r8, ip
 8000ef4:	428c      	cmp	r4, r1
 8000ef6:	d800      	bhi.n	8000efa <__aeabi_ddiv+0x12e>
 8000ef8:	e201      	b.n	80012fe <__aeabi_ddiv+0x532>
 8000efa:	1a88      	subs	r0, r1, r2
 8000efc:	4649      	mov	r1, r9
 8000efe:	f7ff f999 	bl	8000234 <__aeabi_uidivmod>
 8000f02:	9a01      	ldr	r2, [sp, #4]
 8000f04:	0436      	lsls	r6, r6, #16
 8000f06:	4342      	muls	r2, r0
 8000f08:	0409      	lsls	r1, r1, #16
 8000f0a:	0c36      	lsrs	r6, r6, #16
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	430e      	orrs	r6, r1
 8000f10:	42b2      	cmp	r2, r6
 8000f12:	d904      	bls.n	8000f1e <__aeabi_ddiv+0x152>
 8000f14:	1936      	adds	r6, r6, r4
 8000f16:	3b01      	subs	r3, #1
 8000f18:	42b4      	cmp	r4, r6
 8000f1a:	d800      	bhi.n	8000f1e <__aeabi_ddiv+0x152>
 8000f1c:	e1e9      	b.n	80012f2 <__aeabi_ddiv+0x526>
 8000f1e:	1ab0      	subs	r0, r6, r2
 8000f20:	4642      	mov	r2, r8
 8000f22:	9e00      	ldr	r6, [sp, #0]
 8000f24:	0412      	lsls	r2, r2, #16
 8000f26:	431a      	orrs	r2, r3
 8000f28:	0c33      	lsrs	r3, r6, #16
 8000f2a:	001f      	movs	r7, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	4690      	mov	r8, r2
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	0413      	lsls	r3, r2, #16
 8000f34:	0432      	lsls	r2, r6, #16
 8000f36:	0c16      	lsrs	r6, r2, #16
 8000f38:	0032      	movs	r2, r6
 8000f3a:	0c1b      	lsrs	r3, r3, #16
 8000f3c:	435a      	muls	r2, r3
 8000f3e:	9603      	str	r6, [sp, #12]
 8000f40:	437b      	muls	r3, r7
 8000f42:	434e      	muls	r6, r1
 8000f44:	4379      	muls	r1, r7
 8000f46:	0c17      	lsrs	r7, r2, #16
 8000f48:	46bc      	mov	ip, r7
 8000f4a:	199b      	adds	r3, r3, r6
 8000f4c:	4463      	add	r3, ip
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	d903      	bls.n	8000f5a <__aeabi_ddiv+0x18e>
 8000f52:	2680      	movs	r6, #128	; 0x80
 8000f54:	0276      	lsls	r6, r6, #9
 8000f56:	46b4      	mov	ip, r6
 8000f58:	4461      	add	r1, ip
 8000f5a:	0c1e      	lsrs	r6, r3, #16
 8000f5c:	1871      	adds	r1, r6, r1
 8000f5e:	0416      	lsls	r6, r2, #16
 8000f60:	041b      	lsls	r3, r3, #16
 8000f62:	0c36      	lsrs	r6, r6, #16
 8000f64:	199e      	adds	r6, r3, r6
 8000f66:	4288      	cmp	r0, r1
 8000f68:	d302      	bcc.n	8000f70 <__aeabi_ddiv+0x1a4>
 8000f6a:	d112      	bne.n	8000f92 <__aeabi_ddiv+0x1c6>
 8000f6c:	42b5      	cmp	r5, r6
 8000f6e:	d210      	bcs.n	8000f92 <__aeabi_ddiv+0x1c6>
 8000f70:	4643      	mov	r3, r8
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	9b00      	ldr	r3, [sp, #0]
 8000f76:	469c      	mov	ip, r3
 8000f78:	4465      	add	r5, ip
 8000f7a:	001f      	movs	r7, r3
 8000f7c:	429d      	cmp	r5, r3
 8000f7e:	419b      	sbcs	r3, r3
 8000f80:	425b      	negs	r3, r3
 8000f82:	191b      	adds	r3, r3, r4
 8000f84:	18c0      	adds	r0, r0, r3
 8000f86:	4284      	cmp	r4, r0
 8000f88:	d200      	bcs.n	8000f8c <__aeabi_ddiv+0x1c0>
 8000f8a:	e19e      	b.n	80012ca <__aeabi_ddiv+0x4fe>
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_ddiv+0x1c4>
 8000f8e:	e199      	b.n	80012c4 <__aeabi_ddiv+0x4f8>
 8000f90:	4690      	mov	r8, r2
 8000f92:	1bae      	subs	r6, r5, r6
 8000f94:	42b5      	cmp	r5, r6
 8000f96:	41ad      	sbcs	r5, r5
 8000f98:	1a40      	subs	r0, r0, r1
 8000f9a:	426d      	negs	r5, r5
 8000f9c:	1b40      	subs	r0, r0, r5
 8000f9e:	4284      	cmp	r4, r0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x1d8>
 8000fa2:	e1d2      	b.n	800134a <__aeabi_ddiv+0x57e>
 8000fa4:	4649      	mov	r1, r9
 8000fa6:	f7ff f945 	bl	8000234 <__aeabi_uidivmod>
 8000faa:	9a01      	ldr	r2, [sp, #4]
 8000fac:	040b      	lsls	r3, r1, #16
 8000fae:	4342      	muls	r2, r0
 8000fb0:	0c31      	lsrs	r1, r6, #16
 8000fb2:	0005      	movs	r5, r0
 8000fb4:	4319      	orrs	r1, r3
 8000fb6:	428a      	cmp	r2, r1
 8000fb8:	d900      	bls.n	8000fbc <__aeabi_ddiv+0x1f0>
 8000fba:	e16c      	b.n	8001296 <__aeabi_ddiv+0x4ca>
 8000fbc:	1a88      	subs	r0, r1, r2
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	f7ff f938 	bl	8000234 <__aeabi_uidivmod>
 8000fc4:	9a01      	ldr	r2, [sp, #4]
 8000fc6:	0436      	lsls	r6, r6, #16
 8000fc8:	4342      	muls	r2, r0
 8000fca:	0409      	lsls	r1, r1, #16
 8000fcc:	0c36      	lsrs	r6, r6, #16
 8000fce:	0003      	movs	r3, r0
 8000fd0:	430e      	orrs	r6, r1
 8000fd2:	42b2      	cmp	r2, r6
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x20c>
 8000fd6:	e153      	b.n	8001280 <__aeabi_ddiv+0x4b4>
 8000fd8:	9803      	ldr	r0, [sp, #12]
 8000fda:	1ab6      	subs	r6, r6, r2
 8000fdc:	0002      	movs	r2, r0
 8000fde:	042d      	lsls	r5, r5, #16
 8000fe0:	431d      	orrs	r5, r3
 8000fe2:	9f02      	ldr	r7, [sp, #8]
 8000fe4:	042b      	lsls	r3, r5, #16
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	437b      	muls	r3, r7
 8000fec:	469c      	mov	ip, r3
 8000fee:	0c29      	lsrs	r1, r5, #16
 8000ff0:	4348      	muls	r0, r1
 8000ff2:	0c13      	lsrs	r3, r2, #16
 8000ff4:	4484      	add	ip, r0
 8000ff6:	4463      	add	r3, ip
 8000ff8:	4379      	muls	r1, r7
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x23a>
 8000ffe:	2080      	movs	r0, #128	; 0x80
 8001000:	0240      	lsls	r0, r0, #9
 8001002:	4684      	mov	ip, r0
 8001004:	4461      	add	r1, ip
 8001006:	0c18      	lsrs	r0, r3, #16
 8001008:	0412      	lsls	r2, r2, #16
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	0c12      	lsrs	r2, r2, #16
 800100e:	1840      	adds	r0, r0, r1
 8001010:	189b      	adds	r3, r3, r2
 8001012:	4286      	cmp	r6, r0
 8001014:	d200      	bcs.n	8001018 <__aeabi_ddiv+0x24c>
 8001016:	e100      	b.n	800121a <__aeabi_ddiv+0x44e>
 8001018:	d100      	bne.n	800101c <__aeabi_ddiv+0x250>
 800101a:	e0fb      	b.n	8001214 <__aeabi_ddiv+0x448>
 800101c:	2301      	movs	r3, #1
 800101e:	431d      	orrs	r5, r3
 8001020:	4b49      	ldr	r3, [pc, #292]	; (8001148 <__aeabi_ddiv+0x37c>)
 8001022:	445b      	add	r3, fp
 8001024:	2b00      	cmp	r3, #0
 8001026:	dc00      	bgt.n	800102a <__aeabi_ddiv+0x25e>
 8001028:	e0aa      	b.n	8001180 <__aeabi_ddiv+0x3b4>
 800102a:	076a      	lsls	r2, r5, #29
 800102c:	d000      	beq.n	8001030 <__aeabi_ddiv+0x264>
 800102e:	e13d      	b.n	80012ac <__aeabi_ddiv+0x4e0>
 8001030:	08e9      	lsrs	r1, r5, #3
 8001032:	4642      	mov	r2, r8
 8001034:	01d2      	lsls	r2, r2, #7
 8001036:	d506      	bpl.n	8001046 <__aeabi_ddiv+0x27a>
 8001038:	4642      	mov	r2, r8
 800103a:	4b44      	ldr	r3, [pc, #272]	; (800114c <__aeabi_ddiv+0x380>)
 800103c:	401a      	ands	r2, r3
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	4690      	mov	r8, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	445b      	add	r3, fp
 8001046:	4a42      	ldr	r2, [pc, #264]	; (8001150 <__aeabi_ddiv+0x384>)
 8001048:	4293      	cmp	r3, r2
 800104a:	dd00      	ble.n	800104e <__aeabi_ddiv+0x282>
 800104c:	e723      	b.n	8000e96 <__aeabi_ddiv+0xca>
 800104e:	4642      	mov	r2, r8
 8001050:	055b      	lsls	r3, r3, #21
 8001052:	0755      	lsls	r5, r2, #29
 8001054:	0252      	lsls	r2, r2, #9
 8001056:	430d      	orrs	r5, r1
 8001058:	0b12      	lsrs	r2, r2, #12
 800105a:	0d5b      	lsrs	r3, r3, #21
 800105c:	e70d      	b.n	8000e7a <__aeabi_ddiv+0xae>
 800105e:	4651      	mov	r1, sl
 8001060:	4321      	orrs	r1, r4
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0x29a>
 8001064:	e07c      	b.n	8001160 <__aeabi_ddiv+0x394>
 8001066:	2c00      	cmp	r4, #0
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x2a0>
 800106a:	e0fb      	b.n	8001264 <__aeabi_ddiv+0x498>
 800106c:	0020      	movs	r0, r4
 800106e:	f001 f9e5 	bl	800243c <__clzsi2>
 8001072:	0002      	movs	r2, r0
 8001074:	3a0b      	subs	r2, #11
 8001076:	231d      	movs	r3, #29
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	4652      	mov	r2, sl
 800107c:	0001      	movs	r1, r0
 800107e:	40da      	lsrs	r2, r3
 8001080:	4653      	mov	r3, sl
 8001082:	3908      	subs	r1, #8
 8001084:	408b      	lsls	r3, r1
 8001086:	408c      	lsls	r4, r1
 8001088:	0019      	movs	r1, r3
 800108a:	4314      	orrs	r4, r2
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <__aeabi_ddiv+0x388>)
 800108e:	4458      	add	r0, fp
 8001090:	469b      	mov	fp, r3
 8001092:	4483      	add	fp, r0
 8001094:	2000      	movs	r0, #0
 8001096:	e6d9      	b.n	8000e4c <__aeabi_ddiv+0x80>
 8001098:	0003      	movs	r3, r0
 800109a:	4323      	orrs	r3, r4
 800109c:	4698      	mov	r8, r3
 800109e:	d044      	beq.n	800112a <__aeabi_ddiv+0x35e>
 80010a0:	2c00      	cmp	r4, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0x2da>
 80010a4:	e0cf      	b.n	8001246 <__aeabi_ddiv+0x47a>
 80010a6:	0020      	movs	r0, r4
 80010a8:	f001 f9c8 	bl	800243c <__clzsi2>
 80010ac:	0001      	movs	r1, r0
 80010ae:	0002      	movs	r2, r0
 80010b0:	390b      	subs	r1, #11
 80010b2:	231d      	movs	r3, #29
 80010b4:	1a5b      	subs	r3, r3, r1
 80010b6:	4649      	mov	r1, r9
 80010b8:	0010      	movs	r0, r2
 80010ba:	40d9      	lsrs	r1, r3
 80010bc:	3808      	subs	r0, #8
 80010be:	4084      	lsls	r4, r0
 80010c0:	000b      	movs	r3, r1
 80010c2:	464d      	mov	r5, r9
 80010c4:	4323      	orrs	r3, r4
 80010c6:	4698      	mov	r8, r3
 80010c8:	4085      	lsls	r5, r0
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <__aeabi_ddiv+0x38c>)
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	469b      	mov	fp, r3
 80010d0:	2300      	movs	r3, #0
 80010d2:	4699      	mov	r9, r3
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	e69e      	b.n	8000e16 <__aeabi_ddiv+0x4a>
 80010d8:	0002      	movs	r2, r0
 80010da:	4322      	orrs	r2, r4
 80010dc:	4690      	mov	r8, r2
 80010de:	d11d      	bne.n	800111c <__aeabi_ddiv+0x350>
 80010e0:	2208      	movs	r2, #8
 80010e2:	469b      	mov	fp, r3
 80010e4:	2302      	movs	r3, #2
 80010e6:	2500      	movs	r5, #0
 80010e8:	4691      	mov	r9, r2
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	e693      	b.n	8000e16 <__aeabi_ddiv+0x4a>
 80010ee:	4651      	mov	r1, sl
 80010f0:	4321      	orrs	r1, r4
 80010f2:	d109      	bne.n	8001108 <__aeabi_ddiv+0x33c>
 80010f4:	2302      	movs	r3, #2
 80010f6:	464a      	mov	r2, r9
 80010f8:	431a      	orrs	r2, r3
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <__aeabi_ddiv+0x390>)
 80010fc:	4691      	mov	r9, r2
 80010fe:	469c      	mov	ip, r3
 8001100:	2400      	movs	r4, #0
 8001102:	2002      	movs	r0, #2
 8001104:	44e3      	add	fp, ip
 8001106:	e6a1      	b.n	8000e4c <__aeabi_ddiv+0x80>
 8001108:	2303      	movs	r3, #3
 800110a:	464a      	mov	r2, r9
 800110c:	431a      	orrs	r2, r3
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <__aeabi_ddiv+0x390>)
 8001110:	4691      	mov	r9, r2
 8001112:	469c      	mov	ip, r3
 8001114:	4651      	mov	r1, sl
 8001116:	2003      	movs	r0, #3
 8001118:	44e3      	add	fp, ip
 800111a:	e697      	b.n	8000e4c <__aeabi_ddiv+0x80>
 800111c:	220c      	movs	r2, #12
 800111e:	469b      	mov	fp, r3
 8001120:	2303      	movs	r3, #3
 8001122:	46a0      	mov	r8, r4
 8001124:	4691      	mov	r9, r2
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	e675      	b.n	8000e16 <__aeabi_ddiv+0x4a>
 800112a:	2304      	movs	r3, #4
 800112c:	4699      	mov	r9, r3
 800112e:	2300      	movs	r3, #0
 8001130:	469b      	mov	fp, r3
 8001132:	3301      	adds	r3, #1
 8001134:	2500      	movs	r5, #0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	e66d      	b.n	8000e16 <__aeabi_ddiv+0x4a>
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	000007ff 	.word	0x000007ff
 8001140:	fffffc01 	.word	0xfffffc01
 8001144:	08007a70 	.word	0x08007a70
 8001148:	000003ff 	.word	0x000003ff
 800114c:	feffffff 	.word	0xfeffffff
 8001150:	000007fe 	.word	0x000007fe
 8001154:	000003f3 	.word	0x000003f3
 8001158:	fffffc0d 	.word	0xfffffc0d
 800115c:	fffff801 	.word	0xfffff801
 8001160:	464a      	mov	r2, r9
 8001162:	2301      	movs	r3, #1
 8001164:	431a      	orrs	r2, r3
 8001166:	4691      	mov	r9, r2
 8001168:	2400      	movs	r4, #0
 800116a:	2001      	movs	r0, #1
 800116c:	e66e      	b.n	8000e4c <__aeabi_ddiv+0x80>
 800116e:	2300      	movs	r3, #0
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	469a      	mov	sl, r3
 8001174:	2500      	movs	r5, #0
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <__aeabi_ddiv+0x5cc>)
 8001178:	0312      	lsls	r2, r2, #12
 800117a:	e67e      	b.n	8000e7a <__aeabi_ddiv+0xae>
 800117c:	2501      	movs	r5, #1
 800117e:	426d      	negs	r5, r5
 8001180:	2201      	movs	r2, #1
 8001182:	1ad2      	subs	r2, r2, r3
 8001184:	2a38      	cmp	r2, #56	; 0x38
 8001186:	dd00      	ble.n	800118a <__aeabi_ddiv+0x3be>
 8001188:	e674      	b.n	8000e74 <__aeabi_ddiv+0xa8>
 800118a:	2a1f      	cmp	r2, #31
 800118c:	dc00      	bgt.n	8001190 <__aeabi_ddiv+0x3c4>
 800118e:	e0bd      	b.n	800130c <__aeabi_ddiv+0x540>
 8001190:	211f      	movs	r1, #31
 8001192:	4249      	negs	r1, r1
 8001194:	1acb      	subs	r3, r1, r3
 8001196:	4641      	mov	r1, r8
 8001198:	40d9      	lsrs	r1, r3
 800119a:	000b      	movs	r3, r1
 800119c:	2a20      	cmp	r2, #32
 800119e:	d004      	beq.n	80011aa <__aeabi_ddiv+0x3de>
 80011a0:	4641      	mov	r1, r8
 80011a2:	4a7e      	ldr	r2, [pc, #504]	; (800139c <__aeabi_ddiv+0x5d0>)
 80011a4:	445a      	add	r2, fp
 80011a6:	4091      	lsls	r1, r2
 80011a8:	430d      	orrs	r5, r1
 80011aa:	0029      	movs	r1, r5
 80011ac:	1e4a      	subs	r2, r1, #1
 80011ae:	4191      	sbcs	r1, r2
 80011b0:	4319      	orrs	r1, r3
 80011b2:	2307      	movs	r3, #7
 80011b4:	001d      	movs	r5, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	400d      	ands	r5, r1
 80011ba:	420b      	tst	r3, r1
 80011bc:	d100      	bne.n	80011c0 <__aeabi_ddiv+0x3f4>
 80011be:	e0d0      	b.n	8001362 <__aeabi_ddiv+0x596>
 80011c0:	220f      	movs	r2, #15
 80011c2:	2300      	movs	r3, #0
 80011c4:	400a      	ands	r2, r1
 80011c6:	2a04      	cmp	r2, #4
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x400>
 80011ca:	e0c7      	b.n	800135c <__aeabi_ddiv+0x590>
 80011cc:	1d0a      	adds	r2, r1, #4
 80011ce:	428a      	cmp	r2, r1
 80011d0:	4189      	sbcs	r1, r1
 80011d2:	4249      	negs	r1, r1
 80011d4:	185b      	adds	r3, r3, r1
 80011d6:	0011      	movs	r1, r2
 80011d8:	021a      	lsls	r2, r3, #8
 80011da:	d400      	bmi.n	80011de <__aeabi_ddiv+0x412>
 80011dc:	e0be      	b.n	800135c <__aeabi_ddiv+0x590>
 80011de:	2301      	movs	r3, #1
 80011e0:	2200      	movs	r2, #0
 80011e2:	2500      	movs	r5, #0
 80011e4:	e649      	b.n	8000e7a <__aeabi_ddiv+0xae>
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	4643      	mov	r3, r8
 80011ea:	0312      	lsls	r2, r2, #12
 80011ec:	4213      	tst	r3, r2
 80011ee:	d008      	beq.n	8001202 <__aeabi_ddiv+0x436>
 80011f0:	4214      	tst	r4, r2
 80011f2:	d106      	bne.n	8001202 <__aeabi_ddiv+0x436>
 80011f4:	4322      	orrs	r2, r4
 80011f6:	0312      	lsls	r2, r2, #12
 80011f8:	46ba      	mov	sl, r7
 80011fa:	000d      	movs	r5, r1
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <__aeabi_ddiv+0x5cc>)
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	e63b      	b.n	8000e7a <__aeabi_ddiv+0xae>
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	4643      	mov	r3, r8
 8001206:	0312      	lsls	r2, r2, #12
 8001208:	431a      	orrs	r2, r3
 800120a:	0312      	lsls	r2, r2, #12
 800120c:	46b2      	mov	sl, r6
 800120e:	4b62      	ldr	r3, [pc, #392]	; (8001398 <__aeabi_ddiv+0x5cc>)
 8001210:	0b12      	lsrs	r2, r2, #12
 8001212:	e632      	b.n	8000e7a <__aeabi_ddiv+0xae>
 8001214:	2b00      	cmp	r3, #0
 8001216:	d100      	bne.n	800121a <__aeabi_ddiv+0x44e>
 8001218:	e702      	b.n	8001020 <__aeabi_ddiv+0x254>
 800121a:	19a6      	adds	r6, r4, r6
 800121c:	1e6a      	subs	r2, r5, #1
 800121e:	42a6      	cmp	r6, r4
 8001220:	d200      	bcs.n	8001224 <__aeabi_ddiv+0x458>
 8001222:	e089      	b.n	8001338 <__aeabi_ddiv+0x56c>
 8001224:	4286      	cmp	r6, r0
 8001226:	d200      	bcs.n	800122a <__aeabi_ddiv+0x45e>
 8001228:	e09f      	b.n	800136a <__aeabi_ddiv+0x59e>
 800122a:	d100      	bne.n	800122e <__aeabi_ddiv+0x462>
 800122c:	e0af      	b.n	800138e <__aeabi_ddiv+0x5c2>
 800122e:	0015      	movs	r5, r2
 8001230:	e6f4      	b.n	800101c <__aeabi_ddiv+0x250>
 8001232:	42a9      	cmp	r1, r5
 8001234:	d900      	bls.n	8001238 <__aeabi_ddiv+0x46c>
 8001236:	e63c      	b.n	8000eb2 <__aeabi_ddiv+0xe6>
 8001238:	4643      	mov	r3, r8
 800123a:	07de      	lsls	r6, r3, #31
 800123c:	0858      	lsrs	r0, r3, #1
 800123e:	086b      	lsrs	r3, r5, #1
 8001240:	431e      	orrs	r6, r3
 8001242:	07ed      	lsls	r5, r5, #31
 8001244:	e63c      	b.n	8000ec0 <__aeabi_ddiv+0xf4>
 8001246:	f001 f8f9 	bl	800243c <__clzsi2>
 800124a:	0001      	movs	r1, r0
 800124c:	0002      	movs	r2, r0
 800124e:	3115      	adds	r1, #21
 8001250:	3220      	adds	r2, #32
 8001252:	291c      	cmp	r1, #28
 8001254:	dc00      	bgt.n	8001258 <__aeabi_ddiv+0x48c>
 8001256:	e72c      	b.n	80010b2 <__aeabi_ddiv+0x2e6>
 8001258:	464b      	mov	r3, r9
 800125a:	3808      	subs	r0, #8
 800125c:	4083      	lsls	r3, r0
 800125e:	2500      	movs	r5, #0
 8001260:	4698      	mov	r8, r3
 8001262:	e732      	b.n	80010ca <__aeabi_ddiv+0x2fe>
 8001264:	f001 f8ea 	bl	800243c <__clzsi2>
 8001268:	0003      	movs	r3, r0
 800126a:	001a      	movs	r2, r3
 800126c:	3215      	adds	r2, #21
 800126e:	3020      	adds	r0, #32
 8001270:	2a1c      	cmp	r2, #28
 8001272:	dc00      	bgt.n	8001276 <__aeabi_ddiv+0x4aa>
 8001274:	e6ff      	b.n	8001076 <__aeabi_ddiv+0x2aa>
 8001276:	4654      	mov	r4, sl
 8001278:	3b08      	subs	r3, #8
 800127a:	2100      	movs	r1, #0
 800127c:	409c      	lsls	r4, r3
 800127e:	e705      	b.n	800108c <__aeabi_ddiv+0x2c0>
 8001280:	1936      	adds	r6, r6, r4
 8001282:	3b01      	subs	r3, #1
 8001284:	42b4      	cmp	r4, r6
 8001286:	d900      	bls.n	800128a <__aeabi_ddiv+0x4be>
 8001288:	e6a6      	b.n	8000fd8 <__aeabi_ddiv+0x20c>
 800128a:	42b2      	cmp	r2, r6
 800128c:	d800      	bhi.n	8001290 <__aeabi_ddiv+0x4c4>
 800128e:	e6a3      	b.n	8000fd8 <__aeabi_ddiv+0x20c>
 8001290:	1e83      	subs	r3, r0, #2
 8001292:	1936      	adds	r6, r6, r4
 8001294:	e6a0      	b.n	8000fd8 <__aeabi_ddiv+0x20c>
 8001296:	1909      	adds	r1, r1, r4
 8001298:	3d01      	subs	r5, #1
 800129a:	428c      	cmp	r4, r1
 800129c:	d900      	bls.n	80012a0 <__aeabi_ddiv+0x4d4>
 800129e:	e68d      	b.n	8000fbc <__aeabi_ddiv+0x1f0>
 80012a0:	428a      	cmp	r2, r1
 80012a2:	d800      	bhi.n	80012a6 <__aeabi_ddiv+0x4da>
 80012a4:	e68a      	b.n	8000fbc <__aeabi_ddiv+0x1f0>
 80012a6:	1e85      	subs	r5, r0, #2
 80012a8:	1909      	adds	r1, r1, r4
 80012aa:	e687      	b.n	8000fbc <__aeabi_ddiv+0x1f0>
 80012ac:	220f      	movs	r2, #15
 80012ae:	402a      	ands	r2, r5
 80012b0:	2a04      	cmp	r2, #4
 80012b2:	d100      	bne.n	80012b6 <__aeabi_ddiv+0x4ea>
 80012b4:	e6bc      	b.n	8001030 <__aeabi_ddiv+0x264>
 80012b6:	1d29      	adds	r1, r5, #4
 80012b8:	42a9      	cmp	r1, r5
 80012ba:	41ad      	sbcs	r5, r5
 80012bc:	426d      	negs	r5, r5
 80012be:	08c9      	lsrs	r1, r1, #3
 80012c0:	44a8      	add	r8, r5
 80012c2:	e6b6      	b.n	8001032 <__aeabi_ddiv+0x266>
 80012c4:	42af      	cmp	r7, r5
 80012c6:	d900      	bls.n	80012ca <__aeabi_ddiv+0x4fe>
 80012c8:	e662      	b.n	8000f90 <__aeabi_ddiv+0x1c4>
 80012ca:	4281      	cmp	r1, r0
 80012cc:	d804      	bhi.n	80012d8 <__aeabi_ddiv+0x50c>
 80012ce:	d000      	beq.n	80012d2 <__aeabi_ddiv+0x506>
 80012d0:	e65e      	b.n	8000f90 <__aeabi_ddiv+0x1c4>
 80012d2:	42ae      	cmp	r6, r5
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x50c>
 80012d6:	e65b      	b.n	8000f90 <__aeabi_ddiv+0x1c4>
 80012d8:	2302      	movs	r3, #2
 80012da:	425b      	negs	r3, r3
 80012dc:	469c      	mov	ip, r3
 80012de:	9b00      	ldr	r3, [sp, #0]
 80012e0:	44e0      	add	r8, ip
 80012e2:	469c      	mov	ip, r3
 80012e4:	4465      	add	r5, ip
 80012e6:	429d      	cmp	r5, r3
 80012e8:	419b      	sbcs	r3, r3
 80012ea:	425b      	negs	r3, r3
 80012ec:	191b      	adds	r3, r3, r4
 80012ee:	18c0      	adds	r0, r0, r3
 80012f0:	e64f      	b.n	8000f92 <__aeabi_ddiv+0x1c6>
 80012f2:	42b2      	cmp	r2, r6
 80012f4:	d800      	bhi.n	80012f8 <__aeabi_ddiv+0x52c>
 80012f6:	e612      	b.n	8000f1e <__aeabi_ddiv+0x152>
 80012f8:	1e83      	subs	r3, r0, #2
 80012fa:	1936      	adds	r6, r6, r4
 80012fc:	e60f      	b.n	8000f1e <__aeabi_ddiv+0x152>
 80012fe:	428a      	cmp	r2, r1
 8001300:	d800      	bhi.n	8001304 <__aeabi_ddiv+0x538>
 8001302:	e5fa      	b.n	8000efa <__aeabi_ddiv+0x12e>
 8001304:	1e83      	subs	r3, r0, #2
 8001306:	4698      	mov	r8, r3
 8001308:	1909      	adds	r1, r1, r4
 800130a:	e5f6      	b.n	8000efa <__aeabi_ddiv+0x12e>
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <__aeabi_ddiv+0x5d4>)
 800130e:	0028      	movs	r0, r5
 8001310:	445b      	add	r3, fp
 8001312:	4641      	mov	r1, r8
 8001314:	409d      	lsls	r5, r3
 8001316:	4099      	lsls	r1, r3
 8001318:	40d0      	lsrs	r0, r2
 800131a:	1e6b      	subs	r3, r5, #1
 800131c:	419d      	sbcs	r5, r3
 800131e:	4643      	mov	r3, r8
 8001320:	4301      	orrs	r1, r0
 8001322:	4329      	orrs	r1, r5
 8001324:	40d3      	lsrs	r3, r2
 8001326:	074a      	lsls	r2, r1, #29
 8001328:	d100      	bne.n	800132c <__aeabi_ddiv+0x560>
 800132a:	e755      	b.n	80011d8 <__aeabi_ddiv+0x40c>
 800132c:	220f      	movs	r2, #15
 800132e:	400a      	ands	r2, r1
 8001330:	2a04      	cmp	r2, #4
 8001332:	d000      	beq.n	8001336 <__aeabi_ddiv+0x56a>
 8001334:	e74a      	b.n	80011cc <__aeabi_ddiv+0x400>
 8001336:	e74f      	b.n	80011d8 <__aeabi_ddiv+0x40c>
 8001338:	0015      	movs	r5, r2
 800133a:	4286      	cmp	r6, r0
 800133c:	d000      	beq.n	8001340 <__aeabi_ddiv+0x574>
 800133e:	e66d      	b.n	800101c <__aeabi_ddiv+0x250>
 8001340:	9a00      	ldr	r2, [sp, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d000      	beq.n	8001348 <__aeabi_ddiv+0x57c>
 8001346:	e669      	b.n	800101c <__aeabi_ddiv+0x250>
 8001348:	e66a      	b.n	8001020 <__aeabi_ddiv+0x254>
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <__aeabi_ddiv+0x5d8>)
 800134c:	445b      	add	r3, fp
 800134e:	2b00      	cmp	r3, #0
 8001350:	dc00      	bgt.n	8001354 <__aeabi_ddiv+0x588>
 8001352:	e713      	b.n	800117c <__aeabi_ddiv+0x3b0>
 8001354:	2501      	movs	r5, #1
 8001356:	2100      	movs	r1, #0
 8001358:	44a8      	add	r8, r5
 800135a:	e66a      	b.n	8001032 <__aeabi_ddiv+0x266>
 800135c:	075d      	lsls	r5, r3, #29
 800135e:	025b      	lsls	r3, r3, #9
 8001360:	0b1a      	lsrs	r2, r3, #12
 8001362:	08c9      	lsrs	r1, r1, #3
 8001364:	2300      	movs	r3, #0
 8001366:	430d      	orrs	r5, r1
 8001368:	e587      	b.n	8000e7a <__aeabi_ddiv+0xae>
 800136a:	9900      	ldr	r1, [sp, #0]
 800136c:	3d02      	subs	r5, #2
 800136e:	004a      	lsls	r2, r1, #1
 8001370:	428a      	cmp	r2, r1
 8001372:	41bf      	sbcs	r7, r7
 8001374:	427f      	negs	r7, r7
 8001376:	193f      	adds	r7, r7, r4
 8001378:	19f6      	adds	r6, r6, r7
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	e7dd      	b.n	800133a <__aeabi_ddiv+0x56e>
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	4643      	mov	r3, r8
 8001382:	0312      	lsls	r2, r2, #12
 8001384:	431a      	orrs	r2, r3
 8001386:	0312      	lsls	r2, r2, #12
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <__aeabi_ddiv+0x5cc>)
 800138a:	0b12      	lsrs	r2, r2, #12
 800138c:	e575      	b.n	8000e7a <__aeabi_ddiv+0xae>
 800138e:	9900      	ldr	r1, [sp, #0]
 8001390:	4299      	cmp	r1, r3
 8001392:	d3ea      	bcc.n	800136a <__aeabi_ddiv+0x59e>
 8001394:	0015      	movs	r5, r2
 8001396:	e7d3      	b.n	8001340 <__aeabi_ddiv+0x574>
 8001398:	000007ff 	.word	0x000007ff
 800139c:	0000043e 	.word	0x0000043e
 80013a0:	0000041e 	.word	0x0000041e
 80013a4:	000003ff 	.word	0x000003ff

080013a8 <__eqdf2>:
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013aa:	464e      	mov	r6, r9
 80013ac:	4645      	mov	r5, r8
 80013ae:	46de      	mov	lr, fp
 80013b0:	4657      	mov	r7, sl
 80013b2:	4690      	mov	r8, r2
 80013b4:	b5e0      	push	{r5, r6, r7, lr}
 80013b6:	0017      	movs	r7, r2
 80013b8:	031a      	lsls	r2, r3, #12
 80013ba:	0b12      	lsrs	r2, r2, #12
 80013bc:	0005      	movs	r5, r0
 80013be:	4684      	mov	ip, r0
 80013c0:	4819      	ldr	r0, [pc, #100]	; (8001428 <__eqdf2+0x80>)
 80013c2:	030e      	lsls	r6, r1, #12
 80013c4:	004c      	lsls	r4, r1, #1
 80013c6:	4691      	mov	r9, r2
 80013c8:	005a      	lsls	r2, r3, #1
 80013ca:	0fdb      	lsrs	r3, r3, #31
 80013cc:	469b      	mov	fp, r3
 80013ce:	0b36      	lsrs	r6, r6, #12
 80013d0:	0d64      	lsrs	r4, r4, #21
 80013d2:	0fc9      	lsrs	r1, r1, #31
 80013d4:	0d52      	lsrs	r2, r2, #21
 80013d6:	4284      	cmp	r4, r0
 80013d8:	d019      	beq.n	800140e <__eqdf2+0x66>
 80013da:	4282      	cmp	r2, r0
 80013dc:	d010      	beq.n	8001400 <__eqdf2+0x58>
 80013de:	2001      	movs	r0, #1
 80013e0:	4294      	cmp	r4, r2
 80013e2:	d10e      	bne.n	8001402 <__eqdf2+0x5a>
 80013e4:	454e      	cmp	r6, r9
 80013e6:	d10c      	bne.n	8001402 <__eqdf2+0x5a>
 80013e8:	2001      	movs	r0, #1
 80013ea:	45c4      	cmp	ip, r8
 80013ec:	d109      	bne.n	8001402 <__eqdf2+0x5a>
 80013ee:	4559      	cmp	r1, fp
 80013f0:	d017      	beq.n	8001422 <__eqdf2+0x7a>
 80013f2:	2c00      	cmp	r4, #0
 80013f4:	d105      	bne.n	8001402 <__eqdf2+0x5a>
 80013f6:	0030      	movs	r0, r6
 80013f8:	4328      	orrs	r0, r5
 80013fa:	1e43      	subs	r3, r0, #1
 80013fc:	4198      	sbcs	r0, r3
 80013fe:	e000      	b.n	8001402 <__eqdf2+0x5a>
 8001400:	2001      	movs	r0, #1
 8001402:	bcf0      	pop	{r4, r5, r6, r7}
 8001404:	46bb      	mov	fp, r7
 8001406:	46b2      	mov	sl, r6
 8001408:	46a9      	mov	r9, r5
 800140a:	46a0      	mov	r8, r4
 800140c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140e:	0033      	movs	r3, r6
 8001410:	2001      	movs	r0, #1
 8001412:	432b      	orrs	r3, r5
 8001414:	d1f5      	bne.n	8001402 <__eqdf2+0x5a>
 8001416:	42a2      	cmp	r2, r4
 8001418:	d1f3      	bne.n	8001402 <__eqdf2+0x5a>
 800141a:	464b      	mov	r3, r9
 800141c:	433b      	orrs	r3, r7
 800141e:	d1f0      	bne.n	8001402 <__eqdf2+0x5a>
 8001420:	e7e2      	b.n	80013e8 <__eqdf2+0x40>
 8001422:	2000      	movs	r0, #0
 8001424:	e7ed      	b.n	8001402 <__eqdf2+0x5a>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	000007ff 	.word	0x000007ff

0800142c <__gedf2>:
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	4647      	mov	r7, r8
 8001430:	46ce      	mov	lr, r9
 8001432:	0004      	movs	r4, r0
 8001434:	0018      	movs	r0, r3
 8001436:	0016      	movs	r6, r2
 8001438:	031b      	lsls	r3, r3, #12
 800143a:	0b1b      	lsrs	r3, r3, #12
 800143c:	4d2d      	ldr	r5, [pc, #180]	; (80014f4 <__gedf2+0xc8>)
 800143e:	004a      	lsls	r2, r1, #1
 8001440:	4699      	mov	r9, r3
 8001442:	b580      	push	{r7, lr}
 8001444:	0043      	lsls	r3, r0, #1
 8001446:	030f      	lsls	r7, r1, #12
 8001448:	46a4      	mov	ip, r4
 800144a:	46b0      	mov	r8, r6
 800144c:	0b3f      	lsrs	r7, r7, #12
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	0fc9      	lsrs	r1, r1, #31
 8001452:	0d5b      	lsrs	r3, r3, #21
 8001454:	0fc0      	lsrs	r0, r0, #31
 8001456:	42aa      	cmp	r2, r5
 8001458:	d021      	beq.n	800149e <__gedf2+0x72>
 800145a:	42ab      	cmp	r3, r5
 800145c:	d013      	beq.n	8001486 <__gedf2+0x5a>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d122      	bne.n	80014a8 <__gedf2+0x7c>
 8001462:	433c      	orrs	r4, r7
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <__gedf2+0x42>
 8001468:	464d      	mov	r5, r9
 800146a:	432e      	orrs	r6, r5
 800146c:	d022      	beq.n	80014b4 <__gedf2+0x88>
 800146e:	2c00      	cmp	r4, #0
 8001470:	d010      	beq.n	8001494 <__gedf2+0x68>
 8001472:	4281      	cmp	r1, r0
 8001474:	d022      	beq.n	80014bc <__gedf2+0x90>
 8001476:	2002      	movs	r0, #2
 8001478:	3901      	subs	r1, #1
 800147a:	4008      	ands	r0, r1
 800147c:	3801      	subs	r0, #1
 800147e:	bcc0      	pop	{r6, r7}
 8001480:	46b9      	mov	r9, r7
 8001482:	46b0      	mov	r8, r6
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001486:	464d      	mov	r5, r9
 8001488:	432e      	orrs	r6, r5
 800148a:	d129      	bne.n	80014e0 <__gedf2+0xb4>
 800148c:	2a00      	cmp	r2, #0
 800148e:	d1f0      	bne.n	8001472 <__gedf2+0x46>
 8001490:	433c      	orrs	r4, r7
 8001492:	d1ee      	bne.n	8001472 <__gedf2+0x46>
 8001494:	2800      	cmp	r0, #0
 8001496:	d1f2      	bne.n	800147e <__gedf2+0x52>
 8001498:	2001      	movs	r0, #1
 800149a:	4240      	negs	r0, r0
 800149c:	e7ef      	b.n	800147e <__gedf2+0x52>
 800149e:	003d      	movs	r5, r7
 80014a0:	4325      	orrs	r5, r4
 80014a2:	d11d      	bne.n	80014e0 <__gedf2+0xb4>
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d0ee      	beq.n	8001486 <__gedf2+0x5a>
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e2      	bne.n	8001472 <__gedf2+0x46>
 80014ac:	464c      	mov	r4, r9
 80014ae:	4326      	orrs	r6, r4
 80014b0:	d1df      	bne.n	8001472 <__gedf2+0x46>
 80014b2:	e7e0      	b.n	8001476 <__gedf2+0x4a>
 80014b4:	2000      	movs	r0, #0
 80014b6:	2c00      	cmp	r4, #0
 80014b8:	d0e1      	beq.n	800147e <__gedf2+0x52>
 80014ba:	e7dc      	b.n	8001476 <__gedf2+0x4a>
 80014bc:	429a      	cmp	r2, r3
 80014be:	dc0a      	bgt.n	80014d6 <__gedf2+0xaa>
 80014c0:	dbe8      	blt.n	8001494 <__gedf2+0x68>
 80014c2:	454f      	cmp	r7, r9
 80014c4:	d8d7      	bhi.n	8001476 <__gedf2+0x4a>
 80014c6:	d00e      	beq.n	80014e6 <__gedf2+0xba>
 80014c8:	2000      	movs	r0, #0
 80014ca:	454f      	cmp	r7, r9
 80014cc:	d2d7      	bcs.n	800147e <__gedf2+0x52>
 80014ce:	2900      	cmp	r1, #0
 80014d0:	d0e2      	beq.n	8001498 <__gedf2+0x6c>
 80014d2:	0008      	movs	r0, r1
 80014d4:	e7d3      	b.n	800147e <__gedf2+0x52>
 80014d6:	4243      	negs	r3, r0
 80014d8:	4158      	adcs	r0, r3
 80014da:	0040      	lsls	r0, r0, #1
 80014dc:	3801      	subs	r0, #1
 80014de:	e7ce      	b.n	800147e <__gedf2+0x52>
 80014e0:	2002      	movs	r0, #2
 80014e2:	4240      	negs	r0, r0
 80014e4:	e7cb      	b.n	800147e <__gedf2+0x52>
 80014e6:	45c4      	cmp	ip, r8
 80014e8:	d8c5      	bhi.n	8001476 <__gedf2+0x4a>
 80014ea:	2000      	movs	r0, #0
 80014ec:	45c4      	cmp	ip, r8
 80014ee:	d2c6      	bcs.n	800147e <__gedf2+0x52>
 80014f0:	e7ed      	b.n	80014ce <__gedf2+0xa2>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	000007ff 	.word	0x000007ff

080014f8 <__ledf2>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4647      	mov	r7, r8
 80014fc:	46ce      	mov	lr, r9
 80014fe:	0004      	movs	r4, r0
 8001500:	0018      	movs	r0, r3
 8001502:	0016      	movs	r6, r2
 8001504:	031b      	lsls	r3, r3, #12
 8001506:	0b1b      	lsrs	r3, r3, #12
 8001508:	4d2c      	ldr	r5, [pc, #176]	; (80015bc <__ledf2+0xc4>)
 800150a:	004a      	lsls	r2, r1, #1
 800150c:	4699      	mov	r9, r3
 800150e:	b580      	push	{r7, lr}
 8001510:	0043      	lsls	r3, r0, #1
 8001512:	030f      	lsls	r7, r1, #12
 8001514:	46a4      	mov	ip, r4
 8001516:	46b0      	mov	r8, r6
 8001518:	0b3f      	lsrs	r7, r7, #12
 800151a:	0d52      	lsrs	r2, r2, #21
 800151c:	0fc9      	lsrs	r1, r1, #31
 800151e:	0d5b      	lsrs	r3, r3, #21
 8001520:	0fc0      	lsrs	r0, r0, #31
 8001522:	42aa      	cmp	r2, r5
 8001524:	d00d      	beq.n	8001542 <__ledf2+0x4a>
 8001526:	42ab      	cmp	r3, r5
 8001528:	d010      	beq.n	800154c <__ledf2+0x54>
 800152a:	2a00      	cmp	r2, #0
 800152c:	d127      	bne.n	800157e <__ledf2+0x86>
 800152e:	433c      	orrs	r4, r7
 8001530:	2b00      	cmp	r3, #0
 8001532:	d111      	bne.n	8001558 <__ledf2+0x60>
 8001534:	464d      	mov	r5, r9
 8001536:	432e      	orrs	r6, r5
 8001538:	d10e      	bne.n	8001558 <__ledf2+0x60>
 800153a:	2000      	movs	r0, #0
 800153c:	2c00      	cmp	r4, #0
 800153e:	d015      	beq.n	800156c <__ledf2+0x74>
 8001540:	e00e      	b.n	8001560 <__ledf2+0x68>
 8001542:	003d      	movs	r5, r7
 8001544:	4325      	orrs	r5, r4
 8001546:	d110      	bne.n	800156a <__ledf2+0x72>
 8001548:	4293      	cmp	r3, r2
 800154a:	d118      	bne.n	800157e <__ledf2+0x86>
 800154c:	464d      	mov	r5, r9
 800154e:	432e      	orrs	r6, r5
 8001550:	d10b      	bne.n	800156a <__ledf2+0x72>
 8001552:	2a00      	cmp	r2, #0
 8001554:	d102      	bne.n	800155c <__ledf2+0x64>
 8001556:	433c      	orrs	r4, r7
 8001558:	2c00      	cmp	r4, #0
 800155a:	d00b      	beq.n	8001574 <__ledf2+0x7c>
 800155c:	4281      	cmp	r1, r0
 800155e:	d014      	beq.n	800158a <__ledf2+0x92>
 8001560:	2002      	movs	r0, #2
 8001562:	3901      	subs	r1, #1
 8001564:	4008      	ands	r0, r1
 8001566:	3801      	subs	r0, #1
 8001568:	e000      	b.n	800156c <__ledf2+0x74>
 800156a:	2002      	movs	r0, #2
 800156c:	bcc0      	pop	{r6, r7}
 800156e:	46b9      	mov	r9, r7
 8001570:	46b0      	mov	r8, r6
 8001572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001574:	2800      	cmp	r0, #0
 8001576:	d1f9      	bne.n	800156c <__ledf2+0x74>
 8001578:	2001      	movs	r0, #1
 800157a:	4240      	negs	r0, r0
 800157c:	e7f6      	b.n	800156c <__ledf2+0x74>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ec      	bne.n	800155c <__ledf2+0x64>
 8001582:	464c      	mov	r4, r9
 8001584:	4326      	orrs	r6, r4
 8001586:	d1e9      	bne.n	800155c <__ledf2+0x64>
 8001588:	e7ea      	b.n	8001560 <__ledf2+0x68>
 800158a:	429a      	cmp	r2, r3
 800158c:	dd04      	ble.n	8001598 <__ledf2+0xa0>
 800158e:	4243      	negs	r3, r0
 8001590:	4158      	adcs	r0, r3
 8001592:	0040      	lsls	r0, r0, #1
 8001594:	3801      	subs	r0, #1
 8001596:	e7e9      	b.n	800156c <__ledf2+0x74>
 8001598:	429a      	cmp	r2, r3
 800159a:	dbeb      	blt.n	8001574 <__ledf2+0x7c>
 800159c:	454f      	cmp	r7, r9
 800159e:	d8df      	bhi.n	8001560 <__ledf2+0x68>
 80015a0:	d006      	beq.n	80015b0 <__ledf2+0xb8>
 80015a2:	2000      	movs	r0, #0
 80015a4:	454f      	cmp	r7, r9
 80015a6:	d2e1      	bcs.n	800156c <__ledf2+0x74>
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d0e5      	beq.n	8001578 <__ledf2+0x80>
 80015ac:	0008      	movs	r0, r1
 80015ae:	e7dd      	b.n	800156c <__ledf2+0x74>
 80015b0:	45c4      	cmp	ip, r8
 80015b2:	d8d5      	bhi.n	8001560 <__ledf2+0x68>
 80015b4:	2000      	movs	r0, #0
 80015b6:	45c4      	cmp	ip, r8
 80015b8:	d2d8      	bcs.n	800156c <__ledf2+0x74>
 80015ba:	e7f5      	b.n	80015a8 <__ledf2+0xb0>
 80015bc:	000007ff 	.word	0x000007ff

080015c0 <__aeabi_dmul>:
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	4645      	mov	r5, r8
 80015c4:	46de      	mov	lr, fp
 80015c6:	4657      	mov	r7, sl
 80015c8:	464e      	mov	r6, r9
 80015ca:	b5e0      	push	{r5, r6, r7, lr}
 80015cc:	001f      	movs	r7, r3
 80015ce:	030b      	lsls	r3, r1, #12
 80015d0:	0b1b      	lsrs	r3, r3, #12
 80015d2:	469b      	mov	fp, r3
 80015d4:	004d      	lsls	r5, r1, #1
 80015d6:	0fcb      	lsrs	r3, r1, #31
 80015d8:	0004      	movs	r4, r0
 80015da:	4691      	mov	r9, r2
 80015dc:	4698      	mov	r8, r3
 80015de:	b087      	sub	sp, #28
 80015e0:	0d6d      	lsrs	r5, r5, #21
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0x26>
 80015e4:	e1cd      	b.n	8001982 <__aeabi_dmul+0x3c2>
 80015e6:	4bce      	ldr	r3, [pc, #824]	; (8001920 <__aeabi_dmul+0x360>)
 80015e8:	429d      	cmp	r5, r3
 80015ea:	d100      	bne.n	80015ee <__aeabi_dmul+0x2e>
 80015ec:	e1e9      	b.n	80019c2 <__aeabi_dmul+0x402>
 80015ee:	465a      	mov	r2, fp
 80015f0:	0f43      	lsrs	r3, r0, #29
 80015f2:	00d2      	lsls	r2, r2, #3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	0412      	lsls	r2, r2, #16
 80015fa:	431a      	orrs	r2, r3
 80015fc:	00c3      	lsls	r3, r0, #3
 80015fe:	469a      	mov	sl, r3
 8001600:	4bc8      	ldr	r3, [pc, #800]	; (8001924 <__aeabi_dmul+0x364>)
 8001602:	4693      	mov	fp, r2
 8001604:	469c      	mov	ip, r3
 8001606:	2300      	movs	r3, #0
 8001608:	2600      	movs	r6, #0
 800160a:	4465      	add	r5, ip
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	033c      	lsls	r4, r7, #12
 8001610:	007b      	lsls	r3, r7, #1
 8001612:	4648      	mov	r0, r9
 8001614:	0b24      	lsrs	r4, r4, #12
 8001616:	0d5b      	lsrs	r3, r3, #21
 8001618:	0fff      	lsrs	r7, r7, #31
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_dmul+0x60>
 800161e:	e189      	b.n	8001934 <__aeabi_dmul+0x374>
 8001620:	4abf      	ldr	r2, [pc, #764]	; (8001920 <__aeabi_dmul+0x360>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <__aeabi_dmul+0x9a>
 8001626:	0f42      	lsrs	r2, r0, #29
 8001628:	00e4      	lsls	r4, r4, #3
 800162a:	4322      	orrs	r2, r4
 800162c:	2480      	movs	r4, #128	; 0x80
 800162e:	0424      	lsls	r4, r4, #16
 8001630:	4314      	orrs	r4, r2
 8001632:	4abc      	ldr	r2, [pc, #752]	; (8001924 <__aeabi_dmul+0x364>)
 8001634:	2100      	movs	r1, #0
 8001636:	4694      	mov	ip, r2
 8001638:	4642      	mov	r2, r8
 800163a:	4463      	add	r3, ip
 800163c:	195b      	adds	r3, r3, r5
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	407a      	eors	r2, r7
 8001644:	3301      	adds	r3, #1
 8001646:	00c0      	lsls	r0, r0, #3
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2e0a      	cmp	r6, #10
 800164e:	dd1c      	ble.n	800168a <__aeabi_dmul+0xca>
 8001650:	003a      	movs	r2, r7
 8001652:	2e0b      	cmp	r6, #11
 8001654:	d05e      	beq.n	8001714 <__aeabi_dmul+0x154>
 8001656:	4647      	mov	r7, r8
 8001658:	e056      	b.n	8001708 <__aeabi_dmul+0x148>
 800165a:	4649      	mov	r1, r9
 800165c:	4bb0      	ldr	r3, [pc, #704]	; (8001920 <__aeabi_dmul+0x360>)
 800165e:	4321      	orrs	r1, r4
 8001660:	18eb      	adds	r3, r5, r3
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	2900      	cmp	r1, #0
 8001666:	d12a      	bne.n	80016be <__aeabi_dmul+0xfe>
 8001668:	2080      	movs	r0, #128	; 0x80
 800166a:	2202      	movs	r2, #2
 800166c:	0100      	lsls	r0, r0, #4
 800166e:	002b      	movs	r3, r5
 8001670:	4684      	mov	ip, r0
 8001672:	4316      	orrs	r6, r2
 8001674:	4642      	mov	r2, r8
 8001676:	4463      	add	r3, ip
 8001678:	407a      	eors	r2, r7
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	2e0a      	cmp	r6, #10
 8001680:	dd00      	ble.n	8001684 <__aeabi_dmul+0xc4>
 8001682:	e231      	b.n	8001ae8 <__aeabi_dmul+0x528>
 8001684:	2000      	movs	r0, #0
 8001686:	2400      	movs	r4, #0
 8001688:	2102      	movs	r1, #2
 800168a:	2e02      	cmp	r6, #2
 800168c:	dc26      	bgt.n	80016dc <__aeabi_dmul+0x11c>
 800168e:	3e01      	subs	r6, #1
 8001690:	2e01      	cmp	r6, #1
 8001692:	d852      	bhi.n	800173a <__aeabi_dmul+0x17a>
 8001694:	2902      	cmp	r1, #2
 8001696:	d04c      	beq.n	8001732 <__aeabi_dmul+0x172>
 8001698:	2901      	cmp	r1, #1
 800169a:	d000      	beq.n	800169e <__aeabi_dmul+0xde>
 800169c:	e118      	b.n	80018d0 <__aeabi_dmul+0x310>
 800169e:	2300      	movs	r3, #0
 80016a0:	2400      	movs	r4, #0
 80016a2:	2500      	movs	r5, #0
 80016a4:	051b      	lsls	r3, r3, #20
 80016a6:	4323      	orrs	r3, r4
 80016a8:	07d2      	lsls	r2, r2, #31
 80016aa:	4313      	orrs	r3, r2
 80016ac:	0028      	movs	r0, r5
 80016ae:	0019      	movs	r1, r3
 80016b0:	b007      	add	sp, #28
 80016b2:	bcf0      	pop	{r4, r5, r6, r7}
 80016b4:	46bb      	mov	fp, r7
 80016b6:	46b2      	mov	sl, r6
 80016b8:	46a9      	mov	r9, r5
 80016ba:	46a0      	mov	r8, r4
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	2203      	movs	r2, #3
 80016c2:	0109      	lsls	r1, r1, #4
 80016c4:	002b      	movs	r3, r5
 80016c6:	468c      	mov	ip, r1
 80016c8:	4316      	orrs	r6, r2
 80016ca:	4642      	mov	r2, r8
 80016cc:	4463      	add	r3, ip
 80016ce:	407a      	eors	r2, r7
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	2e0a      	cmp	r6, #10
 80016d6:	dd00      	ble.n	80016da <__aeabi_dmul+0x11a>
 80016d8:	e228      	b.n	8001b2c <__aeabi_dmul+0x56c>
 80016da:	2103      	movs	r1, #3
 80016dc:	2501      	movs	r5, #1
 80016de:	40b5      	lsls	r5, r6
 80016e0:	46ac      	mov	ip, r5
 80016e2:	26a6      	movs	r6, #166	; 0xa6
 80016e4:	4663      	mov	r3, ip
 80016e6:	00f6      	lsls	r6, r6, #3
 80016e8:	4035      	ands	r5, r6
 80016ea:	4233      	tst	r3, r6
 80016ec:	d10b      	bne.n	8001706 <__aeabi_dmul+0x146>
 80016ee:	2690      	movs	r6, #144	; 0x90
 80016f0:	00b6      	lsls	r6, r6, #2
 80016f2:	4233      	tst	r3, r6
 80016f4:	d118      	bne.n	8001728 <__aeabi_dmul+0x168>
 80016f6:	3eb9      	subs	r6, #185	; 0xb9
 80016f8:	3eff      	subs	r6, #255	; 0xff
 80016fa:	421e      	tst	r6, r3
 80016fc:	d01d      	beq.n	800173a <__aeabi_dmul+0x17a>
 80016fe:	46a3      	mov	fp, r4
 8001700:	4682      	mov	sl, r0
 8001702:	9100      	str	r1, [sp, #0]
 8001704:	e000      	b.n	8001708 <__aeabi_dmul+0x148>
 8001706:	0017      	movs	r7, r2
 8001708:	9900      	ldr	r1, [sp, #0]
 800170a:	003a      	movs	r2, r7
 800170c:	2902      	cmp	r1, #2
 800170e:	d010      	beq.n	8001732 <__aeabi_dmul+0x172>
 8001710:	465c      	mov	r4, fp
 8001712:	4650      	mov	r0, sl
 8001714:	2903      	cmp	r1, #3
 8001716:	d1bf      	bne.n	8001698 <__aeabi_dmul+0xd8>
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	031b      	lsls	r3, r3, #12
 800171c:	431c      	orrs	r4, r3
 800171e:	0324      	lsls	r4, r4, #12
 8001720:	0005      	movs	r5, r0
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <__aeabi_dmul+0x360>)
 8001724:	0b24      	lsrs	r4, r4, #12
 8001726:	e7bd      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001728:	2480      	movs	r4, #128	; 0x80
 800172a:	2200      	movs	r2, #0
 800172c:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <__aeabi_dmul+0x360>)
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	e7b8      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <__aeabi_dmul+0x360>)
 8001738:	e7b4      	b.n	80016a4 <__aeabi_dmul+0xe4>
 800173a:	4653      	mov	r3, sl
 800173c:	041e      	lsls	r6, r3, #16
 800173e:	0c36      	lsrs	r6, r6, #16
 8001740:	0c1f      	lsrs	r7, r3, #16
 8001742:	0033      	movs	r3, r6
 8001744:	0c01      	lsrs	r1, r0, #16
 8001746:	0400      	lsls	r0, r0, #16
 8001748:	0c00      	lsrs	r0, r0, #16
 800174a:	4343      	muls	r3, r0
 800174c:	4698      	mov	r8, r3
 800174e:	0003      	movs	r3, r0
 8001750:	437b      	muls	r3, r7
 8001752:	4699      	mov	r9, r3
 8001754:	0033      	movs	r3, r6
 8001756:	434b      	muls	r3, r1
 8001758:	469c      	mov	ip, r3
 800175a:	4643      	mov	r3, r8
 800175c:	000d      	movs	r5, r1
 800175e:	0c1b      	lsrs	r3, r3, #16
 8001760:	469a      	mov	sl, r3
 8001762:	437d      	muls	r5, r7
 8001764:	44cc      	add	ip, r9
 8001766:	44d4      	add	ip, sl
 8001768:	9500      	str	r5, [sp, #0]
 800176a:	45e1      	cmp	r9, ip
 800176c:	d904      	bls.n	8001778 <__aeabi_dmul+0x1b8>
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	025b      	lsls	r3, r3, #9
 8001772:	4699      	mov	r9, r3
 8001774:	444d      	add	r5, r9
 8001776:	9500      	str	r5, [sp, #0]
 8001778:	4663      	mov	r3, ip
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	001d      	movs	r5, r3
 800177e:	4663      	mov	r3, ip
 8001780:	041b      	lsls	r3, r3, #16
 8001782:	469c      	mov	ip, r3
 8001784:	4643      	mov	r3, r8
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	4698      	mov	r8, r3
 800178c:	4663      	mov	r3, ip
 800178e:	4443      	add	r3, r8
 8001790:	9303      	str	r3, [sp, #12]
 8001792:	0c23      	lsrs	r3, r4, #16
 8001794:	4698      	mov	r8, r3
 8001796:	0033      	movs	r3, r6
 8001798:	0424      	lsls	r4, r4, #16
 800179a:	0c24      	lsrs	r4, r4, #16
 800179c:	4363      	muls	r3, r4
 800179e:	469c      	mov	ip, r3
 80017a0:	0023      	movs	r3, r4
 80017a2:	437b      	muls	r3, r7
 80017a4:	4699      	mov	r9, r3
 80017a6:	4643      	mov	r3, r8
 80017a8:	435e      	muls	r6, r3
 80017aa:	435f      	muls	r7, r3
 80017ac:	444e      	add	r6, r9
 80017ae:	4663      	mov	r3, ip
 80017b0:	46b2      	mov	sl, r6
 80017b2:	0c1e      	lsrs	r6, r3, #16
 80017b4:	4456      	add	r6, sl
 80017b6:	45b1      	cmp	r9, r6
 80017b8:	d903      	bls.n	80017c2 <__aeabi_dmul+0x202>
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	025b      	lsls	r3, r3, #9
 80017be:	4699      	mov	r9, r3
 80017c0:	444f      	add	r7, r9
 80017c2:	0c33      	lsrs	r3, r6, #16
 80017c4:	4699      	mov	r9, r3
 80017c6:	003b      	movs	r3, r7
 80017c8:	444b      	add	r3, r9
 80017ca:	9305      	str	r3, [sp, #20]
 80017cc:	4663      	mov	r3, ip
 80017ce:	46ac      	mov	ip, r5
 80017d0:	041f      	lsls	r7, r3, #16
 80017d2:	0c3f      	lsrs	r7, r7, #16
 80017d4:	0436      	lsls	r6, r6, #16
 80017d6:	19f6      	adds	r6, r6, r7
 80017d8:	44b4      	add	ip, r6
 80017da:	4663      	mov	r3, ip
 80017dc:	9304      	str	r3, [sp, #16]
 80017de:	465b      	mov	r3, fp
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	469c      	mov	ip, r3
 80017e4:	465b      	mov	r3, fp
 80017e6:	041f      	lsls	r7, r3, #16
 80017e8:	0c3f      	lsrs	r7, r7, #16
 80017ea:	003b      	movs	r3, r7
 80017ec:	4343      	muls	r3, r0
 80017ee:	4699      	mov	r9, r3
 80017f0:	4663      	mov	r3, ip
 80017f2:	4343      	muls	r3, r0
 80017f4:	469a      	mov	sl, r3
 80017f6:	464b      	mov	r3, r9
 80017f8:	4660      	mov	r0, ip
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	469b      	mov	fp, r3
 80017fe:	4348      	muls	r0, r1
 8001800:	4379      	muls	r1, r7
 8001802:	4451      	add	r1, sl
 8001804:	4459      	add	r1, fp
 8001806:	458a      	cmp	sl, r1
 8001808:	d903      	bls.n	8001812 <__aeabi_dmul+0x252>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	469a      	mov	sl, r3
 8001810:	4450      	add	r0, sl
 8001812:	0c0b      	lsrs	r3, r1, #16
 8001814:	469a      	mov	sl, r3
 8001816:	464b      	mov	r3, r9
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	0c1b      	lsrs	r3, r3, #16
 800181c:	4699      	mov	r9, r3
 800181e:	003b      	movs	r3, r7
 8001820:	4363      	muls	r3, r4
 8001822:	0409      	lsls	r1, r1, #16
 8001824:	4645      	mov	r5, r8
 8001826:	4449      	add	r1, r9
 8001828:	4699      	mov	r9, r3
 800182a:	4663      	mov	r3, ip
 800182c:	435c      	muls	r4, r3
 800182e:	436b      	muls	r3, r5
 8001830:	469c      	mov	ip, r3
 8001832:	464b      	mov	r3, r9
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	436f      	muls	r7, r5
 800183a:	193f      	adds	r7, r7, r4
 800183c:	4447      	add	r7, r8
 800183e:	4450      	add	r0, sl
 8001840:	42bc      	cmp	r4, r7
 8001842:	d903      	bls.n	800184c <__aeabi_dmul+0x28c>
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	025b      	lsls	r3, r3, #9
 8001848:	4698      	mov	r8, r3
 800184a:	44c4      	add	ip, r8
 800184c:	9b04      	ldr	r3, [sp, #16]
 800184e:	9d00      	ldr	r5, [sp, #0]
 8001850:	4698      	mov	r8, r3
 8001852:	4445      	add	r5, r8
 8001854:	42b5      	cmp	r5, r6
 8001856:	41b6      	sbcs	r6, r6
 8001858:	4273      	negs	r3, r6
 800185a:	4698      	mov	r8, r3
 800185c:	464b      	mov	r3, r9
 800185e:	041e      	lsls	r6, r3, #16
 8001860:	9b05      	ldr	r3, [sp, #20]
 8001862:	043c      	lsls	r4, r7, #16
 8001864:	4699      	mov	r9, r3
 8001866:	0c36      	lsrs	r6, r6, #16
 8001868:	19a4      	adds	r4, r4, r6
 800186a:	444c      	add	r4, r9
 800186c:	46a1      	mov	r9, r4
 800186e:	4683      	mov	fp, r0
 8001870:	186e      	adds	r6, r5, r1
 8001872:	44c1      	add	r9, r8
 8001874:	428e      	cmp	r6, r1
 8001876:	4189      	sbcs	r1, r1
 8001878:	44cb      	add	fp, r9
 800187a:	465d      	mov	r5, fp
 800187c:	4249      	negs	r1, r1
 800187e:	186d      	adds	r5, r5, r1
 8001880:	429c      	cmp	r4, r3
 8001882:	41a4      	sbcs	r4, r4
 8001884:	45c1      	cmp	r9, r8
 8001886:	419b      	sbcs	r3, r3
 8001888:	4583      	cmp	fp, r0
 800188a:	4180      	sbcs	r0, r0
 800188c:	428d      	cmp	r5, r1
 800188e:	4189      	sbcs	r1, r1
 8001890:	425b      	negs	r3, r3
 8001892:	4264      	negs	r4, r4
 8001894:	431c      	orrs	r4, r3
 8001896:	4240      	negs	r0, r0
 8001898:	9b03      	ldr	r3, [sp, #12]
 800189a:	4249      	negs	r1, r1
 800189c:	4301      	orrs	r1, r0
 800189e:	0270      	lsls	r0, r6, #9
 80018a0:	0c3f      	lsrs	r7, r7, #16
 80018a2:	4318      	orrs	r0, r3
 80018a4:	19e4      	adds	r4, r4, r7
 80018a6:	1e47      	subs	r7, r0, #1
 80018a8:	41b8      	sbcs	r0, r7
 80018aa:	1864      	adds	r4, r4, r1
 80018ac:	4464      	add	r4, ip
 80018ae:	0df6      	lsrs	r6, r6, #23
 80018b0:	0261      	lsls	r1, r4, #9
 80018b2:	4330      	orrs	r0, r6
 80018b4:	0dec      	lsrs	r4, r5, #23
 80018b6:	026e      	lsls	r6, r5, #9
 80018b8:	430c      	orrs	r4, r1
 80018ba:	4330      	orrs	r0, r6
 80018bc:	01c9      	lsls	r1, r1, #7
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dmul+0x302>
 80018c0:	e0f1      	b.n	8001aa6 <__aeabi_dmul+0x4e6>
 80018c2:	2101      	movs	r1, #1
 80018c4:	0843      	lsrs	r3, r0, #1
 80018c6:	4001      	ands	r1, r0
 80018c8:	430b      	orrs	r3, r1
 80018ca:	07e0      	lsls	r0, r4, #31
 80018cc:	4318      	orrs	r0, r3
 80018ce:	0864      	lsrs	r4, r4, #1
 80018d0:	4915      	ldr	r1, [pc, #84]	; (8001928 <__aeabi_dmul+0x368>)
 80018d2:	9b02      	ldr	r3, [sp, #8]
 80018d4:	468c      	mov	ip, r1
 80018d6:	4463      	add	r3, ip
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dc00      	bgt.n	80018de <__aeabi_dmul+0x31e>
 80018dc:	e097      	b.n	8001a0e <__aeabi_dmul+0x44e>
 80018de:	0741      	lsls	r1, r0, #29
 80018e0:	d009      	beq.n	80018f6 <__aeabi_dmul+0x336>
 80018e2:	210f      	movs	r1, #15
 80018e4:	4001      	ands	r1, r0
 80018e6:	2904      	cmp	r1, #4
 80018e8:	d005      	beq.n	80018f6 <__aeabi_dmul+0x336>
 80018ea:	1d01      	adds	r1, r0, #4
 80018ec:	4281      	cmp	r1, r0
 80018ee:	4180      	sbcs	r0, r0
 80018f0:	4240      	negs	r0, r0
 80018f2:	1824      	adds	r4, r4, r0
 80018f4:	0008      	movs	r0, r1
 80018f6:	01e1      	lsls	r1, r4, #7
 80018f8:	d506      	bpl.n	8001908 <__aeabi_dmul+0x348>
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	00c9      	lsls	r1, r1, #3
 80018fe:	468c      	mov	ip, r1
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <__aeabi_dmul+0x36c>)
 8001902:	401c      	ands	r4, r3
 8001904:	9b02      	ldr	r3, [sp, #8]
 8001906:	4463      	add	r3, ip
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <__aeabi_dmul+0x370>)
 800190a:	428b      	cmp	r3, r1
 800190c:	dd00      	ble.n	8001910 <__aeabi_dmul+0x350>
 800190e:	e710      	b.n	8001732 <__aeabi_dmul+0x172>
 8001910:	0761      	lsls	r1, r4, #29
 8001912:	08c5      	lsrs	r5, r0, #3
 8001914:	0264      	lsls	r4, r4, #9
 8001916:	055b      	lsls	r3, r3, #21
 8001918:	430d      	orrs	r5, r1
 800191a:	0b24      	lsrs	r4, r4, #12
 800191c:	0d5b      	lsrs	r3, r3, #21
 800191e:	e6c1      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001920:	000007ff 	.word	0x000007ff
 8001924:	fffffc01 	.word	0xfffffc01
 8001928:	000003ff 	.word	0x000003ff
 800192c:	feffffff 	.word	0xfeffffff
 8001930:	000007fe 	.word	0x000007fe
 8001934:	464b      	mov	r3, r9
 8001936:	4323      	orrs	r3, r4
 8001938:	d059      	beq.n	80019ee <__aeabi_dmul+0x42e>
 800193a:	2c00      	cmp	r4, #0
 800193c:	d100      	bne.n	8001940 <__aeabi_dmul+0x380>
 800193e:	e0a3      	b.n	8001a88 <__aeabi_dmul+0x4c8>
 8001940:	0020      	movs	r0, r4
 8001942:	f000 fd7b 	bl	800243c <__clzsi2>
 8001946:	0001      	movs	r1, r0
 8001948:	0003      	movs	r3, r0
 800194a:	390b      	subs	r1, #11
 800194c:	221d      	movs	r2, #29
 800194e:	1a52      	subs	r2, r2, r1
 8001950:	4649      	mov	r1, r9
 8001952:	0018      	movs	r0, r3
 8001954:	40d1      	lsrs	r1, r2
 8001956:	464a      	mov	r2, r9
 8001958:	3808      	subs	r0, #8
 800195a:	4082      	lsls	r2, r0
 800195c:	4084      	lsls	r4, r0
 800195e:	0010      	movs	r0, r2
 8001960:	430c      	orrs	r4, r1
 8001962:	4a74      	ldr	r2, [pc, #464]	; (8001b34 <__aeabi_dmul+0x574>)
 8001964:	1aeb      	subs	r3, r5, r3
 8001966:	4694      	mov	ip, r2
 8001968:	4642      	mov	r2, r8
 800196a:	4463      	add	r3, ip
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	9b01      	ldr	r3, [sp, #4]
 8001970:	407a      	eors	r2, r7
 8001972:	3301      	adds	r3, #1
 8001974:	2100      	movs	r1, #0
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	2e0a      	cmp	r6, #10
 800197c:	dd00      	ble.n	8001980 <__aeabi_dmul+0x3c0>
 800197e:	e667      	b.n	8001650 <__aeabi_dmul+0x90>
 8001980:	e683      	b.n	800168a <__aeabi_dmul+0xca>
 8001982:	465b      	mov	r3, fp
 8001984:	4303      	orrs	r3, r0
 8001986:	469a      	mov	sl, r3
 8001988:	d02a      	beq.n	80019e0 <__aeabi_dmul+0x420>
 800198a:	465b      	mov	r3, fp
 800198c:	2b00      	cmp	r3, #0
 800198e:	d06d      	beq.n	8001a6c <__aeabi_dmul+0x4ac>
 8001990:	4658      	mov	r0, fp
 8001992:	f000 fd53 	bl	800243c <__clzsi2>
 8001996:	0001      	movs	r1, r0
 8001998:	0003      	movs	r3, r0
 800199a:	390b      	subs	r1, #11
 800199c:	221d      	movs	r2, #29
 800199e:	1a52      	subs	r2, r2, r1
 80019a0:	0021      	movs	r1, r4
 80019a2:	0018      	movs	r0, r3
 80019a4:	465d      	mov	r5, fp
 80019a6:	40d1      	lsrs	r1, r2
 80019a8:	3808      	subs	r0, #8
 80019aa:	4085      	lsls	r5, r0
 80019ac:	000a      	movs	r2, r1
 80019ae:	4084      	lsls	r4, r0
 80019b0:	432a      	orrs	r2, r5
 80019b2:	4693      	mov	fp, r2
 80019b4:	46a2      	mov	sl, r4
 80019b6:	4d5f      	ldr	r5, [pc, #380]	; (8001b34 <__aeabi_dmul+0x574>)
 80019b8:	2600      	movs	r6, #0
 80019ba:	1aed      	subs	r5, r5, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	e625      	b.n	800160e <__aeabi_dmul+0x4e>
 80019c2:	465b      	mov	r3, fp
 80019c4:	4303      	orrs	r3, r0
 80019c6:	469a      	mov	sl, r3
 80019c8:	d105      	bne.n	80019d6 <__aeabi_dmul+0x416>
 80019ca:	2300      	movs	r3, #0
 80019cc:	469b      	mov	fp, r3
 80019ce:	3302      	adds	r3, #2
 80019d0:	2608      	movs	r6, #8
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	e61b      	b.n	800160e <__aeabi_dmul+0x4e>
 80019d6:	2303      	movs	r3, #3
 80019d8:	4682      	mov	sl, r0
 80019da:	260c      	movs	r6, #12
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	e616      	b.n	800160e <__aeabi_dmul+0x4e>
 80019e0:	2300      	movs	r3, #0
 80019e2:	469b      	mov	fp, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	2604      	movs	r6, #4
 80019e8:	2500      	movs	r5, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	e60f      	b.n	800160e <__aeabi_dmul+0x4e>
 80019ee:	4642      	mov	r2, r8
 80019f0:	3301      	adds	r3, #1
 80019f2:	9501      	str	r5, [sp, #4]
 80019f4:	431e      	orrs	r6, r3
 80019f6:	9b01      	ldr	r3, [sp, #4]
 80019f8:	407a      	eors	r2, r7
 80019fa:	3301      	adds	r3, #1
 80019fc:	2400      	movs	r4, #0
 80019fe:	2000      	movs	r0, #0
 8001a00:	2101      	movs	r1, #1
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2e0a      	cmp	r6, #10
 8001a08:	dd00      	ble.n	8001a0c <__aeabi_dmul+0x44c>
 8001a0a:	e621      	b.n	8001650 <__aeabi_dmul+0x90>
 8001a0c:	e63d      	b.n	800168a <__aeabi_dmul+0xca>
 8001a0e:	2101      	movs	r1, #1
 8001a10:	1ac9      	subs	r1, r1, r3
 8001a12:	2938      	cmp	r1, #56	; 0x38
 8001a14:	dd00      	ble.n	8001a18 <__aeabi_dmul+0x458>
 8001a16:	e642      	b.n	800169e <__aeabi_dmul+0xde>
 8001a18:	291f      	cmp	r1, #31
 8001a1a:	dd47      	ble.n	8001aac <__aeabi_dmul+0x4ec>
 8001a1c:	261f      	movs	r6, #31
 8001a1e:	0025      	movs	r5, r4
 8001a20:	4276      	negs	r6, r6
 8001a22:	1af3      	subs	r3, r6, r3
 8001a24:	40dd      	lsrs	r5, r3
 8001a26:	002b      	movs	r3, r5
 8001a28:	2920      	cmp	r1, #32
 8001a2a:	d005      	beq.n	8001a38 <__aeabi_dmul+0x478>
 8001a2c:	4942      	ldr	r1, [pc, #264]	; (8001b38 <__aeabi_dmul+0x578>)
 8001a2e:	9d02      	ldr	r5, [sp, #8]
 8001a30:	468c      	mov	ip, r1
 8001a32:	4465      	add	r5, ip
 8001a34:	40ac      	lsls	r4, r5
 8001a36:	4320      	orrs	r0, r4
 8001a38:	1e41      	subs	r1, r0, #1
 8001a3a:	4188      	sbcs	r0, r1
 8001a3c:	4318      	orrs	r0, r3
 8001a3e:	2307      	movs	r3, #7
 8001a40:	001d      	movs	r5, r3
 8001a42:	2400      	movs	r4, #0
 8001a44:	4005      	ands	r5, r0
 8001a46:	4203      	tst	r3, r0
 8001a48:	d04a      	beq.n	8001ae0 <__aeabi_dmul+0x520>
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	4003      	ands	r3, r0
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d042      	beq.n	8001ada <__aeabi_dmul+0x51a>
 8001a54:	1d03      	adds	r3, r0, #4
 8001a56:	4283      	cmp	r3, r0
 8001a58:	4180      	sbcs	r0, r0
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1824      	adds	r4, r4, r0
 8001a5e:	0018      	movs	r0, r3
 8001a60:	0223      	lsls	r3, r4, #8
 8001a62:	d53a      	bpl.n	8001ada <__aeabi_dmul+0x51a>
 8001a64:	2301      	movs	r3, #1
 8001a66:	2400      	movs	r4, #0
 8001a68:	2500      	movs	r5, #0
 8001a6a:	e61b      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001a6c:	f000 fce6 	bl	800243c <__clzsi2>
 8001a70:	0001      	movs	r1, r0
 8001a72:	0003      	movs	r3, r0
 8001a74:	3115      	adds	r1, #21
 8001a76:	3320      	adds	r3, #32
 8001a78:	291c      	cmp	r1, #28
 8001a7a:	dd8f      	ble.n	800199c <__aeabi_dmul+0x3dc>
 8001a7c:	3808      	subs	r0, #8
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4084      	lsls	r4, r0
 8001a82:	4692      	mov	sl, r2
 8001a84:	46a3      	mov	fp, r4
 8001a86:	e796      	b.n	80019b6 <__aeabi_dmul+0x3f6>
 8001a88:	f000 fcd8 	bl	800243c <__clzsi2>
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	0003      	movs	r3, r0
 8001a90:	3115      	adds	r1, #21
 8001a92:	3320      	adds	r3, #32
 8001a94:	291c      	cmp	r1, #28
 8001a96:	dc00      	bgt.n	8001a9a <__aeabi_dmul+0x4da>
 8001a98:	e758      	b.n	800194c <__aeabi_dmul+0x38c>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	464c      	mov	r4, r9
 8001a9e:	3a08      	subs	r2, #8
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	4094      	lsls	r4, r2
 8001aa4:	e75d      	b.n	8001962 <__aeabi_dmul+0x3a2>
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	e711      	b.n	80018d0 <__aeabi_dmul+0x310>
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <__aeabi_dmul+0x57c>)
 8001aae:	0026      	movs	r6, r4
 8001ab0:	469c      	mov	ip, r3
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	9d02      	ldr	r5, [sp, #8]
 8001ab6:	40cb      	lsrs	r3, r1
 8001ab8:	4465      	add	r5, ip
 8001aba:	40ae      	lsls	r6, r5
 8001abc:	431e      	orrs	r6, r3
 8001abe:	0003      	movs	r3, r0
 8001ac0:	40ab      	lsls	r3, r5
 8001ac2:	1e58      	subs	r0, r3, #1
 8001ac4:	4183      	sbcs	r3, r0
 8001ac6:	0030      	movs	r0, r6
 8001ac8:	4318      	orrs	r0, r3
 8001aca:	40cc      	lsrs	r4, r1
 8001acc:	0743      	lsls	r3, r0, #29
 8001ace:	d0c7      	beq.n	8001a60 <__aeabi_dmul+0x4a0>
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	4003      	ands	r3, r0
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d1bd      	bne.n	8001a54 <__aeabi_dmul+0x494>
 8001ad8:	e7c2      	b.n	8001a60 <__aeabi_dmul+0x4a0>
 8001ada:	0765      	lsls	r5, r4, #29
 8001adc:	0264      	lsls	r4, r4, #9
 8001ade:	0b24      	lsrs	r4, r4, #12
 8001ae0:	08c0      	lsrs	r0, r0, #3
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	4305      	orrs	r5, r0
 8001ae6:	e5dd      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001ae8:	2500      	movs	r5, #0
 8001aea:	2302      	movs	r3, #2
 8001aec:	2e0f      	cmp	r6, #15
 8001aee:	d10c      	bne.n	8001b0a <__aeabi_dmul+0x54a>
 8001af0:	2480      	movs	r4, #128	; 0x80
 8001af2:	465b      	mov	r3, fp
 8001af4:	0324      	lsls	r4, r4, #12
 8001af6:	4223      	tst	r3, r4
 8001af8:	d00e      	beq.n	8001b18 <__aeabi_dmul+0x558>
 8001afa:	4221      	tst	r1, r4
 8001afc:	d10c      	bne.n	8001b18 <__aeabi_dmul+0x558>
 8001afe:	430c      	orrs	r4, r1
 8001b00:	0324      	lsls	r4, r4, #12
 8001b02:	003a      	movs	r2, r7
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <__aeabi_dmul+0x580>)
 8001b06:	0b24      	lsrs	r4, r4, #12
 8001b08:	e5cc      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001b0a:	2e0b      	cmp	r6, #11
 8001b0c:	d000      	beq.n	8001b10 <__aeabi_dmul+0x550>
 8001b0e:	e5a2      	b.n	8001656 <__aeabi_dmul+0x96>
 8001b10:	468b      	mov	fp, r1
 8001b12:	46aa      	mov	sl, r5
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	e5f7      	b.n	8001708 <__aeabi_dmul+0x148>
 8001b18:	2480      	movs	r4, #128	; 0x80
 8001b1a:	465b      	mov	r3, fp
 8001b1c:	0324      	lsls	r4, r4, #12
 8001b1e:	431c      	orrs	r4, r3
 8001b20:	0324      	lsls	r4, r4, #12
 8001b22:	4642      	mov	r2, r8
 8001b24:	4655      	mov	r5, sl
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <__aeabi_dmul+0x580>)
 8001b28:	0b24      	lsrs	r4, r4, #12
 8001b2a:	e5bb      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001b2c:	464d      	mov	r5, r9
 8001b2e:	0021      	movs	r1, r4
 8001b30:	2303      	movs	r3, #3
 8001b32:	e7db      	b.n	8001aec <__aeabi_dmul+0x52c>
 8001b34:	fffffc0d 	.word	0xfffffc0d
 8001b38:	0000043e 	.word	0x0000043e
 8001b3c:	0000041e 	.word	0x0000041e
 8001b40:	000007ff 	.word	0x000007ff

08001b44 <__aeabi_dsub>:
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	4657      	mov	r7, sl
 8001b48:	464e      	mov	r6, r9
 8001b4a:	4645      	mov	r5, r8
 8001b4c:	46de      	mov	lr, fp
 8001b4e:	b5e0      	push	{r5, r6, r7, lr}
 8001b50:	000d      	movs	r5, r1
 8001b52:	0004      	movs	r4, r0
 8001b54:	0019      	movs	r1, r3
 8001b56:	0010      	movs	r0, r2
 8001b58:	032b      	lsls	r3, r5, #12
 8001b5a:	0a5b      	lsrs	r3, r3, #9
 8001b5c:	0f62      	lsrs	r2, r4, #29
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	00e3      	lsls	r3, r4, #3
 8001b62:	030c      	lsls	r4, r1, #12
 8001b64:	0a64      	lsrs	r4, r4, #9
 8001b66:	0f47      	lsrs	r7, r0, #29
 8001b68:	4327      	orrs	r7, r4
 8001b6a:	4cd0      	ldr	r4, [pc, #832]	; (8001eac <__aeabi_dsub+0x368>)
 8001b6c:	006e      	lsls	r6, r5, #1
 8001b6e:	4691      	mov	r9, r2
 8001b70:	b083      	sub	sp, #12
 8001b72:	004a      	lsls	r2, r1, #1
 8001b74:	00c0      	lsls	r0, r0, #3
 8001b76:	4698      	mov	r8, r3
 8001b78:	46a2      	mov	sl, r4
 8001b7a:	0d76      	lsrs	r6, r6, #21
 8001b7c:	0fed      	lsrs	r5, r5, #31
 8001b7e:	0d52      	lsrs	r2, r2, #21
 8001b80:	0fc9      	lsrs	r1, r1, #31
 8001b82:	9001      	str	r0, [sp, #4]
 8001b84:	42a2      	cmp	r2, r4
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x46>
 8001b88:	e0b9      	b.n	8001cfe <__aeabi_dsub+0x1ba>
 8001b8a:	2401      	movs	r4, #1
 8001b8c:	4061      	eors	r1, r4
 8001b8e:	468b      	mov	fp, r1
 8001b90:	428d      	cmp	r5, r1
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x52>
 8001b94:	e08d      	b.n	8001cb2 <__aeabi_dsub+0x16e>
 8001b96:	1ab4      	subs	r4, r6, r2
 8001b98:	46a4      	mov	ip, r4
 8001b9a:	2c00      	cmp	r4, #0
 8001b9c:	dc00      	bgt.n	8001ba0 <__aeabi_dsub+0x5c>
 8001b9e:	e0b7      	b.n	8001d10 <__aeabi_dsub+0x1cc>
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dsub+0x62>
 8001ba4:	e0cb      	b.n	8001d3e <__aeabi_dsub+0x1fa>
 8001ba6:	4ac1      	ldr	r2, [pc, #772]	; (8001eac <__aeabi_dsub+0x368>)
 8001ba8:	4296      	cmp	r6, r2
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x6a>
 8001bac:	e186      	b.n	8001ebc <__aeabi_dsub+0x378>
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	0412      	lsls	r2, r2, #16
 8001bb2:	4317      	orrs	r7, r2
 8001bb4:	4662      	mov	r2, ip
 8001bb6:	2a38      	cmp	r2, #56	; 0x38
 8001bb8:	dd00      	ble.n	8001bbc <__aeabi_dsub+0x78>
 8001bba:	e1a4      	b.n	8001f06 <__aeabi_dsub+0x3c2>
 8001bbc:	2a1f      	cmp	r2, #31
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dsub+0x7e>
 8001bc0:	e21d      	b.n	8001ffe <__aeabi_dsub+0x4ba>
 8001bc2:	4661      	mov	r1, ip
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	003c      	movs	r4, r7
 8001bc8:	1a52      	subs	r2, r2, r1
 8001bca:	0001      	movs	r1, r0
 8001bcc:	4090      	lsls	r0, r2
 8001bce:	4094      	lsls	r4, r2
 8001bd0:	1e42      	subs	r2, r0, #1
 8001bd2:	4190      	sbcs	r0, r2
 8001bd4:	4662      	mov	r2, ip
 8001bd6:	46a0      	mov	r8, r4
 8001bd8:	4664      	mov	r4, ip
 8001bda:	40d7      	lsrs	r7, r2
 8001bdc:	464a      	mov	r2, r9
 8001bde:	40e1      	lsrs	r1, r4
 8001be0:	4644      	mov	r4, r8
 8001be2:	1bd2      	subs	r2, r2, r7
 8001be4:	4691      	mov	r9, r2
 8001be6:	430c      	orrs	r4, r1
 8001be8:	4304      	orrs	r4, r0
 8001bea:	1b1c      	subs	r4, r3, r4
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	4192      	sbcs	r2, r2
 8001bf0:	464b      	mov	r3, r9
 8001bf2:	4252      	negs	r2, r2
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	469a      	mov	sl, r3
 8001bf8:	4653      	mov	r3, sl
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	d400      	bmi.n	8001c00 <__aeabi_dsub+0xbc>
 8001bfe:	e12b      	b.n	8001e58 <__aeabi_dsub+0x314>
 8001c00:	4653      	mov	r3, sl
 8001c02:	025a      	lsls	r2, r3, #9
 8001c04:	0a53      	lsrs	r3, r2, #9
 8001c06:	469a      	mov	sl, r3
 8001c08:	4653      	mov	r3, sl
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0xcc>
 8001c0e:	e166      	b.n	8001ede <__aeabi_dsub+0x39a>
 8001c10:	4650      	mov	r0, sl
 8001c12:	f000 fc13 	bl	800243c <__clzsi2>
 8001c16:	0003      	movs	r3, r0
 8001c18:	3b08      	subs	r3, #8
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	1ad2      	subs	r2, r2, r3
 8001c20:	4651      	mov	r1, sl
 8001c22:	40d0      	lsrs	r0, r2
 8001c24:	4099      	lsls	r1, r3
 8001c26:	0002      	movs	r2, r0
 8001c28:	409c      	lsls	r4, r3
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	429e      	cmp	r6, r3
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0xee>
 8001c30:	e164      	b.n	8001efc <__aeabi_dsub+0x3b8>
 8001c32:	1b9b      	subs	r3, r3, r6
 8001c34:	1c59      	adds	r1, r3, #1
 8001c36:	291f      	cmp	r1, #31
 8001c38:	dd00      	ble.n	8001c3c <__aeabi_dsub+0xf8>
 8001c3a:	e0fe      	b.n	8001e3a <__aeabi_dsub+0x2f6>
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	0010      	movs	r0, r2
 8001c40:	0026      	movs	r6, r4
 8001c42:	1a5b      	subs	r3, r3, r1
 8001c44:	409c      	lsls	r4, r3
 8001c46:	4098      	lsls	r0, r3
 8001c48:	40ce      	lsrs	r6, r1
 8001c4a:	40ca      	lsrs	r2, r1
 8001c4c:	1e63      	subs	r3, r4, #1
 8001c4e:	419c      	sbcs	r4, r3
 8001c50:	4330      	orrs	r0, r6
 8001c52:	4692      	mov	sl, r2
 8001c54:	2600      	movs	r6, #0
 8001c56:	4304      	orrs	r4, r0
 8001c58:	0763      	lsls	r3, r4, #29
 8001c5a:	d009      	beq.n	8001c70 <__aeabi_dsub+0x12c>
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	4023      	ands	r3, r4
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d005      	beq.n	8001c70 <__aeabi_dsub+0x12c>
 8001c64:	1d23      	adds	r3, r4, #4
 8001c66:	42a3      	cmp	r3, r4
 8001c68:	41a4      	sbcs	r4, r4
 8001c6a:	4264      	negs	r4, r4
 8001c6c:	44a2      	add	sl, r4
 8001c6e:	001c      	movs	r4, r3
 8001c70:	4653      	mov	r3, sl
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	d400      	bmi.n	8001c78 <__aeabi_dsub+0x134>
 8001c76:	e0f2      	b.n	8001e5e <__aeabi_dsub+0x31a>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	; (8001eac <__aeabi_dsub+0x368>)
 8001c7a:	3601      	adds	r6, #1
 8001c7c:	429e      	cmp	r6, r3
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x13e>
 8001c80:	e10f      	b.n	8001ea2 <__aeabi_dsub+0x35e>
 8001c82:	4653      	mov	r3, sl
 8001c84:	498a      	ldr	r1, [pc, #552]	; (8001eb0 <__aeabi_dsub+0x36c>)
 8001c86:	08e4      	lsrs	r4, r4, #3
 8001c88:	400b      	ands	r3, r1
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	075b      	lsls	r3, r3, #29
 8001c8e:	4323      	orrs	r3, r4
 8001c90:	0572      	lsls	r2, r6, #21
 8001c92:	024c      	lsls	r4, r1, #9
 8001c94:	0b24      	lsrs	r4, r4, #12
 8001c96:	0d52      	lsrs	r2, r2, #21
 8001c98:	0512      	lsls	r2, r2, #20
 8001c9a:	4322      	orrs	r2, r4
 8001c9c:	07ed      	lsls	r5, r5, #31
 8001c9e:	432a      	orrs	r2, r5
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	b003      	add	sp, #12
 8001ca6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ca8:	46bb      	mov	fp, r7
 8001caa:	46b2      	mov	sl, r6
 8001cac:	46a9      	mov	r9, r5
 8001cae:	46a0      	mov	r8, r4
 8001cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb2:	1ab4      	subs	r4, r6, r2
 8001cb4:	46a4      	mov	ip, r4
 8001cb6:	2c00      	cmp	r4, #0
 8001cb8:	dd59      	ble.n	8001d6e <__aeabi_dsub+0x22a>
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x17c>
 8001cbe:	e0b0      	b.n	8001e22 <__aeabi_dsub+0x2de>
 8001cc0:	4556      	cmp	r6, sl
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x182>
 8001cc4:	e0fa      	b.n	8001ebc <__aeabi_dsub+0x378>
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0412      	lsls	r2, r2, #16
 8001cca:	4317      	orrs	r7, r2
 8001ccc:	4662      	mov	r2, ip
 8001cce:	2a38      	cmp	r2, #56	; 0x38
 8001cd0:	dd00      	ble.n	8001cd4 <__aeabi_dsub+0x190>
 8001cd2:	e0d4      	b.n	8001e7e <__aeabi_dsub+0x33a>
 8001cd4:	2a1f      	cmp	r2, #31
 8001cd6:	dc00      	bgt.n	8001cda <__aeabi_dsub+0x196>
 8001cd8:	e1c0      	b.n	800205c <__aeabi_dsub+0x518>
 8001cda:	0039      	movs	r1, r7
 8001cdc:	3a20      	subs	r2, #32
 8001cde:	40d1      	lsrs	r1, r2
 8001ce0:	4662      	mov	r2, ip
 8001ce2:	2a20      	cmp	r2, #32
 8001ce4:	d006      	beq.n	8001cf4 <__aeabi_dsub+0x1b0>
 8001ce6:	4664      	mov	r4, ip
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	1b12      	subs	r2, r2, r4
 8001cec:	003c      	movs	r4, r7
 8001cee:	4094      	lsls	r4, r2
 8001cf0:	4304      	orrs	r4, r0
 8001cf2:	9401      	str	r4, [sp, #4]
 8001cf4:	9c01      	ldr	r4, [sp, #4]
 8001cf6:	1e62      	subs	r2, r4, #1
 8001cf8:	4194      	sbcs	r4, r2
 8001cfa:	430c      	orrs	r4, r1
 8001cfc:	e0c3      	b.n	8001e86 <__aeabi_dsub+0x342>
 8001cfe:	003c      	movs	r4, r7
 8001d00:	4304      	orrs	r4, r0
 8001d02:	d02b      	beq.n	8001d5c <__aeabi_dsub+0x218>
 8001d04:	468b      	mov	fp, r1
 8001d06:	428d      	cmp	r5, r1
 8001d08:	d02e      	beq.n	8001d68 <__aeabi_dsub+0x224>
 8001d0a:	4c6a      	ldr	r4, [pc, #424]	; (8001eb4 <__aeabi_dsub+0x370>)
 8001d0c:	46a4      	mov	ip, r4
 8001d0e:	44b4      	add	ip, r6
 8001d10:	4664      	mov	r4, ip
 8001d12:	2c00      	cmp	r4, #0
 8001d14:	d05f      	beq.n	8001dd6 <__aeabi_dsub+0x292>
 8001d16:	1b94      	subs	r4, r2, r6
 8001d18:	46a4      	mov	ip, r4
 8001d1a:	2e00      	cmp	r6, #0
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dsub+0x1dc>
 8001d1e:	e120      	b.n	8001f62 <__aeabi_dsub+0x41e>
 8001d20:	464c      	mov	r4, r9
 8001d22:	431c      	orrs	r4, r3
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x1e4>
 8001d26:	e1c7      	b.n	80020b8 <__aeabi_dsub+0x574>
 8001d28:	4661      	mov	r1, ip
 8001d2a:	1e4c      	subs	r4, r1, #1
 8001d2c:	2901      	cmp	r1, #1
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x1ee>
 8001d30:	e223      	b.n	800217a <__aeabi_dsub+0x636>
 8001d32:	4d5e      	ldr	r5, [pc, #376]	; (8001eac <__aeabi_dsub+0x368>)
 8001d34:	45ac      	cmp	ip, r5
 8001d36:	d100      	bne.n	8001d3a <__aeabi_dsub+0x1f6>
 8001d38:	e1d8      	b.n	80020ec <__aeabi_dsub+0x5a8>
 8001d3a:	46a4      	mov	ip, r4
 8001d3c:	e11a      	b.n	8001f74 <__aeabi_dsub+0x430>
 8001d3e:	003a      	movs	r2, r7
 8001d40:	4302      	orrs	r2, r0
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dsub+0x202>
 8001d44:	e0e4      	b.n	8001f10 <__aeabi_dsub+0x3cc>
 8001d46:	0022      	movs	r2, r4
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	2c01      	cmp	r4, #1
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x20c>
 8001d4e:	e1c3      	b.n	80020d8 <__aeabi_dsub+0x594>
 8001d50:	4956      	ldr	r1, [pc, #344]	; (8001eac <__aeabi_dsub+0x368>)
 8001d52:	428c      	cmp	r4, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x214>
 8001d56:	e0b1      	b.n	8001ebc <__aeabi_dsub+0x378>
 8001d58:	4694      	mov	ip, r2
 8001d5a:	e72b      	b.n	8001bb4 <__aeabi_dsub+0x70>
 8001d5c:	2401      	movs	r4, #1
 8001d5e:	4061      	eors	r1, r4
 8001d60:	468b      	mov	fp, r1
 8001d62:	428d      	cmp	r5, r1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_dsub+0x224>
 8001d66:	e716      	b.n	8001b96 <__aeabi_dsub+0x52>
 8001d68:	4952      	ldr	r1, [pc, #328]	; (8001eb4 <__aeabi_dsub+0x370>)
 8001d6a:	468c      	mov	ip, r1
 8001d6c:	44b4      	add	ip, r6
 8001d6e:	4664      	mov	r4, ip
 8001d70:	2c00      	cmp	r4, #0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x232>
 8001d74:	e0d3      	b.n	8001f1e <__aeabi_dsub+0x3da>
 8001d76:	1b91      	subs	r1, r2, r6
 8001d78:	468c      	mov	ip, r1
 8001d7a:	2e00      	cmp	r6, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x23c>
 8001d7e:	e15e      	b.n	800203e <__aeabi_dsub+0x4fa>
 8001d80:	494a      	ldr	r1, [pc, #296]	; (8001eac <__aeabi_dsub+0x368>)
 8001d82:	428a      	cmp	r2, r1
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x244>
 8001d86:	e1be      	b.n	8002106 <__aeabi_dsub+0x5c2>
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	464c      	mov	r4, r9
 8001d8c:	0409      	lsls	r1, r1, #16
 8001d8e:	430c      	orrs	r4, r1
 8001d90:	46a1      	mov	r9, r4
 8001d92:	4661      	mov	r1, ip
 8001d94:	2938      	cmp	r1, #56	; 0x38
 8001d96:	dd00      	ble.n	8001d9a <__aeabi_dsub+0x256>
 8001d98:	e1ba      	b.n	8002110 <__aeabi_dsub+0x5cc>
 8001d9a:	291f      	cmp	r1, #31
 8001d9c:	dd00      	ble.n	8001da0 <__aeabi_dsub+0x25c>
 8001d9e:	e227      	b.n	80021f0 <__aeabi_dsub+0x6ac>
 8001da0:	2420      	movs	r4, #32
 8001da2:	1a64      	subs	r4, r4, r1
 8001da4:	4649      	mov	r1, r9
 8001da6:	40a1      	lsls	r1, r4
 8001da8:	001e      	movs	r6, r3
 8001daa:	4688      	mov	r8, r1
 8001dac:	4661      	mov	r1, ip
 8001dae:	40a3      	lsls	r3, r4
 8001db0:	40ce      	lsrs	r6, r1
 8001db2:	4641      	mov	r1, r8
 8001db4:	1e5c      	subs	r4, r3, #1
 8001db6:	41a3      	sbcs	r3, r4
 8001db8:	4331      	orrs	r1, r6
 8001dba:	4319      	orrs	r1, r3
 8001dbc:	000c      	movs	r4, r1
 8001dbe:	4663      	mov	r3, ip
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	40d9      	lsrs	r1, r3
 8001dc4:	187f      	adds	r7, r7, r1
 8001dc6:	1824      	adds	r4, r4, r0
 8001dc8:	4284      	cmp	r4, r0
 8001dca:	419b      	sbcs	r3, r3
 8001dcc:	425b      	negs	r3, r3
 8001dce:	469a      	mov	sl, r3
 8001dd0:	0016      	movs	r6, r2
 8001dd2:	44ba      	add	sl, r7
 8001dd4:	e05d      	b.n	8001e92 <__aeabi_dsub+0x34e>
 8001dd6:	4c38      	ldr	r4, [pc, #224]	; (8001eb8 <__aeabi_dsub+0x374>)
 8001dd8:	1c72      	adds	r2, r6, #1
 8001dda:	4222      	tst	r2, r4
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x29c>
 8001dde:	e0df      	b.n	8001fa0 <__aeabi_dsub+0x45c>
 8001de0:	464a      	mov	r2, r9
 8001de2:	431a      	orrs	r2, r3
 8001de4:	2e00      	cmp	r6, #0
 8001de6:	d000      	beq.n	8001dea <__aeabi_dsub+0x2a6>
 8001de8:	e15c      	b.n	80020a4 <__aeabi_dsub+0x560>
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d100      	bne.n	8001df0 <__aeabi_dsub+0x2ac>
 8001dee:	e1cf      	b.n	8002190 <__aeabi_dsub+0x64c>
 8001df0:	003a      	movs	r2, r7
 8001df2:	4302      	orrs	r2, r0
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x2b4>
 8001df6:	e17f      	b.n	80020f8 <__aeabi_dsub+0x5b4>
 8001df8:	1a1c      	subs	r4, r3, r0
 8001dfa:	464a      	mov	r2, r9
 8001dfc:	42a3      	cmp	r3, r4
 8001dfe:	4189      	sbcs	r1, r1
 8001e00:	1bd2      	subs	r2, r2, r7
 8001e02:	4249      	negs	r1, r1
 8001e04:	1a52      	subs	r2, r2, r1
 8001e06:	4692      	mov	sl, r2
 8001e08:	0212      	lsls	r2, r2, #8
 8001e0a:	d400      	bmi.n	8001e0e <__aeabi_dsub+0x2ca>
 8001e0c:	e20a      	b.n	8002224 <__aeabi_dsub+0x6e0>
 8001e0e:	1ac4      	subs	r4, r0, r3
 8001e10:	42a0      	cmp	r0, r4
 8001e12:	4180      	sbcs	r0, r0
 8001e14:	464b      	mov	r3, r9
 8001e16:	4240      	negs	r0, r0
 8001e18:	1aff      	subs	r7, r7, r3
 8001e1a:	1a3b      	subs	r3, r7, r0
 8001e1c:	469a      	mov	sl, r3
 8001e1e:	465d      	mov	r5, fp
 8001e20:	e71a      	b.n	8001c58 <__aeabi_dsub+0x114>
 8001e22:	003a      	movs	r2, r7
 8001e24:	4302      	orrs	r2, r0
 8001e26:	d073      	beq.n	8001f10 <__aeabi_dsub+0x3cc>
 8001e28:	0022      	movs	r2, r4
 8001e2a:	3a01      	subs	r2, #1
 8001e2c:	2c01      	cmp	r4, #1
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dsub+0x2ee>
 8001e30:	e0cb      	b.n	8001fca <__aeabi_dsub+0x486>
 8001e32:	4554      	cmp	r4, sl
 8001e34:	d042      	beq.n	8001ebc <__aeabi_dsub+0x378>
 8001e36:	4694      	mov	ip, r2
 8001e38:	e748      	b.n	8001ccc <__aeabi_dsub+0x188>
 8001e3a:	0010      	movs	r0, r2
 8001e3c:	3b1f      	subs	r3, #31
 8001e3e:	40d8      	lsrs	r0, r3
 8001e40:	2920      	cmp	r1, #32
 8001e42:	d003      	beq.n	8001e4c <__aeabi_dsub+0x308>
 8001e44:	2340      	movs	r3, #64	; 0x40
 8001e46:	1a5b      	subs	r3, r3, r1
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	4314      	orrs	r4, r2
 8001e4c:	1e63      	subs	r3, r4, #1
 8001e4e:	419c      	sbcs	r4, r3
 8001e50:	2300      	movs	r3, #0
 8001e52:	2600      	movs	r6, #0
 8001e54:	469a      	mov	sl, r3
 8001e56:	4304      	orrs	r4, r0
 8001e58:	0763      	lsls	r3, r4, #29
 8001e5a:	d000      	beq.n	8001e5e <__aeabi_dsub+0x31a>
 8001e5c:	e6fe      	b.n	8001c5c <__aeabi_dsub+0x118>
 8001e5e:	4652      	mov	r2, sl
 8001e60:	08e3      	lsrs	r3, r4, #3
 8001e62:	0752      	lsls	r2, r2, #29
 8001e64:	4313      	orrs	r3, r2
 8001e66:	4652      	mov	r2, sl
 8001e68:	46b4      	mov	ip, r6
 8001e6a:	08d2      	lsrs	r2, r2, #3
 8001e6c:	490f      	ldr	r1, [pc, #60]	; (8001eac <__aeabi_dsub+0x368>)
 8001e6e:	458c      	cmp	ip, r1
 8001e70:	d02a      	beq.n	8001ec8 <__aeabi_dsub+0x384>
 8001e72:	0312      	lsls	r2, r2, #12
 8001e74:	0b14      	lsrs	r4, r2, #12
 8001e76:	4662      	mov	r2, ip
 8001e78:	0552      	lsls	r2, r2, #21
 8001e7a:	0d52      	lsrs	r2, r2, #21
 8001e7c:	e70c      	b.n	8001c98 <__aeabi_dsub+0x154>
 8001e7e:	003c      	movs	r4, r7
 8001e80:	4304      	orrs	r4, r0
 8001e82:	1e62      	subs	r2, r4, #1
 8001e84:	4194      	sbcs	r4, r2
 8001e86:	18e4      	adds	r4, r4, r3
 8001e88:	429c      	cmp	r4, r3
 8001e8a:	4192      	sbcs	r2, r2
 8001e8c:	4252      	negs	r2, r2
 8001e8e:	444a      	add	r2, r9
 8001e90:	4692      	mov	sl, r2
 8001e92:	4653      	mov	r3, sl
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	d5df      	bpl.n	8001e58 <__aeabi_dsub+0x314>
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__aeabi_dsub+0x368>)
 8001e9a:	3601      	adds	r6, #1
 8001e9c:	429e      	cmp	r6, r3
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x35e>
 8001ea0:	e0a0      	b.n	8001fe4 <__aeabi_dsub+0x4a0>
 8001ea2:	0032      	movs	r2, r6
 8001ea4:	2400      	movs	r4, #0
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e6f6      	b.n	8001c98 <__aeabi_dsub+0x154>
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	000007ff 	.word	0x000007ff
 8001eb0:	ff7fffff 	.word	0xff7fffff
 8001eb4:	fffff801 	.word	0xfffff801
 8001eb8:	000007fe 	.word	0x000007fe
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	464a      	mov	r2, r9
 8001ec0:	0752      	lsls	r2, r2, #29
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	464a      	mov	r2, r9
 8001ec6:	08d2      	lsrs	r2, r2, #3
 8001ec8:	0019      	movs	r1, r3
 8001eca:	4311      	orrs	r1, r2
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x38c>
 8001ece:	e1b5      	b.n	800223c <__aeabi_dsub+0x6f8>
 8001ed0:	2480      	movs	r4, #128	; 0x80
 8001ed2:	0324      	lsls	r4, r4, #12
 8001ed4:	4314      	orrs	r4, r2
 8001ed6:	0324      	lsls	r4, r4, #12
 8001ed8:	4ad5      	ldr	r2, [pc, #852]	; (8002230 <__aeabi_dsub+0x6ec>)
 8001eda:	0b24      	lsrs	r4, r4, #12
 8001edc:	e6dc      	b.n	8001c98 <__aeabi_dsub+0x154>
 8001ede:	0020      	movs	r0, r4
 8001ee0:	f000 faac 	bl	800243c <__clzsi2>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	2b1f      	cmp	r3, #31
 8001eea:	dc00      	bgt.n	8001eee <__aeabi_dsub+0x3aa>
 8001eec:	e695      	b.n	8001c1a <__aeabi_dsub+0xd6>
 8001eee:	0022      	movs	r2, r4
 8001ef0:	3808      	subs	r0, #8
 8001ef2:	4082      	lsls	r2, r0
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	429e      	cmp	r6, r3
 8001ef8:	dc00      	bgt.n	8001efc <__aeabi_dsub+0x3b8>
 8001efa:	e69a      	b.n	8001c32 <__aeabi_dsub+0xee>
 8001efc:	1af6      	subs	r6, r6, r3
 8001efe:	4bcd      	ldr	r3, [pc, #820]	; (8002234 <__aeabi_dsub+0x6f0>)
 8001f00:	401a      	ands	r2, r3
 8001f02:	4692      	mov	sl, r2
 8001f04:	e6a8      	b.n	8001c58 <__aeabi_dsub+0x114>
 8001f06:	003c      	movs	r4, r7
 8001f08:	4304      	orrs	r4, r0
 8001f0a:	1e62      	subs	r2, r4, #1
 8001f0c:	4194      	sbcs	r4, r2
 8001f0e:	e66c      	b.n	8001bea <__aeabi_dsub+0xa6>
 8001f10:	464a      	mov	r2, r9
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	0752      	lsls	r2, r2, #29
 8001f16:	4313      	orrs	r3, r2
 8001f18:	464a      	mov	r2, r9
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	e7a6      	b.n	8001e6c <__aeabi_dsub+0x328>
 8001f1e:	4cc6      	ldr	r4, [pc, #792]	; (8002238 <__aeabi_dsub+0x6f4>)
 8001f20:	1c72      	adds	r2, r6, #1
 8001f22:	4222      	tst	r2, r4
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x3e4>
 8001f26:	e0ac      	b.n	8002082 <__aeabi_dsub+0x53e>
 8001f28:	464a      	mov	r2, r9
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	2e00      	cmp	r6, #0
 8001f2e:	d000      	beq.n	8001f32 <__aeabi_dsub+0x3ee>
 8001f30:	e105      	b.n	800213e <__aeabi_dsub+0x5fa>
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x3f4>
 8001f36:	e156      	b.n	80021e6 <__aeabi_dsub+0x6a2>
 8001f38:	003a      	movs	r2, r7
 8001f3a:	4302      	orrs	r2, r0
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x3fc>
 8001f3e:	e0db      	b.n	80020f8 <__aeabi_dsub+0x5b4>
 8001f40:	181c      	adds	r4, r3, r0
 8001f42:	429c      	cmp	r4, r3
 8001f44:	419b      	sbcs	r3, r3
 8001f46:	444f      	add	r7, r9
 8001f48:	46ba      	mov	sl, r7
 8001f4a:	425b      	negs	r3, r3
 8001f4c:	449a      	add	sl, r3
 8001f4e:	4653      	mov	r3, sl
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	d400      	bmi.n	8001f56 <__aeabi_dsub+0x412>
 8001f54:	e780      	b.n	8001e58 <__aeabi_dsub+0x314>
 8001f56:	4652      	mov	r2, sl
 8001f58:	4bb6      	ldr	r3, [pc, #728]	; (8002234 <__aeabi_dsub+0x6f0>)
 8001f5a:	2601      	movs	r6, #1
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	4692      	mov	sl, r2
 8001f60:	e77a      	b.n	8001e58 <__aeabi_dsub+0x314>
 8001f62:	4cb3      	ldr	r4, [pc, #716]	; (8002230 <__aeabi_dsub+0x6ec>)
 8001f64:	42a2      	cmp	r2, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x426>
 8001f68:	e0c0      	b.n	80020ec <__aeabi_dsub+0x5a8>
 8001f6a:	2480      	movs	r4, #128	; 0x80
 8001f6c:	464d      	mov	r5, r9
 8001f6e:	0424      	lsls	r4, r4, #16
 8001f70:	4325      	orrs	r5, r4
 8001f72:	46a9      	mov	r9, r5
 8001f74:	4664      	mov	r4, ip
 8001f76:	2c38      	cmp	r4, #56	; 0x38
 8001f78:	dc53      	bgt.n	8002022 <__aeabi_dsub+0x4de>
 8001f7a:	4661      	mov	r1, ip
 8001f7c:	2c1f      	cmp	r4, #31
 8001f7e:	dd00      	ble.n	8001f82 <__aeabi_dsub+0x43e>
 8001f80:	e0cd      	b.n	800211e <__aeabi_dsub+0x5da>
 8001f82:	2520      	movs	r5, #32
 8001f84:	001e      	movs	r6, r3
 8001f86:	1b2d      	subs	r5, r5, r4
 8001f88:	464c      	mov	r4, r9
 8001f8a:	40ab      	lsls	r3, r5
 8001f8c:	40ac      	lsls	r4, r5
 8001f8e:	40ce      	lsrs	r6, r1
 8001f90:	1e5d      	subs	r5, r3, #1
 8001f92:	41ab      	sbcs	r3, r5
 8001f94:	4334      	orrs	r4, r6
 8001f96:	4323      	orrs	r3, r4
 8001f98:	464c      	mov	r4, r9
 8001f9a:	40cc      	lsrs	r4, r1
 8001f9c:	1b3f      	subs	r7, r7, r4
 8001f9e:	e045      	b.n	800202c <__aeabi_dsub+0x4e8>
 8001fa0:	464a      	mov	r2, r9
 8001fa2:	1a1c      	subs	r4, r3, r0
 8001fa4:	1bd1      	subs	r1, r2, r7
 8001fa6:	42a3      	cmp	r3, r4
 8001fa8:	4192      	sbcs	r2, r2
 8001faa:	4252      	negs	r2, r2
 8001fac:	4692      	mov	sl, r2
 8001fae:	000a      	movs	r2, r1
 8001fb0:	4651      	mov	r1, sl
 8001fb2:	1a52      	subs	r2, r2, r1
 8001fb4:	4692      	mov	sl, r2
 8001fb6:	0212      	lsls	r2, r2, #8
 8001fb8:	d500      	bpl.n	8001fbc <__aeabi_dsub+0x478>
 8001fba:	e083      	b.n	80020c4 <__aeabi_dsub+0x580>
 8001fbc:	4653      	mov	r3, sl
 8001fbe:	4323      	orrs	r3, r4
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_dsub+0x480>
 8001fc2:	e621      	b.n	8001c08 <__aeabi_dsub+0xc4>
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2500      	movs	r5, #0
 8001fc8:	e753      	b.n	8001e72 <__aeabi_dsub+0x32e>
 8001fca:	181c      	adds	r4, r3, r0
 8001fcc:	429c      	cmp	r4, r3
 8001fce:	419b      	sbcs	r3, r3
 8001fd0:	444f      	add	r7, r9
 8001fd2:	46ba      	mov	sl, r7
 8001fd4:	425b      	negs	r3, r3
 8001fd6:	449a      	add	sl, r3
 8001fd8:	4653      	mov	r3, sl
 8001fda:	2601      	movs	r6, #1
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	d400      	bmi.n	8001fe2 <__aeabi_dsub+0x49e>
 8001fe0:	e73a      	b.n	8001e58 <__aeabi_dsub+0x314>
 8001fe2:	2602      	movs	r6, #2
 8001fe4:	4652      	mov	r2, sl
 8001fe6:	4b93      	ldr	r3, [pc, #588]	; (8002234 <__aeabi_dsub+0x6f0>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	401a      	ands	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	4021      	ands	r1, r4
 8001ff0:	0862      	lsrs	r2, r4, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	07dc      	lsls	r4, r3, #31
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	469a      	mov	sl, r3
 8001ffa:	4314      	orrs	r4, r2
 8001ffc:	e62c      	b.n	8001c58 <__aeabi_dsub+0x114>
 8001ffe:	0039      	movs	r1, r7
 8002000:	3a20      	subs	r2, #32
 8002002:	40d1      	lsrs	r1, r2
 8002004:	4662      	mov	r2, ip
 8002006:	2a20      	cmp	r2, #32
 8002008:	d006      	beq.n	8002018 <__aeabi_dsub+0x4d4>
 800200a:	4664      	mov	r4, ip
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	1b12      	subs	r2, r2, r4
 8002010:	003c      	movs	r4, r7
 8002012:	4094      	lsls	r4, r2
 8002014:	4304      	orrs	r4, r0
 8002016:	9401      	str	r4, [sp, #4]
 8002018:	9c01      	ldr	r4, [sp, #4]
 800201a:	1e62      	subs	r2, r4, #1
 800201c:	4194      	sbcs	r4, r2
 800201e:	430c      	orrs	r4, r1
 8002020:	e5e3      	b.n	8001bea <__aeabi_dsub+0xa6>
 8002022:	4649      	mov	r1, r9
 8002024:	4319      	orrs	r1, r3
 8002026:	000b      	movs	r3, r1
 8002028:	1e5c      	subs	r4, r3, #1
 800202a:	41a3      	sbcs	r3, r4
 800202c:	1ac4      	subs	r4, r0, r3
 800202e:	42a0      	cmp	r0, r4
 8002030:	419b      	sbcs	r3, r3
 8002032:	425b      	negs	r3, r3
 8002034:	1afb      	subs	r3, r7, r3
 8002036:	469a      	mov	sl, r3
 8002038:	465d      	mov	r5, fp
 800203a:	0016      	movs	r6, r2
 800203c:	e5dc      	b.n	8001bf8 <__aeabi_dsub+0xb4>
 800203e:	4649      	mov	r1, r9
 8002040:	4319      	orrs	r1, r3
 8002042:	d100      	bne.n	8002046 <__aeabi_dsub+0x502>
 8002044:	e0ae      	b.n	80021a4 <__aeabi_dsub+0x660>
 8002046:	4661      	mov	r1, ip
 8002048:	4664      	mov	r4, ip
 800204a:	3901      	subs	r1, #1
 800204c:	2c01      	cmp	r4, #1
 800204e:	d100      	bne.n	8002052 <__aeabi_dsub+0x50e>
 8002050:	e0e0      	b.n	8002214 <__aeabi_dsub+0x6d0>
 8002052:	4c77      	ldr	r4, [pc, #476]	; (8002230 <__aeabi_dsub+0x6ec>)
 8002054:	45a4      	cmp	ip, r4
 8002056:	d056      	beq.n	8002106 <__aeabi_dsub+0x5c2>
 8002058:	468c      	mov	ip, r1
 800205a:	e69a      	b.n	8001d92 <__aeabi_dsub+0x24e>
 800205c:	4661      	mov	r1, ip
 800205e:	2220      	movs	r2, #32
 8002060:	003c      	movs	r4, r7
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4094      	lsls	r4, r2
 8002066:	0001      	movs	r1, r0
 8002068:	4090      	lsls	r0, r2
 800206a:	46a0      	mov	r8, r4
 800206c:	4664      	mov	r4, ip
 800206e:	1e42      	subs	r2, r0, #1
 8002070:	4190      	sbcs	r0, r2
 8002072:	4662      	mov	r2, ip
 8002074:	40e1      	lsrs	r1, r4
 8002076:	4644      	mov	r4, r8
 8002078:	40d7      	lsrs	r7, r2
 800207a:	430c      	orrs	r4, r1
 800207c:	4304      	orrs	r4, r0
 800207e:	44b9      	add	r9, r7
 8002080:	e701      	b.n	8001e86 <__aeabi_dsub+0x342>
 8002082:	496b      	ldr	r1, [pc, #428]	; (8002230 <__aeabi_dsub+0x6ec>)
 8002084:	428a      	cmp	r2, r1
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x546>
 8002088:	e70c      	b.n	8001ea4 <__aeabi_dsub+0x360>
 800208a:	1818      	adds	r0, r3, r0
 800208c:	4298      	cmp	r0, r3
 800208e:	419b      	sbcs	r3, r3
 8002090:	444f      	add	r7, r9
 8002092:	425b      	negs	r3, r3
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	07dc      	lsls	r4, r3, #31
 8002098:	0840      	lsrs	r0, r0, #1
 800209a:	085b      	lsrs	r3, r3, #1
 800209c:	469a      	mov	sl, r3
 800209e:	0016      	movs	r6, r2
 80020a0:	4304      	orrs	r4, r0
 80020a2:	e6d9      	b.n	8001e58 <__aeabi_dsub+0x314>
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	d000      	beq.n	80020aa <__aeabi_dsub+0x566>
 80020a8:	e081      	b.n	80021ae <__aeabi_dsub+0x66a>
 80020aa:	003b      	movs	r3, r7
 80020ac:	4303      	orrs	r3, r0
 80020ae:	d11d      	bne.n	80020ec <__aeabi_dsub+0x5a8>
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	2500      	movs	r5, #0
 80020b4:	0312      	lsls	r2, r2, #12
 80020b6:	e70b      	b.n	8001ed0 <__aeabi_dsub+0x38c>
 80020b8:	08c0      	lsrs	r0, r0, #3
 80020ba:	077b      	lsls	r3, r7, #29
 80020bc:	465d      	mov	r5, fp
 80020be:	4303      	orrs	r3, r0
 80020c0:	08fa      	lsrs	r2, r7, #3
 80020c2:	e6d3      	b.n	8001e6c <__aeabi_dsub+0x328>
 80020c4:	1ac4      	subs	r4, r0, r3
 80020c6:	42a0      	cmp	r0, r4
 80020c8:	4180      	sbcs	r0, r0
 80020ca:	464b      	mov	r3, r9
 80020cc:	4240      	negs	r0, r0
 80020ce:	1aff      	subs	r7, r7, r3
 80020d0:	1a3b      	subs	r3, r7, r0
 80020d2:	469a      	mov	sl, r3
 80020d4:	465d      	mov	r5, fp
 80020d6:	e597      	b.n	8001c08 <__aeabi_dsub+0xc4>
 80020d8:	1a1c      	subs	r4, r3, r0
 80020da:	464a      	mov	r2, r9
 80020dc:	42a3      	cmp	r3, r4
 80020de:	419b      	sbcs	r3, r3
 80020e0:	1bd7      	subs	r7, r2, r7
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	2601      	movs	r6, #1
 80020ea:	e585      	b.n	8001bf8 <__aeabi_dsub+0xb4>
 80020ec:	08c0      	lsrs	r0, r0, #3
 80020ee:	077b      	lsls	r3, r7, #29
 80020f0:	465d      	mov	r5, fp
 80020f2:	4303      	orrs	r3, r0
 80020f4:	08fa      	lsrs	r2, r7, #3
 80020f6:	e6e7      	b.n	8001ec8 <__aeabi_dsub+0x384>
 80020f8:	464a      	mov	r2, r9
 80020fa:	08db      	lsrs	r3, r3, #3
 80020fc:	0752      	lsls	r2, r2, #29
 80020fe:	4313      	orrs	r3, r2
 8002100:	464a      	mov	r2, r9
 8002102:	08d2      	lsrs	r2, r2, #3
 8002104:	e6b5      	b.n	8001e72 <__aeabi_dsub+0x32e>
 8002106:	08c0      	lsrs	r0, r0, #3
 8002108:	077b      	lsls	r3, r7, #29
 800210a:	4303      	orrs	r3, r0
 800210c:	08fa      	lsrs	r2, r7, #3
 800210e:	e6db      	b.n	8001ec8 <__aeabi_dsub+0x384>
 8002110:	4649      	mov	r1, r9
 8002112:	4319      	orrs	r1, r3
 8002114:	000b      	movs	r3, r1
 8002116:	1e59      	subs	r1, r3, #1
 8002118:	418b      	sbcs	r3, r1
 800211a:	001c      	movs	r4, r3
 800211c:	e653      	b.n	8001dc6 <__aeabi_dsub+0x282>
 800211e:	464d      	mov	r5, r9
 8002120:	3c20      	subs	r4, #32
 8002122:	40e5      	lsrs	r5, r4
 8002124:	2920      	cmp	r1, #32
 8002126:	d005      	beq.n	8002134 <__aeabi_dsub+0x5f0>
 8002128:	2440      	movs	r4, #64	; 0x40
 800212a:	1a64      	subs	r4, r4, r1
 800212c:	4649      	mov	r1, r9
 800212e:	40a1      	lsls	r1, r4
 8002130:	430b      	orrs	r3, r1
 8002132:	4698      	mov	r8, r3
 8002134:	4643      	mov	r3, r8
 8002136:	1e5c      	subs	r4, r3, #1
 8002138:	41a3      	sbcs	r3, r4
 800213a:	432b      	orrs	r3, r5
 800213c:	e776      	b.n	800202c <__aeabi_dsub+0x4e8>
 800213e:	2a00      	cmp	r2, #0
 8002140:	d0e1      	beq.n	8002106 <__aeabi_dsub+0x5c2>
 8002142:	003a      	movs	r2, r7
 8002144:	08db      	lsrs	r3, r3, #3
 8002146:	4302      	orrs	r2, r0
 8002148:	d100      	bne.n	800214c <__aeabi_dsub+0x608>
 800214a:	e6b8      	b.n	8001ebe <__aeabi_dsub+0x37a>
 800214c:	464a      	mov	r2, r9
 800214e:	0752      	lsls	r2, r2, #29
 8002150:	2480      	movs	r4, #128	; 0x80
 8002152:	4313      	orrs	r3, r2
 8002154:	464a      	mov	r2, r9
 8002156:	0324      	lsls	r4, r4, #12
 8002158:	08d2      	lsrs	r2, r2, #3
 800215a:	4222      	tst	r2, r4
 800215c:	d007      	beq.n	800216e <__aeabi_dsub+0x62a>
 800215e:	08fe      	lsrs	r6, r7, #3
 8002160:	4226      	tst	r6, r4
 8002162:	d104      	bne.n	800216e <__aeabi_dsub+0x62a>
 8002164:	465d      	mov	r5, fp
 8002166:	0032      	movs	r2, r6
 8002168:	08c3      	lsrs	r3, r0, #3
 800216a:	077f      	lsls	r7, r7, #29
 800216c:	433b      	orrs	r3, r7
 800216e:	0f59      	lsrs	r1, r3, #29
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	0749      	lsls	r1, r1, #29
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	430b      	orrs	r3, r1
 8002178:	e6a6      	b.n	8001ec8 <__aeabi_dsub+0x384>
 800217a:	1ac4      	subs	r4, r0, r3
 800217c:	42a0      	cmp	r0, r4
 800217e:	4180      	sbcs	r0, r0
 8002180:	464b      	mov	r3, r9
 8002182:	4240      	negs	r0, r0
 8002184:	1aff      	subs	r7, r7, r3
 8002186:	1a3b      	subs	r3, r7, r0
 8002188:	469a      	mov	sl, r3
 800218a:	465d      	mov	r5, fp
 800218c:	2601      	movs	r6, #1
 800218e:	e533      	b.n	8001bf8 <__aeabi_dsub+0xb4>
 8002190:	003b      	movs	r3, r7
 8002192:	4303      	orrs	r3, r0
 8002194:	d100      	bne.n	8002198 <__aeabi_dsub+0x654>
 8002196:	e715      	b.n	8001fc4 <__aeabi_dsub+0x480>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e666      	b.n	8001e72 <__aeabi_dsub+0x32e>
 80021a4:	08c0      	lsrs	r0, r0, #3
 80021a6:	077b      	lsls	r3, r7, #29
 80021a8:	4303      	orrs	r3, r0
 80021aa:	08fa      	lsrs	r2, r7, #3
 80021ac:	e65e      	b.n	8001e6c <__aeabi_dsub+0x328>
 80021ae:	003a      	movs	r2, r7
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	4302      	orrs	r2, r0
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x674>
 80021b6:	e682      	b.n	8001ebe <__aeabi_dsub+0x37a>
 80021b8:	464a      	mov	r2, r9
 80021ba:	0752      	lsls	r2, r2, #29
 80021bc:	2480      	movs	r4, #128	; 0x80
 80021be:	4313      	orrs	r3, r2
 80021c0:	464a      	mov	r2, r9
 80021c2:	0324      	lsls	r4, r4, #12
 80021c4:	08d2      	lsrs	r2, r2, #3
 80021c6:	4222      	tst	r2, r4
 80021c8:	d007      	beq.n	80021da <__aeabi_dsub+0x696>
 80021ca:	08fe      	lsrs	r6, r7, #3
 80021cc:	4226      	tst	r6, r4
 80021ce:	d104      	bne.n	80021da <__aeabi_dsub+0x696>
 80021d0:	465d      	mov	r5, fp
 80021d2:	0032      	movs	r2, r6
 80021d4:	08c3      	lsrs	r3, r0, #3
 80021d6:	077f      	lsls	r7, r7, #29
 80021d8:	433b      	orrs	r3, r7
 80021da:	0f59      	lsrs	r1, r3, #29
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	08db      	lsrs	r3, r3, #3
 80021e0:	0749      	lsls	r1, r1, #29
 80021e2:	430b      	orrs	r3, r1
 80021e4:	e670      	b.n	8001ec8 <__aeabi_dsub+0x384>
 80021e6:	08c0      	lsrs	r0, r0, #3
 80021e8:	077b      	lsls	r3, r7, #29
 80021ea:	4303      	orrs	r3, r0
 80021ec:	08fa      	lsrs	r2, r7, #3
 80021ee:	e640      	b.n	8001e72 <__aeabi_dsub+0x32e>
 80021f0:	464c      	mov	r4, r9
 80021f2:	3920      	subs	r1, #32
 80021f4:	40cc      	lsrs	r4, r1
 80021f6:	4661      	mov	r1, ip
 80021f8:	2920      	cmp	r1, #32
 80021fa:	d006      	beq.n	800220a <__aeabi_dsub+0x6c6>
 80021fc:	4666      	mov	r6, ip
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	1b89      	subs	r1, r1, r6
 8002202:	464e      	mov	r6, r9
 8002204:	408e      	lsls	r6, r1
 8002206:	4333      	orrs	r3, r6
 8002208:	4698      	mov	r8, r3
 800220a:	4643      	mov	r3, r8
 800220c:	1e59      	subs	r1, r3, #1
 800220e:	418b      	sbcs	r3, r1
 8002210:	431c      	orrs	r4, r3
 8002212:	e5d8      	b.n	8001dc6 <__aeabi_dsub+0x282>
 8002214:	181c      	adds	r4, r3, r0
 8002216:	4284      	cmp	r4, r0
 8002218:	4180      	sbcs	r0, r0
 800221a:	444f      	add	r7, r9
 800221c:	46ba      	mov	sl, r7
 800221e:	4240      	negs	r0, r0
 8002220:	4482      	add	sl, r0
 8002222:	e6d9      	b.n	8001fd8 <__aeabi_dsub+0x494>
 8002224:	4653      	mov	r3, sl
 8002226:	4323      	orrs	r3, r4
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x6e8>
 800222a:	e6cb      	b.n	8001fc4 <__aeabi_dsub+0x480>
 800222c:	e614      	b.n	8001e58 <__aeabi_dsub+0x314>
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	000007ff 	.word	0x000007ff
 8002234:	ff7fffff 	.word	0xff7fffff
 8002238:	000007fe 	.word	0x000007fe
 800223c:	2300      	movs	r3, #0
 800223e:	4a01      	ldr	r2, [pc, #4]	; (8002244 <__aeabi_dsub+0x700>)
 8002240:	001c      	movs	r4, r3
 8002242:	e529      	b.n	8001c98 <__aeabi_dsub+0x154>
 8002244:	000007ff 	.word	0x000007ff

08002248 <__aeabi_dcmpun>:
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	0005      	movs	r5, r0
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <__aeabi_dcmpun+0x38>)
 800224e:	031c      	lsls	r4, r3, #12
 8002250:	0016      	movs	r6, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	030a      	lsls	r2, r1, #12
 8002256:	0049      	lsls	r1, r1, #1
 8002258:	0b12      	lsrs	r2, r2, #12
 800225a:	0d49      	lsrs	r1, r1, #21
 800225c:	0b24      	lsrs	r4, r4, #12
 800225e:	0d5b      	lsrs	r3, r3, #21
 8002260:	4281      	cmp	r1, r0
 8002262:	d008      	beq.n	8002276 <__aeabi_dcmpun+0x2e>
 8002264:	4a06      	ldr	r2, [pc, #24]	; (8002280 <__aeabi_dcmpun+0x38>)
 8002266:	2000      	movs	r0, #0
 8002268:	4293      	cmp	r3, r2
 800226a:	d103      	bne.n	8002274 <__aeabi_dcmpun+0x2c>
 800226c:	0020      	movs	r0, r4
 800226e:	4330      	orrs	r0, r6
 8002270:	1e43      	subs	r3, r0, #1
 8002272:	4198      	sbcs	r0, r3
 8002274:	bd70      	pop	{r4, r5, r6, pc}
 8002276:	2001      	movs	r0, #1
 8002278:	432a      	orrs	r2, r5
 800227a:	d1fb      	bne.n	8002274 <__aeabi_dcmpun+0x2c>
 800227c:	e7f2      	b.n	8002264 <__aeabi_dcmpun+0x1c>
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	000007ff 	.word	0x000007ff

08002284 <__aeabi_i2d>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	2800      	cmp	r0, #0
 8002288:	d016      	beq.n	80022b8 <__aeabi_i2d+0x34>
 800228a:	17c3      	asrs	r3, r0, #31
 800228c:	18c5      	adds	r5, r0, r3
 800228e:	405d      	eors	r5, r3
 8002290:	0fc4      	lsrs	r4, r0, #31
 8002292:	0028      	movs	r0, r5
 8002294:	f000 f8d2 	bl	800243c <__clzsi2>
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <__aeabi_i2d+0x5c>)
 800229a:	1a1b      	subs	r3, r3, r0
 800229c:	280a      	cmp	r0, #10
 800229e:	dc16      	bgt.n	80022ce <__aeabi_i2d+0x4a>
 80022a0:	0002      	movs	r2, r0
 80022a2:	002e      	movs	r6, r5
 80022a4:	3215      	adds	r2, #21
 80022a6:	4096      	lsls	r6, r2
 80022a8:	220b      	movs	r2, #11
 80022aa:	1a12      	subs	r2, r2, r0
 80022ac:	40d5      	lsrs	r5, r2
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	032d      	lsls	r5, r5, #12
 80022b2:	0b2d      	lsrs	r5, r5, #12
 80022b4:	0d5b      	lsrs	r3, r3, #21
 80022b6:	e003      	b.n	80022c0 <__aeabi_i2d+0x3c>
 80022b8:	2400      	movs	r4, #0
 80022ba:	2300      	movs	r3, #0
 80022bc:	2500      	movs	r5, #0
 80022be:	2600      	movs	r6, #0
 80022c0:	051b      	lsls	r3, r3, #20
 80022c2:	432b      	orrs	r3, r5
 80022c4:	07e4      	lsls	r4, r4, #31
 80022c6:	4323      	orrs	r3, r4
 80022c8:	0030      	movs	r0, r6
 80022ca:	0019      	movs	r1, r3
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
 80022ce:	380b      	subs	r0, #11
 80022d0:	4085      	lsls	r5, r0
 80022d2:	055b      	lsls	r3, r3, #21
 80022d4:	032d      	lsls	r5, r5, #12
 80022d6:	2600      	movs	r6, #0
 80022d8:	0b2d      	lsrs	r5, r5, #12
 80022da:	0d5b      	lsrs	r3, r3, #21
 80022dc:	e7f0      	b.n	80022c0 <__aeabi_i2d+0x3c>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	0000041e 	.word	0x0000041e

080022e4 <__aeabi_ui2d>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	1e04      	subs	r4, r0, #0
 80022e8:	d010      	beq.n	800230c <__aeabi_ui2d+0x28>
 80022ea:	f000 f8a7 	bl	800243c <__clzsi2>
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <__aeabi_ui2d+0x48>)
 80022f0:	1a1b      	subs	r3, r3, r0
 80022f2:	280a      	cmp	r0, #10
 80022f4:	dc11      	bgt.n	800231a <__aeabi_ui2d+0x36>
 80022f6:	220b      	movs	r2, #11
 80022f8:	0021      	movs	r1, r4
 80022fa:	1a12      	subs	r2, r2, r0
 80022fc:	40d1      	lsrs	r1, r2
 80022fe:	3015      	adds	r0, #21
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	055b      	lsls	r3, r3, #21
 8002304:	4084      	lsls	r4, r0
 8002306:	0b12      	lsrs	r2, r2, #12
 8002308:	0d5b      	lsrs	r3, r3, #21
 800230a:	e001      	b.n	8002310 <__aeabi_ui2d+0x2c>
 800230c:	2300      	movs	r3, #0
 800230e:	2200      	movs	r2, #0
 8002310:	051b      	lsls	r3, r3, #20
 8002312:	4313      	orrs	r3, r2
 8002314:	0020      	movs	r0, r4
 8002316:	0019      	movs	r1, r3
 8002318:	bd10      	pop	{r4, pc}
 800231a:	0022      	movs	r2, r4
 800231c:	380b      	subs	r0, #11
 800231e:	4082      	lsls	r2, r0
 8002320:	055b      	lsls	r3, r3, #21
 8002322:	0312      	lsls	r2, r2, #12
 8002324:	2400      	movs	r4, #0
 8002326:	0b12      	lsrs	r2, r2, #12
 8002328:	0d5b      	lsrs	r3, r3, #21
 800232a:	e7f1      	b.n	8002310 <__aeabi_ui2d+0x2c>
 800232c:	0000041e 	.word	0x0000041e

08002330 <__aeabi_d2f>:
 8002330:	0002      	movs	r2, r0
 8002332:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002334:	004b      	lsls	r3, r1, #1
 8002336:	030d      	lsls	r5, r1, #12
 8002338:	0f40      	lsrs	r0, r0, #29
 800233a:	0d5b      	lsrs	r3, r3, #21
 800233c:	0fcc      	lsrs	r4, r1, #31
 800233e:	0a6d      	lsrs	r5, r5, #9
 8002340:	493a      	ldr	r1, [pc, #232]	; (800242c <__aeabi_d2f+0xfc>)
 8002342:	4305      	orrs	r5, r0
 8002344:	1c58      	adds	r0, r3, #1
 8002346:	00d7      	lsls	r7, r2, #3
 8002348:	4208      	tst	r0, r1
 800234a:	d00a      	beq.n	8002362 <__aeabi_d2f+0x32>
 800234c:	4938      	ldr	r1, [pc, #224]	; (8002430 <__aeabi_d2f+0x100>)
 800234e:	1859      	adds	r1, r3, r1
 8002350:	29fe      	cmp	r1, #254	; 0xfe
 8002352:	dd16      	ble.n	8002382 <__aeabi_d2f+0x52>
 8002354:	20ff      	movs	r0, #255	; 0xff
 8002356:	2200      	movs	r2, #0
 8002358:	05c0      	lsls	r0, r0, #23
 800235a:	4310      	orrs	r0, r2
 800235c:	07e4      	lsls	r4, r4, #31
 800235e:	4320      	orrs	r0, r4
 8002360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <__aeabi_d2f+0x44>
 8002366:	433d      	orrs	r5, r7
 8002368:	d026      	beq.n	80023b8 <__aeabi_d2f+0x88>
 800236a:	2205      	movs	r2, #5
 800236c:	0192      	lsls	r2, r2, #6
 800236e:	0a52      	lsrs	r2, r2, #9
 8002370:	b2d8      	uxtb	r0, r3
 8002372:	e7f1      	b.n	8002358 <__aeabi_d2f+0x28>
 8002374:	432f      	orrs	r7, r5
 8002376:	d0ed      	beq.n	8002354 <__aeabi_d2f+0x24>
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	03d2      	lsls	r2, r2, #15
 800237c:	20ff      	movs	r0, #255	; 0xff
 800237e:	432a      	orrs	r2, r5
 8002380:	e7ea      	b.n	8002358 <__aeabi_d2f+0x28>
 8002382:	2900      	cmp	r1, #0
 8002384:	dd1b      	ble.n	80023be <__aeabi_d2f+0x8e>
 8002386:	0192      	lsls	r2, r2, #6
 8002388:	1e50      	subs	r0, r2, #1
 800238a:	4182      	sbcs	r2, r0
 800238c:	00ed      	lsls	r5, r5, #3
 800238e:	0f7f      	lsrs	r7, r7, #29
 8002390:	432a      	orrs	r2, r5
 8002392:	433a      	orrs	r2, r7
 8002394:	0753      	lsls	r3, r2, #29
 8002396:	d047      	beq.n	8002428 <__aeabi_d2f+0xf8>
 8002398:	230f      	movs	r3, #15
 800239a:	4013      	ands	r3, r2
 800239c:	2b04      	cmp	r3, #4
 800239e:	d000      	beq.n	80023a2 <__aeabi_d2f+0x72>
 80023a0:	3204      	adds	r2, #4
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	04db      	lsls	r3, r3, #19
 80023a6:	4013      	ands	r3, r2
 80023a8:	d03e      	beq.n	8002428 <__aeabi_d2f+0xf8>
 80023aa:	1c48      	adds	r0, r1, #1
 80023ac:	29fe      	cmp	r1, #254	; 0xfe
 80023ae:	d0d1      	beq.n	8002354 <__aeabi_d2f+0x24>
 80023b0:	0192      	lsls	r2, r2, #6
 80023b2:	0a52      	lsrs	r2, r2, #9
 80023b4:	b2c0      	uxtb	r0, r0
 80023b6:	e7cf      	b.n	8002358 <__aeabi_d2f+0x28>
 80023b8:	2000      	movs	r0, #0
 80023ba:	2200      	movs	r2, #0
 80023bc:	e7cc      	b.n	8002358 <__aeabi_d2f+0x28>
 80023be:	000a      	movs	r2, r1
 80023c0:	3217      	adds	r2, #23
 80023c2:	db2f      	blt.n	8002424 <__aeabi_d2f+0xf4>
 80023c4:	2680      	movs	r6, #128	; 0x80
 80023c6:	0436      	lsls	r6, r6, #16
 80023c8:	432e      	orrs	r6, r5
 80023ca:	251e      	movs	r5, #30
 80023cc:	1a6d      	subs	r5, r5, r1
 80023ce:	2d1f      	cmp	r5, #31
 80023d0:	dd11      	ble.n	80023f6 <__aeabi_d2f+0xc6>
 80023d2:	2202      	movs	r2, #2
 80023d4:	4252      	negs	r2, r2
 80023d6:	1a52      	subs	r2, r2, r1
 80023d8:	0031      	movs	r1, r6
 80023da:	40d1      	lsrs	r1, r2
 80023dc:	2d20      	cmp	r5, #32
 80023de:	d004      	beq.n	80023ea <__aeabi_d2f+0xba>
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <__aeabi_d2f+0x104>)
 80023e2:	4694      	mov	ip, r2
 80023e4:	4463      	add	r3, ip
 80023e6:	409e      	lsls	r6, r3
 80023e8:	4337      	orrs	r7, r6
 80023ea:	003a      	movs	r2, r7
 80023ec:	1e53      	subs	r3, r2, #1
 80023ee:	419a      	sbcs	r2, r3
 80023f0:	430a      	orrs	r2, r1
 80023f2:	2100      	movs	r1, #0
 80023f4:	e7ce      	b.n	8002394 <__aeabi_d2f+0x64>
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <__aeabi_d2f+0x108>)
 80023f8:	0038      	movs	r0, r7
 80023fa:	4694      	mov	ip, r2
 80023fc:	4463      	add	r3, ip
 80023fe:	4098      	lsls	r0, r3
 8002400:	003a      	movs	r2, r7
 8002402:	1e41      	subs	r1, r0, #1
 8002404:	4188      	sbcs	r0, r1
 8002406:	409e      	lsls	r6, r3
 8002408:	40ea      	lsrs	r2, r5
 800240a:	4330      	orrs	r0, r6
 800240c:	4302      	orrs	r2, r0
 800240e:	2100      	movs	r1, #0
 8002410:	0753      	lsls	r3, r2, #29
 8002412:	d1c1      	bne.n	8002398 <__aeabi_d2f+0x68>
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	0013      	movs	r3, r2
 8002418:	04c9      	lsls	r1, r1, #19
 800241a:	2001      	movs	r0, #1
 800241c:	400b      	ands	r3, r1
 800241e:	420a      	tst	r2, r1
 8002420:	d1c6      	bne.n	80023b0 <__aeabi_d2f+0x80>
 8002422:	e7a3      	b.n	800236c <__aeabi_d2f+0x3c>
 8002424:	2300      	movs	r3, #0
 8002426:	e7a0      	b.n	800236a <__aeabi_d2f+0x3a>
 8002428:	000b      	movs	r3, r1
 800242a:	e79f      	b.n	800236c <__aeabi_d2f+0x3c>
 800242c:	000007fe 	.word	0x000007fe
 8002430:	fffffc80 	.word	0xfffffc80
 8002434:	fffffca2 	.word	0xfffffca2
 8002438:	fffffc82 	.word	0xfffffc82

0800243c <__clzsi2>:
 800243c:	211c      	movs	r1, #28
 800243e:	2301      	movs	r3, #1
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	4298      	cmp	r0, r3
 8002444:	d301      	bcc.n	800244a <__clzsi2+0xe>
 8002446:	0c00      	lsrs	r0, r0, #16
 8002448:	3910      	subs	r1, #16
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	4298      	cmp	r0, r3
 800244e:	d301      	bcc.n	8002454 <__clzsi2+0x18>
 8002450:	0a00      	lsrs	r0, r0, #8
 8002452:	3908      	subs	r1, #8
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	4298      	cmp	r0, r3
 8002458:	d301      	bcc.n	800245e <__clzsi2+0x22>
 800245a:	0900      	lsrs	r0, r0, #4
 800245c:	3904      	subs	r1, #4
 800245e:	a202      	add	r2, pc, #8	; (adr r2, 8002468 <__clzsi2+0x2c>)
 8002460:	5c10      	ldrb	r0, [r2, r0]
 8002462:	1840      	adds	r0, r0, r1
 8002464:	4770      	bx	lr
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	02020304 	.word	0x02020304
 800246c:	01010101 	.word	0x01010101
	...

08002478 <__clzdi2>:
 8002478:	b510      	push	{r4, lr}
 800247a:	2900      	cmp	r1, #0
 800247c:	d103      	bne.n	8002486 <__clzdi2+0xe>
 800247e:	f7ff ffdd 	bl	800243c <__clzsi2>
 8002482:	3020      	adds	r0, #32
 8002484:	e002      	b.n	800248c <__clzdi2+0x14>
 8002486:	0008      	movs	r0, r1
 8002488:	f7ff ffd8 	bl	800243c <__clzsi2>
 800248c:	bd10      	pop	{r4, pc}
 800248e:	46c0      	nop			; (mov r8, r8)

08002490 <decode_NMEA_message>:
#include "NMEA.h"
#include <stdio.h>
#include <math.h>

bool decode_NMEA_message(char input_data[550], GPGGA_struct *gpgga)
{
 8002490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002492:	b08b      	sub	sp, #44	; 0x2c
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
	int idx = 0, i = 0, integral_part, fractional_part, data;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]

	char buffer[12];
	memset(buffer,'\0',12);
 80024a2:	2308      	movs	r3, #8
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	220c      	movs	r2, #12
 80024a8:	2100      	movs	r1, #0
 80024aa:	0018      	movs	r0, r3
 80024ac:	f003 fa44 	bl	8005938 <memset>

	/******************* TIME DECODING *******************/

	while(input_data[idx] != 'G' || input_data[idx + 1] != 'P' || input_data[idx + 2] != 'G' || input_data[idx + 3] != 'G' || input_data[idx + 4] != 'A')
 80024b0:	e009      	b.n	80024c6 <decode_NMEA_message+0x36>
	{
		idx++;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	3301      	adds	r3, #1
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
		if(idx > 477)
 80024b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ba:	23ef      	movs	r3, #239	; 0xef
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	429a      	cmp	r2, r3
 80024c0:	db01      	blt.n	80024c6 <decode_NMEA_message+0x36>
			return FALSE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e219      	b.n	80028fa <decode_NMEA_message+0x46a>
	while(input_data[idx] != 'G' || input_data[idx + 1] != 'P' || input_data[idx + 2] != 'G' || input_data[idx + 3] != 'G' || input_data[idx + 4] != 'A')
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	18d3      	adds	r3, r2, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b47      	cmp	r3, #71	; 0x47
 80024d0:	d1ef      	bne.n	80024b2 <decode_NMEA_message+0x22>
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	3301      	adds	r3, #1
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	18d3      	adds	r3, r2, r3
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b50      	cmp	r3, #80	; 0x50
 80024de:	d1e8      	bne.n	80024b2 <decode_NMEA_message+0x22>
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	3302      	adds	r3, #2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	18d3      	adds	r3, r2, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b47      	cmp	r3, #71	; 0x47
 80024ec:	d1e1      	bne.n	80024b2 <decode_NMEA_message+0x22>
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	3303      	adds	r3, #3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	18d3      	adds	r3, r2, r3
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b47      	cmp	r3, #71	; 0x47
 80024fa:	d1da      	bne.n	80024b2 <decode_NMEA_message+0x22>
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	3304      	adds	r3, #4
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	18d3      	adds	r3, r2, r3
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b41      	cmp	r3, #65	; 0x41
 8002508:	d1d3      	bne.n	80024b2 <decode_NMEA_message+0x22>
	}

	idx += 6; // We also take in consideration the comma
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	3306      	adds	r3, #6
 800250e:	627b      	str	r3, [r7, #36]	; 0x24

	while(input_data[idx] != ',')
 8002510:	e00f      	b.n	8002532 <decode_NMEA_message+0xa2>
	{
		buffer[i] = input_data[idx];
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	18d3      	adds	r3, r2, r3
 8002518:	7819      	ldrb	r1, [r3, #0]
 800251a:	2308      	movs	r3, #8
 800251c:	18fa      	adds	r2, r7, r3
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	1c0a      	adds	r2, r1, #0
 8002524:	701a      	strb	r2, [r3, #0]
		idx++;
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	3301      	adds	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
		i++;
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	3301      	adds	r3, #1
 8002530:	623b      	str	r3, [r7, #32]
	while(input_data[idx] != ',')
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	18d3      	adds	r3, r2, r3
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b2c      	cmp	r3, #44	; 0x2c
 800253c:	d1e9      	bne.n	8002512 <decode_NMEA_message+0x82>
	}

	sscanf(buffer, "%d", &data);
 800253e:	2314      	movs	r3, #20
 8002540:	18fa      	adds	r2, r7, r3
 8002542:	49cd      	ldr	r1, [pc, #820]	; (8002878 <decode_NMEA_message+0x3e8>)
 8002544:	2408      	movs	r4, #8
 8002546:	193b      	adds	r3, r7, r4
 8002548:	0018      	movs	r0, r3
 800254a:	f003 f9cb 	bl	80058e4 <siscanf>

	gpgga->time.hr = data / 10000;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	49ca      	ldr	r1, [pc, #808]	; (800287c <decode_NMEA_message+0x3ec>)
 8002552:	0018      	movs	r0, r3
 8002554:	f7fd fe72 	bl	800023c <__divsi3>
 8002558:	0003      	movs	r3, r0
 800255a:	b2da      	uxtb	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	701a      	strb	r2, [r3, #0]
	gpgga->time.min = ((data / 100) % 100);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2164      	movs	r1, #100	; 0x64
 8002564:	0018      	movs	r0, r3
 8002566:	f7fd fe69 	bl	800023c <__divsi3>
 800256a:	0003      	movs	r3, r0
 800256c:	2164      	movs	r1, #100	; 0x64
 800256e:	0018      	movs	r0, r3
 8002570:	f7fd ff4a 	bl	8000408 <__aeabi_idivmod>
 8002574:	000b      	movs	r3, r1
 8002576:	b2da      	uxtb	r2, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	705a      	strb	r2, [r3, #1]
	gpgga->time.sec = data % 100;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2164      	movs	r1, #100	; 0x64
 8002580:	0018      	movs	r0, r3
 8002582:	f7fd ff41 	bl	8000408 <__aeabi_idivmod>
 8002586:	000b      	movs	r3, r1
 8002588:	b2da      	uxtb	r2, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	709a      	strb	r2, [r3, #2]

	memset(buffer,'\0',12);
 800258e:	193b      	adds	r3, r7, r4
 8002590:	220c      	movs	r2, #12
 8002592:	2100      	movs	r1, #0
 8002594:	0018      	movs	r0, r3
 8002596:	f003 f9cf 	bl	8005938 <memset>
 	i = 0; //reset the length counter
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
	idx++; //reach the first character of latitude value
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24

	/******************* LATITUDE DECODING *******************/

	while(input_data[idx] != '.')
 80025a4:	e00f      	b.n	80025c6 <decode_NMEA_message+0x136>
	{
		buffer[i] = input_data[idx];
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	18d3      	adds	r3, r2, r3
 80025ac:	7819      	ldrb	r1, [r3, #0]
 80025ae:	2308      	movs	r3, #8
 80025b0:	18fa      	adds	r2, r7, r3
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	18d3      	adds	r3, r2, r3
 80025b6:	1c0a      	adds	r2, r1, #0
 80025b8:	701a      	strb	r2, [r3, #0]
		idx++;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	3301      	adds	r3, #1
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
		i++;
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	3301      	adds	r3, #1
 80025c4:	623b      	str	r3, [r7, #32]
	while(input_data[idx] != '.')
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	18d3      	adds	r3, r2, r3
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b2e      	cmp	r3, #46	; 0x2e
 80025d0:	d1e9      	bne.n	80025a6 <decode_NMEA_message+0x116>
	}

	sscanf(buffer, "%d", &integral_part);
 80025d2:	231c      	movs	r3, #28
 80025d4:	18fa      	adds	r2, r7, r3
 80025d6:	49a8      	ldr	r1, [pc, #672]	; (8002878 <decode_NMEA_message+0x3e8>)
 80025d8:	2408      	movs	r4, #8
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	0018      	movs	r0, r3
 80025de:	f003 f981 	bl	80058e4 <siscanf>
	i = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
	idx++; // pass the point
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3301      	adds	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
	memset(buffer,'\0',12);
 80025ec:	193b      	adds	r3, r7, r4
 80025ee:	220c      	movs	r2, #12
 80025f0:	2100      	movs	r1, #0
 80025f2:	0018      	movs	r0, r3
 80025f4:	f003 f9a0 	bl	8005938 <memset>

	while(input_data[idx] != ',')
 80025f8:	e00f      	b.n	800261a <decode_NMEA_message+0x18a>
	{
		buffer[i] = input_data[idx];
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	18d3      	adds	r3, r2, r3
 8002600:	7819      	ldrb	r1, [r3, #0]
 8002602:	2308      	movs	r3, #8
 8002604:	18fa      	adds	r2, r7, r3
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	18d3      	adds	r3, r2, r3
 800260a:	1c0a      	adds	r2, r1, #0
 800260c:	701a      	strb	r2, [r3, #0]
		idx++;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
		i++;
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	3301      	adds	r3, #1
 8002618:	623b      	str	r3, [r7, #32]
	while(input_data[idx] != ',')
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	18d3      	adds	r3, r2, r3
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b2c      	cmp	r3, #44	; 0x2c
 8002624:	d1e9      	bne.n	80025fa <decode_NMEA_message+0x16a>
	}

	sscanf(buffer, "%d", &fractional_part);
 8002626:	2318      	movs	r3, #24
 8002628:	18fa      	adds	r2, r7, r3
 800262a:	4993      	ldr	r1, [pc, #588]	; (8002878 <decode_NMEA_message+0x3e8>)
 800262c:	2608      	movs	r6, #8
 800262e:	19bb      	adds	r3, r7, r6
 8002630:	0018      	movs	r0, r3
 8002632:	f003 f957 	bl	80058e4 <siscanf>


	gpgga->location.latitude = integral_part *pow(10, strlen(buffer)) + fractional_part;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	0018      	movs	r0, r3
 800263a:	f7ff fe23 	bl	8002284 <__aeabi_i2d>
 800263e:	0004      	movs	r4, r0
 8002640:	000d      	movs	r5, r1
 8002642:	19bb      	adds	r3, r7, r6
 8002644:	0018      	movs	r0, r3
 8002646:	f7fd fd5d 	bl	8000104 <strlen>
 800264a:	0003      	movs	r3, r0
 800264c:	0018      	movs	r0, r3
 800264e:	f7ff fe49 	bl	80022e4 <__aeabi_ui2d>
 8002652:	0002      	movs	r2, r0
 8002654:	000b      	movs	r3, r1
 8002656:	2000      	movs	r0, #0
 8002658:	4989      	ldr	r1, [pc, #548]	; (8002880 <decode_NMEA_message+0x3f0>)
 800265a:	f004 fab3 	bl	8006bc4 <pow>
 800265e:	0002      	movs	r2, r0
 8002660:	000b      	movs	r3, r1
 8002662:	0020      	movs	r0, r4
 8002664:	0029      	movs	r1, r5
 8002666:	f7fe ffab 	bl	80015c0 <__aeabi_dmul>
 800266a:	0002      	movs	r2, r0
 800266c:	000b      	movs	r3, r1
 800266e:	0014      	movs	r4, r2
 8002670:	001d      	movs	r5, r3
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff fe05 	bl	8002284 <__aeabi_i2d>
 800267a:	0002      	movs	r2, r0
 800267c:	000b      	movs	r3, r1
 800267e:	0020      	movs	r0, r4
 8002680:	0029      	movs	r1, r5
 8002682:	f7fe f843 	bl	800070c <__aeabi_dadd>
 8002686:	0002      	movs	r2, r0
 8002688:	000b      	movs	r3, r1
 800268a:	0010      	movs	r0, r2
 800268c:	0019      	movs	r1, r3
 800268e:	f7ff fe4f 	bl	8002330 <__aeabi_d2f>
 8002692:	1c02      	adds	r2, r0, #0
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	605a      	str	r2, [r3, #4]

	idx++;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	3301      	adds	r3, #1
 800269c:	627b      	str	r3, [r7, #36]	; 0x24

	gpgga->location.NS = input_data[idx];
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	721a      	strb	r2, [r3, #8]

	idx += 2; //reach the longitude
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	3302      	adds	r3, #2
 80026ae:	627b      	str	r3, [r7, #36]	; 0x24

	/******************* LONGITUDE DECODING *******************/
	memset(buffer,'\0',12);
 80026b0:	19bb      	adds	r3, r7, r6
 80026b2:	220c      	movs	r2, #12
 80026b4:	2100      	movs	r1, #0
 80026b6:	0018      	movs	r0, r3
 80026b8:	f003 f93e 	bl	8005938 <memset>
	i = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]

	while(input_data[idx] != '.')
 80026c0:	e00f      	b.n	80026e2 <decode_NMEA_message+0x252>
	{
		buffer[i] = input_data[idx];
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	18d3      	adds	r3, r2, r3
 80026c8:	7819      	ldrb	r1, [r3, #0]
 80026ca:	2308      	movs	r3, #8
 80026cc:	18fa      	adds	r2, r7, r3
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	18d3      	adds	r3, r2, r3
 80026d2:	1c0a      	adds	r2, r1, #0
 80026d4:	701a      	strb	r2, [r3, #0]
		idx++;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	3301      	adds	r3, #1
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
		i++;
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	3301      	adds	r3, #1
 80026e0:	623b      	str	r3, [r7, #32]
	while(input_data[idx] != '.')
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	18d3      	adds	r3, r2, r3
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b2e      	cmp	r3, #46	; 0x2e
 80026ec:	d1e9      	bne.n	80026c2 <decode_NMEA_message+0x232>
	}

	i = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	623b      	str	r3, [r7, #32]
	idx++; // pass the point
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	3301      	adds	r3, #1
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24

	sscanf(buffer, "%d", &integral_part);
 80026f8:	231c      	movs	r3, #28
 80026fa:	18fa      	adds	r2, r7, r3
 80026fc:	495e      	ldr	r1, [pc, #376]	; (8002878 <decode_NMEA_message+0x3e8>)
 80026fe:	2408      	movs	r4, #8
 8002700:	193b      	adds	r3, r7, r4
 8002702:	0018      	movs	r0, r3
 8002704:	f003 f8ee 	bl	80058e4 <siscanf>
	memset(buffer, '\0', 12);
 8002708:	193b      	adds	r3, r7, r4
 800270a:	220c      	movs	r2, #12
 800270c:	2100      	movs	r1, #0
 800270e:	0018      	movs	r0, r3
 8002710:	f003 f912 	bl	8005938 <memset>

	while(input_data[idx] != ',')
 8002714:	e00f      	b.n	8002736 <decode_NMEA_message+0x2a6>
	{
		buffer[i] = input_data[idx];
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	18d3      	adds	r3, r2, r3
 800271c:	7819      	ldrb	r1, [r3, #0]
 800271e:	2308      	movs	r3, #8
 8002720:	18fa      	adds	r2, r7, r3
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	18d3      	adds	r3, r2, r3
 8002726:	1c0a      	adds	r2, r1, #0
 8002728:	701a      	strb	r2, [r3, #0]
		idx++;
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	3301      	adds	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
		i++;
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	3301      	adds	r3, #1
 8002734:	623b      	str	r3, [r7, #32]
	while(input_data[idx] != ',')
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	18d3      	adds	r3, r2, r3
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b2c      	cmp	r3, #44	; 0x2c
 8002740:	d1e9      	bne.n	8002716 <decode_NMEA_message+0x286>
	}

	sscanf(buffer, "%d", &fractional_part);
 8002742:	2318      	movs	r3, #24
 8002744:	18fa      	adds	r2, r7, r3
 8002746:	494c      	ldr	r1, [pc, #304]	; (8002878 <decode_NMEA_message+0x3e8>)
 8002748:	2608      	movs	r6, #8
 800274a:	19bb      	adds	r3, r7, r6
 800274c:	0018      	movs	r0, r3
 800274e:	f003 f8c9 	bl	80058e4 <siscanf>


	gpgga->location.longitude = integral_part *pow(10, strlen(buffer)) + fractional_part;
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	0018      	movs	r0, r3
 8002756:	f7ff fd95 	bl	8002284 <__aeabi_i2d>
 800275a:	0004      	movs	r4, r0
 800275c:	000d      	movs	r5, r1
 800275e:	19bb      	adds	r3, r7, r6
 8002760:	0018      	movs	r0, r3
 8002762:	f7fd fccf 	bl	8000104 <strlen>
 8002766:	0003      	movs	r3, r0
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff fdbb 	bl	80022e4 <__aeabi_ui2d>
 800276e:	0002      	movs	r2, r0
 8002770:	000b      	movs	r3, r1
 8002772:	2000      	movs	r0, #0
 8002774:	4942      	ldr	r1, [pc, #264]	; (8002880 <decode_NMEA_message+0x3f0>)
 8002776:	f004 fa25 	bl	8006bc4 <pow>
 800277a:	0002      	movs	r2, r0
 800277c:	000b      	movs	r3, r1
 800277e:	0020      	movs	r0, r4
 8002780:	0029      	movs	r1, r5
 8002782:	f7fe ff1d 	bl	80015c0 <__aeabi_dmul>
 8002786:	0002      	movs	r2, r0
 8002788:	000b      	movs	r3, r1
 800278a:	0014      	movs	r4, r2
 800278c:	001d      	movs	r5, r3
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff fd77 	bl	8002284 <__aeabi_i2d>
 8002796:	0002      	movs	r2, r0
 8002798:	000b      	movs	r3, r1
 800279a:	0020      	movs	r0, r4
 800279c:	0029      	movs	r1, r5
 800279e:	f7fd ffb5 	bl	800070c <__aeabi_dadd>
 80027a2:	0002      	movs	r2, r0
 80027a4:	000b      	movs	r3, r1
 80027a6:	0010      	movs	r0, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	f7ff fdc1 	bl	8002330 <__aeabi_d2f>
 80027ae:	1c02      	adds	r2, r0, #0
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	60da      	str	r2, [r3, #12]

	idx++;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	3301      	adds	r3, #1
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24

	gpgga->location.EW = input_data[idx];
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	18d3      	adds	r3, r2, r3
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	741a      	strb	r2, [r3, #16]

	idx += 2; //reach the fix quality
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	3302      	adds	r3, #2
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24

	memset(buffer,'\0',12);
 80027cc:	19bb      	adds	r3, r7, r6
 80027ce:	220c      	movs	r2, #12
 80027d0:	2100      	movs	r1, #0
 80027d2:	0018      	movs	r0, r3
 80027d4:	f003 f8b0 	bl	8005938 <memset>
	i = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]

	/******************* Fix Quality DECODING *******************/

	sscanf(input_data[idx], "%d", &gpgga->fix_quality );
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	18d3      	adds	r3, r2, r3
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	0018      	movs	r0, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	3314      	adds	r3, #20
 80027ea:	001a      	movs	r2, r3
 80027ec:	4b22      	ldr	r3, [pc, #136]	; (8002878 <decode_NMEA_message+0x3e8>)
 80027ee:	0019      	movs	r1, r3
 80027f0:	f003 f878 	bl	80058e4 <siscanf>

	if(gpgga->fix_quality < 1)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	7d1b      	ldrb	r3, [r3, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <decode_NMEA_message+0x370>
		return FALSE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e07c      	b.n	80028fa <decode_NMEA_message+0x46a>

	idx += 2; //reach the number of satellites
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	3302      	adds	r3, #2
 8002804:	627b      	str	r3, [r7, #36]	; 0x24

	/******************* Number of satellites DECODING *******************/
	while(input_data[idx] != ',')
 8002806:	e00f      	b.n	8002828 <decode_NMEA_message+0x398>
	{
		buffer[i] = input_data[idx];
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	18d3      	adds	r3, r2, r3
 800280e:	7819      	ldrb	r1, [r3, #0]
 8002810:	2308      	movs	r3, #8
 8002812:	18fa      	adds	r2, r7, r3
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	18d3      	adds	r3, r2, r3
 8002818:	1c0a      	adds	r2, r1, #0
 800281a:	701a      	strb	r2, [r3, #0]
		idx++;
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	3301      	adds	r3, #1
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
		i++;
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	3301      	adds	r3, #1
 8002826:	623b      	str	r3, [r7, #32]
	while(input_data[idx] != ',')
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	18d3      	adds	r3, r2, r3
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b2c      	cmp	r3, #44	; 0x2c
 8002832:	d1e9      	bne.n	8002808 <decode_NMEA_message+0x378>
	}

	sscanf(buffer, "%d", &gpgga->nr_of_satellites );
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	3318      	adds	r3, #24
 8002838:	001a      	movs	r2, r3
 800283a:	490f      	ldr	r1, [pc, #60]	; (8002878 <decode_NMEA_message+0x3e8>)
 800283c:	2408      	movs	r4, #8
 800283e:	193b      	adds	r3, r7, r4
 8002840:	0018      	movs	r0, r3
 8002842:	f003 f84f 	bl	80058e4 <siscanf>

	idx += 2;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	3302      	adds	r3, #2
 800284a:	627b      	str	r3, [r7, #36]	; 0x24

	memset(buffer,'\0',12);
 800284c:	193b      	adds	r3, r7, r4
 800284e:	220c      	movs	r2, #12
 8002850:	2100      	movs	r1, #0
 8002852:	0018      	movs	r0, r3
 8002854:	f003 f870 	bl	8005938 <memset>
	i = 0;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]

	//get over next value, not needed
	while(input_data[idx] != ',')
 800285c:	e002      	b.n	8002864 <decode_NMEA_message+0x3d4>
	{
		idx++;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	3301      	adds	r3, #1
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
	while(input_data[idx] != ',')
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	18d3      	adds	r3, r2, r3
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b2c      	cmp	r3, #44	; 0x2c
 800286e:	d1f6      	bne.n	800285e <decode_NMEA_message+0x3ce>
	}
	idx++;
 8002870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002872:	3301      	adds	r3, #1
 8002874:	627b      	str	r3, [r7, #36]	; 0x24

	while(input_data[idx] != '.')
 8002876:	e015      	b.n	80028a4 <decode_NMEA_message+0x414>
 8002878:	080079f8 	.word	0x080079f8
 800287c:	00002710 	.word	0x00002710
 8002880:	40240000 	.word	0x40240000
	{
		buffer[i] = input_data[idx];
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	18d3      	adds	r3, r2, r3
 800288a:	7819      	ldrb	r1, [r3, #0]
 800288c:	2308      	movs	r3, #8
 800288e:	18fa      	adds	r2, r7, r3
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	18d3      	adds	r3, r2, r3
 8002894:	1c0a      	adds	r2, r1, #0
 8002896:	701a      	strb	r2, [r3, #0]
		idx++;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	3301      	adds	r3, #1
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
		i++;
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	3301      	adds	r3, #1
 80028a2:	623b      	str	r3, [r7, #32]
	while(input_data[idx] != '.')
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	18d3      	adds	r3, r2, r3
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b2e      	cmp	r3, #46	; 0x2e
 80028ae:	d1e9      	bne.n	8002884 <decode_NMEA_message+0x3f4>
	}

	sscanf(buffer, "%d", &integral_part);
 80028b0:	231c      	movs	r3, #28
 80028b2:	18fa      	adds	r2, r7, r3
 80028b4:	4913      	ldr	r1, [pc, #76]	; (8002904 <decode_NMEA_message+0x474>)
 80028b6:	2308      	movs	r3, #8
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	0018      	movs	r0, r3
 80028bc:	f003 f812 	bl	80058e4 <siscanf>
	idx++;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3301      	adds	r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24

	sscanf(input_data[idx], "%d", &fractional_part);
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	18d3      	adds	r3, r2, r3
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	0018      	movs	r0, r3
 80028d0:	2318      	movs	r3, #24
 80028d2:	18fa      	adds	r2, r7, r3
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <decode_NMEA_message+0x474>)
 80028d6:	0019      	movs	r1, r3
 80028d8:	f003 f804 	bl	80058e4 <siscanf>

	gpgga->altitude = integral_part * 10 + fractional_part;
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	0013      	movs	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	001a      	movs	r2, r3
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	18d3      	adds	r3, r2, r3
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fd febb 	bl	8000668 <__aeabi_i2f>
 80028f2:	1c02      	adds	r2, r0, #0
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	621a      	str	r2, [r3, #32]


	return TRUE;
 80028f8:	2301      	movs	r3, #1


}
 80028fa:	0018      	movs	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b00b      	add	sp, #44	; 0x2c
 8002900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	080079f8 	.word	0x080079f8

08002908 <SysTick_Handler>:
#include "main.h"

extern UART_HandleTypeDef uart_gps;

void SysTick_Handler (void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800290c:	f000 fb0a 	bl	8002f24 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8002910:	f000 fc02 	bl	8003118 <HAL_SYSTICK_IRQHandler>
}
 8002914:	46c0      	nop			; (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&uart_gps);
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <USART1_IRQHandler+0x14>)
 8002922:	0018      	movs	r0, r3
 8002924:	f001 f846 	bl	80039b4 <HAL_UART_IRQHandler>
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	20000140 	.word	0x20000140

08002934 <main>:
char loading_console_message[40] = "GPS MODULE IS SEARCHING SIGNAL \n\r";

GPGGA_struct gpgga;

int main()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
 	HAL_Init();
 8002938:	f000 fa8a 	bl	8002e50 <HAL_Init>
	UART_Init();
 800293c:	f000 f818 	bl	8002970 <UART_Init>

	HAL_UART_Transmit(&console_output,(uint8_t*)&start_console_message, 24, HAL_UART_TIMEOUT_VALUE);
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <main+0x28>)
 8002942:	4907      	ldr	r1, [pc, #28]	; (8002960 <main+0x2c>)
 8002944:	4807      	ldr	r0, [pc, #28]	; (8002964 <main+0x30>)
 8002946:	2218      	movs	r2, #24
 8002948:	f000 ff2a 	bl	80037a0 <HAL_UART_Transmit>


	while(1)
	{
		HAL_UART_Receive_IT(&uart_gps,(uint8_t*)&data, 700);
 800294c:	23af      	movs	r3, #175	; 0xaf
 800294e:	009a      	lsls	r2, r3, #2
 8002950:	4905      	ldr	r1, [pc, #20]	; (8002968 <main+0x34>)
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <main+0x38>)
 8002954:	0018      	movs	r0, r3
 8002956:	f000 ffc7 	bl	80038e8 <HAL_UART_Receive_IT>
 800295a:	e7f7      	b.n	800294c <main+0x18>
 800295c:	01ffffff 	.word	0x01ffffff
 8002960:	20000000 	.word	0x20000000
 8002964:	200000ac 	.word	0x200000ac
 8002968:	200001d4 	.word	0x200001d4
 800296c:	20000140 	.word	0x20000140

08002970 <UART_Init>:
	}

}

void UART_Init()
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	console_output.Instance = USART2;
 8002974:	4b1f      	ldr	r3, [pc, #124]	; (80029f4 <UART_Init+0x84>)
 8002976:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <UART_Init+0x88>)
 8002978:	601a      	str	r2, [r3, #0]
	console_output.Init.BaudRate = 115200;
 800297a:	4b1e      	ldr	r3, [pc, #120]	; (80029f4 <UART_Init+0x84>)
 800297c:	22e1      	movs	r2, #225	; 0xe1
 800297e:	0252      	lsls	r2, r2, #9
 8002980:	605a      	str	r2, [r3, #4]
	console_output.Init.Mode = UART_MODE_TX;
 8002982:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <UART_Init+0x84>)
 8002984:	2208      	movs	r2, #8
 8002986:	615a      	str	r2, [r3, #20]
	console_output.Init.Parity = UART_PARITY_NONE;
 8002988:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <UART_Init+0x84>)
 800298a:	2200      	movs	r2, #0
 800298c:	611a      	str	r2, [r3, #16]
	console_output.Init.StopBits = UART_STOPBITS_1;
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <UART_Init+0x84>)
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
	console_output.Init.WordLength = UART_WORDLENGTH_8B;
 8002994:	4b17      	ldr	r3, [pc, #92]	; (80029f4 <UART_Init+0x84>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
	console_output.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <UART_Init+0x84>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&console_output) != HAL_OK)
 80029a0:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <UART_Init+0x84>)
 80029a2:	0018      	movs	r0, r3
 80029a4:	f000 fea6 	bl	80036f4 <HAL_UART_Init>
 80029a8:	1e03      	subs	r3, r0, #0
 80029aa:	d001      	beq.n	80029b0 <UART_Init+0x40>
	{
		Error_handler();
 80029ac:	f000 f82a 	bl	8002a04 <Error_handler>
	}

	uart_gps.Instance = USART1;
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <UART_Init+0x8c>)
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <UART_Init+0x90>)
 80029b4:	601a      	str	r2, [r3, #0]
	uart_gps.Init.BaudRate = 9600;
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <UART_Init+0x8c>)
 80029b8:	2296      	movs	r2, #150	; 0x96
 80029ba:	0192      	lsls	r2, r2, #6
 80029bc:	605a      	str	r2, [r3, #4]
	uart_gps.Init.Mode = UART_MODE_TX_RX;
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <UART_Init+0x8c>)
 80029c0:	220c      	movs	r2, #12
 80029c2:	615a      	str	r2, [r3, #20]
	uart_gps.Init.Parity = UART_PARITY_NONE;
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <UART_Init+0x8c>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
	uart_gps.Init.StopBits = UART_STOPBITS_1;
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <UART_Init+0x8c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
	uart_gps.Init.WordLength = UART_WORDLENGTH_8B;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <UART_Init+0x8c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
	uart_gps.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <UART_Init+0x8c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&uart_gps) != HAL_OK)
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <UART_Init+0x8c>)
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 fe88 	bl	80036f4 <HAL_UART_Init>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d001      	beq.n	80029ec <UART_Init+0x7c>
	{
		Error_handler();
 80029e8:	f000 f80c 	bl	8002a04 <Error_handler>
	}
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	200000ac 	.word	0x200000ac
 80029f8:	40004400 	.word	0x40004400
 80029fc:	20000140 	.word	0x20000140
 8002a00:	40013800 	.word	0x40013800

08002a04 <Error_handler>:

void Error_handler()
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	while(1);
 8002a08:	e7fe      	b.n	8002a08 <Error_handler+0x4>
	...

08002a0c <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

	if(decode_NMEA_message(data, &gpgga) != FALSE)
 8002a14:	4a06      	ldr	r2, [pc, #24]	; (8002a30 <HAL_UART_RxCpltCallback+0x24>)
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <HAL_UART_RxCpltCallback+0x28>)
 8002a18:	0011      	movs	r1, r2
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7ff fd38 	bl	8002490 <decode_NMEA_message>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d001      	beq.n	8002a28 <HAL_UART_RxCpltCallback+0x1c>
	UART_GPS();
 8002a24:	f000 f808 	bl	8002a38 <UART_GPS>
		//	HAL_UART_Transmit(&console_output, (uint8_t*)&data, 700, HAL_UART_TIMEOUT_VALUE);

}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b002      	add	sp, #8
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	200003fc 	.word	0x200003fc
 8002a34:	200001d4 	.word	0x200001d4

08002a38 <UART_GPS>:

void UART_GPS()
{
 8002a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a3a:	b09d      	sub	sp, #116	; 0x74
 8002a3c:	af00      	add	r7, sp, #0
	char start_gps_message[13] = "GPS data: \n";
 8002a3e:	2660      	movs	r6, #96	; 0x60
 8002a40:	19b9      	adds	r1, r7, r6
 8002a42:	4a7d      	ldr	r2, [pc, #500]	; (8002c38 <UART_GPS+0x200>)
 8002a44:	000b      	movs	r3, r1
 8002a46:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002a48:	c331      	stmia	r3!, {r0, r4, r5}
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	730b      	strb	r3, [r1, #12]
	char time_message[6] = "Time:";
 8002a4e:	2358      	movs	r3, #88	; 0x58
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	4a7a      	ldr	r2, [pc, #488]	; (8002c3c <UART_GPS+0x204>)
 8002a54:	6811      	ldr	r1, [r2, #0]
 8002a56:	6019      	str	r1, [r3, #0]
 8002a58:	8892      	ldrh	r2, [r2, #4]
 8002a5a:	809a      	strh	r2, [r3, #4]
	char latitude_message[12] = "\nLatitude:";
 8002a5c:	214c      	movs	r1, #76	; 0x4c
 8002a5e:	1879      	adds	r1, r7, r1
 8002a60:	4a77      	ldr	r2, [pc, #476]	; (8002c40 <UART_GPS+0x208>)
 8002a62:	000b      	movs	r3, r1
 8002a64:	ca11      	ldmia	r2!, {r0, r4}
 8002a66:	c311      	stmia	r3!, {r0, r4}
 8002a68:	8810      	ldrh	r0, [r2, #0]
 8002a6a:	8018      	strh	r0, [r3, #0]
 8002a6c:	7892      	ldrb	r2, [r2, #2]
 8002a6e:	709a      	strb	r2, [r3, #2]
 8002a70:	230b      	movs	r3, #11
 8002a72:	2200      	movs	r2, #0
 8002a74:	54ca      	strb	r2, [r1, r3]
	char longitude_message[13] = "\nLongitude:";
 8002a76:	213c      	movs	r1, #60	; 0x3c
 8002a78:	1879      	adds	r1, r7, r1
 8002a7a:	4a72      	ldr	r2, [pc, #456]	; (8002c44 <UART_GPS+0x20c>)
 8002a7c:	000b      	movs	r3, r1
 8002a7e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002a80:	c331      	stmia	r3!, {r0, r4, r5}
 8002a82:	2300      	movs	r3, #0
 8002a84:	730b      	strb	r3, [r1, #12]
	char nr_satttelites_message[24] = "\nNumber of satellites:";
 8002a86:	2124      	movs	r1, #36	; 0x24
 8002a88:	1879      	adds	r1, r7, r1
 8002a8a:	4a6f      	ldr	r2, [pc, #444]	; (8002c48 <UART_GPS+0x210>)
 8002a8c:	000b      	movs	r3, r1
 8002a8e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002a90:	c331      	stmia	r3!, {r0, r4, r5}
 8002a92:	ca11      	ldmia	r2!, {r0, r4}
 8002a94:	c311      	stmia	r3!, {r0, r4}
 8002a96:	8810      	ldrh	r0, [r2, #0]
 8002a98:	8018      	strh	r0, [r3, #0]
 8002a9a:	7892      	ldrb	r2, [r2, #2]
 8002a9c:	709a      	strb	r2, [r3, #2]
 8002a9e:	2317      	movs	r3, #23
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	54ca      	strb	r2, [r1, r3]
	char altitude[12] = "\nAltitude:";
 8002aa4:	2118      	movs	r1, #24
 8002aa6:	1879      	adds	r1, r7, r1
 8002aa8:	4a68      	ldr	r2, [pc, #416]	; (8002c4c <UART_GPS+0x214>)
 8002aaa:	000b      	movs	r3, r1
 8002aac:	ca11      	ldmia	r2!, {r0, r4}
 8002aae:	c311      	stmia	r3!, {r0, r4}
 8002ab0:	8810      	ldrh	r0, [r2, #0]
 8002ab2:	8018      	strh	r0, [r3, #0]
 8002ab4:	7892      	ldrb	r2, [r2, #2]
 8002ab6:	709a      	strb	r2, [r3, #2]
 8002ab8:	230b      	movs	r3, #11
 8002aba:	2200      	movs	r2, #0
 8002abc:	54ca      	strb	r2, [r1, r3]

	char a[10], b[10];
	memset(a,'\0',12);
 8002abe:	240c      	movs	r4, #12
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f002 ff36 	bl	8005938 <memset>
	memset(b,'\0',12);
 8002acc:	003b      	movs	r3, r7
 8002ace:	220c      	movs	r2, #12
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f002 ff30 	bl	8005938 <memset>




	HAL_UART_Transmit(&console_output, start_gps_message, 12, HAL_UART_TIMEOUT_VALUE);
 8002ad8:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <UART_GPS+0x218>)
 8002ada:	19b9      	adds	r1, r7, r6
 8002adc:	485d      	ldr	r0, [pc, #372]	; (8002c54 <UART_GPS+0x21c>)
 8002ade:	220c      	movs	r2, #12
 8002ae0:	f000 fe5e 	bl	80037a0 <HAL_UART_Transmit>

	HAL_UART_Transmit(&console_output, time_message, 6, HAL_UART_TIMEOUT_VALUE);
 8002ae4:	4b5a      	ldr	r3, [pc, #360]	; (8002c50 <UART_GPS+0x218>)
 8002ae6:	2258      	movs	r2, #88	; 0x58
 8002ae8:	18b9      	adds	r1, r7, r2
 8002aea:	485a      	ldr	r0, [pc, #360]	; (8002c54 <UART_GPS+0x21c>)
 8002aec:	2206      	movs	r2, #6
 8002aee:	f000 fe57 	bl	80037a0 <HAL_UART_Transmit>

	sprintf(b, "%d", gpgga.time.hr);
 8002af2:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <UART_GPS+0x220>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	001a      	movs	r2, r3
 8002af8:	4958      	ldr	r1, [pc, #352]	; (8002c5c <UART_GPS+0x224>)
 8002afa:	003b      	movs	r3, r7
 8002afc:	0018      	movs	r0, r3
 8002afe:	f002 fed1 	bl	80058a4 <siprintf>
	if(gpgga.time.hr < 10)
 8002b02:	4b55      	ldr	r3, [pc, #340]	; (8002c58 <UART_GPS+0x220>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b09      	cmp	r3, #9
 8002b08:	d80e      	bhi.n	8002b28 <UART_GPS+0xf0>
	{
		strcat(a,"0");
 8002b0a:	193b      	adds	r3, r7, r4
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fd faf9 	bl	8000104 <strlen>
 8002b12:	0003      	movs	r3, r0
 8002b14:	001a      	movs	r2, r3
 8002b16:	193b      	adds	r3, r7, r4
 8002b18:	189a      	adds	r2, r3, r2
 8002b1a:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <UART_GPS+0x228>)
 8002b1c:	0010      	movs	r0, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	2302      	movs	r3, #2
 8002b22:	001a      	movs	r2, r3
 8002b24:	f002 ff4a 	bl	80059bc <memcpy>
	}

	strcat(a,b);
 8002b28:	003a      	movs	r2, r7
 8002b2a:	240c      	movs	r4, #12
 8002b2c:	193b      	adds	r3, r7, r4
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f002 ff09 	bl	8005948 <strcat>
	strcat(a,":");
 8002b36:	193b      	adds	r3, r7, r4
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7fd fae3 	bl	8000104 <strlen>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	001a      	movs	r2, r3
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	189a      	adds	r2, r3, r2
 8002b46:	4b47      	ldr	r3, [pc, #284]	; (8002c64 <UART_GPS+0x22c>)
 8002b48:	0010      	movs	r0, r2
 8002b4a:	0019      	movs	r1, r3
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	001a      	movs	r2, r3
 8002b50:	f002 ff34 	bl	80059bc <memcpy>

	sprintf(b, "%d", gpgga.time.min);
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <UART_GPS+0x220>)
 8002b56:	785b      	ldrb	r3, [r3, #1]
 8002b58:	001a      	movs	r2, r3
 8002b5a:	4940      	ldr	r1, [pc, #256]	; (8002c5c <UART_GPS+0x224>)
 8002b5c:	003b      	movs	r3, r7
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f002 fea0 	bl	80058a4 <siprintf>
	if(gpgga.time.min < 10)
 8002b64:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <UART_GPS+0x220>)
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	2b09      	cmp	r3, #9
 8002b6a:	d80e      	bhi.n	8002b8a <UART_GPS+0x152>
	{
		strcat(a,"0");
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7fd fac8 	bl	8000104 <strlen>
 8002b74:	0003      	movs	r3, r0
 8002b76:	001a      	movs	r2, r3
 8002b78:	193b      	adds	r3, r7, r4
 8002b7a:	189a      	adds	r2, r3, r2
 8002b7c:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <UART_GPS+0x228>)
 8002b7e:	0010      	movs	r0, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	2302      	movs	r3, #2
 8002b84:	001a      	movs	r2, r3
 8002b86:	f002 ff19 	bl	80059bc <memcpy>
	}

	strcat(a,b);
 8002b8a:	003a      	movs	r2, r7
 8002b8c:	240c      	movs	r4, #12
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	0011      	movs	r1, r2
 8002b92:	0018      	movs	r0, r3
 8002b94:	f002 fed8 	bl	8005948 <strcat>
	strcat(a,":");
 8002b98:	193b      	adds	r3, r7, r4
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7fd fab2 	bl	8000104 <strlen>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	193b      	adds	r3, r7, r4
 8002ba6:	189a      	adds	r2, r3, r2
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <UART_GPS+0x22c>)
 8002baa:	0010      	movs	r0, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	2302      	movs	r3, #2
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	f002 ff03 	bl	80059bc <memcpy>

	sprintf(b, "%d", gpgga.time.sec);
 8002bb6:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <UART_GPS+0x220>)
 8002bb8:	789b      	ldrb	r3, [r3, #2]
 8002bba:	001a      	movs	r2, r3
 8002bbc:	4927      	ldr	r1, [pc, #156]	; (8002c5c <UART_GPS+0x224>)
 8002bbe:	003b      	movs	r3, r7
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f002 fe6f 	bl	80058a4 <siprintf>
	if(gpgga.time.sec < 10)
 8002bc6:	4b24      	ldr	r3, [pc, #144]	; (8002c58 <UART_GPS+0x220>)
 8002bc8:	789b      	ldrb	r3, [r3, #2]
 8002bca:	2b09      	cmp	r3, #9
 8002bcc:	d80e      	bhi.n	8002bec <UART_GPS+0x1b4>
	{
		strcat(a,"0");
 8002bce:	193b      	adds	r3, r7, r4
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7fd fa97 	bl	8000104 <strlen>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	001a      	movs	r2, r3
 8002bda:	193b      	adds	r3, r7, r4
 8002bdc:	189a      	adds	r2, r3, r2
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <UART_GPS+0x228>)
 8002be0:	0010      	movs	r0, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	2302      	movs	r3, #2
 8002be6:	001a      	movs	r2, r3
 8002be8:	f002 fee8 	bl	80059bc <memcpy>
	}

	strcat(a,b);
 8002bec:	003a      	movs	r2, r7
 8002bee:	240c      	movs	r4, #12
 8002bf0:	193b      	adds	r3, r7, r4
 8002bf2:	0011      	movs	r1, r2
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f002 fea7 	bl	8005948 <strcat>
	strcat(a,"\n");
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fd fa81 	bl	8000104 <strlen>
 8002c02:	0003      	movs	r3, r0
 8002c04:	001a      	movs	r2, r3
 8002c06:	193b      	adds	r3, r7, r4
 8002c08:	189a      	adds	r2, r3, r2
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <UART_GPS+0x230>)
 8002c0c:	0010      	movs	r0, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	2302      	movs	r3, #2
 8002c12:	001a      	movs	r2, r3
 8002c14:	f002 fed2 	bl	80059bc <memcpy>

	HAL_UART_Transmit(&console_output, a, strlen(a), HAL_UART_TIMEOUT_VALUE);
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7fd fa72 	bl	8000104 <strlen>
 8002c20:	0003      	movs	r3, r0
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <UART_GPS+0x218>)
 8002c26:	1939      	adds	r1, r7, r4
 8002c28:	480a      	ldr	r0, [pc, #40]	; (8002c54 <UART_GPS+0x21c>)
 8002c2a:	f000 fdb9 	bl	80037a0 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&console_output, latitude_message, 12, HAL_UART_TIMEOUT_VALUE);
	//HAL_UART_Transmit(&console_output, gpgga.location.latitude, 12, HAL_UART_TIMEOUT_VALUE);



}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b01d      	add	sp, #116	; 0x74
 8002c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	08007a0c 	.word	0x08007a0c
 8002c3c:	08007a1c 	.word	0x08007a1c
 8002c40:	08007a24 	.word	0x08007a24
 8002c44:	08007a30 	.word	0x08007a30
 8002c48:	08007a40 	.word	0x08007a40
 8002c4c:	08007a58 	.word	0x08007a58
 8002c50:	01ffffff 	.word	0x01ffffff
 8002c54:	200000ac 	.word	0x200000ac
 8002c58:	200003fc 	.word	0x200003fc
 8002c5c:	080079fc 	.word	0x080079fc
 8002c60:	08007a00 	.word	0x08007a00
 8002c64:	08007a04 	.word	0x08007a04
 8002c68:	08007a08 	.word	0x08007a08

08002c6c <HAL_MspInit>:
 *      Author: lorin
 */
#include "main.h"

void HAL_MspInit(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor


	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <HAL_MspInit+0x18>)
 8002c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <HAL_MspInit+0x18>)
 8002c76:	21e0      	movs	r1, #224	; 0xe0
 8002c78:	02c9      	lsls	r1, r1, #11
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	625a      	str	r2, [r3, #36]	; 0x24

}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b08d      	sub	sp, #52	; 0x34
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;

  /********************enable clocks********************/

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c90:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c94:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34
 8002c9c:	4b37      	ldr	r3, [pc, #220]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca8:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cac:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002cae:	2104      	movs	r1, #4
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002cb4:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb8:	2204      	movs	r2, #4
 8002cba:	4013      	ands	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	697b      	ldr	r3, [r7, #20]

  __HAL_RCC_USART1_CLK_ENABLE();
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	01c9      	lsls	r1, r1, #7
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	641a      	str	r2, [r3, #64]	; 0x40
 8002cce:	4b2b      	ldr	r3, [pc, #172]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	01db      	lsls	r3, r3, #7
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_USART2_CLK_ENABLE();
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce0:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	0289      	lsls	r1, r1, #10
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_UART_MspInit+0xf4>)
 8002cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	029b      	lsls	r3, r3, #10
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]

  /********************pin muxing***********************/

  /* UART TX CONSOLE */
  gpio_uart.Pin = GPIO_PIN_2;
 8002cf8:	241c      	movs	r4, #28
 8002cfa:	193b      	adds	r3, r7, r4
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	2202      	movs	r2, #2
 8002d04:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART2;
 8002d06:	193b      	adds	r3, r7, r4
 8002d08:	2201      	movs	r2, #1
 8002d0a:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8002d0c:	193b      	adds	r3, r7, r4
 8002d0e:	2201      	movs	r2, #1
 8002d10:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	2202      	movs	r2, #2
 8002d16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 8002d18:	193a      	adds	r2, r7, r4
 8002d1a:	23a0      	movs	r3, #160	; 0xa0
 8002d1c:	05db      	lsls	r3, r3, #23
 8002d1e:	0011      	movs	r1, r2
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 facd 	bl	80032c0 <HAL_GPIO_Init>

  /* UART TX GPS */
  gpio_uart.Pin = GPIO_PIN_4;
 8002d26:	193b      	adds	r3, r7, r4
 8002d28:	2210      	movs	r2, #16
 8002d2a:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8002d2c:	193b      	adds	r3, r7, r4
 8002d2e:	2202      	movs	r2, #2
 8002d30:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART1;
 8002d32:	193b      	adds	r3, r7, r4
 8002d34:	2201      	movs	r2, #1
 8002d36:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8002d38:	193b      	adds	r3, r7, r4
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d3e:	193b      	adds	r3, r7, r4
 8002d40:	2202      	movs	r2, #2
 8002d42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 8002d44:	193b      	adds	r3, r7, r4
 8002d46:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_UART_MspInit+0xf8>)
 8002d48:	0019      	movs	r1, r3
 8002d4a:	0010      	movs	r0, r2
 8002d4c:	f000 fab8 	bl	80032c0 <HAL_GPIO_Init>

  /* UART RX GPS */
  gpio_uart.Pin = GPIO_PIN_5;
 8002d50:	0021      	movs	r1, r4
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	2220      	movs	r2, #32
 8002d56:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	4a09      	ldr	r2, [pc, #36]	; (8002d80 <HAL_UART_MspInit+0xf8>)
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	0010      	movs	r0, r2
 8002d60:	f000 faae 	bl	80032c0 <HAL_GPIO_Init>

  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d64:	201b      	movs	r0, #27
 8002d66:	f000 f9ba 	bl	80030de <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn,15,0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	210f      	movs	r1, #15
 8002d6e:	201b      	movs	r0, #27
 8002d70:	f000 f9a0 	bl	80030b4 <HAL_NVIC_SetPriority>

}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b00d      	add	sp, #52	; 0x34
 8002d7a:	bd90      	pop	{r4, r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	50000800 	.word	0x50000800

08002d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d8c:	4a14      	ldr	r2, [pc, #80]	; (8002de0 <_sbrk+0x5c>)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <_sbrk+0x60>)
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <_sbrk+0x64>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <_sbrk+0x64>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <_sbrk+0x68>)
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002da6:	4b10      	ldr	r3, [pc, #64]	; (8002de8 <_sbrk+0x64>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	18d3      	adds	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d207      	bcs.n	8002dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db4:	f002 fdd6 	bl	8005964 <__errno>
 8002db8:	0003      	movs	r3, r0
 8002dba:	220c      	movs	r2, #12
 8002dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	e009      	b.n	8002dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <_sbrk+0x64>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	18d2      	adds	r2, r2, r3
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <_sbrk+0x64>)
 8002dd4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	0018      	movs	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	b006      	add	sp, #24
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20024000 	.word	0x20024000
 8002de4:	00000400 	.word	0x00000400
 8002de8:	20000420 	.word	0x20000420
 8002dec:	20000570 	.word	0x20000570

08002df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
	...

08002dfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dfc:	480d      	ldr	r0, [pc, #52]	; (8002e34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e00:	f7ff fff6 	bl	8002df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e04:	480c      	ldr	r0, [pc, #48]	; (8002e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e06:	490d      	ldr	r1, [pc, #52]	; (8002e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <LoopForever+0xe>)
  movs r3, #0
 8002e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e0c:	e002      	b.n	8002e14 <LoopCopyDataInit>

08002e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e12:	3304      	adds	r3, #4

08002e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e18:	d3f9      	bcc.n	8002e0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e1c:	4c0a      	ldr	r4, [pc, #40]	; (8002e48 <LoopForever+0x16>)
  movs r3, #0
 8002e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e20:	e001      	b.n	8002e26 <LoopFillZerobss>

08002e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e24:	3204      	adds	r2, #4

08002e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e28:	d3fb      	bcc.n	8002e22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e2a:	f002 fda1 	bl	8005970 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e2e:	f7ff fd81 	bl	8002934 <main>

08002e32 <LoopForever>:

LoopForever:
  b LoopForever
 8002e32:	e7fe      	b.n	8002e32 <LoopForever>
  ldr   r0, =_estack
 8002e34:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e3c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002e40:	08007c78 	.word	0x08007c78
  ldr r2, =_sbss
 8002e44:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002e48:	20000570 	.word	0x20000570

08002e4c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e4c:	e7fe      	b.n	8002e4c <ADC1_COMP_IRQHandler>
	...

08002e50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e56:	1dfb      	adds	r3, r7, #7
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_Init+0x3c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <HAL_Init+0x3c>)
 8002e62:	2180      	movs	r1, #128	; 0x80
 8002e64:	0049      	lsls	r1, r1, #1
 8002e66:	430a      	orrs	r2, r1
 8002e68:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f000 f810 	bl	8002e90 <HAL_InitTick>
 8002e70:	1e03      	subs	r3, r0, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002e74:	1dfb      	adds	r3, r7, #7
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e001      	b.n	8002e80 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002e7c:	f7ff fef6 	bl	8002c6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e80:	1dfb      	adds	r3, r7, #7
 8002e82:	781b      	ldrb	r3, [r3, #0]
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40022000 	.word	0x40022000

08002e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002e98:	230f      	movs	r3, #15
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_InitTick+0x88>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d02b      	beq.n	8002f00 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002ea8:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <HAL_InitTick+0x8c>)
 8002eaa:	681c      	ldr	r4, [r3, #0]
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_InitTick+0x88>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	0019      	movs	r1, r3
 8002eb2:	23fa      	movs	r3, #250	; 0xfa
 8002eb4:	0098      	lsls	r0, r3, #2
 8002eb6:	f7fd f937 	bl	8000128 <__udivsi3>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	0020      	movs	r0, r4
 8002ec0:	f7fd f932 	bl	8000128 <__udivsi3>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 f919 	bl	80030fe <HAL_SYSTICK_Config>
 8002ecc:	1e03      	subs	r3, r0, #0
 8002ece:	d112      	bne.n	8002ef6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d80a      	bhi.n	8002eec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	425b      	negs	r3, r3
 8002edc:	2200      	movs	r2, #0
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 f8e8 	bl	80030b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_InitTick+0x90>)
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	e00d      	b.n	8002f08 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002eec:	230f      	movs	r3, #15
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	e008      	b.n	8002f08 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ef6:	230f      	movs	r3, #15
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e003      	b.n	8002f08 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b005      	add	sp, #20
 8002f14:	bd90      	pop	{r4, r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	20000028 	.word	0x20000028
 8002f1c:	20000020 	.word	0x20000020
 8002f20:	20000024 	.word	0x20000024

08002f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_IncTick+0x1c>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	001a      	movs	r2, r3
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_IncTick+0x20>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	18d2      	adds	r2, r2, r3
 8002f34:	4b03      	ldr	r3, [pc, #12]	; (8002f44 <HAL_IncTick+0x20>)
 8002f36:	601a      	str	r2, [r3, #0]
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	20000028 	.word	0x20000028
 8002f44:	20000424 	.word	0x20000424

08002f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f4c:	4b02      	ldr	r3, [pc, #8]	; (8002f58 <HAL_GetTick+0x10>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000424 	.word	0x20000424

08002f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	0002      	movs	r2, r0
 8002f64:	1dfb      	adds	r3, r7, #7
 8002f66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f6e:	d809      	bhi.n	8002f84 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f70:	1dfb      	adds	r3, r7, #7
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	001a      	movs	r2, r3
 8002f76:	231f      	movs	r3, #31
 8002f78:	401a      	ands	r2, r3
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <__NVIC_EnableIRQ+0x30>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	4091      	lsls	r1, r2
 8002f80:	000a      	movs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	e000e100 	.word	0xe000e100

08002f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	0002      	movs	r2, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	1dfb      	adds	r3, r7, #7
 8002f9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f9e:	1dfb      	adds	r3, r7, #7
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fa4:	d828      	bhi.n	8002ff8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fa6:	4a2f      	ldr	r2, [pc, #188]	; (8003064 <__NVIC_SetPriority+0xd4>)
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	b25b      	sxtb	r3, r3
 8002fae:	089b      	lsrs	r3, r3, #2
 8002fb0:	33c0      	adds	r3, #192	; 0xc0
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	589b      	ldr	r3, [r3, r2]
 8002fb6:	1dfa      	adds	r2, r7, #7
 8002fb8:	7812      	ldrb	r2, [r2, #0]
 8002fba:	0011      	movs	r1, r2
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	00d2      	lsls	r2, r2, #3
 8002fc2:	21ff      	movs	r1, #255	; 0xff
 8002fc4:	4091      	lsls	r1, r2
 8002fc6:	000a      	movs	r2, r1
 8002fc8:	43d2      	mvns	r2, r2
 8002fca:	401a      	ands	r2, r3
 8002fcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	019b      	lsls	r3, r3, #6
 8002fd2:	22ff      	movs	r2, #255	; 0xff
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	1dfb      	adds	r3, r7, #7
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	2303      	movs	r3, #3
 8002fde:	4003      	ands	r3, r0
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fe4:	481f      	ldr	r0, [pc, #124]	; (8003064 <__NVIC_SetPriority+0xd4>)
 8002fe6:	1dfb      	adds	r3, r7, #7
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b25b      	sxtb	r3, r3
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	33c0      	adds	r3, #192	; 0xc0
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002ff6:	e031      	b.n	800305c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ff8:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <__NVIC_SetPriority+0xd8>)
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	0019      	movs	r1, r3
 8003000:	230f      	movs	r3, #15
 8003002:	400b      	ands	r3, r1
 8003004:	3b08      	subs	r3, #8
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	3306      	adds	r3, #6
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	18d3      	adds	r3, r2, r3
 800300e:	3304      	adds	r3, #4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	1dfa      	adds	r2, r7, #7
 8003014:	7812      	ldrb	r2, [r2, #0]
 8003016:	0011      	movs	r1, r2
 8003018:	2203      	movs	r2, #3
 800301a:	400a      	ands	r2, r1
 800301c:	00d2      	lsls	r2, r2, #3
 800301e:	21ff      	movs	r1, #255	; 0xff
 8003020:	4091      	lsls	r1, r2
 8003022:	000a      	movs	r2, r1
 8003024:	43d2      	mvns	r2, r2
 8003026:	401a      	ands	r2, r3
 8003028:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	019b      	lsls	r3, r3, #6
 800302e:	22ff      	movs	r2, #255	; 0xff
 8003030:	401a      	ands	r2, r3
 8003032:	1dfb      	adds	r3, r7, #7
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	0018      	movs	r0, r3
 8003038:	2303      	movs	r3, #3
 800303a:	4003      	ands	r3, r0
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003040:	4809      	ldr	r0, [pc, #36]	; (8003068 <__NVIC_SetPriority+0xd8>)
 8003042:	1dfb      	adds	r3, r7, #7
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	001c      	movs	r4, r3
 8003048:	230f      	movs	r3, #15
 800304a:	4023      	ands	r3, r4
 800304c:	3b08      	subs	r3, #8
 800304e:	089b      	lsrs	r3, r3, #2
 8003050:	430a      	orrs	r2, r1
 8003052:	3306      	adds	r3, #6
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	18c3      	adds	r3, r0, r3
 8003058:	3304      	adds	r3, #4
 800305a:	601a      	str	r2, [r3, #0]
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b003      	add	sp, #12
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1e5a      	subs	r2, r3, #1
 8003078:	2380      	movs	r3, #128	; 0x80
 800307a:	045b      	lsls	r3, r3, #17
 800307c:	429a      	cmp	r2, r3
 800307e:	d301      	bcc.n	8003084 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003080:	2301      	movs	r3, #1
 8003082:	e010      	b.n	80030a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <SysTick_Config+0x44>)
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	3a01      	subs	r2, #1
 800308a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800308c:	2301      	movs	r3, #1
 800308e:	425b      	negs	r3, r3
 8003090:	2103      	movs	r1, #3
 8003092:	0018      	movs	r0, r3
 8003094:	f7ff ff7c 	bl	8002f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <SysTick_Config+0x44>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800309e:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <SysTick_Config+0x44>)
 80030a0:	2207      	movs	r2, #7
 80030a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	0018      	movs	r0, r3
 80030a8:	46bd      	mov	sp, r7
 80030aa:	b002      	add	sp, #8
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	e000e010 	.word	0xe000e010

080030b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	210f      	movs	r1, #15
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	1c02      	adds	r2, r0, #0
 80030c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	0011      	movs	r1, r2
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff ff5d 	bl	8002f90 <__NVIC_SetPriority>
}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	46bd      	mov	sp, r7
 80030da:	b004      	add	sp, #16
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	0002      	movs	r2, r0
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ea:	1dfb      	adds	r3, r7, #7
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	b25b      	sxtb	r3, r3
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff ff33 	bl	8002f5c <__NVIC_EnableIRQ>
}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	46bd      	mov	sp, r7
 80030fa:	b002      	add	sp, #8
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0018      	movs	r0, r3
 800310a:	f7ff ffaf 	bl	800306c <SysTick_Config>
 800310e:	0003      	movs	r3, r0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800311c:	f000 f803 	bl	8003126 <HAL_SYSTICK_Callback>
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e04f      	b.n	80031e2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2225      	movs	r2, #37	; 0x25
 8003146:	5c9b      	ldrb	r3, [r3, r2]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d008      	beq.n	8003160 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2204      	movs	r2, #4
 8003152:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	; 0x24
 8003158:	2100      	movs	r1, #0
 800315a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e040      	b.n	80031e2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	210e      	movs	r1, #14
 800316c:	438a      	bics	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	491c      	ldr	r1, [pc, #112]	; (80031ec <HAL_DMA_Abort+0xbc>)
 800317c:	400a      	ands	r2, r1
 800317e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2101      	movs	r1, #1
 800318c:	438a      	bics	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	221c      	movs	r2, #28
 8003196:	401a      	ands	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2101      	movs	r1, #1
 800319e:	4091      	lsls	r1, r2
 80031a0:	000a      	movs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80031ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00c      	beq.n	80031d0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	490a      	ldr	r1, [pc, #40]	; (80031ec <HAL_DMA_Abort+0xbc>)
 80031c2:	400a      	ands	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2225      	movs	r2, #37	; 0x25
 80031d4:	2101      	movs	r1, #1
 80031d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2224      	movs	r2, #36	; 0x24
 80031dc:	2100      	movs	r1, #0
 80031de:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b002      	add	sp, #8
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	fffffeff 	.word	0xfffffeff

080031f0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f8:	210f      	movs	r1, #15
 80031fa:	187b      	adds	r3, r7, r1
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2225      	movs	r2, #37	; 0x25
 8003204:	5c9b      	ldrb	r3, [r3, r2]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d006      	beq.n	800321a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2204      	movs	r2, #4
 8003210:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003212:	187b      	adds	r3, r7, r1
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	e048      	b.n	80032ac <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	210e      	movs	r1, #14
 8003226:	438a      	bics	r2, r1
 8003228:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2101      	movs	r1, #1
 8003236:	438a      	bics	r2, r1
 8003238:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003244:	491d      	ldr	r1, [pc, #116]	; (80032bc <HAL_DMA_Abort_IT+0xcc>)
 8003246:	400a      	ands	r2, r1
 8003248:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	221c      	movs	r2, #28
 8003250:	401a      	ands	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2101      	movs	r1, #1
 8003258:	4091      	lsls	r1, r2
 800325a:	000a      	movs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003266:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00c      	beq.n	800328a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	4910      	ldr	r1, [pc, #64]	; (80032bc <HAL_DMA_Abort_IT+0xcc>)
 800327c:	400a      	ands	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003288:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2225      	movs	r2, #37	; 0x25
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2224      	movs	r2, #36	; 0x24
 8003296:	2100      	movs	r1, #0
 8003298:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	0010      	movs	r0, r2
 80032aa:	4798      	blx	r3
    }
  }
  return status;
 80032ac:	230f      	movs	r3, #15
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	781b      	ldrb	r3, [r3, #0]
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b004      	add	sp, #16
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	fffffeff 	.word	0xfffffeff

080032c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ce:	e14d      	b.n	800356c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4091      	lsls	r1, r2
 80032da:	000a      	movs	r2, r1
 80032dc:	4013      	ands	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d100      	bne.n	80032e8 <HAL_GPIO_Init+0x28>
 80032e6:	e13e      	b.n	8003566 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2203      	movs	r2, #3
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d005      	beq.n	8003300 <HAL_GPIO_Init+0x40>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2203      	movs	r2, #3
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d130      	bne.n	8003362 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	2203      	movs	r2, #3
 800330c:	409a      	lsls	r2, r3
 800330e:	0013      	movs	r3, r2
 8003310:	43da      	mvns	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	409a      	lsls	r2, r3
 8003322:	0013      	movs	r3, r2
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003336:	2201      	movs	r2, #1
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	409a      	lsls	r2, r3
 800333c:	0013      	movs	r3, r2
 800333e:	43da      	mvns	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	2201      	movs	r2, #1
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
 8003354:	0013      	movs	r3, r2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2203      	movs	r2, #3
 8003368:	4013      	ands	r3, r2
 800336a:	2b03      	cmp	r3, #3
 800336c:	d017      	beq.n	800339e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	2203      	movs	r2, #3
 800337a:	409a      	lsls	r2, r3
 800337c:	0013      	movs	r3, r2
 800337e:	43da      	mvns	r2, r3
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2203      	movs	r2, #3
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d123      	bne.n	80033f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	08da      	lsrs	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3208      	adds	r2, #8
 80033b2:	0092      	lsls	r2, r2, #2
 80033b4:	58d3      	ldr	r3, [r2, r3]
 80033b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2207      	movs	r2, #7
 80033bc:	4013      	ands	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	220f      	movs	r2, #15
 80033c2:	409a      	lsls	r2, r3
 80033c4:	0013      	movs	r3, r2
 80033c6:	43da      	mvns	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4013      	ands	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2107      	movs	r1, #7
 80033d6:	400b      	ands	r3, r1
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	409a      	lsls	r2, r3
 80033dc:	0013      	movs	r3, r2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	08da      	lsrs	r2, r3, #3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3208      	adds	r2, #8
 80033ec:	0092      	lsls	r2, r2, #2
 80033ee:	6939      	ldr	r1, [r7, #16]
 80033f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	409a      	lsls	r2, r3
 8003400:	0013      	movs	r3, r2
 8003402:	43da      	mvns	r2, r3
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2203      	movs	r2, #3
 8003410:	401a      	ands	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	409a      	lsls	r2, r3
 8003418:	0013      	movs	r3, r2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	23c0      	movs	r3, #192	; 0xc0
 800342c:	029b      	lsls	r3, r3, #10
 800342e:	4013      	ands	r3, r2
 8003430:	d100      	bne.n	8003434 <HAL_GPIO_Init+0x174>
 8003432:	e098      	b.n	8003566 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003434:	4a53      	ldr	r2, [pc, #332]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	089b      	lsrs	r3, r3, #2
 800343a:	3318      	adds	r3, #24
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	589b      	ldr	r3, [r3, r2]
 8003440:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2203      	movs	r2, #3
 8003446:	4013      	ands	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	220f      	movs	r2, #15
 800344c:	409a      	lsls	r2, r3
 800344e:	0013      	movs	r3, r2
 8003450:	43da      	mvns	r2, r3
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	23a0      	movs	r3, #160	; 0xa0
 800345c:	05db      	lsls	r3, r3, #23
 800345e:	429a      	cmp	r2, r3
 8003460:	d019      	beq.n	8003496 <HAL_GPIO_Init+0x1d6>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a48      	ldr	r2, [pc, #288]	; (8003588 <HAL_GPIO_Init+0x2c8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d013      	beq.n	8003492 <HAL_GPIO_Init+0x1d2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a47      	ldr	r2, [pc, #284]	; (800358c <HAL_GPIO_Init+0x2cc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00d      	beq.n	800348e <HAL_GPIO_Init+0x1ce>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a46      	ldr	r2, [pc, #280]	; (8003590 <HAL_GPIO_Init+0x2d0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <HAL_GPIO_Init+0x1ca>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a45      	ldr	r2, [pc, #276]	; (8003594 <HAL_GPIO_Init+0x2d4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d101      	bne.n	8003486 <HAL_GPIO_Init+0x1c6>
 8003482:	2304      	movs	r3, #4
 8003484:	e008      	b.n	8003498 <HAL_GPIO_Init+0x1d8>
 8003486:	2305      	movs	r3, #5
 8003488:	e006      	b.n	8003498 <HAL_GPIO_Init+0x1d8>
 800348a:	2303      	movs	r3, #3
 800348c:	e004      	b.n	8003498 <HAL_GPIO_Init+0x1d8>
 800348e:	2302      	movs	r3, #2
 8003490:	e002      	b.n	8003498 <HAL_GPIO_Init+0x1d8>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_GPIO_Init+0x1d8>
 8003496:	2300      	movs	r3, #0
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	2103      	movs	r1, #3
 800349c:	400a      	ands	r2, r1
 800349e:	00d2      	lsls	r2, r2, #3
 80034a0:	4093      	lsls	r3, r2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80034a8:	4936      	ldr	r1, [pc, #216]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	3318      	adds	r3, #24
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034b6:	4b33      	ldr	r3, [pc, #204]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	43da      	mvns	r2, r3
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	035b      	lsls	r3, r3, #13
 80034ce:	4013      	ands	r3, r2
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034da:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	039b      	lsls	r3, r3, #14
 80034f8:	4013      	ands	r3, r2
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003504:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800350a:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 800350c:	2384      	movs	r3, #132	; 0x84
 800350e:	58d3      	ldr	r3, [r2, r3]
 8003510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	43da      	mvns	r2, r3
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	029b      	lsls	r3, r3, #10
 8003524:	4013      	ands	r3, r2
 8003526:	d003      	beq.n	8003530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003530:	4914      	ldr	r1, [pc, #80]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 8003532:	2284      	movs	r2, #132	; 0x84
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003538:	4a12      	ldr	r2, [pc, #72]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	58d3      	ldr	r3, [r2, r3]
 800353e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	43da      	mvns	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	025b      	lsls	r3, r3, #9
 8003552:	4013      	ands	r3, r2
 8003554:	d003      	beq.n	800355e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800355e:	4909      	ldr	r1, [pc, #36]	; (8003584 <HAL_GPIO_Init+0x2c4>)
 8003560:	2280      	movs	r2, #128	; 0x80
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	40da      	lsrs	r2, r3
 8003574:	1e13      	subs	r3, r2, #0
 8003576:	d000      	beq.n	800357a <HAL_GPIO_Init+0x2ba>
 8003578:	e6aa      	b.n	80032d0 <HAL_GPIO_Init+0x10>
  }
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b006      	add	sp, #24
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40021800 	.word	0x40021800
 8003588:	50000400 	.word	0x50000400
 800358c:	50000800 	.word	0x50000800
 8003590:	50000c00 	.word	0x50000c00
 8003594:	50001000 	.word	0x50001000

08003598 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	23e0      	movs	r3, #224	; 0xe0
 80035a2:	01db      	lsls	r3, r3, #7
 80035a4:	4013      	ands	r3, r2
}
 80035a6:	0018      	movs	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40021000 	.word	0x40021000

080035b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b6:	4b3c      	ldr	r3, [pc, #240]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	2238      	movs	r2, #56	; 0x38
 80035bc:	4013      	ands	r3, r2
 80035be:	d10f      	bne.n	80035e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80035c0:	4b39      	ldr	r3, [pc, #228]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	0adb      	lsrs	r3, r3, #11
 80035c6:	2207      	movs	r2, #7
 80035c8:	4013      	ands	r3, r2
 80035ca:	2201      	movs	r2, #1
 80035cc:	409a      	lsls	r2, r3
 80035ce:	0013      	movs	r3, r2
 80035d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80035d2:	6839      	ldr	r1, [r7, #0]
 80035d4:	4835      	ldr	r0, [pc, #212]	; (80036ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80035d6:	f7fc fda7 	bl	8000128 <__udivsi3>
 80035da:	0003      	movs	r3, r0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	e05d      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e0:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2238      	movs	r2, #56	; 0x38
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d102      	bne.n	80035f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80035ee:	613b      	str	r3, [r7, #16]
 80035f0:	e054      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2238      	movs	r2, #56	; 0x38
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	d138      	bne.n	8003670 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	2203      	movs	r2, #3
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003608:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	2207      	movs	r2, #7
 8003610:	4013      	ands	r3, r2
 8003612:	3301      	adds	r3, #1
 8003614:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b03      	cmp	r3, #3
 800361a:	d10d      	bne.n	8003638 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	4824      	ldr	r0, [pc, #144]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003620:	f7fc fd82 	bl	8000128 <__udivsi3>
 8003624:	0003      	movs	r3, r0
 8003626:	0019      	movs	r1, r3
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	227f      	movs	r2, #127	; 0x7f
 8003630:	4013      	ands	r3, r2
 8003632:	434b      	muls	r3, r1
 8003634:	617b      	str	r3, [r7, #20]
        break;
 8003636:	e00d      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	481c      	ldr	r0, [pc, #112]	; (80036ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800363c:	f7fc fd74 	bl	8000128 <__udivsi3>
 8003640:	0003      	movs	r3, r0
 8003642:	0019      	movs	r1, r3
 8003644:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	227f      	movs	r2, #127	; 0x7f
 800364c:	4013      	ands	r3, r2
 800364e:	434b      	muls	r3, r1
 8003650:	617b      	str	r3, [r7, #20]
        break;
 8003652:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0f5b      	lsrs	r3, r3, #29
 800365a:	2207      	movs	r2, #7
 800365c:	4013      	ands	r3, r2
 800365e:	3301      	adds	r3, #1
 8003660:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	6978      	ldr	r0, [r7, #20]
 8003666:	f7fc fd5f 	bl	8000128 <__udivsi3>
 800366a:	0003      	movs	r3, r0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	e015      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003670:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2238      	movs	r2, #56	; 0x38
 8003676:	4013      	ands	r3, r2
 8003678:	2b20      	cmp	r3, #32
 800367a:	d103      	bne.n	8003684 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	021b      	lsls	r3, r3, #8
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	e00b      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2238      	movs	r2, #56	; 0x38
 800368a:	4013      	ands	r3, r2
 800368c:	2b18      	cmp	r3, #24
 800368e:	d103      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003690:	23fa      	movs	r3, #250	; 0xfa
 8003692:	01db      	lsls	r3, r3, #7
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	e001      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800369c:	693b      	ldr	r3, [r7, #16]
}
 800369e:	0018      	movs	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b006      	add	sp, #24
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	40021000 	.word	0x40021000
 80036ac:	00f42400 	.word	0x00f42400
 80036b0:	007a1200 	.word	0x007a1200

080036b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	0018      	movs	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	20000020 	.word	0x20000020

080036c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c8:	b5b0      	push	{r4, r5, r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80036cc:	f7ff fff2 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d0:	0004      	movs	r4, r0
 80036d2:	f7ff ff61 	bl	8003598 <LL_RCC_GetAPB1Prescaler>
 80036d6:	0003      	movs	r3, r0
 80036d8:	0b1a      	lsrs	r2, r3, #12
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	58d3      	ldr	r3, [r2, r3]
 80036e0:	221f      	movs	r2, #31
 80036e2:	4013      	ands	r3, r2
 80036e4:	40dc      	lsrs	r4, r3
 80036e6:	0023      	movs	r3, r4
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bdb0      	pop	{r4, r5, r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	08007ab0 	.word	0x08007ab0

080036f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e046      	b.n	8003794 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2288      	movs	r2, #136	; 0x88
 800370a:	589b      	ldr	r3, [r3, r2]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2284      	movs	r2, #132	; 0x84
 8003714:	2100      	movs	r1, #0
 8003716:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	0018      	movs	r0, r3
 800371c:	f7ff fab4 	bl	8002c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2288      	movs	r2, #136	; 0x88
 8003724:	2124      	movs	r1, #36	; 0x24
 8003726:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	438a      	bics	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0018      	movs	r0, r3
 8003744:	f000 ffce 	bl	80046e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 fc74 	bl	8004038 <UART_SetConfig>
 8003750:	0003      	movs	r3, r0
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e01c      	b.n	8003794 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	490d      	ldr	r1, [pc, #52]	; (800379c <HAL_UART_Init+0xa8>)
 8003766:	400a      	ands	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	212a      	movs	r1, #42	; 0x2a
 8003776:	438a      	bics	r2, r1
 8003778:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2101      	movs	r1, #1
 8003786:	430a      	orrs	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	0018      	movs	r0, r3
 800378e:	f001 f85d 	bl	800484c <UART_CheckIdleState>
 8003792:	0003      	movs	r3, r0
}
 8003794:	0018      	movs	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}
 800379c:	ffffb7ff 	.word	0xffffb7ff

080037a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	1dbb      	adds	r3, r7, #6
 80037ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2288      	movs	r2, #136	; 0x88
 80037b4:	589b      	ldr	r3, [r3, r2]
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	d000      	beq.n	80037bc <HAL_UART_Transmit+0x1c>
 80037ba:	e090      	b.n	80038de <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_UART_Transmit+0x2a>
 80037c2:	1dbb      	adds	r3, r7, #6
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e088      	b.n	80038e0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	015b      	lsls	r3, r3, #5
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d109      	bne.n	80037ee <HAL_UART_Transmit+0x4e>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2201      	movs	r2, #1
 80037e6:	4013      	ands	r3, r2
 80037e8:	d001      	beq.n	80037ee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e078      	b.n	80038e0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2290      	movs	r2, #144	; 0x90
 80037f2:	2100      	movs	r1, #0
 80037f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2288      	movs	r2, #136	; 0x88
 80037fa:	2121      	movs	r1, #33	; 0x21
 80037fc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fe:	f7ff fba3 	bl	8002f48 <HAL_GetTick>
 8003802:	0003      	movs	r3, r0
 8003804:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1dba      	adds	r2, r7, #6
 800380a:	2154      	movs	r1, #84	; 0x54
 800380c:	8812      	ldrh	r2, [r2, #0]
 800380e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1dba      	adds	r2, r7, #6
 8003814:	2156      	movs	r1, #86	; 0x56
 8003816:	8812      	ldrh	r2, [r2, #0]
 8003818:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	015b      	lsls	r3, r3, #5
 8003822:	429a      	cmp	r2, r3
 8003824:	d108      	bne.n	8003838 <HAL_UART_Transmit+0x98>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e003      	b.n	8003840 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800383c:	2300      	movs	r3, #0
 800383e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003840:	e030      	b.n	80038a4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	0013      	movs	r3, r2
 800384c:	2200      	movs	r2, #0
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	f001 f8a6 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8003854:	1e03      	subs	r3, r0, #0
 8003856:	d005      	beq.n	8003864 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2288      	movs	r2, #136	; 0x88
 800385c:	2120      	movs	r1, #32
 800385e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e03d      	b.n	80038e0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10b      	bne.n	8003882 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	001a      	movs	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	05d2      	lsls	r2, r2, #23
 8003876:	0dd2      	lsrs	r2, r2, #23
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	3302      	adds	r3, #2
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	e007      	b.n	8003892 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	3301      	adds	r3, #1
 8003890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2256      	movs	r2, #86	; 0x56
 8003896:	5a9b      	ldrh	r3, [r3, r2]
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b299      	uxth	r1, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2256      	movs	r2, #86	; 0x56
 80038a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2256      	movs	r2, #86	; 0x56
 80038a8:	5a9b      	ldrh	r3, [r3, r2]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1c8      	bne.n	8003842 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	0013      	movs	r3, r2
 80038ba:	2200      	movs	r2, #0
 80038bc:	2140      	movs	r1, #64	; 0x40
 80038be:	f001 f86f 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2288      	movs	r2, #136	; 0x88
 80038ca:	2120      	movs	r1, #32
 80038cc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e006      	b.n	80038e0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2288      	movs	r2, #136	; 0x88
 80038d6:	2120      	movs	r1, #32
 80038d8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b008      	add	sp, #32
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	1dbb      	adds	r3, r7, #6
 80038f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	228c      	movs	r2, #140	; 0x8c
 80038fa:	589b      	ldr	r3, [r3, r2]
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d14f      	bne.n	80039a0 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_UART_Receive_IT+0x26>
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e047      	b.n	80039a2 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	015b      	lsls	r3, r3, #5
 800391a:	429a      	cmp	r2, r3
 800391c:	d109      	bne.n	8003932 <HAL_UART_Receive_IT+0x4a>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d105      	bne.n	8003932 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2201      	movs	r2, #1
 800392a:	4013      	ands	r3, r2
 800392c:	d001      	beq.n	8003932 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e037      	b.n	80039a2 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_UART_Receive_IT+0xc4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d025      	beq.n	800398e <HAL_UART_Receive_IT+0xa6>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1a      	ldr	r2, [pc, #104]	; (80039b0 <HAL_UART_Receive_IT+0xc8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d020      	beq.n	800398e <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	041b      	lsls	r3, r3, #16
 8003956:	4013      	ands	r3, r2
 8003958:	d019      	beq.n	800398e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395a:	f3ef 8310 	mrs	r3, PRIMASK
 800395e:	613b      	str	r3, [r7, #16]
  return(result);
 8003960:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	04c9      	lsls	r1, r1, #19
 800397e:	430a      	orrs	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800398e:	1dbb      	adds	r3, r7, #6
 8003990:	881a      	ldrh	r2, [r3, #0]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	0018      	movs	r0, r3
 8003998:	f001 f872 	bl	8004a80 <UART_Start_Receive_IT>
 800399c:	0003      	movs	r3, r0
 800399e:	e000      	b.n	80039a2 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80039a0:	2302      	movs	r3, #2
  }
}
 80039a2:	0018      	movs	r0, r3
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b008      	add	sp, #32
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	40008000 	.word	0x40008000
 80039b0:	40008400 	.word	0x40008400

080039b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80039b4:	b5b0      	push	{r4, r5, r7, lr}
 80039b6:	b0aa      	sub	sp, #168	; 0xa8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	22a4      	movs	r2, #164	; 0xa4
 80039c4:	18b9      	adds	r1, r7, r2
 80039c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	20a0      	movs	r0, #160	; 0xa0
 80039d0:	1839      	adds	r1, r7, r0
 80039d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	249c      	movs	r4, #156	; 0x9c
 80039dc:	1939      	adds	r1, r7, r4
 80039de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80039e0:	0011      	movs	r1, r2
 80039e2:	18bb      	adds	r3, r7, r2
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4aa2      	ldr	r2, [pc, #648]	; (8003c70 <HAL_UART_IRQHandler+0x2bc>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	2298      	movs	r2, #152	; 0x98
 80039ec:	18bd      	adds	r5, r7, r2
 80039ee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80039f0:	18bb      	adds	r3, r7, r2
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d11a      	bne.n	8003a2e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2220      	movs	r2, #32
 80039fe:	4013      	ands	r3, r2
 8003a00:	d015      	beq.n	8003a2e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a02:	183b      	adds	r3, r7, r0
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2220      	movs	r2, #32
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d105      	bne.n	8003a18 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a0c:	193b      	adds	r3, r7, r4
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	055b      	lsls	r3, r3, #21
 8003a14:	4013      	ands	r3, r2
 8003a16:	d00a      	beq.n	8003a2e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d100      	bne.n	8003a22 <HAL_UART_IRQHandler+0x6e>
 8003a20:	e2dc      	b.n	8003fdc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	0010      	movs	r0, r2
 8003a2a:	4798      	blx	r3
      }
      return;
 8003a2c:	e2d6      	b.n	8003fdc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a2e:	2398      	movs	r3, #152	; 0x98
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d100      	bne.n	8003a3a <HAL_UART_IRQHandler+0x86>
 8003a38:	e122      	b.n	8003c80 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003a3a:	239c      	movs	r3, #156	; 0x9c
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a8c      	ldr	r2, [pc, #560]	; (8003c74 <HAL_UART_IRQHandler+0x2c0>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	d106      	bne.n	8003a54 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003a46:	23a0      	movs	r3, #160	; 0xa0
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a8a      	ldr	r2, [pc, #552]	; (8003c78 <HAL_UART_IRQHandler+0x2c4>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	d100      	bne.n	8003a54 <HAL_UART_IRQHandler+0xa0>
 8003a52:	e115      	b.n	8003c80 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a54:	23a4      	movs	r3, #164	; 0xa4
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d012      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
 8003a60:	23a0      	movs	r3, #160	; 0xa0
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d00b      	beq.n	8003a86 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2201      	movs	r2, #1
 8003a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2290      	movs	r2, #144	; 0x90
 8003a7a:	589b      	ldr	r3, [r3, r2]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2190      	movs	r1, #144	; 0x90
 8003a84:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a86:	23a4      	movs	r3, #164	; 0xa4
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d011      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x102>
 8003a92:	239c      	movs	r3, #156	; 0x9c
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2290      	movs	r2, #144	; 0x90
 8003aaa:	589b      	ldr	r3, [r3, r2]
 8003aac:	2204      	movs	r2, #4
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2190      	movs	r1, #144	; 0x90
 8003ab4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ab6:	23a4      	movs	r3, #164	; 0xa4
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2204      	movs	r2, #4
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d011      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x132>
 8003ac2:	239c      	movs	r3, #156	; 0x9c
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	4013      	ands	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2290      	movs	r2, #144	; 0x90
 8003ada:	589b      	ldr	r3, [r3, r2]
 8003adc:	2202      	movs	r2, #2
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2190      	movs	r1, #144	; 0x90
 8003ae4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ae6:	23a4      	movs	r3, #164	; 0xa4
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2208      	movs	r2, #8
 8003aee:	4013      	ands	r3, r2
 8003af0:	d017      	beq.n	8003b22 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003af2:	23a0      	movs	r3, #160	; 0xa0
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2220      	movs	r2, #32
 8003afa:	4013      	ands	r3, r2
 8003afc:	d105      	bne.n	8003b0a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003afe:	239c      	movs	r3, #156	; 0x9c
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a5b      	ldr	r2, [pc, #364]	; (8003c74 <HAL_UART_IRQHandler+0x2c0>)
 8003b06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2208      	movs	r2, #8
 8003b10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2290      	movs	r2, #144	; 0x90
 8003b16:	589b      	ldr	r3, [r3, r2]
 8003b18:	2208      	movs	r2, #8
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2190      	movs	r1, #144	; 0x90
 8003b20:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b22:	23a4      	movs	r3, #164	; 0xa4
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d013      	beq.n	8003b58 <HAL_UART_IRQHandler+0x1a4>
 8003b30:	23a0      	movs	r3, #160	; 0xa0
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	04db      	lsls	r3, r3, #19
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d00c      	beq.n	8003b58 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	0112      	lsls	r2, r2, #4
 8003b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2290      	movs	r2, #144	; 0x90
 8003b4c:	589b      	ldr	r3, [r3, r2]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2190      	movs	r1, #144	; 0x90
 8003b56:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2290      	movs	r2, #144	; 0x90
 8003b5c:	589b      	ldr	r3, [r3, r2]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d100      	bne.n	8003b64 <HAL_UART_IRQHandler+0x1b0>
 8003b62:	e23d      	b.n	8003fe0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b64:	23a4      	movs	r3, #164	; 0xa4
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d015      	beq.n	8003b9c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b70:	23a0      	movs	r3, #160	; 0xa0
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2220      	movs	r2, #32
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d106      	bne.n	8003b8a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b7c:	239c      	movs	r3, #156	; 0x9c
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	055b      	lsls	r3, r3, #21
 8003b86:	4013      	ands	r3, r2
 8003b88:	d008      	beq.n	8003b9c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	0010      	movs	r0, r2
 8003b9a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2290      	movs	r2, #144	; 0x90
 8003ba0:	589b      	ldr	r3, [r3, r2]
 8003ba2:	2194      	movs	r1, #148	; 0x94
 8003ba4:	187a      	adds	r2, r7, r1
 8003ba6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	2240      	movs	r2, #64	; 0x40
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	2b40      	cmp	r3, #64	; 0x40
 8003bb4:	d004      	beq.n	8003bc0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2228      	movs	r2, #40	; 0x28
 8003bbc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bbe:	d04c      	beq.n	8003c5a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f001 f880 	bl	8004cc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d13c      	bne.n	8003c50 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bda:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003bdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bde:	2090      	movs	r0, #144	; 0x90
 8003be0:	183a      	adds	r2, r7, r0
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	2301      	movs	r3, #1
 8003be6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bea:	f383 8810 	msr	PRIMASK, r3
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2140      	movs	r1, #64	; 0x40
 8003bfc:	438a      	bics	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	183b      	adds	r3, r7, r0
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c08:	f383 8810 	msr	PRIMASK, r3
}
 8003c0c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	589b      	ldr	r3, [r3, r2]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d016      	beq.n	8003c46 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	589b      	ldr	r3, [r3, r2]
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_UART_IRQHandler+0x2c8>)
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2280      	movs	r2, #128	; 0x80
 8003c26:	589b      	ldr	r3, [r3, r2]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7ff fae1 	bl	80031f0 <HAL_DMA_Abort_IT>
 8003c2e:	1e03      	subs	r3, r0, #0
 8003c30:	d01c      	beq.n	8003c6c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	589b      	ldr	r3, [r3, r2]
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	2180      	movs	r1, #128	; 0x80
 8003c3e:	5852      	ldr	r2, [r2, r1]
 8003c40:	0010      	movs	r0, r2
 8003c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	e012      	b.n	8003c6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 f9e1 	bl	8004010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c4e:	e00d      	b.n	8003c6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	0018      	movs	r0, r3
 8003c54:	f000 f9dc 	bl	8004010 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c58:	e008      	b.n	8003c6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 f9d7 	bl	8004010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2290      	movs	r2, #144	; 0x90
 8003c66:	2100      	movs	r1, #0
 8003c68:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003c6a:	e1b9      	b.n	8003fe0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	46c0      	nop			; (mov r8, r8)
    return;
 8003c6e:	e1b7      	b.n	8003fe0 <HAL_UART_IRQHandler+0x62c>
 8003c70:	0000080f 	.word	0x0000080f
 8003c74:	10000001 	.word	0x10000001
 8003c78:	04000120 	.word	0x04000120
 8003c7c:	08004d95 	.word	0x08004d95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d000      	beq.n	8003c8a <HAL_UART_IRQHandler+0x2d6>
 8003c88:	e13e      	b.n	8003f08 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003c8a:	23a4      	movs	r3, #164	; 0xa4
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2210      	movs	r2, #16
 8003c92:	4013      	ands	r3, r2
 8003c94:	d100      	bne.n	8003c98 <HAL_UART_IRQHandler+0x2e4>
 8003c96:	e137      	b.n	8003f08 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003c98:	23a0      	movs	r3, #160	; 0xa0
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d100      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x2f2>
 8003ca4:	e130      	b.n	8003f08 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2210      	movs	r2, #16
 8003cac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2240      	movs	r2, #64	; 0x40
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d000      	beq.n	8003cbe <HAL_UART_IRQHandler+0x30a>
 8003cbc:	e0a4      	b.n	8003e08 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2280      	movs	r2, #128	; 0x80
 8003cc2:	589b      	ldr	r3, [r3, r2]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	217e      	movs	r1, #126	; 0x7e
 8003cca:	187b      	adds	r3, r7, r1
 8003ccc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003cce:	187b      	adds	r3, r7, r1
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d100      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x324>
 8003cd6:	e185      	b.n	8003fe4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	225c      	movs	r2, #92	; 0x5c
 8003cdc:	5a9b      	ldrh	r3, [r3, r2]
 8003cde:	187a      	adds	r2, r7, r1
 8003ce0:	8812      	ldrh	r2, [r2, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d300      	bcc.n	8003ce8 <HAL_UART_IRQHandler+0x334>
 8003ce6:	e17d      	b.n	8003fe4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	187a      	adds	r2, r7, r1
 8003cec:	215e      	movs	r1, #94	; 0x5e
 8003cee:	8812      	ldrh	r2, [r2, #0]
 8003cf0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2280      	movs	r2, #128	; 0x80
 8003cf6:	589b      	ldr	r3, [r3, r2]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d170      	bne.n	8003de4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d02:	f3ef 8310 	mrs	r3, PRIMASK
 8003d06:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d12:	f383 8810 	msr	PRIMASK, r3
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	49b4      	ldr	r1, [pc, #720]	; (8003ff4 <HAL_UART_IRQHandler+0x640>)
 8003d24:	400a      	ands	r2, r1
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d34:	f3ef 8310 	mrs	r3, PRIMASK
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3c:	677b      	str	r3, [r7, #116]	; 0x74
 8003d3e:	2301      	movs	r3, #1
 8003d40:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2101      	movs	r1, #1
 8003d56:	438a      	bics	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
 8003d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d5c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d60:	f383 8810 	msr	PRIMASK, r3
}
 8003d64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d66:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003d70:	2301      	movs	r3, #1
 8003d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d76:	f383 8810 	msr	PRIMASK, r3
}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2140      	movs	r1, #64	; 0x40
 8003d88:	438a      	bics	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d8e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d92:	f383 8810 	msr	PRIMASK, r3
}
 8003d96:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	228c      	movs	r2, #140	; 0x8c
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da6:	f3ef 8310 	mrs	r3, PRIMASK
 8003daa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003db0:	2301      	movs	r3, #1
 8003db2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003db6:	f383 8810 	msr	PRIMASK, r3
}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2110      	movs	r1, #16
 8003dc8:	438a      	bics	r2, r1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd2:	f383 8810 	msr	PRIMASK, r3
}
 8003dd6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2280      	movs	r2, #128	; 0x80
 8003ddc:	589b      	ldr	r3, [r3, r2]
 8003dde:	0018      	movs	r0, r3
 8003de0:	f7ff f9a6 	bl	8003130 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	225c      	movs	r2, #92	; 0x5c
 8003dee:	5a9a      	ldrh	r2, [r3, r2]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	215e      	movs	r1, #94	; 0x5e
 8003df4:	5a5b      	ldrh	r3, [r3, r1]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	0011      	movs	r1, r2
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 f90d 	bl	8004020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e06:	e0ed      	b.n	8003fe4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	225c      	movs	r2, #92	; 0x5c
 8003e0c:	5a99      	ldrh	r1, [r3, r2]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	225e      	movs	r2, #94	; 0x5e
 8003e12:	5a9b      	ldrh	r3, [r3, r2]
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	208e      	movs	r0, #142	; 0x8e
 8003e18:	183b      	adds	r3, r7, r0
 8003e1a:	1a8a      	subs	r2, r1, r2
 8003e1c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	225e      	movs	r2, #94	; 0x5e
 8003e22:	5a9b      	ldrh	r3, [r3, r2]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d100      	bne.n	8003e2c <HAL_UART_IRQHandler+0x478>
 8003e2a:	e0dd      	b.n	8003fe8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003e2c:	183b      	adds	r3, r7, r0
 8003e2e:	881b      	ldrh	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d100      	bne.n	8003e36 <HAL_UART_IRQHandler+0x482>
 8003e34:	e0d8      	b.n	8003fe8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e36:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e3e:	2488      	movs	r4, #136	; 0x88
 8003e40:	193a      	adds	r2, r7, r4
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	2301      	movs	r3, #1
 8003e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f383 8810 	msr	PRIMASK, r3
}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4967      	ldr	r1, [pc, #412]	; (8003ff8 <HAL_UART_IRQHandler+0x644>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	193b      	adds	r3, r7, r4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f383 8810 	msr	PRIMASK, r3
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e72:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e74:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e76:	2484      	movs	r4, #132	; 0x84
 8003e78:	193a      	adds	r2, r7, r4
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f383 8810 	msr	PRIMASK, r3
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	495a      	ldr	r1, [pc, #360]	; (8003ffc <HAL_UART_IRQHandler+0x648>)
 8003e94:	400a      	ands	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	193b      	adds	r3, r7, r4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f383 8810 	msr	PRIMASK, r3
}
 8003ea4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	228c      	movs	r2, #140	; 0x8c
 8003eaa:	2120      	movs	r1, #32
 8003eac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eba:	f3ef 8310 	mrs	r3, PRIMASK
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec2:	2480      	movs	r4, #128	; 0x80
 8003ec4:	193a      	adds	r2, r7, r4
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	f383 8810 	msr	PRIMASK, r3
}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2110      	movs	r1, #16
 8003ee0:	438a      	bics	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	193b      	adds	r3, r7, r4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eec:	f383 8810 	msr	PRIMASK, r3
}
 8003ef0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ef8:	183b      	adds	r3, r7, r0
 8003efa:	881a      	ldrh	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	0011      	movs	r1, r2
 8003f00:	0018      	movs	r0, r3
 8003f02:	f000 f88d 	bl	8004020 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f06:	e06f      	b.n	8003fe8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f08:	23a4      	movs	r3, #164	; 0xa4
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	2380      	movs	r3, #128	; 0x80
 8003f10:	035b      	lsls	r3, r3, #13
 8003f12:	4013      	ands	r3, r2
 8003f14:	d010      	beq.n	8003f38 <HAL_UART_IRQHandler+0x584>
 8003f16:	239c      	movs	r3, #156	; 0x9c
 8003f18:	18fb      	adds	r3, r7, r3
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	03db      	lsls	r3, r3, #15
 8003f20:	4013      	ands	r3, r2
 8003f22:	d009      	beq.n	8003f38 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2280      	movs	r2, #128	; 0x80
 8003f2a:	0352      	lsls	r2, r2, #13
 8003f2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f001 fc9f 	bl	8005874 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f36:	e05a      	b.n	8003fee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003f38:	23a4      	movs	r3, #164	; 0xa4
 8003f3a:	18fb      	adds	r3, r7, r3
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2280      	movs	r2, #128	; 0x80
 8003f40:	4013      	ands	r3, r2
 8003f42:	d016      	beq.n	8003f72 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003f44:	23a0      	movs	r3, #160	; 0xa0
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2280      	movs	r2, #128	; 0x80
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d106      	bne.n	8003f5e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003f50:	239c      	movs	r3, #156	; 0x9c
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	041b      	lsls	r3, r3, #16
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d042      	beq.n	8003fec <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	0010      	movs	r0, r2
 8003f6e:	4798      	blx	r3
    }
    return;
 8003f70:	e03c      	b.n	8003fec <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003f72:	23a4      	movs	r3, #164	; 0xa4
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2240      	movs	r2, #64	; 0x40
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d00a      	beq.n	8003f94 <HAL_UART_IRQHandler+0x5e0>
 8003f7e:	23a0      	movs	r3, #160	; 0xa0
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2240      	movs	r2, #64	; 0x40
 8003f86:	4013      	ands	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 ff18 	bl	8004dc2 <UART_EndTransmit_IT>
    return;
 8003f92:	e02c      	b.n	8003fee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003f94:	23a4      	movs	r3, #164	; 0xa4
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d00b      	beq.n	8003fba <HAL_UART_IRQHandler+0x606>
 8003fa2:	23a0      	movs	r3, #160	; 0xa0
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	2380      	movs	r3, #128	; 0x80
 8003faa:	05db      	lsls	r3, r3, #23
 8003fac:	4013      	ands	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	f001 fc6e 	bl	8005894 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fb8:	e019      	b.n	8003fee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003fba:	23a4      	movs	r3, #164	; 0xa4
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	045b      	lsls	r3, r3, #17
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d012      	beq.n	8003fee <HAL_UART_IRQHandler+0x63a>
 8003fc8:	23a0      	movs	r3, #160	; 0xa0
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da0d      	bge.n	8003fee <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f001 fc55 	bl	8005884 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fda:	e008      	b.n	8003fee <HAL_UART_IRQHandler+0x63a>
      return;
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	e006      	b.n	8003fee <HAL_UART_IRQHandler+0x63a>
    return;
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	e004      	b.n	8003fee <HAL_UART_IRQHandler+0x63a>
      return;
 8003fe4:	46c0      	nop			; (mov r8, r8)
 8003fe6:	e002      	b.n	8003fee <HAL_UART_IRQHandler+0x63a>
      return;
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	e000      	b.n	8003fee <HAL_UART_IRQHandler+0x63a>
    return;
 8003fec:	46c0      	nop			; (mov r8, r8)
  }
}
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b02a      	add	sp, #168	; 0xa8
 8003ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ff4:	fffffeff 	.word	0xfffffeff
 8003ff8:	fffffedf 	.word	0xfffffedf
 8003ffc:	effffffe 	.word	0xeffffffe

08004000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	000a      	movs	r2, r1
 800402a:	1cbb      	adds	r3, r7, #2
 800402c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b002      	add	sp, #8
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004038:	b5b0      	push	{r4, r5, r7, lr}
 800403a:	b090      	sub	sp, #64	; 0x40
 800403c:	af00      	add	r7, sp, #0
 800403e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004040:	231a      	movs	r3, #26
 8004042:	2220      	movs	r2, #32
 8004044:	189b      	adds	r3, r3, r2
 8004046:	19db      	adds	r3, r3, r7
 8004048:	2200      	movs	r2, #0
 800404a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	431a      	orrs	r2, r3
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	431a      	orrs	r2, r3
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	69db      	ldr	r3, [r3, #28]
 8004060:	4313      	orrs	r3, r2
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4ac1      	ldr	r2, [pc, #772]	; (8004370 <UART_SetConfig+0x338>)
 800406c:	4013      	ands	r3, r2
 800406e:	0019      	movs	r1, r3
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004076:	430b      	orrs	r3, r1
 8004078:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4abc      	ldr	r2, [pc, #752]	; (8004374 <UART_SetConfig+0x33c>)
 8004082:	4013      	ands	r3, r2
 8004084:	0018      	movs	r0, r3
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	68d9      	ldr	r1, [r3, #12]
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	0003      	movs	r3, r0
 8004090:	430b      	orrs	r3, r1
 8004092:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4ab6      	ldr	r2, [pc, #728]	; (8004378 <UART_SetConfig+0x340>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d009      	beq.n	80040b8 <UART_SetConfig+0x80>
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4ab4      	ldr	r2, [pc, #720]	; (800437c <UART_SetConfig+0x344>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d004      	beq.n	80040b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040b4:	4313      	orrs	r3, r2
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	4ab0      	ldr	r2, [pc, #704]	; (8004380 <UART_SetConfig+0x348>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	0019      	movs	r1, r3
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ca:	430b      	orrs	r3, r1
 80040cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	220f      	movs	r2, #15
 80040d6:	4393      	bics	r3, r2
 80040d8:	0018      	movs	r0, r3
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	0003      	movs	r3, r0
 80040e4:	430b      	orrs	r3, r1
 80040e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4aa5      	ldr	r2, [pc, #660]	; (8004384 <UART_SetConfig+0x34c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d131      	bne.n	8004156 <UART_SetConfig+0x11e>
 80040f2:	4ba5      	ldr	r3, [pc, #660]	; (8004388 <UART_SetConfig+0x350>)
 80040f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f6:	2203      	movs	r2, #3
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d01d      	beq.n	800413a <UART_SetConfig+0x102>
 80040fe:	d823      	bhi.n	8004148 <UART_SetConfig+0x110>
 8004100:	2b02      	cmp	r3, #2
 8004102:	d00c      	beq.n	800411e <UART_SetConfig+0xe6>
 8004104:	d820      	bhi.n	8004148 <UART_SetConfig+0x110>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0xd8>
 800410a:	2b01      	cmp	r3, #1
 800410c:	d00e      	beq.n	800412c <UART_SetConfig+0xf4>
 800410e:	e01b      	b.n	8004148 <UART_SetConfig+0x110>
 8004110:	231b      	movs	r3, #27
 8004112:	2220      	movs	r2, #32
 8004114:	189b      	adds	r3, r3, r2
 8004116:	19db      	adds	r3, r3, r7
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e154      	b.n	80043c8 <UART_SetConfig+0x390>
 800411e:	231b      	movs	r3, #27
 8004120:	2220      	movs	r2, #32
 8004122:	189b      	adds	r3, r3, r2
 8004124:	19db      	adds	r3, r3, r7
 8004126:	2202      	movs	r2, #2
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	e14d      	b.n	80043c8 <UART_SetConfig+0x390>
 800412c:	231b      	movs	r3, #27
 800412e:	2220      	movs	r2, #32
 8004130:	189b      	adds	r3, r3, r2
 8004132:	19db      	adds	r3, r3, r7
 8004134:	2204      	movs	r2, #4
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e146      	b.n	80043c8 <UART_SetConfig+0x390>
 800413a:	231b      	movs	r3, #27
 800413c:	2220      	movs	r2, #32
 800413e:	189b      	adds	r3, r3, r2
 8004140:	19db      	adds	r3, r3, r7
 8004142:	2208      	movs	r2, #8
 8004144:	701a      	strb	r2, [r3, #0]
 8004146:	e13f      	b.n	80043c8 <UART_SetConfig+0x390>
 8004148:	231b      	movs	r3, #27
 800414a:	2220      	movs	r2, #32
 800414c:	189b      	adds	r3, r3, r2
 800414e:	19db      	adds	r3, r3, r7
 8004150:	2210      	movs	r2, #16
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e138      	b.n	80043c8 <UART_SetConfig+0x390>
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a8c      	ldr	r2, [pc, #560]	; (800438c <UART_SetConfig+0x354>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d131      	bne.n	80041c4 <UART_SetConfig+0x18c>
 8004160:	4b89      	ldr	r3, [pc, #548]	; (8004388 <UART_SetConfig+0x350>)
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	220c      	movs	r2, #12
 8004166:	4013      	ands	r3, r2
 8004168:	2b0c      	cmp	r3, #12
 800416a:	d01d      	beq.n	80041a8 <UART_SetConfig+0x170>
 800416c:	d823      	bhi.n	80041b6 <UART_SetConfig+0x17e>
 800416e:	2b08      	cmp	r3, #8
 8004170:	d00c      	beq.n	800418c <UART_SetConfig+0x154>
 8004172:	d820      	bhi.n	80041b6 <UART_SetConfig+0x17e>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <UART_SetConfig+0x146>
 8004178:	2b04      	cmp	r3, #4
 800417a:	d00e      	beq.n	800419a <UART_SetConfig+0x162>
 800417c:	e01b      	b.n	80041b6 <UART_SetConfig+0x17e>
 800417e:	231b      	movs	r3, #27
 8004180:	2220      	movs	r2, #32
 8004182:	189b      	adds	r3, r3, r2
 8004184:	19db      	adds	r3, r3, r7
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	e11d      	b.n	80043c8 <UART_SetConfig+0x390>
 800418c:	231b      	movs	r3, #27
 800418e:	2220      	movs	r2, #32
 8004190:	189b      	adds	r3, r3, r2
 8004192:	19db      	adds	r3, r3, r7
 8004194:	2202      	movs	r2, #2
 8004196:	701a      	strb	r2, [r3, #0]
 8004198:	e116      	b.n	80043c8 <UART_SetConfig+0x390>
 800419a:	231b      	movs	r3, #27
 800419c:	2220      	movs	r2, #32
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	19db      	adds	r3, r3, r7
 80041a2:	2204      	movs	r2, #4
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	e10f      	b.n	80043c8 <UART_SetConfig+0x390>
 80041a8:	231b      	movs	r3, #27
 80041aa:	2220      	movs	r2, #32
 80041ac:	189b      	adds	r3, r3, r2
 80041ae:	19db      	adds	r3, r3, r7
 80041b0:	2208      	movs	r2, #8
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	e108      	b.n	80043c8 <UART_SetConfig+0x390>
 80041b6:	231b      	movs	r3, #27
 80041b8:	2220      	movs	r2, #32
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	19db      	adds	r3, r3, r7
 80041be:	2210      	movs	r2, #16
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	e101      	b.n	80043c8 <UART_SetConfig+0x390>
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a71      	ldr	r2, [pc, #452]	; (8004390 <UART_SetConfig+0x358>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d131      	bne.n	8004232 <UART_SetConfig+0x1fa>
 80041ce:	4b6e      	ldr	r3, [pc, #440]	; (8004388 <UART_SetConfig+0x350>)
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	2230      	movs	r2, #48	; 0x30
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b30      	cmp	r3, #48	; 0x30
 80041d8:	d01d      	beq.n	8004216 <UART_SetConfig+0x1de>
 80041da:	d823      	bhi.n	8004224 <UART_SetConfig+0x1ec>
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d00c      	beq.n	80041fa <UART_SetConfig+0x1c2>
 80041e0:	d820      	bhi.n	8004224 <UART_SetConfig+0x1ec>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <UART_SetConfig+0x1b4>
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d00e      	beq.n	8004208 <UART_SetConfig+0x1d0>
 80041ea:	e01b      	b.n	8004224 <UART_SetConfig+0x1ec>
 80041ec:	231b      	movs	r3, #27
 80041ee:	2220      	movs	r2, #32
 80041f0:	189b      	adds	r3, r3, r2
 80041f2:	19db      	adds	r3, r3, r7
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e0e6      	b.n	80043c8 <UART_SetConfig+0x390>
 80041fa:	231b      	movs	r3, #27
 80041fc:	2220      	movs	r2, #32
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	19db      	adds	r3, r3, r7
 8004202:	2202      	movs	r2, #2
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e0df      	b.n	80043c8 <UART_SetConfig+0x390>
 8004208:	231b      	movs	r3, #27
 800420a:	2220      	movs	r2, #32
 800420c:	189b      	adds	r3, r3, r2
 800420e:	19db      	adds	r3, r3, r7
 8004210:	2204      	movs	r2, #4
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	e0d8      	b.n	80043c8 <UART_SetConfig+0x390>
 8004216:	231b      	movs	r3, #27
 8004218:	2220      	movs	r2, #32
 800421a:	189b      	adds	r3, r3, r2
 800421c:	19db      	adds	r3, r3, r7
 800421e:	2208      	movs	r2, #8
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	e0d1      	b.n	80043c8 <UART_SetConfig+0x390>
 8004224:	231b      	movs	r3, #27
 8004226:	2220      	movs	r2, #32
 8004228:	189b      	adds	r3, r3, r2
 800422a:	19db      	adds	r3, r3, r7
 800422c:	2210      	movs	r2, #16
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	e0ca      	b.n	80043c8 <UART_SetConfig+0x390>
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a57      	ldr	r2, [pc, #348]	; (8004394 <UART_SetConfig+0x35c>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d106      	bne.n	800424a <UART_SetConfig+0x212>
 800423c:	231b      	movs	r3, #27
 800423e:	2220      	movs	r2, #32
 8004240:	189b      	adds	r3, r3, r2
 8004242:	19db      	adds	r3, r3, r7
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e0be      	b.n	80043c8 <UART_SetConfig+0x390>
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a52      	ldr	r2, [pc, #328]	; (8004398 <UART_SetConfig+0x360>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d106      	bne.n	8004262 <UART_SetConfig+0x22a>
 8004254:	231b      	movs	r3, #27
 8004256:	2220      	movs	r2, #32
 8004258:	189b      	adds	r3, r3, r2
 800425a:	19db      	adds	r3, r3, r7
 800425c:	2200      	movs	r2, #0
 800425e:	701a      	strb	r2, [r3, #0]
 8004260:	e0b2      	b.n	80043c8 <UART_SetConfig+0x390>
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a4d      	ldr	r2, [pc, #308]	; (800439c <UART_SetConfig+0x364>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d106      	bne.n	800427a <UART_SetConfig+0x242>
 800426c:	231b      	movs	r3, #27
 800426e:	2220      	movs	r2, #32
 8004270:	189b      	adds	r3, r3, r2
 8004272:	19db      	adds	r3, r3, r7
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
 8004278:	e0a6      	b.n	80043c8 <UART_SetConfig+0x390>
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a3e      	ldr	r2, [pc, #248]	; (8004378 <UART_SetConfig+0x340>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d13e      	bne.n	8004302 <UART_SetConfig+0x2ca>
 8004284:	4b40      	ldr	r3, [pc, #256]	; (8004388 <UART_SetConfig+0x350>)
 8004286:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004288:	23c0      	movs	r3, #192	; 0xc0
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4013      	ands	r3, r2
 800428e:	22c0      	movs	r2, #192	; 0xc0
 8004290:	0112      	lsls	r2, r2, #4
 8004292:	4293      	cmp	r3, r2
 8004294:	d027      	beq.n	80042e6 <UART_SetConfig+0x2ae>
 8004296:	22c0      	movs	r2, #192	; 0xc0
 8004298:	0112      	lsls	r2, r2, #4
 800429a:	4293      	cmp	r3, r2
 800429c:	d82a      	bhi.n	80042f4 <UART_SetConfig+0x2bc>
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d011      	beq.n	80042ca <UART_SetConfig+0x292>
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	0112      	lsls	r2, r2, #4
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d822      	bhi.n	80042f4 <UART_SetConfig+0x2bc>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <UART_SetConfig+0x284>
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	00d2      	lsls	r2, r2, #3
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00e      	beq.n	80042d8 <UART_SetConfig+0x2a0>
 80042ba:	e01b      	b.n	80042f4 <UART_SetConfig+0x2bc>
 80042bc:	231b      	movs	r3, #27
 80042be:	2220      	movs	r2, #32
 80042c0:	189b      	adds	r3, r3, r2
 80042c2:	19db      	adds	r3, r3, r7
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e07e      	b.n	80043c8 <UART_SetConfig+0x390>
 80042ca:	231b      	movs	r3, #27
 80042cc:	2220      	movs	r2, #32
 80042ce:	189b      	adds	r3, r3, r2
 80042d0:	19db      	adds	r3, r3, r7
 80042d2:	2202      	movs	r2, #2
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e077      	b.n	80043c8 <UART_SetConfig+0x390>
 80042d8:	231b      	movs	r3, #27
 80042da:	2220      	movs	r2, #32
 80042dc:	189b      	adds	r3, r3, r2
 80042de:	19db      	adds	r3, r3, r7
 80042e0:	2204      	movs	r2, #4
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	e070      	b.n	80043c8 <UART_SetConfig+0x390>
 80042e6:	231b      	movs	r3, #27
 80042e8:	2220      	movs	r2, #32
 80042ea:	189b      	adds	r3, r3, r2
 80042ec:	19db      	adds	r3, r3, r7
 80042ee:	2208      	movs	r2, #8
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	e069      	b.n	80043c8 <UART_SetConfig+0x390>
 80042f4:	231b      	movs	r3, #27
 80042f6:	2220      	movs	r2, #32
 80042f8:	189b      	adds	r3, r3, r2
 80042fa:	19db      	adds	r3, r3, r7
 80042fc:	2210      	movs	r2, #16
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	e062      	b.n	80043c8 <UART_SetConfig+0x390>
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1d      	ldr	r2, [pc, #116]	; (800437c <UART_SetConfig+0x344>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d157      	bne.n	80043bc <UART_SetConfig+0x384>
 800430c:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <UART_SetConfig+0x350>)
 800430e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004310:	23c0      	movs	r3, #192	; 0xc0
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4013      	ands	r3, r2
 8004316:	22c0      	movs	r2, #192	; 0xc0
 8004318:	0092      	lsls	r2, r2, #2
 800431a:	4293      	cmp	r3, r2
 800431c:	d040      	beq.n	80043a0 <UART_SetConfig+0x368>
 800431e:	22c0      	movs	r2, #192	; 0xc0
 8004320:	0092      	lsls	r2, r2, #2
 8004322:	4293      	cmp	r3, r2
 8004324:	d843      	bhi.n	80043ae <UART_SetConfig+0x376>
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	0092      	lsls	r2, r2, #2
 800432a:	4293      	cmp	r3, r2
 800432c:	d011      	beq.n	8004352 <UART_SetConfig+0x31a>
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	0092      	lsls	r2, r2, #2
 8004332:	4293      	cmp	r3, r2
 8004334:	d83b      	bhi.n	80043ae <UART_SetConfig+0x376>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d004      	beq.n	8004344 <UART_SetConfig+0x30c>
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	0052      	lsls	r2, r2, #1
 800433e:	4293      	cmp	r3, r2
 8004340:	d00e      	beq.n	8004360 <UART_SetConfig+0x328>
 8004342:	e034      	b.n	80043ae <UART_SetConfig+0x376>
 8004344:	231b      	movs	r3, #27
 8004346:	2220      	movs	r2, #32
 8004348:	189b      	adds	r3, r3, r2
 800434a:	19db      	adds	r3, r3, r7
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	e03a      	b.n	80043c8 <UART_SetConfig+0x390>
 8004352:	231b      	movs	r3, #27
 8004354:	2220      	movs	r2, #32
 8004356:	189b      	adds	r3, r3, r2
 8004358:	19db      	adds	r3, r3, r7
 800435a:	2202      	movs	r2, #2
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	e033      	b.n	80043c8 <UART_SetConfig+0x390>
 8004360:	231b      	movs	r3, #27
 8004362:	2220      	movs	r2, #32
 8004364:	189b      	adds	r3, r3, r2
 8004366:	19db      	adds	r3, r3, r7
 8004368:	2204      	movs	r2, #4
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e02c      	b.n	80043c8 <UART_SetConfig+0x390>
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	cfff69f3 	.word	0xcfff69f3
 8004374:	ffffcfff 	.word	0xffffcfff
 8004378:	40008000 	.word	0x40008000
 800437c:	40008400 	.word	0x40008400
 8004380:	11fff4ff 	.word	0x11fff4ff
 8004384:	40013800 	.word	0x40013800
 8004388:	40021000 	.word	0x40021000
 800438c:	40004400 	.word	0x40004400
 8004390:	40004800 	.word	0x40004800
 8004394:	40004c00 	.word	0x40004c00
 8004398:	40005000 	.word	0x40005000
 800439c:	40013c00 	.word	0x40013c00
 80043a0:	231b      	movs	r3, #27
 80043a2:	2220      	movs	r2, #32
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	19db      	adds	r3, r3, r7
 80043a8:	2208      	movs	r2, #8
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	e00c      	b.n	80043c8 <UART_SetConfig+0x390>
 80043ae:	231b      	movs	r3, #27
 80043b0:	2220      	movs	r2, #32
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	19db      	adds	r3, r3, r7
 80043b6:	2210      	movs	r2, #16
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e005      	b.n	80043c8 <UART_SetConfig+0x390>
 80043bc:	231b      	movs	r3, #27
 80043be:	2220      	movs	r2, #32
 80043c0:	189b      	adds	r3, r3, r2
 80043c2:	19db      	adds	r3, r3, r7
 80043c4:	2210      	movs	r2, #16
 80043c6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4ac1      	ldr	r2, [pc, #772]	; (80046d4 <UART_SetConfig+0x69c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d005      	beq.n	80043de <UART_SetConfig+0x3a6>
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4ac0      	ldr	r2, [pc, #768]	; (80046d8 <UART_SetConfig+0x6a0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d000      	beq.n	80043de <UART_SetConfig+0x3a6>
 80043dc:	e093      	b.n	8004506 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043de:	231b      	movs	r3, #27
 80043e0:	2220      	movs	r2, #32
 80043e2:	189b      	adds	r3, r3, r2
 80043e4:	19db      	adds	r3, r3, r7
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d015      	beq.n	8004418 <UART_SetConfig+0x3e0>
 80043ec:	dc18      	bgt.n	8004420 <UART_SetConfig+0x3e8>
 80043ee:	2b04      	cmp	r3, #4
 80043f0:	d00d      	beq.n	800440e <UART_SetConfig+0x3d6>
 80043f2:	dc15      	bgt.n	8004420 <UART_SetConfig+0x3e8>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d002      	beq.n	80043fe <UART_SetConfig+0x3c6>
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d005      	beq.n	8004408 <UART_SetConfig+0x3d0>
 80043fc:	e010      	b.n	8004420 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fe:	f7ff f963 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8004402:	0003      	movs	r3, r0
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004406:	e014      	b.n	8004432 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004408:	4bb4      	ldr	r3, [pc, #720]	; (80046dc <UART_SetConfig+0x6a4>)
 800440a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800440c:	e011      	b.n	8004432 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440e:	f7ff f8cf 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 8004412:	0003      	movs	r3, r0
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004416:	e00c      	b.n	8004432 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800441e:	e008      	b.n	8004432 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004424:	231a      	movs	r3, #26
 8004426:	2220      	movs	r2, #32
 8004428:	189b      	adds	r3, r3, r2
 800442a:	19db      	adds	r3, r3, r7
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]
        break;
 8004430:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004434:	2b00      	cmp	r3, #0
 8004436:	d100      	bne.n	800443a <UART_SetConfig+0x402>
 8004438:	e135      	b.n	80046a6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800443e:	4ba8      	ldr	r3, [pc, #672]	; (80046e0 <UART_SetConfig+0x6a8>)
 8004440:	0052      	lsls	r2, r2, #1
 8004442:	5ad3      	ldrh	r3, [r2, r3]
 8004444:	0019      	movs	r1, r3
 8004446:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004448:	f7fb fe6e 	bl	8000128 <__udivsi3>
 800444c:	0003      	movs	r3, r0
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	0013      	movs	r3, r2
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	189b      	adds	r3, r3, r2
 800445a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800445c:	429a      	cmp	r2, r3
 800445e:	d305      	bcc.n	800446c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004468:	429a      	cmp	r2, r3
 800446a:	d906      	bls.n	800447a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800446c:	231a      	movs	r3, #26
 800446e:	2220      	movs	r2, #32
 8004470:	189b      	adds	r3, r3, r2
 8004472:	19db      	adds	r3, r3, r7
 8004474:	2201      	movs	r2, #1
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e044      	b.n	8004504 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800447a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447c:	61bb      	str	r3, [r7, #24]
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004486:	4b96      	ldr	r3, [pc, #600]	; (80046e0 <UART_SetConfig+0x6a8>)
 8004488:	0052      	lsls	r2, r2, #1
 800448a:	5ad3      	ldrh	r3, [r2, r3]
 800448c:	613b      	str	r3, [r7, #16]
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	69b8      	ldr	r0, [r7, #24]
 8004498:	69f9      	ldr	r1, [r7, #28]
 800449a:	f7fb fff9 	bl	8000490 <__aeabi_uldivmod>
 800449e:	0002      	movs	r2, r0
 80044a0:	000b      	movs	r3, r1
 80044a2:	0e11      	lsrs	r1, r2, #24
 80044a4:	021d      	lsls	r5, r3, #8
 80044a6:	430d      	orrs	r5, r1
 80044a8:	0214      	lsls	r4, r2, #8
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68b8      	ldr	r0, [r7, #8]
 80044b8:	68f9      	ldr	r1, [r7, #12]
 80044ba:	1900      	adds	r0, r0, r4
 80044bc:	4169      	adcs	r1, r5
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	2300      	movs	r3, #0
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f7fb ffe0 	bl	8000490 <__aeabi_uldivmod>
 80044d0:	0002      	movs	r2, r0
 80044d2:	000b      	movs	r3, r1
 80044d4:	0013      	movs	r3, r2
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044da:	23c0      	movs	r3, #192	; 0xc0
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	429a      	cmp	r2, r3
 80044e0:	d309      	bcc.n	80044f6 <UART_SetConfig+0x4be>
 80044e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	035b      	lsls	r3, r3, #13
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d204      	bcs.n	80044f6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f2:	60da      	str	r2, [r3, #12]
 80044f4:	e006      	b.n	8004504 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80044f6:	231a      	movs	r3, #26
 80044f8:	2220      	movs	r2, #32
 80044fa:	189b      	adds	r3, r3, r2
 80044fc:	19db      	adds	r3, r3, r7
 80044fe:	2201      	movs	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004502:	e0d0      	b.n	80046a6 <UART_SetConfig+0x66e>
 8004504:	e0cf      	b.n	80046a6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	021b      	lsls	r3, r3, #8
 800450e:	429a      	cmp	r2, r3
 8004510:	d000      	beq.n	8004514 <UART_SetConfig+0x4dc>
 8004512:	e070      	b.n	80045f6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004514:	231b      	movs	r3, #27
 8004516:	2220      	movs	r2, #32
 8004518:	189b      	adds	r3, r3, r2
 800451a:	19db      	adds	r3, r3, r7
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b08      	cmp	r3, #8
 8004520:	d015      	beq.n	800454e <UART_SetConfig+0x516>
 8004522:	dc18      	bgt.n	8004556 <UART_SetConfig+0x51e>
 8004524:	2b04      	cmp	r3, #4
 8004526:	d00d      	beq.n	8004544 <UART_SetConfig+0x50c>
 8004528:	dc15      	bgt.n	8004556 <UART_SetConfig+0x51e>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <UART_SetConfig+0x4fc>
 800452e:	2b02      	cmp	r3, #2
 8004530:	d005      	beq.n	800453e <UART_SetConfig+0x506>
 8004532:	e010      	b.n	8004556 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004534:	f7ff f8c8 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8004538:	0003      	movs	r3, r0
 800453a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800453c:	e014      	b.n	8004568 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800453e:	4b67      	ldr	r3, [pc, #412]	; (80046dc <UART_SetConfig+0x6a4>)
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004542:	e011      	b.n	8004568 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004544:	f7ff f834 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 8004548:	0003      	movs	r3, r0
 800454a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800454c:	e00c      	b.n	8004568 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004554:	e008      	b.n	8004568 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800455a:	231a      	movs	r3, #26
 800455c:	2220      	movs	r2, #32
 800455e:	189b      	adds	r3, r3, r2
 8004560:	19db      	adds	r3, r3, r7
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
        break;
 8004566:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456a:	2b00      	cmp	r3, #0
 800456c:	d100      	bne.n	8004570 <UART_SetConfig+0x538>
 800456e:	e09a      	b.n	80046a6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004574:	4b5a      	ldr	r3, [pc, #360]	; (80046e0 <UART_SetConfig+0x6a8>)
 8004576:	0052      	lsls	r2, r2, #1
 8004578:	5ad3      	ldrh	r3, [r2, r3]
 800457a:	0019      	movs	r1, r3
 800457c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800457e:	f7fb fdd3 	bl	8000128 <__udivsi3>
 8004582:	0003      	movs	r3, r0
 8004584:	005a      	lsls	r2, r3, #1
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	18d2      	adds	r2, r2, r3
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	0019      	movs	r1, r3
 8004594:	0010      	movs	r0, r2
 8004596:	f7fb fdc7 	bl	8000128 <__udivsi3>
 800459a:	0003      	movs	r3, r0
 800459c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	2b0f      	cmp	r3, #15
 80045a2:	d921      	bls.n	80045e8 <UART_SetConfig+0x5b0>
 80045a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	025b      	lsls	r3, r3, #9
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d21c      	bcs.n	80045e8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	200e      	movs	r0, #14
 80045b4:	2420      	movs	r4, #32
 80045b6:	1903      	adds	r3, r0, r4
 80045b8:	19db      	adds	r3, r3, r7
 80045ba:	210f      	movs	r1, #15
 80045bc:	438a      	bics	r2, r1
 80045be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2207      	movs	r2, #7
 80045c8:	4013      	ands	r3, r2
 80045ca:	b299      	uxth	r1, r3
 80045cc:	1903      	adds	r3, r0, r4
 80045ce:	19db      	adds	r3, r3, r7
 80045d0:	1902      	adds	r2, r0, r4
 80045d2:	19d2      	adds	r2, r2, r7
 80045d4:	8812      	ldrh	r2, [r2, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	1902      	adds	r2, r0, r4
 80045e0:	19d2      	adds	r2, r2, r7
 80045e2:	8812      	ldrh	r2, [r2, #0]
 80045e4:	60da      	str	r2, [r3, #12]
 80045e6:	e05e      	b.n	80046a6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80045e8:	231a      	movs	r3, #26
 80045ea:	2220      	movs	r2, #32
 80045ec:	189b      	adds	r3, r3, r2
 80045ee:	19db      	adds	r3, r3, r7
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e057      	b.n	80046a6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045f6:	231b      	movs	r3, #27
 80045f8:	2220      	movs	r2, #32
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	19db      	adds	r3, r3, r7
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d015      	beq.n	8004630 <UART_SetConfig+0x5f8>
 8004604:	dc18      	bgt.n	8004638 <UART_SetConfig+0x600>
 8004606:	2b04      	cmp	r3, #4
 8004608:	d00d      	beq.n	8004626 <UART_SetConfig+0x5ee>
 800460a:	dc15      	bgt.n	8004638 <UART_SetConfig+0x600>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <UART_SetConfig+0x5de>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d005      	beq.n	8004620 <UART_SetConfig+0x5e8>
 8004614:	e010      	b.n	8004638 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004616:	f7ff f857 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 800461a:	0003      	movs	r3, r0
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800461e:	e014      	b.n	800464a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004620:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <UART_SetConfig+0x6a4>)
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004624:	e011      	b.n	800464a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004626:	f7fe ffc3 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 800462a:	0003      	movs	r3, r0
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800462e:	e00c      	b.n	800464a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004636:	e008      	b.n	800464a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800463c:	231a      	movs	r3, #26
 800463e:	2220      	movs	r2, #32
 8004640:	189b      	adds	r3, r3, r2
 8004642:	19db      	adds	r3, r3, r7
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
        break;
 8004648:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800464a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02a      	beq.n	80046a6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004654:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <UART_SetConfig+0x6a8>)
 8004656:	0052      	lsls	r2, r2, #1
 8004658:	5ad3      	ldrh	r3, [r2, r3]
 800465a:	0019      	movs	r1, r3
 800465c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800465e:	f7fb fd63 	bl	8000128 <__udivsi3>
 8004662:	0003      	movs	r3, r0
 8004664:	001a      	movs	r2, r3
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	18d2      	adds	r2, r2, r3
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	0019      	movs	r1, r3
 8004674:	0010      	movs	r0, r2
 8004676:	f7fb fd57 	bl	8000128 <__udivsi3>
 800467a:	0003      	movs	r3, r0
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004680:	2b0f      	cmp	r3, #15
 8004682:	d90a      	bls.n	800469a <UART_SetConfig+0x662>
 8004684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	025b      	lsls	r3, r3, #9
 800468a:	429a      	cmp	r2, r3
 800468c:	d205      	bcs.n	800469a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	b29a      	uxth	r2, r3
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60da      	str	r2, [r3, #12]
 8004698:	e005      	b.n	80046a6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800469a:	231a      	movs	r3, #26
 800469c:	2220      	movs	r2, #32
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	19db      	adds	r3, r3, r7
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	226a      	movs	r2, #106	; 0x6a
 80046aa:	2101      	movs	r1, #1
 80046ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	2268      	movs	r2, #104	; 0x68
 80046b2:	2101      	movs	r1, #1
 80046b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	2200      	movs	r2, #0
 80046ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	2200      	movs	r2, #0
 80046c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80046c2:	231a      	movs	r3, #26
 80046c4:	2220      	movs	r2, #32
 80046c6:	189b      	adds	r3, r3, r2
 80046c8:	19db      	adds	r3, r3, r7
 80046ca:	781b      	ldrb	r3, [r3, #0]
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b010      	add	sp, #64	; 0x40
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}
 80046d4:	40008000 	.word	0x40008000
 80046d8:	40008400 	.word	0x40008400
 80046dc:	00f42400 	.word	0x00f42400
 80046e0:	08007ad0 	.word	0x08007ad0

080046e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	2208      	movs	r2, #8
 80046f2:	4013      	ands	r3, r2
 80046f4:	d00b      	beq.n	800470e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4a4a      	ldr	r2, [pc, #296]	; (8004828 <UART_AdvFeatureConfig+0x144>)
 80046fe:	4013      	ands	r3, r2
 8004700:	0019      	movs	r1, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	2201      	movs	r2, #1
 8004714:	4013      	ands	r3, r2
 8004716:	d00b      	beq.n	8004730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4a43      	ldr	r2, [pc, #268]	; (800482c <UART_AdvFeatureConfig+0x148>)
 8004720:	4013      	ands	r3, r2
 8004722:	0019      	movs	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	2202      	movs	r2, #2
 8004736:	4013      	ands	r3, r2
 8004738:	d00b      	beq.n	8004752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4a3b      	ldr	r2, [pc, #236]	; (8004830 <UART_AdvFeatureConfig+0x14c>)
 8004742:	4013      	ands	r3, r2
 8004744:	0019      	movs	r1, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	2204      	movs	r2, #4
 8004758:	4013      	ands	r3, r2
 800475a:	d00b      	beq.n	8004774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	4a34      	ldr	r2, [pc, #208]	; (8004834 <UART_AdvFeatureConfig+0x150>)
 8004764:	4013      	ands	r3, r2
 8004766:	0019      	movs	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	2210      	movs	r2, #16
 800477a:	4013      	ands	r3, r2
 800477c:	d00b      	beq.n	8004796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	4a2c      	ldr	r2, [pc, #176]	; (8004838 <UART_AdvFeatureConfig+0x154>)
 8004786:	4013      	ands	r3, r2
 8004788:	0019      	movs	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	2220      	movs	r2, #32
 800479c:	4013      	ands	r3, r2
 800479e:	d00b      	beq.n	80047b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4a25      	ldr	r2, [pc, #148]	; (800483c <UART_AdvFeatureConfig+0x158>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	0019      	movs	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	2240      	movs	r2, #64	; 0x40
 80047be:	4013      	ands	r3, r2
 80047c0:	d01d      	beq.n	80047fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <UART_AdvFeatureConfig+0x15c>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	0019      	movs	r1, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	035b      	lsls	r3, r3, #13
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d10b      	bne.n	80047fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4a15      	ldr	r2, [pc, #84]	; (8004844 <UART_AdvFeatureConfig+0x160>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	4013      	ands	r3, r2
 8004806:	d00b      	beq.n	8004820 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4a0e      	ldr	r2, [pc, #56]	; (8004848 <UART_AdvFeatureConfig+0x164>)
 8004810:	4013      	ands	r3, r2
 8004812:	0019      	movs	r1, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }
}
 8004820:	46c0      	nop			; (mov r8, r8)
 8004822:	46bd      	mov	sp, r7
 8004824:	b002      	add	sp, #8
 8004826:	bd80      	pop	{r7, pc}
 8004828:	ffff7fff 	.word	0xffff7fff
 800482c:	fffdffff 	.word	0xfffdffff
 8004830:	fffeffff 	.word	0xfffeffff
 8004834:	fffbffff 	.word	0xfffbffff
 8004838:	ffffefff 	.word	0xffffefff
 800483c:	ffffdfff 	.word	0xffffdfff
 8004840:	ffefffff 	.word	0xffefffff
 8004844:	ff9fffff 	.word	0xff9fffff
 8004848:	fff7ffff 	.word	0xfff7ffff

0800484c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b092      	sub	sp, #72	; 0x48
 8004850:	af02      	add	r7, sp, #8
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2290      	movs	r2, #144	; 0x90
 8004858:	2100      	movs	r1, #0
 800485a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800485c:	f7fe fb74 	bl	8002f48 <HAL_GetTick>
 8004860:	0003      	movs	r3, r0
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2208      	movs	r2, #8
 800486c:	4013      	ands	r3, r2
 800486e:	2b08      	cmp	r3, #8
 8004870:	d12d      	bne.n	80048ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004874:	2280      	movs	r2, #128	; 0x80
 8004876:	0391      	lsls	r1, r2, #14
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	4a47      	ldr	r2, [pc, #284]	; (8004998 <UART_CheckIdleState+0x14c>)
 800487c:	9200      	str	r2, [sp, #0]
 800487e:	2200      	movs	r2, #0
 8004880:	f000 f88e 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 8004884:	1e03      	subs	r3, r0, #0
 8004886:	d022      	beq.n	80048ce <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004888:	f3ef 8310 	mrs	r3, PRIMASK
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004890:	63bb      	str	r3, [r7, #56]	; 0x38
 8004892:	2301      	movs	r3, #1
 8004894:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	f383 8810 	msr	PRIMASK, r3
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	438a      	bics	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	f383 8810 	msr	PRIMASK, r3
}
 80048b8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2288      	movs	r2, #136	; 0x88
 80048be:	2120      	movs	r1, #32
 80048c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2284      	movs	r2, #132	; 0x84
 80048c6:	2100      	movs	r1, #0
 80048c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e060      	b.n	8004990 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2204      	movs	r2, #4
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d146      	bne.n	800496a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	03d1      	lsls	r1, r2, #15
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <UART_CheckIdleState+0x14c>)
 80048e6:	9200      	str	r2, [sp, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f000 f859 	bl	80049a0 <UART_WaitOnFlagUntilTimeout>
 80048ee:	1e03      	subs	r3, r0, #0
 80048f0:	d03b      	beq.n	800496a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048f2:	f3ef 8310 	mrs	r3, PRIMASK
 80048f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80048f8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
 80048fc:	2301      	movs	r3, #1
 80048fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f383 8810 	msr	PRIMASK, r3
}
 8004906:	46c0      	nop			; (mov r8, r8)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4922      	ldr	r1, [pc, #136]	; (800499c <UART_CheckIdleState+0x150>)
 8004914:	400a      	ands	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f383 8810 	msr	PRIMASK, r3
}
 8004922:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004924:	f3ef 8310 	mrs	r3, PRIMASK
 8004928:	61bb      	str	r3, [r7, #24]
  return(result);
 800492a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492c:	633b      	str	r3, [r7, #48]	; 0x30
 800492e:	2301      	movs	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f383 8810 	msr	PRIMASK, r3
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2101      	movs	r1, #1
 8004946:	438a      	bics	r2, r1
 8004948:	609a      	str	r2, [r3, #8]
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	228c      	movs	r2, #140	; 0x8c
 800495a:	2120      	movs	r1, #32
 800495c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2284      	movs	r2, #132	; 0x84
 8004962:	2100      	movs	r1, #0
 8004964:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e012      	b.n	8004990 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2288      	movs	r2, #136	; 0x88
 800496e:	2120      	movs	r1, #32
 8004970:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	228c      	movs	r2, #140	; 0x8c
 8004976:	2120      	movs	r1, #32
 8004978:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2284      	movs	r2, #132	; 0x84
 800498a:	2100      	movs	r1, #0
 800498c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	b010      	add	sp, #64	; 0x40
 8004996:	bd80      	pop	{r7, pc}
 8004998:	01ffffff 	.word	0x01ffffff
 800499c:	fffffedf 	.word	0xfffffedf

080049a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	1dfb      	adds	r3, r7, #7
 80049ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049b0:	e051      	b.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	3301      	adds	r3, #1
 80049b6:	d04e      	beq.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049b8:	f7fe fac6 	bl	8002f48 <HAL_GetTick>
 80049bc:	0002      	movs	r2, r0
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d302      	bcc.n	80049ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e051      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2204      	movs	r2, #4
 80049da:	4013      	ands	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xb6>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b80      	cmp	r3, #128	; 0x80
 80049e2:	d038      	beq.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xb6>
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b40      	cmp	r3, #64	; 0x40
 80049e8:	d035      	beq.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	2208      	movs	r2, #8
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d111      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2208      	movs	r2, #8
 80049fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	0018      	movs	r0, r3
 8004a04:	f000 f960 	bl	8004cc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2290      	movs	r2, #144	; 0x90
 8004a0c:	2108      	movs	r1, #8
 8004a0e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2284      	movs	r2, #132	; 0x84
 8004a14:	2100      	movs	r1, #0
 8004a16:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e02c      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	401a      	ands	r2, r3
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d112      	bne.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2280      	movs	r2, #128	; 0x80
 8004a36:	0112      	lsls	r2, r2, #4
 8004a38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f000 f943 	bl	8004cc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2290      	movs	r2, #144	; 0x90
 8004a46:	2120      	movs	r1, #32
 8004a48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2284      	movs	r2, #132	; 0x84
 8004a4e:	2100      	movs	r1, #0
 8004a50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e00f      	b.n	8004a76 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	425a      	negs	r2, r3
 8004a66:	4153      	adcs	r3, r2
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	1dfb      	adds	r3, r7, #7
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d09e      	beq.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b004      	add	sp, #16
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b098      	sub	sp, #96	; 0x60
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	1dbb      	adds	r3, r7, #6
 8004a8c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	1dba      	adds	r2, r7, #6
 8004a98:	215c      	movs	r1, #92	; 0x5c
 8004a9a:	8812      	ldrh	r2, [r2, #0]
 8004a9c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1dba      	adds	r2, r7, #6
 8004aa2:	215e      	movs	r1, #94	; 0x5e
 8004aa4:	8812      	ldrh	r2, [r2, #0]
 8004aa6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	2380      	movs	r3, #128	; 0x80
 8004ab4:	015b      	lsls	r3, r3, #5
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d10d      	bne.n	8004ad6 <UART_Start_Receive_IT+0x56>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d104      	bne.n	8004acc <UART_Start_Receive_IT+0x4c>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2260      	movs	r2, #96	; 0x60
 8004ac6:	497b      	ldr	r1, [pc, #492]	; (8004cb4 <UART_Start_Receive_IT+0x234>)
 8004ac8:	5299      	strh	r1, [r3, r2]
 8004aca:	e02e      	b.n	8004b2a <UART_Start_Receive_IT+0xaa>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2260      	movs	r2, #96	; 0x60
 8004ad0:	21ff      	movs	r1, #255	; 0xff
 8004ad2:	5299      	strh	r1, [r3, r2]
 8004ad4:	e029      	b.n	8004b2a <UART_Start_Receive_IT+0xaa>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10d      	bne.n	8004afa <UART_Start_Receive_IT+0x7a>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <UART_Start_Receive_IT+0x70>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2260      	movs	r2, #96	; 0x60
 8004aea:	21ff      	movs	r1, #255	; 0xff
 8004aec:	5299      	strh	r1, [r3, r2]
 8004aee:	e01c      	b.n	8004b2a <UART_Start_Receive_IT+0xaa>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2260      	movs	r2, #96	; 0x60
 8004af4:	217f      	movs	r1, #127	; 0x7f
 8004af6:	5299      	strh	r1, [r3, r2]
 8004af8:	e017      	b.n	8004b2a <UART_Start_Receive_IT+0xaa>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	055b      	lsls	r3, r3, #21
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d10d      	bne.n	8004b22 <UART_Start_Receive_IT+0xa2>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d104      	bne.n	8004b18 <UART_Start_Receive_IT+0x98>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2260      	movs	r2, #96	; 0x60
 8004b12:	217f      	movs	r1, #127	; 0x7f
 8004b14:	5299      	strh	r1, [r3, r2]
 8004b16:	e008      	b.n	8004b2a <UART_Start_Receive_IT+0xaa>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2260      	movs	r2, #96	; 0x60
 8004b1c:	213f      	movs	r1, #63	; 0x3f
 8004b1e:	5299      	strh	r1, [r3, r2]
 8004b20:	e003      	b.n	8004b2a <UART_Start_Receive_IT+0xaa>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2260      	movs	r2, #96	; 0x60
 8004b26:	2100      	movs	r1, #0
 8004b28:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2290      	movs	r2, #144	; 0x90
 8004b2e:	2100      	movs	r1, #0
 8004b30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	228c      	movs	r2, #140	; 0x8c
 8004b36:	2122      	movs	r1, #34	; 0x22
 8004b38:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b44:	2301      	movs	r3, #1
 8004b46:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b4a:	f383 8810 	msr	PRIMASK, r3
}
 8004b4e:	46c0      	nop			; (mov r8, r8)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b62:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b66:	f383 8810 	msr	PRIMASK, r3
}
 8004b6a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b70:	2380      	movs	r3, #128	; 0x80
 8004b72:	059b      	lsls	r3, r3, #22
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d150      	bne.n	8004c1a <UART_Start_Receive_IT+0x19a>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2268      	movs	r2, #104	; 0x68
 8004b7c:	5a9b      	ldrh	r3, [r3, r2]
 8004b7e:	1dba      	adds	r2, r7, #6
 8004b80:	8812      	ldrh	r2, [r2, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d349      	bcc.n	8004c1a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	015b      	lsls	r3, r3, #5
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d107      	bne.n	8004ba2 <UART_Start_Receive_IT+0x122>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4a46      	ldr	r2, [pc, #280]	; (8004cb8 <UART_Start_Receive_IT+0x238>)
 8004b9e:	675a      	str	r2, [r3, #116]	; 0x74
 8004ba0:	e002      	b.n	8004ba8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a45      	ldr	r2, [pc, #276]	; (8004cbc <UART_Start_Receive_IT+0x23c>)
 8004ba6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d019      	beq.n	8004be4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bba:	2301      	movs	r3, #1
 8004bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	f383 8810 	msr	PRIMASK, r3
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	0049      	lsls	r1, r1, #1
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be4:	f3ef 8310 	mrs	r3, PRIMASK
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004bec:	657b      	str	r3, [r7, #84]	; 0x54
 8004bee:	2301      	movs	r3, #1
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2180      	movs	r1, #128	; 0x80
 8004c06:	0549      	lsls	r1, r1, #21
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	f383 8810 	msr	PRIMASK, r3
}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	e047      	b.n	8004caa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	015b      	lsls	r3, r3, #5
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d107      	bne.n	8004c36 <UART_Start_Receive_IT+0x1b6>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <UART_Start_Receive_IT+0x240>)
 8004c32:	675a      	str	r2, [r3, #116]	; 0x74
 8004c34:	e002      	b.n	8004c3c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <UART_Start_Receive_IT+0x244>)
 8004c3a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d019      	beq.n	8004c78 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c44:	f3ef 8310 	mrs	r3, PRIMASK
 8004c48:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c4a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4e:	2301      	movs	r3, #1
 8004c50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c52:	6a3b      	ldr	r3, [r7, #32]
 8004c54:	f383 8810 	msr	PRIMASK, r3
}
 8004c58:	46c0      	nop			; (mov r8, r8)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2190      	movs	r1, #144	; 0x90
 8004c66:	0049      	lsls	r1, r1, #1
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	f383 8810 	msr	PRIMASK, r3
}
 8004c76:	e018      	b.n	8004caa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c78:	f3ef 8310 	mrs	r3, PRIMASK
 8004c7c:	613b      	str	r3, [r7, #16]
  return(result);
 8004c7e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004c80:	653b      	str	r3, [r7, #80]	; 0x50
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f383 8810 	msr	PRIMASK, r3
}
 8004c8c:	46c0      	nop			; (mov r8, r8)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2120      	movs	r1, #32
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f383 8810 	msr	PRIMASK, r3
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b018      	add	sp, #96	; 0x60
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	000001ff 	.word	0x000001ff
 8004cb8:	08005511 	.word	0x08005511
 8004cbc:	080051c5 	.word	0x080051c5
 8004cc0:	08004ff1 	.word	0x08004ff1
 8004cc4:	08004e1d 	.word	0x08004e1d

08004cc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08e      	sub	sp, #56	; 0x38
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd4:	617b      	str	r3, [r7, #20]
  return(result);
 8004cd6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cda:	2301      	movs	r3, #1
 8004cdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	f383 8810 	msr	PRIMASK, r3
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4926      	ldr	r1, [pc, #152]	; (8004d8c <UART_EndRxTransfer+0xc4>)
 8004cf2:	400a      	ands	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d02:	f3ef 8310 	mrs	r3, PRIMASK
 8004d06:	623b      	str	r3, [r7, #32]
  return(result);
 8004d08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	f383 8810 	msr	PRIMASK, r3
}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	491b      	ldr	r1, [pc, #108]	; (8004d90 <UART_EndRxTransfer+0xc8>)
 8004d24:	400a      	ands	r2, r1
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	f383 8810 	msr	PRIMASK, r3
}
 8004d32:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d118      	bne.n	8004d6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d40:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d46:	2301      	movs	r3, #1
 8004d48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f383 8810 	msr	PRIMASK, r3
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2110      	movs	r1, #16
 8004d5e:	438a      	bics	r2, r1
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f383 8810 	msr	PRIMASK, r3
}
 8004d6c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	228c      	movs	r2, #140	; 0x8c
 8004d72:	2120      	movs	r1, #32
 8004d74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b00e      	add	sp, #56	; 0x38
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	fffffedf 	.word	0xfffffedf
 8004d90:	effffffe 	.word	0xeffffffe

08004d94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	225e      	movs	r2, #94	; 0x5e
 8004da6:	2100      	movs	r1, #0
 8004da8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2256      	movs	r2, #86	; 0x56
 8004dae:	2100      	movs	r1, #0
 8004db0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7ff f92b 	bl	8004010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	b004      	add	sp, #16
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b086      	sub	sp, #24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dca:	f3ef 8310 	mrs	r3, PRIMASK
 8004dce:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f383 8810 	msr	PRIMASK, r3
}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2140      	movs	r1, #64	; 0x40
 8004dec:	438a      	bics	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f383 8810 	msr	PRIMASK, r3
}
 8004dfa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2288      	movs	r2, #136	; 0x88
 8004e00:	2120      	movs	r1, #32
 8004e02:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff f8f7 	bl	8004000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b006      	add	sp, #24
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b094      	sub	sp, #80	; 0x50
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e24:	204e      	movs	r0, #78	; 0x4e
 8004e26:	183b      	adds	r3, r7, r0
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	2160      	movs	r1, #96	; 0x60
 8004e2c:	5a52      	ldrh	r2, [r2, r1]
 8004e2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	228c      	movs	r2, #140	; 0x8c
 8004e34:	589b      	ldr	r3, [r3, r2]
 8004e36:	2b22      	cmp	r3, #34	; 0x22
 8004e38:	d000      	beq.n	8004e3c <UART_RxISR_8BIT+0x20>
 8004e3a:	e0c4      	b.n	8004fc6 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e42:	214c      	movs	r1, #76	; 0x4c
 8004e44:	187b      	adds	r3, r7, r1
 8004e46:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	183b      	adds	r3, r7, r0
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b2d9      	uxtb	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e58:	400a      	ands	r2, r1
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	225e      	movs	r2, #94	; 0x5e
 8004e6c:	5a9b      	ldrh	r3, [r3, r2]
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b299      	uxth	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	225e      	movs	r2, #94	; 0x5e
 8004e78:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	225e      	movs	r2, #94	; 0x5e
 8004e7e:	5a9b      	ldrh	r3, [r3, r2]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d000      	beq.n	8004e88 <UART_RxISR_8BIT+0x6c>
 8004e86:	e0a6      	b.n	8004fd6 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e88:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e92:	2301      	movs	r3, #1
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			; (mov r8, r8)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	494d      	ldr	r1, [pc, #308]	; (8004fe0 <UART_RxISR_8BIT+0x1c4>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eba:	f3ef 8310 	mrs	r3, PRIMASK
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eca:	f383 8810 	msr	PRIMASK, r3
}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689a      	ldr	r2, [r3, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2101      	movs	r1, #1
 8004edc:	438a      	bics	r2, r1
 8004ede:	609a      	str	r2, [r3, #8]
 8004ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	f383 8810 	msr	PRIMASK, r3
}
 8004eea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	228c      	movs	r2, #140	; 0x8c
 8004ef0:	2120      	movs	r1, #32
 8004ef2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a37      	ldr	r2, [pc, #220]	; (8004fe4 <UART_RxISR_8BIT+0x1c8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d024      	beq.n	8004f54 <UART_RxISR_8BIT+0x138>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a36      	ldr	r2, [pc, #216]	; (8004fe8 <UART_RxISR_8BIT+0x1cc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d01f      	beq.n	8004f54 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	2380      	movs	r3, #128	; 0x80
 8004f1c:	041b      	lsls	r3, r3, #16
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d018      	beq.n	8004f54 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f22:	f3ef 8310 	mrs	r3, PRIMASK
 8004f26:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f28:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	f383 8810 	msr	PRIMASK, r3
}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	492a      	ldr	r1, [pc, #168]	; (8004fec <UART_RxISR_8BIT+0x1d0>)
 8004f44:	400a      	ands	r2, r1
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	f383 8810 	msr	PRIMASK, r3
}
 8004f52:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d12f      	bne.n	8004fbc <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f62:	f3ef 8310 	mrs	r3, PRIMASK
 8004f66:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f68:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f383 8810 	msr	PRIMASK, r3
}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2110      	movs	r1, #16
 8004f84:	438a      	bics	r2, r1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f383 8810 	msr	PRIMASK, r3
}
 8004f92:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	2210      	movs	r2, #16
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d103      	bne.n	8004faa <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2210      	movs	r2, #16
 8004fa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	225c      	movs	r2, #92	; 0x5c
 8004fae:	5a9a      	ldrh	r2, [r3, r2]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	0011      	movs	r1, r2
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7ff f833 	bl	8004020 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fba:	e00c      	b.n	8004fd6 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f7fd fd24 	bl	8002a0c <HAL_UART_RxCpltCallback>
}
 8004fc4:	e007      	b.n	8004fd6 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2108      	movs	r1, #8
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	619a      	str	r2, [r3, #24]
}
 8004fd6:	46c0      	nop			; (mov r8, r8)
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b014      	add	sp, #80	; 0x50
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	fffffedf 	.word	0xfffffedf
 8004fe4:	40008000 	.word	0x40008000
 8004fe8:	40008400 	.word	0x40008400
 8004fec:	fbffffff 	.word	0xfbffffff

08004ff0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b094      	sub	sp, #80	; 0x50
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ff8:	204e      	movs	r0, #78	; 0x4e
 8004ffa:	183b      	adds	r3, r7, r0
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	2160      	movs	r1, #96	; 0x60
 8005000:	5a52      	ldrh	r2, [r2, r1]
 8005002:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	228c      	movs	r2, #140	; 0x8c
 8005008:	589b      	ldr	r3, [r3, r2]
 800500a:	2b22      	cmp	r3, #34	; 0x22
 800500c:	d000      	beq.n	8005010 <UART_RxISR_16BIT+0x20>
 800500e:	e0c4      	b.n	800519a <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005016:	214c      	movs	r1, #76	; 0x4c
 8005018:	187b      	adds	r3, r7, r1
 800501a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005020:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005022:	187b      	adds	r3, r7, r1
 8005024:	183a      	adds	r2, r7, r0
 8005026:	881b      	ldrh	r3, [r3, #0]
 8005028:	8812      	ldrh	r2, [r2, #0]
 800502a:	4013      	ands	r3, r2
 800502c:	b29a      	uxth	r2, r3
 800502e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005030:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005036:	1c9a      	adds	r2, r3, #2
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	225e      	movs	r2, #94	; 0x5e
 8005040:	5a9b      	ldrh	r3, [r3, r2]
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b299      	uxth	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	225e      	movs	r2, #94	; 0x5e
 800504c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	225e      	movs	r2, #94	; 0x5e
 8005052:	5a9b      	ldrh	r3, [r3, r2]
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d000      	beq.n	800505c <UART_RxISR_16BIT+0x6c>
 800505a:	e0a6      	b.n	80051aa <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505c:	f3ef 8310 	mrs	r3, PRIMASK
 8005060:	623b      	str	r3, [r7, #32]
  return(result);
 8005062:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005064:	647b      	str	r3, [r7, #68]	; 0x44
 8005066:	2301      	movs	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	f383 8810 	msr	PRIMASK, r3
}
 8005070:	46c0      	nop			; (mov r8, r8)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	494d      	ldr	r1, [pc, #308]	; (80051b4 <UART_RxISR_16BIT+0x1c4>)
 800507e:	400a      	ands	r2, r1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	f383 8810 	msr	PRIMASK, r3
}
 800508c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800508e:	f3ef 8310 	mrs	r3, PRIMASK
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005096:	643b      	str	r3, [r7, #64]	; 0x40
 8005098:	2301      	movs	r3, #1
 800509a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2101      	movs	r1, #1
 80050b0:	438a      	bics	r2, r1
 80050b2:	609a      	str	r2, [r3, #8]
 80050b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ba:	f383 8810 	msr	PRIMASK, r3
}
 80050be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	228c      	movs	r2, #140	; 0x8c
 80050c4:	2120      	movs	r1, #32
 80050c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a37      	ldr	r2, [pc, #220]	; (80051b8 <UART_RxISR_16BIT+0x1c8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d024      	beq.n	8005128 <UART_RxISR_16BIT+0x138>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a36      	ldr	r2, [pc, #216]	; (80051bc <UART_RxISR_16BIT+0x1cc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d01f      	beq.n	8005128 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	041b      	lsls	r3, r3, #16
 80050f2:	4013      	ands	r3, r2
 80050f4:	d018      	beq.n	8005128 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f6:	f3ef 8310 	mrs	r3, PRIMASK
 80050fa:	617b      	str	r3, [r7, #20]
  return(result);
 80050fc:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005100:	2301      	movs	r3, #1
 8005102:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	f383 8810 	msr	PRIMASK, r3
}
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	492a      	ldr	r1, [pc, #168]	; (80051c0 <UART_RxISR_16BIT+0x1d0>)
 8005118:	400a      	ands	r2, r1
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f383 8810 	msr	PRIMASK, r3
}
 8005126:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800512c:	2b01      	cmp	r3, #1
 800512e:	d12f      	bne.n	8005190 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005136:	f3ef 8310 	mrs	r3, PRIMASK
 800513a:	60bb      	str	r3, [r7, #8]
  return(result);
 800513c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005140:	2301      	movs	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f383 8810 	msr	PRIMASK, r3
}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2110      	movs	r1, #16
 8005158:	438a      	bics	r2, r1
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f383 8810 	msr	PRIMASK, r3
}
 8005166:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	2210      	movs	r2, #16
 8005170:	4013      	ands	r3, r2
 8005172:	2b10      	cmp	r3, #16
 8005174:	d103      	bne.n	800517e <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2210      	movs	r2, #16
 800517c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	225c      	movs	r2, #92	; 0x5c
 8005182:	5a9a      	ldrh	r2, [r3, r2]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	0011      	movs	r1, r2
 8005188:	0018      	movs	r0, r3
 800518a:	f7fe ff49 	bl	8004020 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800518e:	e00c      	b.n	80051aa <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	0018      	movs	r0, r3
 8005194:	f7fd fc3a 	bl	8002a0c <HAL_UART_RxCpltCallback>
}
 8005198:	e007      	b.n	80051aa <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2108      	movs	r1, #8
 80051a6:	430a      	orrs	r2, r1
 80051a8:	619a      	str	r2, [r3, #24]
}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b014      	add	sp, #80	; 0x50
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	46c0      	nop			; (mov r8, r8)
 80051b4:	fffffedf 	.word	0xfffffedf
 80051b8:	40008000 	.word	0x40008000
 80051bc:	40008400 	.word	0x40008400
 80051c0:	fbffffff 	.word	0xfbffffff

080051c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b0a0      	sub	sp, #128	; 0x80
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80051cc:	237a      	movs	r3, #122	; 0x7a
 80051ce:	18fb      	adds	r3, r7, r3
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	2160      	movs	r1, #96	; 0x60
 80051d4:	5a52      	ldrh	r2, [r2, r1]
 80051d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	228c      	movs	r2, #140	; 0x8c
 80051f4:	589b      	ldr	r3, [r3, r2]
 80051f6:	2b22      	cmp	r3, #34	; 0x22
 80051f8:	d000      	beq.n	80051fc <UART_RxISR_8BIT_FIFOEN+0x38>
 80051fa:	e16f      	b.n	80054dc <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051fc:	236e      	movs	r3, #110	; 0x6e
 80051fe:	18fb      	adds	r3, r7, r3
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	2168      	movs	r1, #104	; 0x68
 8005204:	5a52      	ldrh	r2, [r2, r1]
 8005206:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005208:	e116      	b.n	8005438 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005210:	216c      	movs	r1, #108	; 0x6c
 8005212:	187b      	adds	r3, r7, r1
 8005214:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005216:	187b      	adds	r3, r7, r1
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	237a      	movs	r3, #122	; 0x7a
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	b2d9      	uxtb	r1, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	400a      	ands	r2, r1
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	225e      	movs	r2, #94	; 0x5e
 800523c:	5a9b      	ldrh	r3, [r3, r2]
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b299      	uxth	r1, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	225e      	movs	r2, #94	; 0x5e
 8005248:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005254:	2207      	movs	r2, #7
 8005256:	4013      	ands	r3, r2
 8005258:	d049      	beq.n	80052ee <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800525a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800525c:	2201      	movs	r2, #1
 800525e:	4013      	ands	r3, r2
 8005260:	d010      	beq.n	8005284 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005262:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005264:	2380      	movs	r3, #128	; 0x80
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4013      	ands	r3, r2
 800526a:	d00b      	beq.n	8005284 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2201      	movs	r2, #1
 8005272:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2290      	movs	r2, #144	; 0x90
 8005278:	589b      	ldr	r3, [r3, r2]
 800527a:	2201      	movs	r2, #1
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2190      	movs	r1, #144	; 0x90
 8005282:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005286:	2202      	movs	r2, #2
 8005288:	4013      	ands	r3, r2
 800528a:	d00f      	beq.n	80052ac <UART_RxISR_8BIT_FIFOEN+0xe8>
 800528c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800528e:	2201      	movs	r2, #1
 8005290:	4013      	ands	r3, r2
 8005292:	d00b      	beq.n	80052ac <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2202      	movs	r2, #2
 800529a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2290      	movs	r2, #144	; 0x90
 80052a0:	589b      	ldr	r3, [r3, r2]
 80052a2:	2204      	movs	r2, #4
 80052a4:	431a      	orrs	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2190      	movs	r1, #144	; 0x90
 80052aa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ae:	2204      	movs	r2, #4
 80052b0:	4013      	ands	r3, r2
 80052b2:	d00f      	beq.n	80052d4 <UART_RxISR_8BIT_FIFOEN+0x110>
 80052b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052b6:	2201      	movs	r2, #1
 80052b8:	4013      	ands	r3, r2
 80052ba:	d00b      	beq.n	80052d4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2204      	movs	r2, #4
 80052c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2290      	movs	r2, #144	; 0x90
 80052c8:	589b      	ldr	r3, [r3, r2]
 80052ca:	2202      	movs	r2, #2
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2190      	movs	r1, #144	; 0x90
 80052d2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2290      	movs	r2, #144	; 0x90
 80052d8:	589b      	ldr	r3, [r3, r2]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	0018      	movs	r0, r3
 80052e2:	f7fe fe95 	bl	8004010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2290      	movs	r2, #144	; 0x90
 80052ea:	2100      	movs	r1, #0
 80052ec:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	225e      	movs	r2, #94	; 0x5e
 80052f2:	5a9b      	ldrh	r3, [r3, r2]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d000      	beq.n	80052fc <UART_RxISR_8BIT_FIFOEN+0x138>
 80052fa:	e09d      	b.n	8005438 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005300:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005304:	66bb      	str	r3, [r7, #104]	; 0x68
 8005306:	2301      	movs	r3, #1
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530c:	f383 8810 	msr	PRIMASK, r3
}
 8005310:	46c0      	nop			; (mov r8, r8)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4975      	ldr	r1, [pc, #468]	; (80054f4 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800531e:	400a      	ands	r2, r1
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005324:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005328:	f383 8810 	msr	PRIMASK, r3
}
 800532c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800532e:	f3ef 8310 	mrs	r3, PRIMASK
 8005332:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8005334:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005336:	667b      	str	r3, [r7, #100]	; 0x64
 8005338:	2301      	movs	r3, #1
 800533a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800533e:	f383 8810 	msr	PRIMASK, r3
}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	496a      	ldr	r1, [pc, #424]	; (80054f8 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8005350:	400a      	ands	r2, r1
 8005352:	609a      	str	r2, [r3, #8]
 8005354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535a:	f383 8810 	msr	PRIMASK, r3
}
 800535e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	228c      	movs	r2, #140	; 0x8c
 8005364:	2120      	movs	r1, #32
 8005366:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a60      	ldr	r2, [pc, #384]	; (80054fc <UART_RxISR_8BIT_FIFOEN+0x338>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d024      	beq.n	80053c8 <UART_RxISR_8BIT_FIFOEN+0x204>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a5f      	ldr	r2, [pc, #380]	; (8005500 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d01f      	beq.n	80053c8 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	041b      	lsls	r3, r3, #16
 8005392:	4013      	ands	r3, r2
 8005394:	d018      	beq.n	80053c8 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005396:	f3ef 8310 	mrs	r3, PRIMASK
 800539a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800539e:	663b      	str	r3, [r7, #96]	; 0x60
 80053a0:	2301      	movs	r3, #1
 80053a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	f383 8810 	msr	PRIMASK, r3
}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4953      	ldr	r1, [pc, #332]	; (8005504 <UART_RxISR_8BIT_FIFOEN+0x340>)
 80053b8:	400a      	ands	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d12f      	bne.n	8005430 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d6:	f3ef 8310 	mrs	r3, PRIMASK
 80053da:	623b      	str	r3, [r7, #32]
  return(result);
 80053dc:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053e0:	2301      	movs	r3, #1
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	f383 8810 	msr	PRIMASK, r3
}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2110      	movs	r1, #16
 80053f8:	438a      	bics	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005402:	f383 8810 	msr	PRIMASK, r3
}
 8005406:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	2210      	movs	r2, #16
 8005410:	4013      	ands	r3, r2
 8005412:	2b10      	cmp	r3, #16
 8005414:	d103      	bne.n	800541e <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2210      	movs	r2, #16
 800541c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	225c      	movs	r2, #92	; 0x5c
 8005422:	5a9a      	ldrh	r2, [r3, r2]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	0011      	movs	r1, r2
 8005428:	0018      	movs	r0, r3
 800542a:	f7fe fdf9 	bl	8004020 <HAL_UARTEx_RxEventCallback>
 800542e:	e003      	b.n	8005438 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	0018      	movs	r0, r3
 8005434:	f7fd faea 	bl	8002a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005438:	236e      	movs	r3, #110	; 0x6e
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d004      	beq.n	800544c <UART_RxISR_8BIT_FIFOEN+0x288>
 8005442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005444:	2220      	movs	r2, #32
 8005446:	4013      	ands	r3, r2
 8005448:	d000      	beq.n	800544c <UART_RxISR_8BIT_FIFOEN+0x288>
 800544a:	e6de      	b.n	800520a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800544c:	205a      	movs	r0, #90	; 0x5a
 800544e:	183b      	adds	r3, r7, r0
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	215e      	movs	r1, #94	; 0x5e
 8005454:	5a52      	ldrh	r2, [r2, r1]
 8005456:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005458:	0001      	movs	r1, r0
 800545a:	187b      	adds	r3, r7, r1
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d044      	beq.n	80054ec <UART_RxISR_8BIT_FIFOEN+0x328>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2268      	movs	r2, #104	; 0x68
 8005466:	5a9b      	ldrh	r3, [r3, r2]
 8005468:	187a      	adds	r2, r7, r1
 800546a:	8812      	ldrh	r2, [r2, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d23d      	bcs.n	80054ec <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005470:	f3ef 8310 	mrs	r3, PRIMASK
 8005474:	60bb      	str	r3, [r7, #8]
  return(result);
 8005476:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005478:	657b      	str	r3, [r7, #84]	; 0x54
 800547a:	2301      	movs	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f383 8810 	msr	PRIMASK, r3
}
 8005484:	46c0      	nop			; (mov r8, r8)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	491d      	ldr	r1, [pc, #116]	; (8005508 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8005492:	400a      	ands	r2, r1
 8005494:	609a      	str	r2, [r3, #8]
 8005496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f383 8810 	msr	PRIMASK, r3
}
 80054a0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a19      	ldr	r2, [pc, #100]	; (800550c <UART_RxISR_8BIT_FIFOEN+0x348>)
 80054a6:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054a8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ac:	617b      	str	r3, [r7, #20]
  return(result);
 80054ae:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054b0:	653b      	str	r3, [r7, #80]	; 0x50
 80054b2:	2301      	movs	r3, #1
 80054b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2120      	movs	r1, #32
 80054ca:	430a      	orrs	r2, r1
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f383 8810 	msr	PRIMASK, r3
}
 80054d8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054da:	e007      	b.n	80054ec <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2108      	movs	r1, #8
 80054e8:	430a      	orrs	r2, r1
 80054ea:	619a      	str	r2, [r3, #24]
}
 80054ec:	46c0      	nop			; (mov r8, r8)
 80054ee:	46bd      	mov	sp, r7
 80054f0:	b020      	add	sp, #128	; 0x80
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	fffffeff 	.word	0xfffffeff
 80054f8:	effffffe 	.word	0xeffffffe
 80054fc:	40008000 	.word	0x40008000
 8005500:	40008400 	.word	0x40008400
 8005504:	fbffffff 	.word	0xfbffffff
 8005508:	efffffff 	.word	0xefffffff
 800550c:	08004e1d 	.word	0x08004e1d

08005510 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0a2      	sub	sp, #136	; 0x88
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005518:	2382      	movs	r3, #130	; 0x82
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	2160      	movs	r1, #96	; 0x60
 8005520:	5a52      	ldrh	r2, [r2, r1]
 8005522:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	2284      	movs	r2, #132	; 0x84
 800552c:	18ba      	adds	r2, r7, r2
 800552e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	228c      	movs	r2, #140	; 0x8c
 8005544:	589b      	ldr	r3, [r3, r2]
 8005546:	2b22      	cmp	r3, #34	; 0x22
 8005548:	d000      	beq.n	800554c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800554a:	e179      	b.n	8005840 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800554c:	2376      	movs	r3, #118	; 0x76
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	2168      	movs	r1, #104	; 0x68
 8005554:	5a52      	ldrh	r2, [r2, r1]
 8005556:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005558:	e11e      	b.n	8005798 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005560:	2174      	movs	r1, #116	; 0x74
 8005562:	187b      	adds	r3, r7, r1
 8005564:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800556c:	187b      	adds	r3, r7, r1
 800556e:	2282      	movs	r2, #130	; 0x82
 8005570:	18ba      	adds	r2, r7, r2
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	8812      	ldrh	r2, [r2, #0]
 8005576:	4013      	ands	r3, r2
 8005578:	b29a      	uxth	r2, r3
 800557a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800557c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005582:	1c9a      	adds	r2, r3, #2
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	225e      	movs	r2, #94	; 0x5e
 800558c:	5a9b      	ldrh	r3, [r3, r2]
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b299      	uxth	r1, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	225e      	movs	r2, #94	; 0x5e
 8005598:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	2184      	movs	r1, #132	; 0x84
 80055a2:	187a      	adds	r2, r7, r1
 80055a4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2207      	movs	r2, #7
 80055ac:	4013      	ands	r3, r2
 80055ae:	d04e      	beq.n	800564e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055b0:	187b      	adds	r3, r7, r1
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2201      	movs	r2, #1
 80055b6:	4013      	ands	r3, r2
 80055b8:	d010      	beq.n	80055dc <UART_RxISR_16BIT_FIFOEN+0xcc>
 80055ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	4013      	ands	r3, r2
 80055c2:	d00b      	beq.n	80055dc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2201      	movs	r2, #1
 80055ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2290      	movs	r2, #144	; 0x90
 80055d0:	589b      	ldr	r3, [r3, r2]
 80055d2:	2201      	movs	r2, #1
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2190      	movs	r1, #144	; 0x90
 80055da:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055dc:	2384      	movs	r3, #132	; 0x84
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2202      	movs	r2, #2
 80055e4:	4013      	ands	r3, r2
 80055e6:	d00f      	beq.n	8005608 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80055e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ea:	2201      	movs	r2, #1
 80055ec:	4013      	ands	r3, r2
 80055ee:	d00b      	beq.n	8005608 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2290      	movs	r2, #144	; 0x90
 80055fc:	589b      	ldr	r3, [r3, r2]
 80055fe:	2204      	movs	r2, #4
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2190      	movs	r1, #144	; 0x90
 8005606:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005608:	2384      	movs	r3, #132	; 0x84
 800560a:	18fb      	adds	r3, r7, r3
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2204      	movs	r2, #4
 8005610:	4013      	ands	r3, r2
 8005612:	d00f      	beq.n	8005634 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005616:	2201      	movs	r2, #1
 8005618:	4013      	ands	r3, r2
 800561a:	d00b      	beq.n	8005634 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2204      	movs	r2, #4
 8005622:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2290      	movs	r2, #144	; 0x90
 8005628:	589b      	ldr	r3, [r3, r2]
 800562a:	2202      	movs	r2, #2
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2190      	movs	r1, #144	; 0x90
 8005632:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2290      	movs	r2, #144	; 0x90
 8005638:	589b      	ldr	r3, [r3, r2]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0018      	movs	r0, r3
 8005642:	f7fe fce5 	bl	8004010 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2290      	movs	r2, #144	; 0x90
 800564a:	2100      	movs	r1, #0
 800564c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	225e      	movs	r2, #94	; 0x5e
 8005652:	5a9b      	ldrh	r3, [r3, r2]
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d000      	beq.n	800565c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800565a:	e09d      	b.n	8005798 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565c:	f3ef 8310 	mrs	r3, PRIMASK
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005664:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005666:	2301      	movs	r3, #1
 8005668:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800566c:	f383 8810 	msr	PRIMASK, r3
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4976      	ldr	r1, [pc, #472]	; (8005858 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800567e:	400a      	ands	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005684:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800568e:	f3ef 8310 	mrs	r3, PRIMASK
 8005692:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005694:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005696:	66bb      	str	r3, [r7, #104]	; 0x68
 8005698:	2301      	movs	r3, #1
 800569a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800569c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800569e:	f383 8810 	msr	PRIMASK, r3
}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	496b      	ldr	r1, [pc, #428]	; (800585c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80056b0:	400a      	ands	r2, r1
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ba:	f383 8810 	msr	PRIMASK, r3
}
 80056be:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	228c      	movs	r2, #140	; 0x8c
 80056c4:	2120      	movs	r1, #32
 80056c6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a61      	ldr	r2, [pc, #388]	; (8005860 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d024      	beq.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x218>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a60      	ldr	r2, [pc, #384]	; (8005864 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d01f      	beq.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	2380      	movs	r3, #128	; 0x80
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	4013      	ands	r3, r2
 80056f4:	d018      	beq.n	8005728 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056f6:	f3ef 8310 	mrs	r3, PRIMASK
 80056fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005700:	2301      	movs	r3, #1
 8005702:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005706:	f383 8810 	msr	PRIMASK, r3
}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4954      	ldr	r1, [pc, #336]	; (8005868 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8005718:	400a      	ands	r2, r1
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800571e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005722:	f383 8810 	msr	PRIMASK, r3
}
 8005726:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d12f      	bne.n	8005790 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005736:	f3ef 8310 	mrs	r3, PRIMASK
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573e:	663b      	str	r3, [r7, #96]	; 0x60
 8005740:	2301      	movs	r3, #1
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	f383 8810 	msr	PRIMASK, r3
}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2110      	movs	r1, #16
 8005758:	438a      	bics	r2, r1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	f383 8810 	msr	PRIMASK, r3
}
 8005766:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	2210      	movs	r2, #16
 8005770:	4013      	ands	r3, r2
 8005772:	2b10      	cmp	r3, #16
 8005774:	d103      	bne.n	800577e <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2210      	movs	r2, #16
 800577c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	225c      	movs	r2, #92	; 0x5c
 8005782:	5a9a      	ldrh	r2, [r3, r2]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	0011      	movs	r1, r2
 8005788:	0018      	movs	r0, r3
 800578a:	f7fe fc49 	bl	8004020 <HAL_UARTEx_RxEventCallback>
 800578e:	e003      	b.n	8005798 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	0018      	movs	r0, r3
 8005794:	f7fd f93a 	bl	8002a0c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005798:	2376      	movs	r3, #118	; 0x76
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	881b      	ldrh	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d006      	beq.n	80057b0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80057a2:	2384      	movs	r3, #132	; 0x84
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2220      	movs	r2, #32
 80057aa:	4013      	ands	r3, r2
 80057ac:	d000      	beq.n	80057b0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80057ae:	e6d4      	b.n	800555a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80057b0:	205e      	movs	r0, #94	; 0x5e
 80057b2:	183b      	adds	r3, r7, r0
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	215e      	movs	r1, #94	; 0x5e
 80057b8:	5a52      	ldrh	r2, [r2, r1]
 80057ba:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80057bc:	0001      	movs	r1, r0
 80057be:	187b      	adds	r3, r7, r1
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d044      	beq.n	8005850 <UART_RxISR_16BIT_FIFOEN+0x340>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2268      	movs	r2, #104	; 0x68
 80057ca:	5a9b      	ldrh	r3, [r3, r2]
 80057cc:	187a      	adds	r2, r7, r1
 80057ce:	8812      	ldrh	r2, [r2, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d23d      	bcs.n	8005850 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d4:	f3ef 8310 	mrs	r3, PRIMASK
 80057d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80057da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80057de:	2301      	movs	r3, #1
 80057e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f383 8810 	msr	PRIMASK, r3
}
 80057e8:	46c0      	nop			; (mov r8, r8)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	491d      	ldr	r1, [pc, #116]	; (800586c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80057f6:	400a      	ands	r2, r1
 80057f8:	609a      	str	r2, [r3, #8]
 80057fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f383 8810 	msr	PRIMASK, r3
}
 8005804:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a19      	ldr	r2, [pc, #100]	; (8005870 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800580a:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800580c:	f3ef 8310 	mrs	r3, PRIMASK
 8005810:	61bb      	str	r3, [r7, #24]
  return(result);
 8005812:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005814:	657b      	str	r3, [r7, #84]	; 0x54
 8005816:	2301      	movs	r3, #1
 8005818:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f383 8810 	msr	PRIMASK, r3
}
 8005820:	46c0      	nop			; (mov r8, r8)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2120      	movs	r1, #32
 800582e:	430a      	orrs	r2, r1
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005834:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f383 8810 	msr	PRIMASK, r3
}
 800583c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800583e:	e007      	b.n	8005850 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699a      	ldr	r2, [r3, #24]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2108      	movs	r1, #8
 800584c:	430a      	orrs	r2, r1
 800584e:	619a      	str	r2, [r3, #24]
}
 8005850:	46c0      	nop			; (mov r8, r8)
 8005852:	46bd      	mov	sp, r7
 8005854:	b022      	add	sp, #136	; 0x88
 8005856:	bd80      	pop	{r7, pc}
 8005858:	fffffeff 	.word	0xfffffeff
 800585c:	effffffe 	.word	0xeffffffe
 8005860:	40008000 	.word	0x40008000
 8005864:	40008400 	.word	0x40008400
 8005868:	fbffffff 	.word	0xfbffffff
 800586c:	efffffff 	.word	0xefffffff
 8005870:	08004ff1 	.word	0x08004ff1

08005874 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800587c:	46c0      	nop			; (mov r8, r8)
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800588c:	46c0      	nop			; (mov r8, r8)
 800588e:	46bd      	mov	sp, r7
 8005890:	b002      	add	sp, #8
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800589c:	46c0      	nop			; (mov r8, r8)
 800589e:	46bd      	mov	sp, r7
 80058a0:	b002      	add	sp, #8
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <siprintf>:
 80058a4:	b40e      	push	{r1, r2, r3}
 80058a6:	b500      	push	{lr}
 80058a8:	490b      	ldr	r1, [pc, #44]	; (80058d8 <siprintf+0x34>)
 80058aa:	b09c      	sub	sp, #112	; 0x70
 80058ac:	ab1d      	add	r3, sp, #116	; 0x74
 80058ae:	9002      	str	r0, [sp, #8]
 80058b0:	9006      	str	r0, [sp, #24]
 80058b2:	9107      	str	r1, [sp, #28]
 80058b4:	9104      	str	r1, [sp, #16]
 80058b6:	4809      	ldr	r0, [pc, #36]	; (80058dc <siprintf+0x38>)
 80058b8:	4909      	ldr	r1, [pc, #36]	; (80058e0 <siprintf+0x3c>)
 80058ba:	cb04      	ldmia	r3!, {r2}
 80058bc:	9105      	str	r1, [sp, #20]
 80058be:	6800      	ldr	r0, [r0, #0]
 80058c0:	a902      	add	r1, sp, #8
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	f000 f9e4 	bl	8005c90 <_svfiprintf_r>
 80058c8:	2200      	movs	r2, #0
 80058ca:	9b02      	ldr	r3, [sp, #8]
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	b01c      	add	sp, #112	; 0x70
 80058d0:	bc08      	pop	{r3}
 80058d2:	b003      	add	sp, #12
 80058d4:	4718      	bx	r3
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	7fffffff 	.word	0x7fffffff
 80058dc:	20000078 	.word	0x20000078
 80058e0:	ffff0208 	.word	0xffff0208

080058e4 <siscanf>:
 80058e4:	b40e      	push	{r1, r2, r3}
 80058e6:	b530      	push	{r4, r5, lr}
 80058e8:	2381      	movs	r3, #129	; 0x81
 80058ea:	b09c      	sub	sp, #112	; 0x70
 80058ec:	466a      	mov	r2, sp
 80058ee:	ac1f      	add	r4, sp, #124	; 0x7c
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	cc20      	ldmia	r4!, {r5}
 80058f4:	8293      	strh	r3, [r2, #20]
 80058f6:	9002      	str	r0, [sp, #8]
 80058f8:	9006      	str	r0, [sp, #24]
 80058fa:	f7fa fc03 	bl	8000104 <strlen>
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <siscanf+0x48>)
 8005900:	466a      	mov	r2, sp
 8005902:	930b      	str	r3, [sp, #44]	; 0x2c
 8005904:	2300      	movs	r3, #0
 8005906:	9003      	str	r0, [sp, #12]
 8005908:	9007      	str	r0, [sp, #28]
 800590a:	4809      	ldr	r0, [pc, #36]	; (8005930 <siscanf+0x4c>)
 800590c:	930f      	str	r3, [sp, #60]	; 0x3c
 800590e:	9314      	str	r3, [sp, #80]	; 0x50
 8005910:	3b01      	subs	r3, #1
 8005912:	82d3      	strh	r3, [r2, #22]
 8005914:	a902      	add	r1, sp, #8
 8005916:	0023      	movs	r3, r4
 8005918:	002a      	movs	r2, r5
 800591a:	6800      	ldr	r0, [r0, #0]
 800591c:	9401      	str	r4, [sp, #4]
 800591e:	f000 fb13 	bl	8005f48 <__ssvfiscanf_r>
 8005922:	b01c      	add	sp, #112	; 0x70
 8005924:	bc30      	pop	{r4, r5}
 8005926:	bc08      	pop	{r3}
 8005928:	b003      	add	sp, #12
 800592a:	4718      	bx	r3
 800592c:	08005935 	.word	0x08005935
 8005930:	20000078 	.word	0x20000078

08005934 <__seofread>:
 8005934:	2000      	movs	r0, #0
 8005936:	4770      	bx	lr

08005938 <memset>:
 8005938:	0003      	movs	r3, r0
 800593a:	1882      	adds	r2, r0, r2
 800593c:	4293      	cmp	r3, r2
 800593e:	d100      	bne.n	8005942 <memset+0xa>
 8005940:	4770      	bx	lr
 8005942:	7019      	strb	r1, [r3, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	e7f9      	b.n	800593c <memset+0x4>

08005948 <strcat>:
 8005948:	0002      	movs	r2, r0
 800594a:	b510      	push	{r4, lr}
 800594c:	7813      	ldrb	r3, [r2, #0]
 800594e:	0014      	movs	r4, r2
 8005950:	3201      	adds	r2, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1fa      	bne.n	800594c <strcat+0x4>
 8005956:	5cca      	ldrb	r2, [r1, r3]
 8005958:	54e2      	strb	r2, [r4, r3]
 800595a:	3301      	adds	r3, #1
 800595c:	2a00      	cmp	r2, #0
 800595e:	d1fa      	bne.n	8005956 <strcat+0xe>
 8005960:	bd10      	pop	{r4, pc}
	...

08005964 <__errno>:
 8005964:	4b01      	ldr	r3, [pc, #4]	; (800596c <__errno+0x8>)
 8005966:	6818      	ldr	r0, [r3, #0]
 8005968:	4770      	bx	lr
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	20000078 	.word	0x20000078

08005970 <__libc_init_array>:
 8005970:	b570      	push	{r4, r5, r6, lr}
 8005972:	2600      	movs	r6, #0
 8005974:	4c0c      	ldr	r4, [pc, #48]	; (80059a8 <__libc_init_array+0x38>)
 8005976:	4d0d      	ldr	r5, [pc, #52]	; (80059ac <__libc_init_array+0x3c>)
 8005978:	1b64      	subs	r4, r4, r5
 800597a:	10a4      	asrs	r4, r4, #2
 800597c:	42a6      	cmp	r6, r4
 800597e:	d109      	bne.n	8005994 <__libc_init_array+0x24>
 8005980:	2600      	movs	r6, #0
 8005982:	f002 f82b 	bl	80079dc <_init>
 8005986:	4c0a      	ldr	r4, [pc, #40]	; (80059b0 <__libc_init_array+0x40>)
 8005988:	4d0a      	ldr	r5, [pc, #40]	; (80059b4 <__libc_init_array+0x44>)
 800598a:	1b64      	subs	r4, r4, r5
 800598c:	10a4      	asrs	r4, r4, #2
 800598e:	42a6      	cmp	r6, r4
 8005990:	d105      	bne.n	800599e <__libc_init_array+0x2e>
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	00b3      	lsls	r3, r6, #2
 8005996:	58eb      	ldr	r3, [r5, r3]
 8005998:	4798      	blx	r3
 800599a:	3601      	adds	r6, #1
 800599c:	e7ee      	b.n	800597c <__libc_init_array+0xc>
 800599e:	00b3      	lsls	r3, r6, #2
 80059a0:	58eb      	ldr	r3, [r5, r3]
 80059a2:	4798      	blx	r3
 80059a4:	3601      	adds	r6, #1
 80059a6:	e7f2      	b.n	800598e <__libc_init_array+0x1e>
 80059a8:	08007c70 	.word	0x08007c70
 80059ac:	08007c70 	.word	0x08007c70
 80059b0:	08007c74 	.word	0x08007c74
 80059b4:	08007c70 	.word	0x08007c70

080059b8 <__retarget_lock_acquire_recursive>:
 80059b8:	4770      	bx	lr

080059ba <__retarget_lock_release_recursive>:
 80059ba:	4770      	bx	lr

080059bc <memcpy>:
 80059bc:	2300      	movs	r3, #0
 80059be:	b510      	push	{r4, lr}
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d100      	bne.n	80059c6 <memcpy+0xa>
 80059c4:	bd10      	pop	{r4, pc}
 80059c6:	5ccc      	ldrb	r4, [r1, r3]
 80059c8:	54c4      	strb	r4, [r0, r3]
 80059ca:	3301      	adds	r3, #1
 80059cc:	e7f8      	b.n	80059c0 <memcpy+0x4>
	...

080059d0 <_free_r>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	0005      	movs	r5, r0
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d010      	beq.n	80059fa <_free_r+0x2a>
 80059d8:	1f0c      	subs	r4, r1, #4
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	da00      	bge.n	80059e2 <_free_r+0x12>
 80059e0:	18e4      	adds	r4, r4, r3
 80059e2:	0028      	movs	r0, r5
 80059e4:	f000 f8e2 	bl	8005bac <__malloc_lock>
 80059e8:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <_free_r+0x90>)
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d105      	bne.n	80059fc <_free_r+0x2c>
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	6014      	str	r4, [r2, #0]
 80059f4:	0028      	movs	r0, r5
 80059f6:	f000 f8e1 	bl	8005bbc <__malloc_unlock>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	d908      	bls.n	8005a12 <_free_r+0x42>
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	1821      	adds	r1, r4, r0
 8005a04:	428b      	cmp	r3, r1
 8005a06:	d1f3      	bne.n	80059f0 <_free_r+0x20>
 8005a08:	6819      	ldr	r1, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	1809      	adds	r1, r1, r0
 8005a0e:	6021      	str	r1, [r4, #0]
 8005a10:	e7ee      	b.n	80059f0 <_free_r+0x20>
 8005a12:	001a      	movs	r2, r3
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <_free_r+0x4e>
 8005a1a:	42a3      	cmp	r3, r4
 8005a1c:	d9f9      	bls.n	8005a12 <_free_r+0x42>
 8005a1e:	6811      	ldr	r1, [r2, #0]
 8005a20:	1850      	adds	r0, r2, r1
 8005a22:	42a0      	cmp	r0, r4
 8005a24:	d10b      	bne.n	8005a3e <_free_r+0x6e>
 8005a26:	6820      	ldr	r0, [r4, #0]
 8005a28:	1809      	adds	r1, r1, r0
 8005a2a:	1850      	adds	r0, r2, r1
 8005a2c:	6011      	str	r1, [r2, #0]
 8005a2e:	4283      	cmp	r3, r0
 8005a30:	d1e0      	bne.n	80059f4 <_free_r+0x24>
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	1841      	adds	r1, r0, r1
 8005a38:	6011      	str	r1, [r2, #0]
 8005a3a:	6053      	str	r3, [r2, #4]
 8005a3c:	e7da      	b.n	80059f4 <_free_r+0x24>
 8005a3e:	42a0      	cmp	r0, r4
 8005a40:	d902      	bls.n	8005a48 <_free_r+0x78>
 8005a42:	230c      	movs	r3, #12
 8005a44:	602b      	str	r3, [r5, #0]
 8005a46:	e7d5      	b.n	80059f4 <_free_r+0x24>
 8005a48:	6820      	ldr	r0, [r4, #0]
 8005a4a:	1821      	adds	r1, r4, r0
 8005a4c:	428b      	cmp	r3, r1
 8005a4e:	d103      	bne.n	8005a58 <_free_r+0x88>
 8005a50:	6819      	ldr	r1, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	1809      	adds	r1, r1, r0
 8005a56:	6021      	str	r1, [r4, #0]
 8005a58:	6063      	str	r3, [r4, #4]
 8005a5a:	6054      	str	r4, [r2, #4]
 8005a5c:	e7ca      	b.n	80059f4 <_free_r+0x24>
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	20000568 	.word	0x20000568

08005a64 <sbrk_aligned>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	4e0f      	ldr	r6, [pc, #60]	; (8005aa4 <sbrk_aligned+0x40>)
 8005a68:	000d      	movs	r5, r1
 8005a6a:	6831      	ldr	r1, [r6, #0]
 8005a6c:	0004      	movs	r4, r0
 8005a6e:	2900      	cmp	r1, #0
 8005a70:	d102      	bne.n	8005a78 <sbrk_aligned+0x14>
 8005a72:	f000 ff43 	bl	80068fc <_sbrk_r>
 8005a76:	6030      	str	r0, [r6, #0]
 8005a78:	0029      	movs	r1, r5
 8005a7a:	0020      	movs	r0, r4
 8005a7c:	f000 ff3e 	bl	80068fc <_sbrk_r>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d00a      	beq.n	8005a9a <sbrk_aligned+0x36>
 8005a84:	2303      	movs	r3, #3
 8005a86:	1cc5      	adds	r5, r0, #3
 8005a88:	439d      	bics	r5, r3
 8005a8a:	42a8      	cmp	r0, r5
 8005a8c:	d007      	beq.n	8005a9e <sbrk_aligned+0x3a>
 8005a8e:	1a29      	subs	r1, r5, r0
 8005a90:	0020      	movs	r0, r4
 8005a92:	f000 ff33 	bl	80068fc <_sbrk_r>
 8005a96:	3001      	adds	r0, #1
 8005a98:	d101      	bne.n	8005a9e <sbrk_aligned+0x3a>
 8005a9a:	2501      	movs	r5, #1
 8005a9c:	426d      	negs	r5, r5
 8005a9e:	0028      	movs	r0, r5
 8005aa0:	bd70      	pop	{r4, r5, r6, pc}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	2000056c 	.word	0x2000056c

08005aa8 <_malloc_r>:
 8005aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005aaa:	2203      	movs	r2, #3
 8005aac:	1ccb      	adds	r3, r1, #3
 8005aae:	4393      	bics	r3, r2
 8005ab0:	3308      	adds	r3, #8
 8005ab2:	0006      	movs	r6, r0
 8005ab4:	001f      	movs	r7, r3
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d238      	bcs.n	8005b2c <_malloc_r+0x84>
 8005aba:	270c      	movs	r7, #12
 8005abc:	42b9      	cmp	r1, r7
 8005abe:	d837      	bhi.n	8005b30 <_malloc_r+0x88>
 8005ac0:	0030      	movs	r0, r6
 8005ac2:	f000 f873 	bl	8005bac <__malloc_lock>
 8005ac6:	4b38      	ldr	r3, [pc, #224]	; (8005ba8 <_malloc_r+0x100>)
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	001c      	movs	r4, r3
 8005ace:	2c00      	cmp	r4, #0
 8005ad0:	d133      	bne.n	8005b3a <_malloc_r+0x92>
 8005ad2:	0039      	movs	r1, r7
 8005ad4:	0030      	movs	r0, r6
 8005ad6:	f7ff ffc5 	bl	8005a64 <sbrk_aligned>
 8005ada:	0004      	movs	r4, r0
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d15e      	bne.n	8005b9e <_malloc_r+0xf6>
 8005ae0:	9b00      	ldr	r3, [sp, #0]
 8005ae2:	681c      	ldr	r4, [r3, #0]
 8005ae4:	0025      	movs	r5, r4
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	d14e      	bne.n	8005b88 <_malloc_r+0xe0>
 8005aea:	2c00      	cmp	r4, #0
 8005aec:	d051      	beq.n	8005b92 <_malloc_r+0xea>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	0029      	movs	r1, r5
 8005af2:	18e3      	adds	r3, r4, r3
 8005af4:	0030      	movs	r0, r6
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	f000 ff00 	bl	80068fc <_sbrk_r>
 8005afc:	9b01      	ldr	r3, [sp, #4]
 8005afe:	4283      	cmp	r3, r0
 8005b00:	d147      	bne.n	8005b92 <_malloc_r+0xea>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	0030      	movs	r0, r6
 8005b06:	1aff      	subs	r7, r7, r3
 8005b08:	0039      	movs	r1, r7
 8005b0a:	f7ff ffab 	bl	8005a64 <sbrk_aligned>
 8005b0e:	3001      	adds	r0, #1
 8005b10:	d03f      	beq.n	8005b92 <_malloc_r+0xea>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	19db      	adds	r3, r3, r7
 8005b16:	6023      	str	r3, [r4, #0]
 8005b18:	9b00      	ldr	r3, [sp, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d040      	beq.n	8005ba2 <_malloc_r+0xfa>
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	42a2      	cmp	r2, r4
 8005b24:	d133      	bne.n	8005b8e <_malloc_r+0xe6>
 8005b26:	2200      	movs	r2, #0
 8005b28:	605a      	str	r2, [r3, #4]
 8005b2a:	e014      	b.n	8005b56 <_malloc_r+0xae>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	dac5      	bge.n	8005abc <_malloc_r+0x14>
 8005b30:	230c      	movs	r3, #12
 8005b32:	2500      	movs	r5, #0
 8005b34:	6033      	str	r3, [r6, #0]
 8005b36:	0028      	movs	r0, r5
 8005b38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b3a:	6821      	ldr	r1, [r4, #0]
 8005b3c:	1bc9      	subs	r1, r1, r7
 8005b3e:	d420      	bmi.n	8005b82 <_malloc_r+0xda>
 8005b40:	290b      	cmp	r1, #11
 8005b42:	d918      	bls.n	8005b76 <_malloc_r+0xce>
 8005b44:	19e2      	adds	r2, r4, r7
 8005b46:	6027      	str	r7, [r4, #0]
 8005b48:	42a3      	cmp	r3, r4
 8005b4a:	d112      	bne.n	8005b72 <_malloc_r+0xca>
 8005b4c:	9b00      	ldr	r3, [sp, #0]
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	6863      	ldr	r3, [r4, #4]
 8005b52:	6011      	str	r1, [r2, #0]
 8005b54:	6053      	str	r3, [r2, #4]
 8005b56:	0030      	movs	r0, r6
 8005b58:	0025      	movs	r5, r4
 8005b5a:	f000 f82f 	bl	8005bbc <__malloc_unlock>
 8005b5e:	2207      	movs	r2, #7
 8005b60:	350b      	adds	r5, #11
 8005b62:	1d23      	adds	r3, r4, #4
 8005b64:	4395      	bics	r5, r2
 8005b66:	1aea      	subs	r2, r5, r3
 8005b68:	429d      	cmp	r5, r3
 8005b6a:	d0e4      	beq.n	8005b36 <_malloc_r+0x8e>
 8005b6c:	1b5b      	subs	r3, r3, r5
 8005b6e:	50a3      	str	r3, [r4, r2]
 8005b70:	e7e1      	b.n	8005b36 <_malloc_r+0x8e>
 8005b72:	605a      	str	r2, [r3, #4]
 8005b74:	e7ec      	b.n	8005b50 <_malloc_r+0xa8>
 8005b76:	6862      	ldr	r2, [r4, #4]
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d1d5      	bne.n	8005b28 <_malloc_r+0x80>
 8005b7c:	9b00      	ldr	r3, [sp, #0]
 8005b7e:	601a      	str	r2, [r3, #0]
 8005b80:	e7e9      	b.n	8005b56 <_malloc_r+0xae>
 8005b82:	0023      	movs	r3, r4
 8005b84:	6864      	ldr	r4, [r4, #4]
 8005b86:	e7a2      	b.n	8005ace <_malloc_r+0x26>
 8005b88:	002c      	movs	r4, r5
 8005b8a:	686d      	ldr	r5, [r5, #4]
 8005b8c:	e7ab      	b.n	8005ae6 <_malloc_r+0x3e>
 8005b8e:	0013      	movs	r3, r2
 8005b90:	e7c4      	b.n	8005b1c <_malloc_r+0x74>
 8005b92:	230c      	movs	r3, #12
 8005b94:	0030      	movs	r0, r6
 8005b96:	6033      	str	r3, [r6, #0]
 8005b98:	f000 f810 	bl	8005bbc <__malloc_unlock>
 8005b9c:	e7cb      	b.n	8005b36 <_malloc_r+0x8e>
 8005b9e:	6027      	str	r7, [r4, #0]
 8005ba0:	e7d9      	b.n	8005b56 <_malloc_r+0xae>
 8005ba2:	605b      	str	r3, [r3, #4]
 8005ba4:	deff      	udf	#255	; 0xff
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	20000568 	.word	0x20000568

08005bac <__malloc_lock>:
 8005bac:	b510      	push	{r4, lr}
 8005bae:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <__malloc_lock+0xc>)
 8005bb0:	f7ff ff02 	bl	80059b8 <__retarget_lock_acquire_recursive>
 8005bb4:	bd10      	pop	{r4, pc}
 8005bb6:	46c0      	nop			; (mov r8, r8)
 8005bb8:	20000564 	.word	0x20000564

08005bbc <__malloc_unlock>:
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	4802      	ldr	r0, [pc, #8]	; (8005bc8 <__malloc_unlock+0xc>)
 8005bc0:	f7ff fefb 	bl	80059ba <__retarget_lock_release_recursive>
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	20000564 	.word	0x20000564

08005bcc <__ssputs_r>:
 8005bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	9203      	str	r2, [sp, #12]
 8005bd4:	688e      	ldr	r6, [r1, #8]
 8005bd6:	9a01      	ldr	r2, [sp, #4]
 8005bd8:	0007      	movs	r7, r0
 8005bda:	000c      	movs	r4, r1
 8005bdc:	680b      	ldr	r3, [r1, #0]
 8005bde:	4296      	cmp	r6, r2
 8005be0:	d831      	bhi.n	8005c46 <__ssputs_r+0x7a>
 8005be2:	898a      	ldrh	r2, [r1, #12]
 8005be4:	2190      	movs	r1, #144	; 0x90
 8005be6:	00c9      	lsls	r1, r1, #3
 8005be8:	420a      	tst	r2, r1
 8005bea:	d029      	beq.n	8005c40 <__ssputs_r+0x74>
 8005bec:	2003      	movs	r0, #3
 8005bee:	6921      	ldr	r1, [r4, #16]
 8005bf0:	1a5b      	subs	r3, r3, r1
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	6963      	ldr	r3, [r4, #20]
 8005bf6:	4343      	muls	r3, r0
 8005bf8:	0fdd      	lsrs	r5, r3, #31
 8005bfa:	18ed      	adds	r5, r5, r3
 8005bfc:	9b01      	ldr	r3, [sp, #4]
 8005bfe:	9802      	ldr	r0, [sp, #8]
 8005c00:	3301      	adds	r3, #1
 8005c02:	181b      	adds	r3, r3, r0
 8005c04:	106d      	asrs	r5, r5, #1
 8005c06:	42ab      	cmp	r3, r5
 8005c08:	d900      	bls.n	8005c0c <__ssputs_r+0x40>
 8005c0a:	001d      	movs	r5, r3
 8005c0c:	0552      	lsls	r2, r2, #21
 8005c0e:	d529      	bpl.n	8005c64 <__ssputs_r+0x98>
 8005c10:	0029      	movs	r1, r5
 8005c12:	0038      	movs	r0, r7
 8005c14:	f7ff ff48 	bl	8005aa8 <_malloc_r>
 8005c18:	1e06      	subs	r6, r0, #0
 8005c1a:	d02d      	beq.n	8005c78 <__ssputs_r+0xac>
 8005c1c:	9a02      	ldr	r2, [sp, #8]
 8005c1e:	6921      	ldr	r1, [r4, #16]
 8005c20:	f7ff fecc 	bl	80059bc <memcpy>
 8005c24:	89a2      	ldrh	r2, [r4, #12]
 8005c26:	4b19      	ldr	r3, [pc, #100]	; (8005c8c <__ssputs_r+0xc0>)
 8005c28:	401a      	ands	r2, r3
 8005c2a:	2380      	movs	r3, #128	; 0x80
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	9b02      	ldr	r3, [sp, #8]
 8005c32:	6126      	str	r6, [r4, #16]
 8005c34:	18f6      	adds	r6, r6, r3
 8005c36:	6026      	str	r6, [r4, #0]
 8005c38:	6165      	str	r5, [r4, #20]
 8005c3a:	9e01      	ldr	r6, [sp, #4]
 8005c3c:	1aed      	subs	r5, r5, r3
 8005c3e:	60a5      	str	r5, [r4, #8]
 8005c40:	9b01      	ldr	r3, [sp, #4]
 8005c42:	429e      	cmp	r6, r3
 8005c44:	d900      	bls.n	8005c48 <__ssputs_r+0x7c>
 8005c46:	9e01      	ldr	r6, [sp, #4]
 8005c48:	0032      	movs	r2, r6
 8005c4a:	9903      	ldr	r1, [sp, #12]
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	f000 fe41 	bl	80068d4 <memmove>
 8005c52:	2000      	movs	r0, #0
 8005c54:	68a3      	ldr	r3, [r4, #8]
 8005c56:	1b9b      	subs	r3, r3, r6
 8005c58:	60a3      	str	r3, [r4, #8]
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	199b      	adds	r3, r3, r6
 8005c5e:	6023      	str	r3, [r4, #0]
 8005c60:	b005      	add	sp, #20
 8005c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c64:	002a      	movs	r2, r5
 8005c66:	0038      	movs	r0, r7
 8005c68:	f000 fe65 	bl	8006936 <_realloc_r>
 8005c6c:	1e06      	subs	r6, r0, #0
 8005c6e:	d1df      	bne.n	8005c30 <__ssputs_r+0x64>
 8005c70:	0038      	movs	r0, r7
 8005c72:	6921      	ldr	r1, [r4, #16]
 8005c74:	f7ff feac 	bl	80059d0 <_free_r>
 8005c78:	230c      	movs	r3, #12
 8005c7a:	2001      	movs	r0, #1
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	89a2      	ldrh	r2, [r4, #12]
 8005c80:	3334      	adds	r3, #52	; 0x34
 8005c82:	4313      	orrs	r3, r2
 8005c84:	81a3      	strh	r3, [r4, #12]
 8005c86:	4240      	negs	r0, r0
 8005c88:	e7ea      	b.n	8005c60 <__ssputs_r+0x94>
 8005c8a:	46c0      	nop			; (mov r8, r8)
 8005c8c:	fffffb7f 	.word	0xfffffb7f

08005c90 <_svfiprintf_r>:
 8005c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c92:	b0a1      	sub	sp, #132	; 0x84
 8005c94:	9003      	str	r0, [sp, #12]
 8005c96:	001d      	movs	r5, r3
 8005c98:	898b      	ldrh	r3, [r1, #12]
 8005c9a:	000f      	movs	r7, r1
 8005c9c:	0016      	movs	r6, r2
 8005c9e:	061b      	lsls	r3, r3, #24
 8005ca0:	d511      	bpl.n	8005cc6 <_svfiprintf_r+0x36>
 8005ca2:	690b      	ldr	r3, [r1, #16]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10e      	bne.n	8005cc6 <_svfiprintf_r+0x36>
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	f7ff fefd 	bl	8005aa8 <_malloc_r>
 8005cae:	6038      	str	r0, [r7, #0]
 8005cb0:	6138      	str	r0, [r7, #16]
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d105      	bne.n	8005cc2 <_svfiprintf_r+0x32>
 8005cb6:	230c      	movs	r3, #12
 8005cb8:	9a03      	ldr	r2, [sp, #12]
 8005cba:	3801      	subs	r0, #1
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	b021      	add	sp, #132	; 0x84
 8005cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cc2:	2340      	movs	r3, #64	; 0x40
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	ac08      	add	r4, sp, #32
 8005cca:	6163      	str	r3, [r4, #20]
 8005ccc:	3320      	adds	r3, #32
 8005cce:	7663      	strb	r3, [r4, #25]
 8005cd0:	3310      	adds	r3, #16
 8005cd2:	76a3      	strb	r3, [r4, #26]
 8005cd4:	9507      	str	r5, [sp, #28]
 8005cd6:	0035      	movs	r5, r6
 8005cd8:	782b      	ldrb	r3, [r5, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <_svfiprintf_r+0x52>
 8005cde:	2b25      	cmp	r3, #37	; 0x25
 8005ce0:	d148      	bne.n	8005d74 <_svfiprintf_r+0xe4>
 8005ce2:	1bab      	subs	r3, r5, r6
 8005ce4:	9305      	str	r3, [sp, #20]
 8005ce6:	42b5      	cmp	r5, r6
 8005ce8:	d00b      	beq.n	8005d02 <_svfiprintf_r+0x72>
 8005cea:	0032      	movs	r2, r6
 8005cec:	0039      	movs	r1, r7
 8005cee:	9803      	ldr	r0, [sp, #12]
 8005cf0:	f7ff ff6c 	bl	8005bcc <__ssputs_r>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	d100      	bne.n	8005cfa <_svfiprintf_r+0x6a>
 8005cf8:	e0af      	b.n	8005e5a <_svfiprintf_r+0x1ca>
 8005cfa:	6963      	ldr	r3, [r4, #20]
 8005cfc:	9a05      	ldr	r2, [sp, #20]
 8005cfe:	189b      	adds	r3, r3, r2
 8005d00:	6163      	str	r3, [r4, #20]
 8005d02:	782b      	ldrb	r3, [r5, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d100      	bne.n	8005d0a <_svfiprintf_r+0x7a>
 8005d08:	e0a7      	b.n	8005e5a <_svfiprintf_r+0x1ca>
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	4252      	negs	r2, r2
 8005d10:	6062      	str	r2, [r4, #4]
 8005d12:	a904      	add	r1, sp, #16
 8005d14:	3254      	adds	r2, #84	; 0x54
 8005d16:	1852      	adds	r2, r2, r1
 8005d18:	1c6e      	adds	r6, r5, #1
 8005d1a:	6023      	str	r3, [r4, #0]
 8005d1c:	60e3      	str	r3, [r4, #12]
 8005d1e:	60a3      	str	r3, [r4, #8]
 8005d20:	7013      	strb	r3, [r2, #0]
 8005d22:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d24:	4b55      	ldr	r3, [pc, #340]	; (8005e7c <_svfiprintf_r+0x1ec>)
 8005d26:	2205      	movs	r2, #5
 8005d28:	0018      	movs	r0, r3
 8005d2a:	7831      	ldrb	r1, [r6, #0]
 8005d2c:	9305      	str	r3, [sp, #20]
 8005d2e:	f000 fdf7 	bl	8006920 <memchr>
 8005d32:	1c75      	adds	r5, r6, #1
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d11f      	bne.n	8005d78 <_svfiprintf_r+0xe8>
 8005d38:	6822      	ldr	r2, [r4, #0]
 8005d3a:	06d3      	lsls	r3, r2, #27
 8005d3c:	d504      	bpl.n	8005d48 <_svfiprintf_r+0xb8>
 8005d3e:	2353      	movs	r3, #83	; 0x53
 8005d40:	a904      	add	r1, sp, #16
 8005d42:	185b      	adds	r3, r3, r1
 8005d44:	2120      	movs	r1, #32
 8005d46:	7019      	strb	r1, [r3, #0]
 8005d48:	0713      	lsls	r3, r2, #28
 8005d4a:	d504      	bpl.n	8005d56 <_svfiprintf_r+0xc6>
 8005d4c:	2353      	movs	r3, #83	; 0x53
 8005d4e:	a904      	add	r1, sp, #16
 8005d50:	185b      	adds	r3, r3, r1
 8005d52:	212b      	movs	r1, #43	; 0x2b
 8005d54:	7019      	strb	r1, [r3, #0]
 8005d56:	7833      	ldrb	r3, [r6, #0]
 8005d58:	2b2a      	cmp	r3, #42	; 0x2a
 8005d5a:	d016      	beq.n	8005d8a <_svfiprintf_r+0xfa>
 8005d5c:	0035      	movs	r5, r6
 8005d5e:	2100      	movs	r1, #0
 8005d60:	200a      	movs	r0, #10
 8005d62:	68e3      	ldr	r3, [r4, #12]
 8005d64:	782a      	ldrb	r2, [r5, #0]
 8005d66:	1c6e      	adds	r6, r5, #1
 8005d68:	3a30      	subs	r2, #48	; 0x30
 8005d6a:	2a09      	cmp	r2, #9
 8005d6c:	d94e      	bls.n	8005e0c <_svfiprintf_r+0x17c>
 8005d6e:	2900      	cmp	r1, #0
 8005d70:	d111      	bne.n	8005d96 <_svfiprintf_r+0x106>
 8005d72:	e017      	b.n	8005da4 <_svfiprintf_r+0x114>
 8005d74:	3501      	adds	r5, #1
 8005d76:	e7af      	b.n	8005cd8 <_svfiprintf_r+0x48>
 8005d78:	9b05      	ldr	r3, [sp, #20]
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	1ac0      	subs	r0, r0, r3
 8005d7e:	2301      	movs	r3, #1
 8005d80:	4083      	lsls	r3, r0
 8005d82:	4313      	orrs	r3, r2
 8005d84:	002e      	movs	r6, r5
 8005d86:	6023      	str	r3, [r4, #0]
 8005d88:	e7cc      	b.n	8005d24 <_svfiprintf_r+0x94>
 8005d8a:	9b07      	ldr	r3, [sp, #28]
 8005d8c:	1d19      	adds	r1, r3, #4
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	9107      	str	r1, [sp, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	db01      	blt.n	8005d9a <_svfiprintf_r+0x10a>
 8005d96:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d98:	e004      	b.n	8005da4 <_svfiprintf_r+0x114>
 8005d9a:	425b      	negs	r3, r3
 8005d9c:	60e3      	str	r3, [r4, #12]
 8005d9e:	2302      	movs	r3, #2
 8005da0:	4313      	orrs	r3, r2
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	782b      	ldrb	r3, [r5, #0]
 8005da6:	2b2e      	cmp	r3, #46	; 0x2e
 8005da8:	d10a      	bne.n	8005dc0 <_svfiprintf_r+0x130>
 8005daa:	786b      	ldrb	r3, [r5, #1]
 8005dac:	2b2a      	cmp	r3, #42	; 0x2a
 8005dae:	d135      	bne.n	8005e1c <_svfiprintf_r+0x18c>
 8005db0:	9b07      	ldr	r3, [sp, #28]
 8005db2:	3502      	adds	r5, #2
 8005db4:	1d1a      	adds	r2, r3, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	9207      	str	r2, [sp, #28]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	db2b      	blt.n	8005e16 <_svfiprintf_r+0x186>
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	4e2f      	ldr	r6, [pc, #188]	; (8005e80 <_svfiprintf_r+0x1f0>)
 8005dc2:	2203      	movs	r2, #3
 8005dc4:	0030      	movs	r0, r6
 8005dc6:	7829      	ldrb	r1, [r5, #0]
 8005dc8:	f000 fdaa 	bl	8006920 <memchr>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d006      	beq.n	8005dde <_svfiprintf_r+0x14e>
 8005dd0:	2340      	movs	r3, #64	; 0x40
 8005dd2:	1b80      	subs	r0, r0, r6
 8005dd4:	4083      	lsls	r3, r0
 8005dd6:	6822      	ldr	r2, [r4, #0]
 8005dd8:	3501      	adds	r5, #1
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	7829      	ldrb	r1, [r5, #0]
 8005de0:	2206      	movs	r2, #6
 8005de2:	4828      	ldr	r0, [pc, #160]	; (8005e84 <_svfiprintf_r+0x1f4>)
 8005de4:	1c6e      	adds	r6, r5, #1
 8005de6:	7621      	strb	r1, [r4, #24]
 8005de8:	f000 fd9a 	bl	8006920 <memchr>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d03c      	beq.n	8005e6a <_svfiprintf_r+0x1da>
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <_svfiprintf_r+0x1f8>)
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d125      	bne.n	8005e42 <_svfiprintf_r+0x1b2>
 8005df6:	2207      	movs	r2, #7
 8005df8:	9b07      	ldr	r3, [sp, #28]
 8005dfa:	3307      	adds	r3, #7
 8005dfc:	4393      	bics	r3, r2
 8005dfe:	3308      	adds	r3, #8
 8005e00:	9307      	str	r3, [sp, #28]
 8005e02:	6963      	ldr	r3, [r4, #20]
 8005e04:	9a04      	ldr	r2, [sp, #16]
 8005e06:	189b      	adds	r3, r3, r2
 8005e08:	6163      	str	r3, [r4, #20]
 8005e0a:	e764      	b.n	8005cd6 <_svfiprintf_r+0x46>
 8005e0c:	4343      	muls	r3, r0
 8005e0e:	0035      	movs	r5, r6
 8005e10:	2101      	movs	r1, #1
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	e7a6      	b.n	8005d64 <_svfiprintf_r+0xd4>
 8005e16:	2301      	movs	r3, #1
 8005e18:	425b      	negs	r3, r3
 8005e1a:	e7d0      	b.n	8005dbe <_svfiprintf_r+0x12e>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	200a      	movs	r0, #10
 8005e20:	001a      	movs	r2, r3
 8005e22:	3501      	adds	r5, #1
 8005e24:	6063      	str	r3, [r4, #4]
 8005e26:	7829      	ldrb	r1, [r5, #0]
 8005e28:	1c6e      	adds	r6, r5, #1
 8005e2a:	3930      	subs	r1, #48	; 0x30
 8005e2c:	2909      	cmp	r1, #9
 8005e2e:	d903      	bls.n	8005e38 <_svfiprintf_r+0x1a8>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0c5      	beq.n	8005dc0 <_svfiprintf_r+0x130>
 8005e34:	9209      	str	r2, [sp, #36]	; 0x24
 8005e36:	e7c3      	b.n	8005dc0 <_svfiprintf_r+0x130>
 8005e38:	4342      	muls	r2, r0
 8005e3a:	0035      	movs	r5, r6
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	1852      	adds	r2, r2, r1
 8005e40:	e7f1      	b.n	8005e26 <_svfiprintf_r+0x196>
 8005e42:	aa07      	add	r2, sp, #28
 8005e44:	9200      	str	r2, [sp, #0]
 8005e46:	0021      	movs	r1, r4
 8005e48:	003a      	movs	r2, r7
 8005e4a:	4b10      	ldr	r3, [pc, #64]	; (8005e8c <_svfiprintf_r+0x1fc>)
 8005e4c:	9803      	ldr	r0, [sp, #12]
 8005e4e:	e000      	b.n	8005e52 <_svfiprintf_r+0x1c2>
 8005e50:	bf00      	nop
 8005e52:	9004      	str	r0, [sp, #16]
 8005e54:	9b04      	ldr	r3, [sp, #16]
 8005e56:	3301      	adds	r3, #1
 8005e58:	d1d3      	bne.n	8005e02 <_svfiprintf_r+0x172>
 8005e5a:	89bb      	ldrh	r3, [r7, #12]
 8005e5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e5e:	065b      	lsls	r3, r3, #25
 8005e60:	d400      	bmi.n	8005e64 <_svfiprintf_r+0x1d4>
 8005e62:	e72c      	b.n	8005cbe <_svfiprintf_r+0x2e>
 8005e64:	2001      	movs	r0, #1
 8005e66:	4240      	negs	r0, r0
 8005e68:	e729      	b.n	8005cbe <_svfiprintf_r+0x2e>
 8005e6a:	aa07      	add	r2, sp, #28
 8005e6c:	9200      	str	r2, [sp, #0]
 8005e6e:	0021      	movs	r1, r4
 8005e70:	003a      	movs	r2, r7
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <_svfiprintf_r+0x1fc>)
 8005e74:	9803      	ldr	r0, [sp, #12]
 8005e76:	f000 fa41 	bl	80062fc <_printf_i>
 8005e7a:	e7ea      	b.n	8005e52 <_svfiprintf_r+0x1c2>
 8005e7c:	08007ae8 	.word	0x08007ae8
 8005e80:	08007aee 	.word	0x08007aee
 8005e84:	08007af2 	.word	0x08007af2
 8005e88:	00000000 	.word	0x00000000
 8005e8c:	08005bcd 	.word	0x08005bcd

08005e90 <_sungetc_r>:
 8005e90:	b570      	push	{r4, r5, r6, lr}
 8005e92:	0014      	movs	r4, r2
 8005e94:	1c4b      	adds	r3, r1, #1
 8005e96:	d103      	bne.n	8005ea0 <_sungetc_r+0x10>
 8005e98:	2501      	movs	r5, #1
 8005e9a:	426d      	negs	r5, r5
 8005e9c:	0028      	movs	r0, r5
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	8993      	ldrh	r3, [r2, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	4393      	bics	r3, r2
 8005ea6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	b2ce      	uxtb	r6, r1
 8005eac:	6863      	ldr	r3, [r4, #4]
 8005eae:	b2cd      	uxtb	r5, r1
 8005eb0:	2a00      	cmp	r2, #0
 8005eb2:	d010      	beq.n	8005ed6 <_sungetc_r+0x46>
 8005eb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	dd07      	ble.n	8005eca <_sungetc_r+0x3a>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	701e      	strb	r6, [r3, #0]
 8005ec2:	6863      	ldr	r3, [r4, #4]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	6063      	str	r3, [r4, #4]
 8005ec8:	e7e8      	b.n	8005e9c <_sungetc_r+0xc>
 8005eca:	0021      	movs	r1, r4
 8005ecc:	f000 fcc4 	bl	8006858 <__submore>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d0f2      	beq.n	8005eba <_sungetc_r+0x2a>
 8005ed4:	e7e0      	b.n	8005e98 <_sungetc_r+0x8>
 8005ed6:	6921      	ldr	r1, [r4, #16]
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	2900      	cmp	r1, #0
 8005edc:	d007      	beq.n	8005eee <_sungetc_r+0x5e>
 8005ede:	4291      	cmp	r1, r2
 8005ee0:	d205      	bcs.n	8005eee <_sungetc_r+0x5e>
 8005ee2:	1e51      	subs	r1, r2, #1
 8005ee4:	7808      	ldrb	r0, [r1, #0]
 8005ee6:	42a8      	cmp	r0, r5
 8005ee8:	d101      	bne.n	8005eee <_sungetc_r+0x5e>
 8005eea:	6021      	str	r1, [r4, #0]
 8005eec:	e7ea      	b.n	8005ec4 <_sungetc_r+0x34>
 8005eee:	6423      	str	r3, [r4, #64]	; 0x40
 8005ef0:	0023      	movs	r3, r4
 8005ef2:	3344      	adds	r3, #68	; 0x44
 8005ef4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	63a3      	str	r3, [r4, #56]	; 0x38
 8005efa:	0023      	movs	r3, r4
 8005efc:	3346      	adds	r3, #70	; 0x46
 8005efe:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005f00:	701e      	strb	r6, [r3, #0]
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	2301      	movs	r3, #1
 8005f06:	e7de      	b.n	8005ec6 <_sungetc_r+0x36>

08005f08 <__ssrefill_r>:
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	000c      	movs	r4, r1
 8005f0c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d00e      	beq.n	8005f30 <__ssrefill_r+0x28>
 8005f12:	0023      	movs	r3, r4
 8005f14:	3344      	adds	r3, #68	; 0x44
 8005f16:	4299      	cmp	r1, r3
 8005f18:	d001      	beq.n	8005f1e <__ssrefill_r+0x16>
 8005f1a:	f7ff fd59 	bl	80059d0 <_free_r>
 8005f1e:	2000      	movs	r0, #0
 8005f20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f22:	6360      	str	r0, [r4, #52]	; 0x34
 8005f24:	6063      	str	r3, [r4, #4]
 8005f26:	4283      	cmp	r3, r0
 8005f28:	d002      	beq.n	8005f30 <__ssrefill_r+0x28>
 8005f2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd10      	pop	{r4, pc}
 8005f30:	6923      	ldr	r3, [r4, #16]
 8005f32:	2001      	movs	r0, #1
 8005f34:	6023      	str	r3, [r4, #0]
 8005f36:	2300      	movs	r3, #0
 8005f38:	89a2      	ldrh	r2, [r4, #12]
 8005f3a:	6063      	str	r3, [r4, #4]
 8005f3c:	3320      	adds	r3, #32
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	4240      	negs	r0, r0
 8005f44:	e7f3      	b.n	8005f2e <__ssrefill_r+0x26>
	...

08005f48 <__ssvfiscanf_r>:
 8005f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4a:	4cae      	ldr	r4, [pc, #696]	; (8006204 <__ssvfiscanf_r+0x2bc>)
 8005f4c:	0006      	movs	r6, r0
 8005f4e:	44a5      	add	sp, r4
 8005f50:	000c      	movs	r4, r1
 8005f52:	2100      	movs	r1, #0
 8005f54:	20be      	movs	r0, #190	; 0xbe
 8005f56:	9146      	str	r1, [sp, #280]	; 0x118
 8005f58:	9147      	str	r1, [sp, #284]	; 0x11c
 8005f5a:	a903      	add	r1, sp, #12
 8005f5c:	9148      	str	r1, [sp, #288]	; 0x120
 8005f5e:	49aa      	ldr	r1, [pc, #680]	; (8006208 <__ssvfiscanf_r+0x2c0>)
 8005f60:	0040      	lsls	r0, r0, #1
 8005f62:	ad43      	add	r5, sp, #268	; 0x10c
 8005f64:	5029      	str	r1, [r5, r0]
 8005f66:	25c0      	movs	r5, #192	; 0xc0
 8005f68:	49a8      	ldr	r1, [pc, #672]	; (800620c <__ssvfiscanf_r+0x2c4>)
 8005f6a:	006d      	lsls	r5, r5, #1
 8005f6c:	a843      	add	r0, sp, #268	; 0x10c
 8005f6e:	5141      	str	r1, [r0, r5]
 8005f70:	9302      	str	r3, [sp, #8]
 8005f72:	7815      	ldrb	r5, [r2, #0]
 8005f74:	2d00      	cmp	r5, #0
 8005f76:	d100      	bne.n	8005f7a <__ssvfiscanf_r+0x32>
 8005f78:	e141      	b.n	80061fe <__ssvfiscanf_r+0x2b6>
 8005f7a:	4ba5      	ldr	r3, [pc, #660]	; (8006210 <__ssvfiscanf_r+0x2c8>)
 8005f7c:	2008      	movs	r0, #8
 8005f7e:	5d59      	ldrb	r1, [r3, r5]
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	2308      	movs	r3, #8
 8005f84:	1c57      	adds	r7, r2, #1
 8005f86:	400b      	ands	r3, r1
 8005f88:	4201      	tst	r1, r0
 8005f8a:	d01e      	beq.n	8005fca <__ssvfiscanf_r+0x82>
 8005f8c:	6863      	ldr	r3, [r4, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dd11      	ble.n	8005fb6 <__ssvfiscanf_r+0x6e>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	9900      	ldr	r1, [sp, #0]
 8005f96:	781a      	ldrb	r2, [r3, #0]
 8005f98:	5c8a      	ldrb	r2, [r1, r2]
 8005f9a:	2108      	movs	r1, #8
 8005f9c:	420a      	tst	r2, r1
 8005f9e:	d101      	bne.n	8005fa4 <__ssvfiscanf_r+0x5c>
 8005fa0:	003a      	movs	r2, r7
 8005fa2:	e7e6      	b.n	8005f72 <__ssvfiscanf_r+0x2a>
 8005fa4:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	3201      	adds	r2, #1
 8005faa:	9247      	str	r2, [sp, #284]	; 0x11c
 8005fac:	6862      	ldr	r2, [r4, #4]
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	3a01      	subs	r2, #1
 8005fb2:	6062      	str	r2, [r4, #4]
 8005fb4:	e7ea      	b.n	8005f8c <__ssvfiscanf_r+0x44>
 8005fb6:	22c0      	movs	r2, #192	; 0xc0
 8005fb8:	ab43      	add	r3, sp, #268	; 0x10c
 8005fba:	0052      	lsls	r2, r2, #1
 8005fbc:	0021      	movs	r1, r4
 8005fbe:	0030      	movs	r0, r6
 8005fc0:	589b      	ldr	r3, [r3, r2]
 8005fc2:	4798      	blx	r3
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d0e4      	beq.n	8005f92 <__ssvfiscanf_r+0x4a>
 8005fc8:	e7ea      	b.n	8005fa0 <__ssvfiscanf_r+0x58>
 8005fca:	2d25      	cmp	r5, #37	; 0x25
 8005fcc:	d162      	bne.n	8006094 <__ssvfiscanf_r+0x14c>
 8005fce:	9345      	str	r3, [sp, #276]	; 0x114
 8005fd0:	9343      	str	r3, [sp, #268]	; 0x10c
 8005fd2:	7853      	ldrb	r3, [r2, #1]
 8005fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd6:	d102      	bne.n	8005fde <__ssvfiscanf_r+0x96>
 8005fd8:	3b1a      	subs	r3, #26
 8005fda:	9343      	str	r3, [sp, #268]	; 0x10c
 8005fdc:	1c97      	adds	r7, r2, #2
 8005fde:	003d      	movs	r5, r7
 8005fe0:	220a      	movs	r2, #10
 8005fe2:	7829      	ldrb	r1, [r5, #0]
 8005fe4:	1c6b      	adds	r3, r5, #1
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	000b      	movs	r3, r1
 8005fea:	3b30      	subs	r3, #48	; 0x30
 8005fec:	2b09      	cmp	r3, #9
 8005fee:	d91e      	bls.n	800602e <__ssvfiscanf_r+0xe6>
 8005ff0:	4f88      	ldr	r7, [pc, #544]	; (8006214 <__ssvfiscanf_r+0x2cc>)
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	0038      	movs	r0, r7
 8005ff6:	f000 fc93 	bl	8006920 <memchr>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d006      	beq.n	800600c <__ssvfiscanf_r+0xc4>
 8005ffe:	2301      	movs	r3, #1
 8006000:	1bc0      	subs	r0, r0, r7
 8006002:	4083      	lsls	r3, r0
 8006004:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006006:	9d01      	ldr	r5, [sp, #4]
 8006008:	4313      	orrs	r3, r2
 800600a:	9343      	str	r3, [sp, #268]	; 0x10c
 800600c:	1c6f      	adds	r7, r5, #1
 800600e:	782d      	ldrb	r5, [r5, #0]
 8006010:	2d78      	cmp	r5, #120	; 0x78
 8006012:	d807      	bhi.n	8006024 <__ssvfiscanf_r+0xdc>
 8006014:	2d57      	cmp	r5, #87	; 0x57
 8006016:	d811      	bhi.n	800603c <__ssvfiscanf_r+0xf4>
 8006018:	2d25      	cmp	r5, #37	; 0x25
 800601a:	d03b      	beq.n	8006094 <__ssvfiscanf_r+0x14c>
 800601c:	d835      	bhi.n	800608a <__ssvfiscanf_r+0x142>
 800601e:	2d00      	cmp	r5, #0
 8006020:	d100      	bne.n	8006024 <__ssvfiscanf_r+0xdc>
 8006022:	e0e9      	b.n	80061f8 <__ssvfiscanf_r+0x2b0>
 8006024:	2303      	movs	r3, #3
 8006026:	9349      	str	r3, [sp, #292]	; 0x124
 8006028:	3307      	adds	r3, #7
 800602a:	9344      	str	r3, [sp, #272]	; 0x110
 800602c:	e06d      	b.n	800610a <__ssvfiscanf_r+0x1c2>
 800602e:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006030:	9d01      	ldr	r5, [sp, #4]
 8006032:	4353      	muls	r3, r2
 8006034:	3b30      	subs	r3, #48	; 0x30
 8006036:	185b      	adds	r3, r3, r1
 8006038:	9345      	str	r3, [sp, #276]	; 0x114
 800603a:	e7d2      	b.n	8005fe2 <__ssvfiscanf_r+0x9a>
 800603c:	0028      	movs	r0, r5
 800603e:	3858      	subs	r0, #88	; 0x58
 8006040:	2820      	cmp	r0, #32
 8006042:	d8ef      	bhi.n	8006024 <__ssvfiscanf_r+0xdc>
 8006044:	f7fa f866 	bl	8000114 <__gnu_thumb1_case_shi>
 8006048:	ffee004d 	.word	0xffee004d
 800604c:	007fffee 	.word	0x007fffee
 8006050:	ffeeffee 	.word	0xffeeffee
 8006054:	ffeeffee 	.word	0xffeeffee
 8006058:	ffeeffee 	.word	0xffeeffee
 800605c:	008affee 	.word	0x008affee
 8006060:	0024007d 	.word	0x0024007d
 8006064:	00240024 	.word	0x00240024
 8006068:	0059ffee 	.word	0x0059ffee
 800606c:	ffeeffee 	.word	0xffeeffee
 8006070:	ffeeffee 	.word	0xffeeffee
 8006074:	005d0092 	.word	0x005d0092
 8006078:	ffee0049 	.word	0xffee0049
 800607c:	0090ffee 	.word	0x0090ffee
 8006080:	007dffee 	.word	0x007dffee
 8006084:	ffeeffee 	.word	0xffeeffee
 8006088:	004d      	.short	0x004d
 800608a:	3d45      	subs	r5, #69	; 0x45
 800608c:	2d02      	cmp	r5, #2
 800608e:	d8c9      	bhi.n	8006024 <__ssvfiscanf_r+0xdc>
 8006090:	2305      	movs	r3, #5
 8006092:	e039      	b.n	8006108 <__ssvfiscanf_r+0x1c0>
 8006094:	6863      	ldr	r3, [r4, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	dd0d      	ble.n	80060b6 <__ssvfiscanf_r+0x16e>
 800609a:	6823      	ldr	r3, [r4, #0]
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	42aa      	cmp	r2, r5
 80060a0:	d000      	beq.n	80060a4 <__ssvfiscanf_r+0x15c>
 80060a2:	e0ac      	b.n	80061fe <__ssvfiscanf_r+0x2b6>
 80060a4:	3301      	adds	r3, #1
 80060a6:	6862      	ldr	r2, [r4, #4]
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80060ac:	3a01      	subs	r2, #1
 80060ae:	3301      	adds	r3, #1
 80060b0:	6062      	str	r2, [r4, #4]
 80060b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80060b4:	e774      	b.n	8005fa0 <__ssvfiscanf_r+0x58>
 80060b6:	22c0      	movs	r2, #192	; 0xc0
 80060b8:	ab43      	add	r3, sp, #268	; 0x10c
 80060ba:	0052      	lsls	r2, r2, #1
 80060bc:	0021      	movs	r1, r4
 80060be:	0030      	movs	r0, r6
 80060c0:	589b      	ldr	r3, [r3, r2]
 80060c2:	4798      	blx	r3
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d0e8      	beq.n	800609a <__ssvfiscanf_r+0x152>
 80060c8:	9846      	ldr	r0, [sp, #280]	; 0x118
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d000      	beq.n	80060d0 <__ssvfiscanf_r+0x188>
 80060ce:	e08f      	b.n	80061f0 <__ssvfiscanf_r+0x2a8>
 80060d0:	3801      	subs	r0, #1
 80060d2:	23a5      	movs	r3, #165	; 0xa5
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	449d      	add	sp, r3
 80060d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060da:	2320      	movs	r3, #32
 80060dc:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80060de:	4313      	orrs	r3, r2
 80060e0:	9343      	str	r3, [sp, #268]	; 0x10c
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4313      	orrs	r3, r2
 80060ea:	9343      	str	r3, [sp, #268]	; 0x10c
 80060ec:	2310      	movs	r3, #16
 80060ee:	9344      	str	r3, [sp, #272]	; 0x110
 80060f0:	236e      	movs	r3, #110	; 0x6e
 80060f2:	42ab      	cmp	r3, r5
 80060f4:	419b      	sbcs	r3, r3
 80060f6:	425b      	negs	r3, r3
 80060f8:	e001      	b.n	80060fe <__ssvfiscanf_r+0x1b6>
 80060fa:	2300      	movs	r3, #0
 80060fc:	9344      	str	r3, [sp, #272]	; 0x110
 80060fe:	3303      	adds	r3, #3
 8006100:	e002      	b.n	8006108 <__ssvfiscanf_r+0x1c0>
 8006102:	2308      	movs	r3, #8
 8006104:	9344      	str	r3, [sp, #272]	; 0x110
 8006106:	3b04      	subs	r3, #4
 8006108:	9349      	str	r3, [sp, #292]	; 0x124
 800610a:	6863      	ldr	r3, [r4, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	dd3c      	ble.n	800618a <__ssvfiscanf_r+0x242>
 8006110:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006112:	065b      	lsls	r3, r3, #25
 8006114:	d406      	bmi.n	8006124 <__ssvfiscanf_r+0x1dc>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	9900      	ldr	r1, [sp, #0]
 800611a:	781a      	ldrb	r2, [r3, #0]
 800611c:	5c8a      	ldrb	r2, [r1, r2]
 800611e:	2108      	movs	r1, #8
 8006120:	420a      	tst	r2, r1
 8006122:	d13c      	bne.n	800619e <__ssvfiscanf_r+0x256>
 8006124:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8006126:	2b02      	cmp	r3, #2
 8006128:	dc4e      	bgt.n	80061c8 <__ssvfiscanf_r+0x280>
 800612a:	0022      	movs	r2, r4
 800612c:	0030      	movs	r0, r6
 800612e:	ab02      	add	r3, sp, #8
 8006130:	a943      	add	r1, sp, #268	; 0x10c
 8006132:	f000 f9f3 	bl	800651c <_scanf_chars>
 8006136:	2801      	cmp	r0, #1
 8006138:	d061      	beq.n	80061fe <__ssvfiscanf_r+0x2b6>
 800613a:	2802      	cmp	r0, #2
 800613c:	d000      	beq.n	8006140 <__ssvfiscanf_r+0x1f8>
 800613e:	e72f      	b.n	8005fa0 <__ssvfiscanf_r+0x58>
 8006140:	e7c2      	b.n	80060c8 <__ssvfiscanf_r+0x180>
 8006142:	230a      	movs	r3, #10
 8006144:	e7d3      	b.n	80060ee <__ssvfiscanf_r+0x1a6>
 8006146:	0039      	movs	r1, r7
 8006148:	a803      	add	r0, sp, #12
 800614a:	f000 fb49 	bl	80067e0 <__sccl>
 800614e:	2340      	movs	r3, #64	; 0x40
 8006150:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006152:	0007      	movs	r7, r0
 8006154:	4313      	orrs	r3, r2
 8006156:	9343      	str	r3, [sp, #268]	; 0x10c
 8006158:	2301      	movs	r3, #1
 800615a:	e7d5      	b.n	8006108 <__ssvfiscanf_r+0x1c0>
 800615c:	2340      	movs	r3, #64	; 0x40
 800615e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006160:	4313      	orrs	r3, r2
 8006162:	9343      	str	r3, [sp, #268]	; 0x10c
 8006164:	2300      	movs	r3, #0
 8006166:	e7cf      	b.n	8006108 <__ssvfiscanf_r+0x1c0>
 8006168:	2302      	movs	r3, #2
 800616a:	e7cd      	b.n	8006108 <__ssvfiscanf_r+0x1c0>
 800616c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800616e:	06d3      	lsls	r3, r2, #27
 8006170:	d500      	bpl.n	8006174 <__ssvfiscanf_r+0x22c>
 8006172:	e715      	b.n	8005fa0 <__ssvfiscanf_r+0x58>
 8006174:	9b02      	ldr	r3, [sp, #8]
 8006176:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8006178:	1d18      	adds	r0, r3, #4
 800617a:	9002      	str	r0, [sp, #8]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	07d5      	lsls	r5, r2, #31
 8006180:	d501      	bpl.n	8006186 <__ssvfiscanf_r+0x23e>
 8006182:	8019      	strh	r1, [r3, #0]
 8006184:	e70c      	b.n	8005fa0 <__ssvfiscanf_r+0x58>
 8006186:	6019      	str	r1, [r3, #0]
 8006188:	e70a      	b.n	8005fa0 <__ssvfiscanf_r+0x58>
 800618a:	22c0      	movs	r2, #192	; 0xc0
 800618c:	ab43      	add	r3, sp, #268	; 0x10c
 800618e:	0052      	lsls	r2, r2, #1
 8006190:	0021      	movs	r1, r4
 8006192:	0030      	movs	r0, r6
 8006194:	589b      	ldr	r3, [r3, r2]
 8006196:	4798      	blx	r3
 8006198:	2800      	cmp	r0, #0
 800619a:	d0b9      	beq.n	8006110 <__ssvfiscanf_r+0x1c8>
 800619c:	e794      	b.n	80060c8 <__ssvfiscanf_r+0x180>
 800619e:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80061a0:	3201      	adds	r2, #1
 80061a2:	9247      	str	r2, [sp, #284]	; 0x11c
 80061a4:	6862      	ldr	r2, [r4, #4]
 80061a6:	3a01      	subs	r2, #1
 80061a8:	6062      	str	r2, [r4, #4]
 80061aa:	2a00      	cmp	r2, #0
 80061ac:	dd02      	ble.n	80061b4 <__ssvfiscanf_r+0x26c>
 80061ae:	3301      	adds	r3, #1
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	e7b0      	b.n	8006116 <__ssvfiscanf_r+0x1ce>
 80061b4:	22c0      	movs	r2, #192	; 0xc0
 80061b6:	ab43      	add	r3, sp, #268	; 0x10c
 80061b8:	0052      	lsls	r2, r2, #1
 80061ba:	0021      	movs	r1, r4
 80061bc:	0030      	movs	r0, r6
 80061be:	589b      	ldr	r3, [r3, r2]
 80061c0:	4798      	blx	r3
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d0a7      	beq.n	8006116 <__ssvfiscanf_r+0x1ce>
 80061c6:	e77f      	b.n	80060c8 <__ssvfiscanf_r+0x180>
 80061c8:	2b04      	cmp	r3, #4
 80061ca:	dc06      	bgt.n	80061da <__ssvfiscanf_r+0x292>
 80061cc:	0022      	movs	r2, r4
 80061ce:	0030      	movs	r0, r6
 80061d0:	ab02      	add	r3, sp, #8
 80061d2:	a943      	add	r1, sp, #268	; 0x10c
 80061d4:	f000 fa00 	bl	80065d8 <_scanf_i>
 80061d8:	e7ad      	b.n	8006136 <__ssvfiscanf_r+0x1ee>
 80061da:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <__ssvfiscanf_r+0x2d0>)
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d100      	bne.n	80061e2 <__ssvfiscanf_r+0x29a>
 80061e0:	e6de      	b.n	8005fa0 <__ssvfiscanf_r+0x58>
 80061e2:	0022      	movs	r2, r4
 80061e4:	0030      	movs	r0, r6
 80061e6:	ab02      	add	r3, sp, #8
 80061e8:	a943      	add	r1, sp, #268	; 0x10c
 80061ea:	e000      	b.n	80061ee <__ssvfiscanf_r+0x2a6>
 80061ec:	bf00      	nop
 80061ee:	e7a2      	b.n	8006136 <__ssvfiscanf_r+0x1ee>
 80061f0:	89a3      	ldrh	r3, [r4, #12]
 80061f2:	065b      	lsls	r3, r3, #25
 80061f4:	d400      	bmi.n	80061f8 <__ssvfiscanf_r+0x2b0>
 80061f6:	e76c      	b.n	80060d2 <__ssvfiscanf_r+0x18a>
 80061f8:	2001      	movs	r0, #1
 80061fa:	4240      	negs	r0, r0
 80061fc:	e769      	b.n	80060d2 <__ssvfiscanf_r+0x18a>
 80061fe:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006200:	e767      	b.n	80060d2 <__ssvfiscanf_r+0x18a>
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	fffffd6c 	.word	0xfffffd6c
 8006208:	08005e91 	.word	0x08005e91
 800620c:	08005f09 	.word	0x08005f09
 8006210:	08007b37 	.word	0x08007b37
 8006214:	08007aee 	.word	0x08007aee
 8006218:	00000000 	.word	0x00000000

0800621c <_printf_common>:
 800621c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800621e:	0016      	movs	r6, r2
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	688a      	ldr	r2, [r1, #8]
 8006224:	690b      	ldr	r3, [r1, #16]
 8006226:	000c      	movs	r4, r1
 8006228:	9000      	str	r0, [sp, #0]
 800622a:	4293      	cmp	r3, r2
 800622c:	da00      	bge.n	8006230 <_printf_common+0x14>
 800622e:	0013      	movs	r3, r2
 8006230:	0022      	movs	r2, r4
 8006232:	6033      	str	r3, [r6, #0]
 8006234:	3243      	adds	r2, #67	; 0x43
 8006236:	7812      	ldrb	r2, [r2, #0]
 8006238:	2a00      	cmp	r2, #0
 800623a:	d001      	beq.n	8006240 <_printf_common+0x24>
 800623c:	3301      	adds	r3, #1
 800623e:	6033      	str	r3, [r6, #0]
 8006240:	6823      	ldr	r3, [r4, #0]
 8006242:	069b      	lsls	r3, r3, #26
 8006244:	d502      	bpl.n	800624c <_printf_common+0x30>
 8006246:	6833      	ldr	r3, [r6, #0]
 8006248:	3302      	adds	r3, #2
 800624a:	6033      	str	r3, [r6, #0]
 800624c:	6822      	ldr	r2, [r4, #0]
 800624e:	2306      	movs	r3, #6
 8006250:	0015      	movs	r5, r2
 8006252:	401d      	ands	r5, r3
 8006254:	421a      	tst	r2, r3
 8006256:	d027      	beq.n	80062a8 <_printf_common+0x8c>
 8006258:	0023      	movs	r3, r4
 800625a:	3343      	adds	r3, #67	; 0x43
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	1e5a      	subs	r2, r3, #1
 8006260:	4193      	sbcs	r3, r2
 8006262:	6822      	ldr	r2, [r4, #0]
 8006264:	0692      	lsls	r2, r2, #26
 8006266:	d430      	bmi.n	80062ca <_printf_common+0xae>
 8006268:	0022      	movs	r2, r4
 800626a:	9901      	ldr	r1, [sp, #4]
 800626c:	9800      	ldr	r0, [sp, #0]
 800626e:	9d08      	ldr	r5, [sp, #32]
 8006270:	3243      	adds	r2, #67	; 0x43
 8006272:	47a8      	blx	r5
 8006274:	3001      	adds	r0, #1
 8006276:	d025      	beq.n	80062c4 <_printf_common+0xa8>
 8006278:	2206      	movs	r2, #6
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	2500      	movs	r5, #0
 800627e:	4013      	ands	r3, r2
 8006280:	2b04      	cmp	r3, #4
 8006282:	d105      	bne.n	8006290 <_printf_common+0x74>
 8006284:	6833      	ldr	r3, [r6, #0]
 8006286:	68e5      	ldr	r5, [r4, #12]
 8006288:	1aed      	subs	r5, r5, r3
 800628a:	43eb      	mvns	r3, r5
 800628c:	17db      	asrs	r3, r3, #31
 800628e:	401d      	ands	r5, r3
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	6922      	ldr	r2, [r4, #16]
 8006294:	4293      	cmp	r3, r2
 8006296:	dd01      	ble.n	800629c <_printf_common+0x80>
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	18ed      	adds	r5, r5, r3
 800629c:	2600      	movs	r6, #0
 800629e:	42b5      	cmp	r5, r6
 80062a0:	d120      	bne.n	80062e4 <_printf_common+0xc8>
 80062a2:	2000      	movs	r0, #0
 80062a4:	e010      	b.n	80062c8 <_printf_common+0xac>
 80062a6:	3501      	adds	r5, #1
 80062a8:	68e3      	ldr	r3, [r4, #12]
 80062aa:	6832      	ldr	r2, [r6, #0]
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	42ab      	cmp	r3, r5
 80062b0:	ddd2      	ble.n	8006258 <_printf_common+0x3c>
 80062b2:	0022      	movs	r2, r4
 80062b4:	2301      	movs	r3, #1
 80062b6:	9901      	ldr	r1, [sp, #4]
 80062b8:	9800      	ldr	r0, [sp, #0]
 80062ba:	9f08      	ldr	r7, [sp, #32]
 80062bc:	3219      	adds	r2, #25
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	d1f0      	bne.n	80062a6 <_printf_common+0x8a>
 80062c4:	2001      	movs	r0, #1
 80062c6:	4240      	negs	r0, r0
 80062c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80062ca:	2030      	movs	r0, #48	; 0x30
 80062cc:	18e1      	adds	r1, r4, r3
 80062ce:	3143      	adds	r1, #67	; 0x43
 80062d0:	7008      	strb	r0, [r1, #0]
 80062d2:	0021      	movs	r1, r4
 80062d4:	1c5a      	adds	r2, r3, #1
 80062d6:	3145      	adds	r1, #69	; 0x45
 80062d8:	7809      	ldrb	r1, [r1, #0]
 80062da:	18a2      	adds	r2, r4, r2
 80062dc:	3243      	adds	r2, #67	; 0x43
 80062de:	3302      	adds	r3, #2
 80062e0:	7011      	strb	r1, [r2, #0]
 80062e2:	e7c1      	b.n	8006268 <_printf_common+0x4c>
 80062e4:	0022      	movs	r2, r4
 80062e6:	2301      	movs	r3, #1
 80062e8:	9901      	ldr	r1, [sp, #4]
 80062ea:	9800      	ldr	r0, [sp, #0]
 80062ec:	9f08      	ldr	r7, [sp, #32]
 80062ee:	321a      	adds	r2, #26
 80062f0:	47b8      	blx	r7
 80062f2:	3001      	adds	r0, #1
 80062f4:	d0e6      	beq.n	80062c4 <_printf_common+0xa8>
 80062f6:	3601      	adds	r6, #1
 80062f8:	e7d1      	b.n	800629e <_printf_common+0x82>
	...

080062fc <_printf_i>:
 80062fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062fe:	b08b      	sub	sp, #44	; 0x2c
 8006300:	9206      	str	r2, [sp, #24]
 8006302:	000a      	movs	r2, r1
 8006304:	3243      	adds	r2, #67	; 0x43
 8006306:	9307      	str	r3, [sp, #28]
 8006308:	9005      	str	r0, [sp, #20]
 800630a:	9204      	str	r2, [sp, #16]
 800630c:	7e0a      	ldrb	r2, [r1, #24]
 800630e:	000c      	movs	r4, r1
 8006310:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006312:	2a78      	cmp	r2, #120	; 0x78
 8006314:	d809      	bhi.n	800632a <_printf_i+0x2e>
 8006316:	2a62      	cmp	r2, #98	; 0x62
 8006318:	d80b      	bhi.n	8006332 <_printf_i+0x36>
 800631a:	2a00      	cmp	r2, #0
 800631c:	d100      	bne.n	8006320 <_printf_i+0x24>
 800631e:	e0be      	b.n	800649e <_printf_i+0x1a2>
 8006320:	497c      	ldr	r1, [pc, #496]	; (8006514 <_printf_i+0x218>)
 8006322:	9103      	str	r1, [sp, #12]
 8006324:	2a58      	cmp	r2, #88	; 0x58
 8006326:	d100      	bne.n	800632a <_printf_i+0x2e>
 8006328:	e093      	b.n	8006452 <_printf_i+0x156>
 800632a:	0026      	movs	r6, r4
 800632c:	3642      	adds	r6, #66	; 0x42
 800632e:	7032      	strb	r2, [r6, #0]
 8006330:	e022      	b.n	8006378 <_printf_i+0x7c>
 8006332:	0010      	movs	r0, r2
 8006334:	3863      	subs	r0, #99	; 0x63
 8006336:	2815      	cmp	r0, #21
 8006338:	d8f7      	bhi.n	800632a <_printf_i+0x2e>
 800633a:	f7f9 feeb 	bl	8000114 <__gnu_thumb1_case_shi>
 800633e:	0016      	.short	0x0016
 8006340:	fff6001f 	.word	0xfff6001f
 8006344:	fff6fff6 	.word	0xfff6fff6
 8006348:	001ffff6 	.word	0x001ffff6
 800634c:	fff6fff6 	.word	0xfff6fff6
 8006350:	fff6fff6 	.word	0xfff6fff6
 8006354:	003600a3 	.word	0x003600a3
 8006358:	fff60083 	.word	0xfff60083
 800635c:	00b4fff6 	.word	0x00b4fff6
 8006360:	0036fff6 	.word	0x0036fff6
 8006364:	fff6fff6 	.word	0xfff6fff6
 8006368:	0087      	.short	0x0087
 800636a:	0026      	movs	r6, r4
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	3642      	adds	r6, #66	; 0x42
 8006370:	1d11      	adds	r1, r2, #4
 8006372:	6019      	str	r1, [r3, #0]
 8006374:	6813      	ldr	r3, [r2, #0]
 8006376:	7033      	strb	r3, [r6, #0]
 8006378:	2301      	movs	r3, #1
 800637a:	e0a2      	b.n	80064c2 <_printf_i+0x1c6>
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	6809      	ldr	r1, [r1, #0]
 8006380:	1d02      	adds	r2, r0, #4
 8006382:	060d      	lsls	r5, r1, #24
 8006384:	d50b      	bpl.n	800639e <_printf_i+0xa2>
 8006386:	6805      	ldr	r5, [r0, #0]
 8006388:	601a      	str	r2, [r3, #0]
 800638a:	2d00      	cmp	r5, #0
 800638c:	da03      	bge.n	8006396 <_printf_i+0x9a>
 800638e:	232d      	movs	r3, #45	; 0x2d
 8006390:	9a04      	ldr	r2, [sp, #16]
 8006392:	426d      	negs	r5, r5
 8006394:	7013      	strb	r3, [r2, #0]
 8006396:	4b5f      	ldr	r3, [pc, #380]	; (8006514 <_printf_i+0x218>)
 8006398:	270a      	movs	r7, #10
 800639a:	9303      	str	r3, [sp, #12]
 800639c:	e01b      	b.n	80063d6 <_printf_i+0xda>
 800639e:	6805      	ldr	r5, [r0, #0]
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	0649      	lsls	r1, r1, #25
 80063a4:	d5f1      	bpl.n	800638a <_printf_i+0x8e>
 80063a6:	b22d      	sxth	r5, r5
 80063a8:	e7ef      	b.n	800638a <_printf_i+0x8e>
 80063aa:	680d      	ldr	r5, [r1, #0]
 80063ac:	6819      	ldr	r1, [r3, #0]
 80063ae:	1d08      	adds	r0, r1, #4
 80063b0:	6018      	str	r0, [r3, #0]
 80063b2:	062e      	lsls	r6, r5, #24
 80063b4:	d501      	bpl.n	80063ba <_printf_i+0xbe>
 80063b6:	680d      	ldr	r5, [r1, #0]
 80063b8:	e003      	b.n	80063c2 <_printf_i+0xc6>
 80063ba:	066d      	lsls	r5, r5, #25
 80063bc:	d5fb      	bpl.n	80063b6 <_printf_i+0xba>
 80063be:	680d      	ldr	r5, [r1, #0]
 80063c0:	b2ad      	uxth	r5, r5
 80063c2:	4b54      	ldr	r3, [pc, #336]	; (8006514 <_printf_i+0x218>)
 80063c4:	2708      	movs	r7, #8
 80063c6:	9303      	str	r3, [sp, #12]
 80063c8:	2a6f      	cmp	r2, #111	; 0x6f
 80063ca:	d000      	beq.n	80063ce <_printf_i+0xd2>
 80063cc:	3702      	adds	r7, #2
 80063ce:	0023      	movs	r3, r4
 80063d0:	2200      	movs	r2, #0
 80063d2:	3343      	adds	r3, #67	; 0x43
 80063d4:	701a      	strb	r2, [r3, #0]
 80063d6:	6863      	ldr	r3, [r4, #4]
 80063d8:	60a3      	str	r3, [r4, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	db03      	blt.n	80063e6 <_printf_i+0xea>
 80063de:	2104      	movs	r1, #4
 80063e0:	6822      	ldr	r2, [r4, #0]
 80063e2:	438a      	bics	r2, r1
 80063e4:	6022      	str	r2, [r4, #0]
 80063e6:	2d00      	cmp	r5, #0
 80063e8:	d102      	bne.n	80063f0 <_printf_i+0xf4>
 80063ea:	9e04      	ldr	r6, [sp, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00c      	beq.n	800640a <_printf_i+0x10e>
 80063f0:	9e04      	ldr	r6, [sp, #16]
 80063f2:	0028      	movs	r0, r5
 80063f4:	0039      	movs	r1, r7
 80063f6:	f7f9 ff1d 	bl	8000234 <__aeabi_uidivmod>
 80063fa:	9b03      	ldr	r3, [sp, #12]
 80063fc:	3e01      	subs	r6, #1
 80063fe:	5c5b      	ldrb	r3, [r3, r1]
 8006400:	7033      	strb	r3, [r6, #0]
 8006402:	002b      	movs	r3, r5
 8006404:	0005      	movs	r5, r0
 8006406:	429f      	cmp	r7, r3
 8006408:	d9f3      	bls.n	80063f2 <_printf_i+0xf6>
 800640a:	2f08      	cmp	r7, #8
 800640c:	d109      	bne.n	8006422 <_printf_i+0x126>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	07db      	lsls	r3, r3, #31
 8006412:	d506      	bpl.n	8006422 <_printf_i+0x126>
 8006414:	6862      	ldr	r2, [r4, #4]
 8006416:	6923      	ldr	r3, [r4, #16]
 8006418:	429a      	cmp	r2, r3
 800641a:	dc02      	bgt.n	8006422 <_printf_i+0x126>
 800641c:	2330      	movs	r3, #48	; 0x30
 800641e:	3e01      	subs	r6, #1
 8006420:	7033      	strb	r3, [r6, #0]
 8006422:	9b04      	ldr	r3, [sp, #16]
 8006424:	1b9b      	subs	r3, r3, r6
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	9b07      	ldr	r3, [sp, #28]
 800642a:	0021      	movs	r1, r4
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	9805      	ldr	r0, [sp, #20]
 8006430:	9b06      	ldr	r3, [sp, #24]
 8006432:	aa09      	add	r2, sp, #36	; 0x24
 8006434:	f7ff fef2 	bl	800621c <_printf_common>
 8006438:	3001      	adds	r0, #1
 800643a:	d147      	bne.n	80064cc <_printf_i+0x1d0>
 800643c:	2001      	movs	r0, #1
 800643e:	4240      	negs	r0, r0
 8006440:	b00b      	add	sp, #44	; 0x2c
 8006442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006444:	2220      	movs	r2, #32
 8006446:	6809      	ldr	r1, [r1, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	6022      	str	r2, [r4, #0]
 800644c:	2278      	movs	r2, #120	; 0x78
 800644e:	4932      	ldr	r1, [pc, #200]	; (8006518 <_printf_i+0x21c>)
 8006450:	9103      	str	r1, [sp, #12]
 8006452:	0021      	movs	r1, r4
 8006454:	3145      	adds	r1, #69	; 0x45
 8006456:	700a      	strb	r2, [r1, #0]
 8006458:	6819      	ldr	r1, [r3, #0]
 800645a:	6822      	ldr	r2, [r4, #0]
 800645c:	c920      	ldmia	r1!, {r5}
 800645e:	0610      	lsls	r0, r2, #24
 8006460:	d402      	bmi.n	8006468 <_printf_i+0x16c>
 8006462:	0650      	lsls	r0, r2, #25
 8006464:	d500      	bpl.n	8006468 <_printf_i+0x16c>
 8006466:	b2ad      	uxth	r5, r5
 8006468:	6019      	str	r1, [r3, #0]
 800646a:	07d3      	lsls	r3, r2, #31
 800646c:	d502      	bpl.n	8006474 <_printf_i+0x178>
 800646e:	2320      	movs	r3, #32
 8006470:	4313      	orrs	r3, r2
 8006472:	6023      	str	r3, [r4, #0]
 8006474:	2710      	movs	r7, #16
 8006476:	2d00      	cmp	r5, #0
 8006478:	d1a9      	bne.n	80063ce <_printf_i+0xd2>
 800647a:	2220      	movs	r2, #32
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	4393      	bics	r3, r2
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	e7a4      	b.n	80063ce <_printf_i+0xd2>
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	680d      	ldr	r5, [r1, #0]
 8006488:	1d10      	adds	r0, r2, #4
 800648a:	6949      	ldr	r1, [r1, #20]
 800648c:	6018      	str	r0, [r3, #0]
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	062e      	lsls	r6, r5, #24
 8006492:	d501      	bpl.n	8006498 <_printf_i+0x19c>
 8006494:	6019      	str	r1, [r3, #0]
 8006496:	e002      	b.n	800649e <_printf_i+0x1a2>
 8006498:	066d      	lsls	r5, r5, #25
 800649a:	d5fb      	bpl.n	8006494 <_printf_i+0x198>
 800649c:	8019      	strh	r1, [r3, #0]
 800649e:	2300      	movs	r3, #0
 80064a0:	9e04      	ldr	r6, [sp, #16]
 80064a2:	6123      	str	r3, [r4, #16]
 80064a4:	e7c0      	b.n	8006428 <_printf_i+0x12c>
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	1d11      	adds	r1, r2, #4
 80064aa:	6019      	str	r1, [r3, #0]
 80064ac:	6816      	ldr	r6, [r2, #0]
 80064ae:	2100      	movs	r1, #0
 80064b0:	0030      	movs	r0, r6
 80064b2:	6862      	ldr	r2, [r4, #4]
 80064b4:	f000 fa34 	bl	8006920 <memchr>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d001      	beq.n	80064c0 <_printf_i+0x1c4>
 80064bc:	1b80      	subs	r0, r0, r6
 80064be:	6060      	str	r0, [r4, #4]
 80064c0:	6863      	ldr	r3, [r4, #4]
 80064c2:	6123      	str	r3, [r4, #16]
 80064c4:	2300      	movs	r3, #0
 80064c6:	9a04      	ldr	r2, [sp, #16]
 80064c8:	7013      	strb	r3, [r2, #0]
 80064ca:	e7ad      	b.n	8006428 <_printf_i+0x12c>
 80064cc:	0032      	movs	r2, r6
 80064ce:	6923      	ldr	r3, [r4, #16]
 80064d0:	9906      	ldr	r1, [sp, #24]
 80064d2:	9805      	ldr	r0, [sp, #20]
 80064d4:	9d07      	ldr	r5, [sp, #28]
 80064d6:	47a8      	blx	r5
 80064d8:	3001      	adds	r0, #1
 80064da:	d0af      	beq.n	800643c <_printf_i+0x140>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	079b      	lsls	r3, r3, #30
 80064e0:	d415      	bmi.n	800650e <_printf_i+0x212>
 80064e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e4:	68e0      	ldr	r0, [r4, #12]
 80064e6:	4298      	cmp	r0, r3
 80064e8:	daaa      	bge.n	8006440 <_printf_i+0x144>
 80064ea:	0018      	movs	r0, r3
 80064ec:	e7a8      	b.n	8006440 <_printf_i+0x144>
 80064ee:	0022      	movs	r2, r4
 80064f0:	2301      	movs	r3, #1
 80064f2:	9906      	ldr	r1, [sp, #24]
 80064f4:	9805      	ldr	r0, [sp, #20]
 80064f6:	9e07      	ldr	r6, [sp, #28]
 80064f8:	3219      	adds	r2, #25
 80064fa:	47b0      	blx	r6
 80064fc:	3001      	adds	r0, #1
 80064fe:	d09d      	beq.n	800643c <_printf_i+0x140>
 8006500:	3501      	adds	r5, #1
 8006502:	68e3      	ldr	r3, [r4, #12]
 8006504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	42ab      	cmp	r3, r5
 800650a:	dcf0      	bgt.n	80064ee <_printf_i+0x1f2>
 800650c:	e7e9      	b.n	80064e2 <_printf_i+0x1e6>
 800650e:	2500      	movs	r5, #0
 8006510:	e7f7      	b.n	8006502 <_printf_i+0x206>
 8006512:	46c0      	nop			; (mov r8, r8)
 8006514:	08007af9 	.word	0x08007af9
 8006518:	08007b0a 	.word	0x08007b0a

0800651c <_scanf_chars>:
 800651c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800651e:	0015      	movs	r5, r2
 8006520:	688a      	ldr	r2, [r1, #8]
 8006522:	000c      	movs	r4, r1
 8006524:	9001      	str	r0, [sp, #4]
 8006526:	2a00      	cmp	r2, #0
 8006528:	d105      	bne.n	8006536 <_scanf_chars+0x1a>
 800652a:	6989      	ldr	r1, [r1, #24]
 800652c:	3201      	adds	r2, #1
 800652e:	2900      	cmp	r1, #0
 8006530:	d000      	beq.n	8006534 <_scanf_chars+0x18>
 8006532:	3a02      	subs	r2, #2
 8006534:	60a2      	str	r2, [r4, #8]
 8006536:	6822      	ldr	r2, [r4, #0]
 8006538:	06d2      	lsls	r2, r2, #27
 800653a:	d403      	bmi.n	8006544 <_scanf_chars+0x28>
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	1d11      	adds	r1, r2, #4
 8006540:	6019      	str	r1, [r3, #0]
 8006542:	6817      	ldr	r7, [r2, #0]
 8006544:	2600      	movs	r6, #0
 8006546:	69a0      	ldr	r0, [r4, #24]
 8006548:	2800      	cmp	r0, #0
 800654a:	d013      	beq.n	8006574 <_scanf_chars+0x58>
 800654c:	2801      	cmp	r0, #1
 800654e:	d108      	bne.n	8006562 <_scanf_chars+0x46>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	6962      	ldr	r2, [r4, #20]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	5cd3      	ldrb	r3, [r2, r3]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <_scanf_chars+0x58>
 800655c:	2e00      	cmp	r6, #0
 800655e:	d038      	beq.n	80065d2 <_scanf_chars+0xb6>
 8006560:	e026      	b.n	80065b0 <_scanf_chars+0x94>
 8006562:	2802      	cmp	r0, #2
 8006564:	d124      	bne.n	80065b0 <_scanf_chars+0x94>
 8006566:	682b      	ldr	r3, [r5, #0]
 8006568:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <_scanf_chars+0xb8>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	5cd3      	ldrb	r3, [r2, r3]
 800656e:	2208      	movs	r2, #8
 8006570:	4213      	tst	r3, r2
 8006572:	d11d      	bne.n	80065b0 <_scanf_chars+0x94>
 8006574:	2210      	movs	r2, #16
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	3601      	adds	r6, #1
 800657a:	4213      	tst	r3, r2
 800657c:	d103      	bne.n	8006586 <_scanf_chars+0x6a>
 800657e:	682b      	ldr	r3, [r5, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	703b      	strb	r3, [r7, #0]
 8006584:	3701      	adds	r7, #1
 8006586:	682a      	ldr	r2, [r5, #0]
 8006588:	686b      	ldr	r3, [r5, #4]
 800658a:	3201      	adds	r2, #1
 800658c:	602a      	str	r2, [r5, #0]
 800658e:	68a2      	ldr	r2, [r4, #8]
 8006590:	3b01      	subs	r3, #1
 8006592:	3a01      	subs	r2, #1
 8006594:	606b      	str	r3, [r5, #4]
 8006596:	60a2      	str	r2, [r4, #8]
 8006598:	2a00      	cmp	r2, #0
 800659a:	d009      	beq.n	80065b0 <_scanf_chars+0x94>
 800659c:	2b00      	cmp	r3, #0
 800659e:	dcd2      	bgt.n	8006546 <_scanf_chars+0x2a>
 80065a0:	23c0      	movs	r3, #192	; 0xc0
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	0029      	movs	r1, r5
 80065a6:	58e3      	ldr	r3, [r4, r3]
 80065a8:	9801      	ldr	r0, [sp, #4]
 80065aa:	4798      	blx	r3
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d0ca      	beq.n	8006546 <_scanf_chars+0x2a>
 80065b0:	6822      	ldr	r2, [r4, #0]
 80065b2:	2310      	movs	r3, #16
 80065b4:	0011      	movs	r1, r2
 80065b6:	4019      	ands	r1, r3
 80065b8:	421a      	tst	r2, r3
 80065ba:	d106      	bne.n	80065ca <_scanf_chars+0xae>
 80065bc:	68e3      	ldr	r3, [r4, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60e3      	str	r3, [r4, #12]
 80065c2:	69a3      	ldr	r3, [r4, #24]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d000      	beq.n	80065ca <_scanf_chars+0xae>
 80065c8:	7039      	strb	r1, [r7, #0]
 80065ca:	2000      	movs	r0, #0
 80065cc:	6923      	ldr	r3, [r4, #16]
 80065ce:	199b      	adds	r3, r3, r6
 80065d0:	6123      	str	r3, [r4, #16]
 80065d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065d4:	08007b37 	.word	0x08007b37

080065d8 <_scanf_i>:
 80065d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065da:	b08b      	sub	sp, #44	; 0x2c
 80065dc:	9301      	str	r3, [sp, #4]
 80065de:	4b7a      	ldr	r3, [pc, #488]	; (80067c8 <_scanf_i+0x1f0>)
 80065e0:	0016      	movs	r6, r2
 80065e2:	9004      	str	r0, [sp, #16]
 80065e4:	aa07      	add	r2, sp, #28
 80065e6:	cba1      	ldmia	r3!, {r0, r5, r7}
 80065e8:	c2a1      	stmia	r2!, {r0, r5, r7}
 80065ea:	4a78      	ldr	r2, [pc, #480]	; (80067cc <_scanf_i+0x1f4>)
 80065ec:	698b      	ldr	r3, [r1, #24]
 80065ee:	000c      	movs	r4, r1
 80065f0:	9205      	str	r2, [sp, #20]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d001      	beq.n	80065fa <_scanf_i+0x22>
 80065f6:	4b76      	ldr	r3, [pc, #472]	; (80067d0 <_scanf_i+0x1f8>)
 80065f8:	9305      	str	r3, [sp, #20]
 80065fa:	22ae      	movs	r2, #174	; 0xae
 80065fc:	2000      	movs	r0, #0
 80065fe:	68a3      	ldr	r3, [r4, #8]
 8006600:	0052      	lsls	r2, r2, #1
 8006602:	1e59      	subs	r1, r3, #1
 8006604:	9003      	str	r0, [sp, #12]
 8006606:	4291      	cmp	r1, r2
 8006608:	d905      	bls.n	8006616 <_scanf_i+0x3e>
 800660a:	3b5e      	subs	r3, #94	; 0x5e
 800660c:	3bff      	subs	r3, #255	; 0xff
 800660e:	9303      	str	r3, [sp, #12]
 8006610:	235e      	movs	r3, #94	; 0x5e
 8006612:	33ff      	adds	r3, #255	; 0xff
 8006614:	60a3      	str	r3, [r4, #8]
 8006616:	0023      	movs	r3, r4
 8006618:	331c      	adds	r3, #28
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	23d0      	movs	r3, #208	; 0xd0
 800661e:	2700      	movs	r7, #0
 8006620:	6822      	ldr	r2, [r4, #0]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	4313      	orrs	r3, r2
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	9b00      	ldr	r3, [sp, #0]
 800662a:	9302      	str	r3, [sp, #8]
 800662c:	6833      	ldr	r3, [r6, #0]
 800662e:	a807      	add	r0, sp, #28
 8006630:	7819      	ldrb	r1, [r3, #0]
 8006632:	00bb      	lsls	r3, r7, #2
 8006634:	2202      	movs	r2, #2
 8006636:	5818      	ldr	r0, [r3, r0]
 8006638:	f000 f972 	bl	8006920 <memchr>
 800663c:	2800      	cmp	r0, #0
 800663e:	d02a      	beq.n	8006696 <_scanf_i+0xbe>
 8006640:	2f01      	cmp	r7, #1
 8006642:	d161      	bne.n	8006708 <_scanf_i+0x130>
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <_scanf_i+0x80>
 800664a:	3308      	adds	r3, #8
 800664c:	6822      	ldr	r2, [r4, #0]
 800664e:	6063      	str	r3, [r4, #4]
 8006650:	33f9      	adds	r3, #249	; 0xf9
 8006652:	33ff      	adds	r3, #255	; 0xff
 8006654:	4313      	orrs	r3, r2
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	6823      	ldr	r3, [r4, #0]
 800665a:	4a5e      	ldr	r2, [pc, #376]	; (80067d4 <_scanf_i+0x1fc>)
 800665c:	4013      	ands	r3, r2
 800665e:	6023      	str	r3, [r4, #0]
 8006660:	68a3      	ldr	r3, [r4, #8]
 8006662:	1e5a      	subs	r2, r3, #1
 8006664:	60a2      	str	r2, [r4, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d015      	beq.n	8006696 <_scanf_i+0xbe>
 800666a:	6833      	ldr	r3, [r6, #0]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	6032      	str	r2, [r6, #0]
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	9a02      	ldr	r2, [sp, #8]
 8006674:	7013      	strb	r3, [r2, #0]
 8006676:	6873      	ldr	r3, [r6, #4]
 8006678:	1c55      	adds	r5, r2, #1
 800667a:	3b01      	subs	r3, #1
 800667c:	6073      	str	r3, [r6, #4]
 800667e:	9502      	str	r5, [sp, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	dc08      	bgt.n	8006696 <_scanf_i+0xbe>
 8006684:	23c0      	movs	r3, #192	; 0xc0
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	0031      	movs	r1, r6
 800668a:	58e3      	ldr	r3, [r4, r3]
 800668c:	9804      	ldr	r0, [sp, #16]
 800668e:	4798      	blx	r3
 8006690:	2800      	cmp	r0, #0
 8006692:	d000      	beq.n	8006696 <_scanf_i+0xbe>
 8006694:	e080      	b.n	8006798 <_scanf_i+0x1c0>
 8006696:	3701      	adds	r7, #1
 8006698:	2f03      	cmp	r7, #3
 800669a:	d1c7      	bne.n	800662c <_scanf_i+0x54>
 800669c:	6863      	ldr	r3, [r4, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <_scanf_i+0xce>
 80066a2:	330a      	adds	r3, #10
 80066a4:	6063      	str	r3, [r4, #4]
 80066a6:	2110      	movs	r1, #16
 80066a8:	2700      	movs	r7, #0
 80066aa:	6863      	ldr	r3, [r4, #4]
 80066ac:	6960      	ldr	r0, [r4, #20]
 80066ae:	1ac9      	subs	r1, r1, r3
 80066b0:	4b49      	ldr	r3, [pc, #292]	; (80067d8 <_scanf_i+0x200>)
 80066b2:	18c9      	adds	r1, r1, r3
 80066b4:	f000 f894 	bl	80067e0 <__sccl>
 80066b8:	9d02      	ldr	r5, [sp, #8]
 80066ba:	68a3      	ldr	r3, [r4, #8]
 80066bc:	6820      	ldr	r0, [r4, #0]
 80066be:	9302      	str	r3, [sp, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d040      	beq.n	8006746 <_scanf_i+0x16e>
 80066c4:	6831      	ldr	r1, [r6, #0]
 80066c6:	6963      	ldr	r3, [r4, #20]
 80066c8:	780a      	ldrb	r2, [r1, #0]
 80066ca:	5c9b      	ldrb	r3, [r3, r2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d03a      	beq.n	8006746 <_scanf_i+0x16e>
 80066d0:	2a30      	cmp	r2, #48	; 0x30
 80066d2:	d129      	bne.n	8006728 <_scanf_i+0x150>
 80066d4:	2380      	movs	r3, #128	; 0x80
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	4218      	tst	r0, r3
 80066da:	d025      	beq.n	8006728 <_scanf_i+0x150>
 80066dc:	9b03      	ldr	r3, [sp, #12]
 80066de:	3701      	adds	r7, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <_scanf_i+0x118>
 80066e4:	001a      	movs	r2, r3
 80066e6:	9b02      	ldr	r3, [sp, #8]
 80066e8:	3a01      	subs	r2, #1
 80066ea:	3301      	adds	r3, #1
 80066ec:	9203      	str	r2, [sp, #12]
 80066ee:	60a3      	str	r3, [r4, #8]
 80066f0:	6873      	ldr	r3, [r6, #4]
 80066f2:	3b01      	subs	r3, #1
 80066f4:	6073      	str	r3, [r6, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	dd1d      	ble.n	8006736 <_scanf_i+0x15e>
 80066fa:	6833      	ldr	r3, [r6, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	68a3      	ldr	r3, [r4, #8]
 8006702:	3b01      	subs	r3, #1
 8006704:	60a3      	str	r3, [r4, #8]
 8006706:	e7d8      	b.n	80066ba <_scanf_i+0xe2>
 8006708:	2f02      	cmp	r7, #2
 800670a:	d1a9      	bne.n	8006660 <_scanf_i+0x88>
 800670c:	21c0      	movs	r1, #192	; 0xc0
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	00c9      	lsls	r1, r1, #3
 8006714:	4011      	ands	r1, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4299      	cmp	r1, r3
 800671a:	d1bf      	bne.n	800669c <_scanf_i+0xc4>
 800671c:	3bf1      	subs	r3, #241	; 0xf1
 800671e:	3bff      	subs	r3, #255	; 0xff
 8006720:	6063      	str	r3, [r4, #4]
 8006722:	33f0      	adds	r3, #240	; 0xf0
 8006724:	4313      	orrs	r3, r2
 8006726:	e79a      	b.n	800665e <_scanf_i+0x86>
 8006728:	4b2c      	ldr	r3, [pc, #176]	; (80067dc <_scanf_i+0x204>)
 800672a:	4003      	ands	r3, r0
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	780b      	ldrb	r3, [r1, #0]
 8006730:	702b      	strb	r3, [r5, #0]
 8006732:	3501      	adds	r5, #1
 8006734:	e7dc      	b.n	80066f0 <_scanf_i+0x118>
 8006736:	23c0      	movs	r3, #192	; 0xc0
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	0031      	movs	r1, r6
 800673c:	58e3      	ldr	r3, [r4, r3]
 800673e:	9804      	ldr	r0, [sp, #16]
 8006740:	4798      	blx	r3
 8006742:	2800      	cmp	r0, #0
 8006744:	d0dc      	beq.n	8006700 <_scanf_i+0x128>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	05db      	lsls	r3, r3, #23
 800674a:	d50e      	bpl.n	800676a <_scanf_i+0x192>
 800674c:	9b00      	ldr	r3, [sp, #0]
 800674e:	429d      	cmp	r5, r3
 8006750:	d907      	bls.n	8006762 <_scanf_i+0x18a>
 8006752:	23be      	movs	r3, #190	; 0xbe
 8006754:	3d01      	subs	r5, #1
 8006756:	005b      	lsls	r3, r3, #1
 8006758:	0032      	movs	r2, r6
 800675a:	7829      	ldrb	r1, [r5, #0]
 800675c:	58e3      	ldr	r3, [r4, r3]
 800675e:	9804      	ldr	r0, [sp, #16]
 8006760:	4798      	blx	r3
 8006762:	9b00      	ldr	r3, [sp, #0]
 8006764:	2001      	movs	r0, #1
 8006766:	429d      	cmp	r5, r3
 8006768:	d029      	beq.n	80067be <_scanf_i+0x1e6>
 800676a:	6821      	ldr	r1, [r4, #0]
 800676c:	2310      	movs	r3, #16
 800676e:	000a      	movs	r2, r1
 8006770:	401a      	ands	r2, r3
 8006772:	4219      	tst	r1, r3
 8006774:	d11c      	bne.n	80067b0 <_scanf_i+0x1d8>
 8006776:	702a      	strb	r2, [r5, #0]
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	9900      	ldr	r1, [sp, #0]
 800677c:	9804      	ldr	r0, [sp, #16]
 800677e:	9e05      	ldr	r6, [sp, #20]
 8006780:	47b0      	blx	r6
 8006782:	9b01      	ldr	r3, [sp, #4]
 8006784:	6822      	ldr	r2, [r4, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	0691      	lsls	r1, r2, #26
 800678a:	d507      	bpl.n	800679c <_scanf_i+0x1c4>
 800678c:	9901      	ldr	r1, [sp, #4]
 800678e:	1d1a      	adds	r2, r3, #4
 8006790:	600a      	str	r2, [r1, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6018      	str	r0, [r3, #0]
 8006796:	e008      	b.n	80067aa <_scanf_i+0x1d2>
 8006798:	2700      	movs	r7, #0
 800679a:	e7d4      	b.n	8006746 <_scanf_i+0x16e>
 800679c:	1d19      	adds	r1, r3, #4
 800679e:	07d6      	lsls	r6, r2, #31
 80067a0:	d50f      	bpl.n	80067c2 <_scanf_i+0x1ea>
 80067a2:	9a01      	ldr	r2, [sp, #4]
 80067a4:	6011      	str	r1, [r2, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	8018      	strh	r0, [r3, #0]
 80067aa:	68e3      	ldr	r3, [r4, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60e3      	str	r3, [r4, #12]
 80067b0:	2000      	movs	r0, #0
 80067b2:	9b00      	ldr	r3, [sp, #0]
 80067b4:	1aed      	subs	r5, r5, r3
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	19ed      	adds	r5, r5, r7
 80067ba:	195b      	adds	r3, r3, r5
 80067bc:	6123      	str	r3, [r4, #16]
 80067be:	b00b      	add	sp, #44	; 0x2c
 80067c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c2:	9a01      	ldr	r2, [sp, #4]
 80067c4:	6011      	str	r1, [r2, #0]
 80067c6:	e7e4      	b.n	8006792 <_scanf_i+0x1ba>
 80067c8:	08007a64 	.word	0x08007a64
 80067cc:	08006aa1 	.word	0x08006aa1
 80067d0:	08006bad 	.word	0x08006bad
 80067d4:	fffffaff 	.word	0xfffffaff
 80067d8:	08007b1b 	.word	0x08007b1b
 80067dc:	fffff6ff 	.word	0xfffff6ff

080067e0 <__sccl>:
 80067e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e2:	780b      	ldrb	r3, [r1, #0]
 80067e4:	0004      	movs	r4, r0
 80067e6:	2b5e      	cmp	r3, #94	; 0x5e
 80067e8:	d019      	beq.n	800681e <__sccl+0x3e>
 80067ea:	2200      	movs	r2, #0
 80067ec:	1c4d      	adds	r5, r1, #1
 80067ee:	0021      	movs	r1, r4
 80067f0:	1c60      	adds	r0, r4, #1
 80067f2:	30ff      	adds	r0, #255	; 0xff
 80067f4:	700a      	strb	r2, [r1, #0]
 80067f6:	3101      	adds	r1, #1
 80067f8:	4281      	cmp	r1, r0
 80067fa:	d1fb      	bne.n	80067f4 <__sccl+0x14>
 80067fc:	1e68      	subs	r0, r5, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00c      	beq.n	800681c <__sccl+0x3c>
 8006802:	2101      	movs	r1, #1
 8006804:	262d      	movs	r6, #45	; 0x2d
 8006806:	404a      	eors	r2, r1
 8006808:	0028      	movs	r0, r5
 800680a:	54e2      	strb	r2, [r4, r3]
 800680c:	7801      	ldrb	r1, [r0, #0]
 800680e:	1c45      	adds	r5, r0, #1
 8006810:	292d      	cmp	r1, #45	; 0x2d
 8006812:	d00c      	beq.n	800682e <__sccl+0x4e>
 8006814:	295d      	cmp	r1, #93	; 0x5d
 8006816:	d01d      	beq.n	8006854 <__sccl+0x74>
 8006818:	2900      	cmp	r1, #0
 800681a:	d104      	bne.n	8006826 <__sccl+0x46>
 800681c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681e:	2201      	movs	r2, #1
 8006820:	784b      	ldrb	r3, [r1, #1]
 8006822:	1c8d      	adds	r5, r1, #2
 8006824:	e7e3      	b.n	80067ee <__sccl+0xe>
 8006826:	000b      	movs	r3, r1
 8006828:	e7ee      	b.n	8006808 <__sccl+0x28>
 800682a:	0033      	movs	r3, r6
 800682c:	e7ec      	b.n	8006808 <__sccl+0x28>
 800682e:	7841      	ldrb	r1, [r0, #1]
 8006830:	295d      	cmp	r1, #93	; 0x5d
 8006832:	d0fa      	beq.n	800682a <__sccl+0x4a>
 8006834:	428b      	cmp	r3, r1
 8006836:	dcf8      	bgt.n	800682a <__sccl+0x4a>
 8006838:	001d      	movs	r5, r3
 800683a:	3002      	adds	r0, #2
 800683c:	3501      	adds	r5, #1
 800683e:	5562      	strb	r2, [r4, r5]
 8006840:	42a9      	cmp	r1, r5
 8006842:	dcfb      	bgt.n	800683c <__sccl+0x5c>
 8006844:	2500      	movs	r5, #0
 8006846:	1c5f      	adds	r7, r3, #1
 8006848:	428b      	cmp	r3, r1
 800684a:	da01      	bge.n	8006850 <__sccl+0x70>
 800684c:	1acd      	subs	r5, r1, r3
 800684e:	3d01      	subs	r5, #1
 8006850:	197b      	adds	r3, r7, r5
 8006852:	e7db      	b.n	800680c <__sccl+0x2c>
 8006854:	0028      	movs	r0, r5
 8006856:	e7e1      	b.n	800681c <__sccl+0x3c>

08006858 <__submore>:
 8006858:	000b      	movs	r3, r1
 800685a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800685c:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800685e:	3344      	adds	r3, #68	; 0x44
 8006860:	000c      	movs	r4, r1
 8006862:	429d      	cmp	r5, r3
 8006864:	d11c      	bne.n	80068a0 <__submore+0x48>
 8006866:	2680      	movs	r6, #128	; 0x80
 8006868:	00f6      	lsls	r6, r6, #3
 800686a:	0031      	movs	r1, r6
 800686c:	f7ff f91c 	bl	8005aa8 <_malloc_r>
 8006870:	2800      	cmp	r0, #0
 8006872:	d102      	bne.n	800687a <__submore+0x22>
 8006874:	2001      	movs	r0, #1
 8006876:	4240      	negs	r0, r0
 8006878:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800687a:	0023      	movs	r3, r4
 800687c:	6360      	str	r0, [r4, #52]	; 0x34
 800687e:	63a6      	str	r6, [r4, #56]	; 0x38
 8006880:	3346      	adds	r3, #70	; 0x46
 8006882:	781a      	ldrb	r2, [r3, #0]
 8006884:	4b10      	ldr	r3, [pc, #64]	; (80068c8 <__submore+0x70>)
 8006886:	54c2      	strb	r2, [r0, r3]
 8006888:	0023      	movs	r3, r4
 800688a:	3345      	adds	r3, #69	; 0x45
 800688c:	781a      	ldrb	r2, [r3, #0]
 800688e:	4b0f      	ldr	r3, [pc, #60]	; (80068cc <__submore+0x74>)
 8006890:	54c2      	strb	r2, [r0, r3]
 8006892:	782a      	ldrb	r2, [r5, #0]
 8006894:	4b0e      	ldr	r3, [pc, #56]	; (80068d0 <__submore+0x78>)
 8006896:	54c2      	strb	r2, [r0, r3]
 8006898:	18c0      	adds	r0, r0, r3
 800689a:	6020      	str	r0, [r4, #0]
 800689c:	2000      	movs	r0, #0
 800689e:	e7eb      	b.n	8006878 <__submore+0x20>
 80068a0:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80068a2:	0029      	movs	r1, r5
 80068a4:	0073      	lsls	r3, r6, #1
 80068a6:	001a      	movs	r2, r3
 80068a8:	9301      	str	r3, [sp, #4]
 80068aa:	f000 f844 	bl	8006936 <_realloc_r>
 80068ae:	1e05      	subs	r5, r0, #0
 80068b0:	d0e0      	beq.n	8006874 <__submore+0x1c>
 80068b2:	1987      	adds	r7, r0, r6
 80068b4:	0001      	movs	r1, r0
 80068b6:	0032      	movs	r2, r6
 80068b8:	0038      	movs	r0, r7
 80068ba:	f7ff f87f 	bl	80059bc <memcpy>
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	6027      	str	r7, [r4, #0]
 80068c2:	6365      	str	r5, [r4, #52]	; 0x34
 80068c4:	63a3      	str	r3, [r4, #56]	; 0x38
 80068c6:	e7e9      	b.n	800689c <__submore+0x44>
 80068c8:	000003ff 	.word	0x000003ff
 80068cc:	000003fe 	.word	0x000003fe
 80068d0:	000003fd 	.word	0x000003fd

080068d4 <memmove>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	4288      	cmp	r0, r1
 80068d8:	d902      	bls.n	80068e0 <memmove+0xc>
 80068da:	188b      	adds	r3, r1, r2
 80068dc:	4298      	cmp	r0, r3
 80068de:	d303      	bcc.n	80068e8 <memmove+0x14>
 80068e0:	2300      	movs	r3, #0
 80068e2:	e007      	b.n	80068f4 <memmove+0x20>
 80068e4:	5c8b      	ldrb	r3, [r1, r2]
 80068e6:	5483      	strb	r3, [r0, r2]
 80068e8:	3a01      	subs	r2, #1
 80068ea:	d2fb      	bcs.n	80068e4 <memmove+0x10>
 80068ec:	bd10      	pop	{r4, pc}
 80068ee:	5ccc      	ldrb	r4, [r1, r3]
 80068f0:	54c4      	strb	r4, [r0, r3]
 80068f2:	3301      	adds	r3, #1
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d1fa      	bne.n	80068ee <memmove+0x1a>
 80068f8:	e7f8      	b.n	80068ec <memmove+0x18>
	...

080068fc <_sbrk_r>:
 80068fc:	2300      	movs	r3, #0
 80068fe:	b570      	push	{r4, r5, r6, lr}
 8006900:	4d06      	ldr	r5, [pc, #24]	; (800691c <_sbrk_r+0x20>)
 8006902:	0004      	movs	r4, r0
 8006904:	0008      	movs	r0, r1
 8006906:	602b      	str	r3, [r5, #0]
 8006908:	f7fc fa3c 	bl	8002d84 <_sbrk>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d103      	bne.n	8006918 <_sbrk_r+0x1c>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d000      	beq.n	8006918 <_sbrk_r+0x1c>
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	bd70      	pop	{r4, r5, r6, pc}
 800691a:	46c0      	nop			; (mov r8, r8)
 800691c:	20000560 	.word	0x20000560

08006920 <memchr>:
 8006920:	b2c9      	uxtb	r1, r1
 8006922:	1882      	adds	r2, r0, r2
 8006924:	4290      	cmp	r0, r2
 8006926:	d101      	bne.n	800692c <memchr+0xc>
 8006928:	2000      	movs	r0, #0
 800692a:	4770      	bx	lr
 800692c:	7803      	ldrb	r3, [r0, #0]
 800692e:	428b      	cmp	r3, r1
 8006930:	d0fb      	beq.n	800692a <memchr+0xa>
 8006932:	3001      	adds	r0, #1
 8006934:	e7f6      	b.n	8006924 <memchr+0x4>

08006936 <_realloc_r>:
 8006936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006938:	0007      	movs	r7, r0
 800693a:	000e      	movs	r6, r1
 800693c:	0014      	movs	r4, r2
 800693e:	2900      	cmp	r1, #0
 8006940:	d105      	bne.n	800694e <_realloc_r+0x18>
 8006942:	0011      	movs	r1, r2
 8006944:	f7ff f8b0 	bl	8005aa8 <_malloc_r>
 8006948:	0005      	movs	r5, r0
 800694a:	0028      	movs	r0, r5
 800694c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800694e:	2a00      	cmp	r2, #0
 8006950:	d103      	bne.n	800695a <_realloc_r+0x24>
 8006952:	f7ff f83d 	bl	80059d0 <_free_r>
 8006956:	0025      	movs	r5, r4
 8006958:	e7f7      	b.n	800694a <_realloc_r+0x14>
 800695a:	f000 f92b 	bl	8006bb4 <_malloc_usable_size_r>
 800695e:	9001      	str	r0, [sp, #4]
 8006960:	4284      	cmp	r4, r0
 8006962:	d803      	bhi.n	800696c <_realloc_r+0x36>
 8006964:	0035      	movs	r5, r6
 8006966:	0843      	lsrs	r3, r0, #1
 8006968:	42a3      	cmp	r3, r4
 800696a:	d3ee      	bcc.n	800694a <_realloc_r+0x14>
 800696c:	0021      	movs	r1, r4
 800696e:	0038      	movs	r0, r7
 8006970:	f7ff f89a 	bl	8005aa8 <_malloc_r>
 8006974:	1e05      	subs	r5, r0, #0
 8006976:	d0e8      	beq.n	800694a <_realloc_r+0x14>
 8006978:	9b01      	ldr	r3, [sp, #4]
 800697a:	0022      	movs	r2, r4
 800697c:	429c      	cmp	r4, r3
 800697e:	d900      	bls.n	8006982 <_realloc_r+0x4c>
 8006980:	001a      	movs	r2, r3
 8006982:	0031      	movs	r1, r6
 8006984:	0028      	movs	r0, r5
 8006986:	f7ff f819 	bl	80059bc <memcpy>
 800698a:	0031      	movs	r1, r6
 800698c:	0038      	movs	r0, r7
 800698e:	f7ff f81f 	bl	80059d0 <_free_r>
 8006992:	e7da      	b.n	800694a <_realloc_r+0x14>

08006994 <_strtol_l.constprop.0>:
 8006994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006996:	b087      	sub	sp, #28
 8006998:	001e      	movs	r6, r3
 800699a:	9005      	str	r0, [sp, #20]
 800699c:	9101      	str	r1, [sp, #4]
 800699e:	9202      	str	r2, [sp, #8]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d048      	beq.n	8006a36 <_strtol_l.constprop.0+0xa2>
 80069a4:	000b      	movs	r3, r1
 80069a6:	2e24      	cmp	r6, #36	; 0x24
 80069a8:	d845      	bhi.n	8006a36 <_strtol_l.constprop.0+0xa2>
 80069aa:	4a3b      	ldr	r2, [pc, #236]	; (8006a98 <_strtol_l.constprop.0+0x104>)
 80069ac:	2108      	movs	r1, #8
 80069ae:	4694      	mov	ip, r2
 80069b0:	001a      	movs	r2, r3
 80069b2:	4660      	mov	r0, ip
 80069b4:	7814      	ldrb	r4, [r2, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	5d00      	ldrb	r0, [r0, r4]
 80069ba:	001d      	movs	r5, r3
 80069bc:	0007      	movs	r7, r0
 80069be:	400f      	ands	r7, r1
 80069c0:	4208      	tst	r0, r1
 80069c2:	d1f5      	bne.n	80069b0 <_strtol_l.constprop.0+0x1c>
 80069c4:	2c2d      	cmp	r4, #45	; 0x2d
 80069c6:	d13d      	bne.n	8006a44 <_strtol_l.constprop.0+0xb0>
 80069c8:	2701      	movs	r7, #1
 80069ca:	781c      	ldrb	r4, [r3, #0]
 80069cc:	1c95      	adds	r5, r2, #2
 80069ce:	2e00      	cmp	r6, #0
 80069d0:	d05e      	beq.n	8006a90 <_strtol_l.constprop.0+0xfc>
 80069d2:	2e10      	cmp	r6, #16
 80069d4:	d109      	bne.n	80069ea <_strtol_l.constprop.0+0x56>
 80069d6:	2c30      	cmp	r4, #48	; 0x30
 80069d8:	d107      	bne.n	80069ea <_strtol_l.constprop.0+0x56>
 80069da:	2220      	movs	r2, #32
 80069dc:	782b      	ldrb	r3, [r5, #0]
 80069de:	4393      	bics	r3, r2
 80069e0:	2b58      	cmp	r3, #88	; 0x58
 80069e2:	d150      	bne.n	8006a86 <_strtol_l.constprop.0+0xf2>
 80069e4:	2610      	movs	r6, #16
 80069e6:	786c      	ldrb	r4, [r5, #1]
 80069e8:	3502      	adds	r5, #2
 80069ea:	4b2c      	ldr	r3, [pc, #176]	; (8006a9c <_strtol_l.constprop.0+0x108>)
 80069ec:	0031      	movs	r1, r6
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	0018      	movs	r0, r3
 80069f2:	9303      	str	r3, [sp, #12]
 80069f4:	f7f9 fc1e 	bl	8000234 <__aeabi_uidivmod>
 80069f8:	2200      	movs	r2, #0
 80069fa:	9104      	str	r1, [sp, #16]
 80069fc:	2101      	movs	r1, #1
 80069fe:	4684      	mov	ip, r0
 8006a00:	0010      	movs	r0, r2
 8006a02:	4249      	negs	r1, r1
 8006a04:	0023      	movs	r3, r4
 8006a06:	3b30      	subs	r3, #48	; 0x30
 8006a08:	2b09      	cmp	r3, #9
 8006a0a:	d903      	bls.n	8006a14 <_strtol_l.constprop.0+0x80>
 8006a0c:	3b11      	subs	r3, #17
 8006a0e:	2b19      	cmp	r3, #25
 8006a10:	d81d      	bhi.n	8006a4e <_strtol_l.constprop.0+0xba>
 8006a12:	330a      	adds	r3, #10
 8006a14:	429e      	cmp	r6, r3
 8006a16:	dd1e      	ble.n	8006a56 <_strtol_l.constprop.0+0xc2>
 8006a18:	1c54      	adds	r4, r2, #1
 8006a1a:	d009      	beq.n	8006a30 <_strtol_l.constprop.0+0x9c>
 8006a1c:	000a      	movs	r2, r1
 8006a1e:	4584      	cmp	ip, r0
 8006a20:	d306      	bcc.n	8006a30 <_strtol_l.constprop.0+0x9c>
 8006a22:	d102      	bne.n	8006a2a <_strtol_l.constprop.0+0x96>
 8006a24:	9c04      	ldr	r4, [sp, #16]
 8006a26:	429c      	cmp	r4, r3
 8006a28:	db02      	blt.n	8006a30 <_strtol_l.constprop.0+0x9c>
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4370      	muls	r0, r6
 8006a2e:	1818      	adds	r0, r3, r0
 8006a30:	782c      	ldrb	r4, [r5, #0]
 8006a32:	3501      	adds	r5, #1
 8006a34:	e7e6      	b.n	8006a04 <_strtol_l.constprop.0+0x70>
 8006a36:	f7fe ff95 	bl	8005964 <__errno>
 8006a3a:	2316      	movs	r3, #22
 8006a3c:	6003      	str	r3, [r0, #0]
 8006a3e:	2000      	movs	r0, #0
 8006a40:	b007      	add	sp, #28
 8006a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a44:	2c2b      	cmp	r4, #43	; 0x2b
 8006a46:	d1c2      	bne.n	80069ce <_strtol_l.constprop.0+0x3a>
 8006a48:	781c      	ldrb	r4, [r3, #0]
 8006a4a:	1c95      	adds	r5, r2, #2
 8006a4c:	e7bf      	b.n	80069ce <_strtol_l.constprop.0+0x3a>
 8006a4e:	0023      	movs	r3, r4
 8006a50:	3b61      	subs	r3, #97	; 0x61
 8006a52:	2b19      	cmp	r3, #25
 8006a54:	d9dd      	bls.n	8006a12 <_strtol_l.constprop.0+0x7e>
 8006a56:	1c53      	adds	r3, r2, #1
 8006a58:	d109      	bne.n	8006a6e <_strtol_l.constprop.0+0xda>
 8006a5a:	2322      	movs	r3, #34	; 0x22
 8006a5c:	9a05      	ldr	r2, [sp, #20]
 8006a5e:	9803      	ldr	r0, [sp, #12]
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	9b02      	ldr	r3, [sp, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d0eb      	beq.n	8006a40 <_strtol_l.constprop.0+0xac>
 8006a68:	1e6b      	subs	r3, r5, #1
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	e007      	b.n	8006a7e <_strtol_l.constprop.0+0xea>
 8006a6e:	2f00      	cmp	r7, #0
 8006a70:	d000      	beq.n	8006a74 <_strtol_l.constprop.0+0xe0>
 8006a72:	4240      	negs	r0, r0
 8006a74:	9b02      	ldr	r3, [sp, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0e2      	beq.n	8006a40 <_strtol_l.constprop.0+0xac>
 8006a7a:	2a00      	cmp	r2, #0
 8006a7c:	d1f4      	bne.n	8006a68 <_strtol_l.constprop.0+0xd4>
 8006a7e:	9b02      	ldr	r3, [sp, #8]
 8006a80:	9a01      	ldr	r2, [sp, #4]
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	e7dc      	b.n	8006a40 <_strtol_l.constprop.0+0xac>
 8006a86:	2430      	movs	r4, #48	; 0x30
 8006a88:	2e00      	cmp	r6, #0
 8006a8a:	d1ae      	bne.n	80069ea <_strtol_l.constprop.0+0x56>
 8006a8c:	3608      	adds	r6, #8
 8006a8e:	e7ac      	b.n	80069ea <_strtol_l.constprop.0+0x56>
 8006a90:	2c30      	cmp	r4, #48	; 0x30
 8006a92:	d0a2      	beq.n	80069da <_strtol_l.constprop.0+0x46>
 8006a94:	260a      	movs	r6, #10
 8006a96:	e7a8      	b.n	80069ea <_strtol_l.constprop.0+0x56>
 8006a98:	08007b37 	.word	0x08007b37
 8006a9c:	7fffffff 	.word	0x7fffffff

08006aa0 <_strtol_r>:
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	f7ff ff77 	bl	8006994 <_strtol_l.constprop.0>
 8006aa6:	bd10      	pop	{r4, pc}

08006aa8 <_strtoul_l.constprop.0>:
 8006aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	9202      	str	r2, [sp, #8]
 8006aae:	4a3e      	ldr	r2, [pc, #248]	; (8006ba8 <_strtoul_l.constprop.0+0x100>)
 8006ab0:	001e      	movs	r6, r3
 8006ab2:	9101      	str	r1, [sp, #4]
 8006ab4:	000b      	movs	r3, r1
 8006ab6:	4694      	mov	ip, r2
 8006ab8:	2108      	movs	r1, #8
 8006aba:	9005      	str	r0, [sp, #20]
 8006abc:	001a      	movs	r2, r3
 8006abe:	4660      	mov	r0, ip
 8006ac0:	7814      	ldrb	r4, [r2, #0]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	5d00      	ldrb	r0, [r0, r4]
 8006ac6:	001d      	movs	r5, r3
 8006ac8:	0007      	movs	r7, r0
 8006aca:	400f      	ands	r7, r1
 8006acc:	4208      	tst	r0, r1
 8006ace:	d1f5      	bne.n	8006abc <_strtoul_l.constprop.0+0x14>
 8006ad0:	2c2d      	cmp	r4, #45	; 0x2d
 8006ad2:	d13d      	bne.n	8006b50 <_strtoul_l.constprop.0+0xa8>
 8006ad4:	2701      	movs	r7, #1
 8006ad6:	781c      	ldrb	r4, [r3, #0]
 8006ad8:	1c95      	adds	r5, r2, #2
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	d05f      	beq.n	8006b9e <_strtoul_l.constprop.0+0xf6>
 8006ade:	2e10      	cmp	r6, #16
 8006ae0:	d109      	bne.n	8006af6 <_strtoul_l.constprop.0+0x4e>
 8006ae2:	2c30      	cmp	r4, #48	; 0x30
 8006ae4:	d107      	bne.n	8006af6 <_strtoul_l.constprop.0+0x4e>
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	782b      	ldrb	r3, [r5, #0]
 8006aea:	4393      	bics	r3, r2
 8006aec:	2b58      	cmp	r3, #88	; 0x58
 8006aee:	d151      	bne.n	8006b94 <_strtoul_l.constprop.0+0xec>
 8006af0:	2610      	movs	r6, #16
 8006af2:	786c      	ldrb	r4, [r5, #1]
 8006af4:	3502      	adds	r5, #2
 8006af6:	2001      	movs	r0, #1
 8006af8:	0031      	movs	r1, r6
 8006afa:	4240      	negs	r0, r0
 8006afc:	f7f9 fb14 	bl	8000128 <__udivsi3>
 8006b00:	9003      	str	r0, [sp, #12]
 8006b02:	2001      	movs	r0, #1
 8006b04:	0031      	movs	r1, r6
 8006b06:	4240      	negs	r0, r0
 8006b08:	f7f9 fb94 	bl	8000234 <__aeabi_uidivmod>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2201      	movs	r2, #1
 8006b10:	9104      	str	r1, [sp, #16]
 8006b12:	2101      	movs	r1, #1
 8006b14:	0018      	movs	r0, r3
 8006b16:	4694      	mov	ip, r2
 8006b18:	4249      	negs	r1, r1
 8006b1a:	0022      	movs	r2, r4
 8006b1c:	3a30      	subs	r2, #48	; 0x30
 8006b1e:	2a09      	cmp	r2, #9
 8006b20:	d903      	bls.n	8006b2a <_strtoul_l.constprop.0+0x82>
 8006b22:	3a11      	subs	r2, #17
 8006b24:	2a19      	cmp	r2, #25
 8006b26:	d818      	bhi.n	8006b5a <_strtoul_l.constprop.0+0xb2>
 8006b28:	320a      	adds	r2, #10
 8006b2a:	4296      	cmp	r6, r2
 8006b2c:	dd19      	ble.n	8006b62 <_strtoul_l.constprop.0+0xba>
 8006b2e:	1c5c      	adds	r4, r3, #1
 8006b30:	d00b      	beq.n	8006b4a <_strtoul_l.constprop.0+0xa2>
 8006b32:	9c03      	ldr	r4, [sp, #12]
 8006b34:	000b      	movs	r3, r1
 8006b36:	4284      	cmp	r4, r0
 8006b38:	d307      	bcc.n	8006b4a <_strtoul_l.constprop.0+0xa2>
 8006b3a:	d103      	bne.n	8006b44 <_strtoul_l.constprop.0+0x9c>
 8006b3c:	9c04      	ldr	r4, [sp, #16]
 8006b3e:	000b      	movs	r3, r1
 8006b40:	4294      	cmp	r4, r2
 8006b42:	db02      	blt.n	8006b4a <_strtoul_l.constprop.0+0xa2>
 8006b44:	4663      	mov	r3, ip
 8006b46:	4370      	muls	r0, r6
 8006b48:	1810      	adds	r0, r2, r0
 8006b4a:	782c      	ldrb	r4, [r5, #0]
 8006b4c:	3501      	adds	r5, #1
 8006b4e:	e7e4      	b.n	8006b1a <_strtoul_l.constprop.0+0x72>
 8006b50:	2c2b      	cmp	r4, #43	; 0x2b
 8006b52:	d1c2      	bne.n	8006ada <_strtoul_l.constprop.0+0x32>
 8006b54:	781c      	ldrb	r4, [r3, #0]
 8006b56:	1c95      	adds	r5, r2, #2
 8006b58:	e7bf      	b.n	8006ada <_strtoul_l.constprop.0+0x32>
 8006b5a:	0022      	movs	r2, r4
 8006b5c:	3a61      	subs	r2, #97	; 0x61
 8006b5e:	2a19      	cmp	r2, #25
 8006b60:	d9e2      	bls.n	8006b28 <_strtoul_l.constprop.0+0x80>
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	d108      	bne.n	8006b78 <_strtoul_l.constprop.0+0xd0>
 8006b66:	2222      	movs	r2, #34	; 0x22
 8006b68:	9905      	ldr	r1, [sp, #20]
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	600a      	str	r2, [r1, #0]
 8006b6e:	9a02      	ldr	r2, [sp, #8]
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	d109      	bne.n	8006b88 <_strtoul_l.constprop.0+0xe0>
 8006b74:	b007      	add	sp, #28
 8006b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b78:	2f00      	cmp	r7, #0
 8006b7a:	d000      	beq.n	8006b7e <_strtoul_l.constprop.0+0xd6>
 8006b7c:	4240      	negs	r0, r0
 8006b7e:	9a02      	ldr	r2, [sp, #8]
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	d0f7      	beq.n	8006b74 <_strtoul_l.constprop.0+0xcc>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <_strtoul_l.constprop.0+0xe4>
 8006b88:	1e6b      	subs	r3, r5, #1
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	9b02      	ldr	r3, [sp, #8]
 8006b8e:	9a01      	ldr	r2, [sp, #4]
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	e7ef      	b.n	8006b74 <_strtoul_l.constprop.0+0xcc>
 8006b94:	2430      	movs	r4, #48	; 0x30
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	d1ad      	bne.n	8006af6 <_strtoul_l.constprop.0+0x4e>
 8006b9a:	3608      	adds	r6, #8
 8006b9c:	e7ab      	b.n	8006af6 <_strtoul_l.constprop.0+0x4e>
 8006b9e:	2c30      	cmp	r4, #48	; 0x30
 8006ba0:	d0a1      	beq.n	8006ae6 <_strtoul_l.constprop.0+0x3e>
 8006ba2:	260a      	movs	r6, #10
 8006ba4:	e7a7      	b.n	8006af6 <_strtoul_l.constprop.0+0x4e>
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	08007b37 	.word	0x08007b37

08006bac <_strtoul_r>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	f7ff ff7b 	bl	8006aa8 <_strtoul_l.constprop.0>
 8006bb2:	bd10      	pop	{r4, pc}

08006bb4 <_malloc_usable_size_r>:
 8006bb4:	1f0b      	subs	r3, r1, #4
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	1f18      	subs	r0, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	da01      	bge.n	8006bc2 <_malloc_usable_size_r+0xe>
 8006bbe:	580b      	ldr	r3, [r1, r0]
 8006bc0:	18c0      	adds	r0, r0, r3
 8006bc2:	4770      	bx	lr

08006bc4 <pow>:
 8006bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc6:	0014      	movs	r4, r2
 8006bc8:	001d      	movs	r5, r3
 8006bca:	9000      	str	r0, [sp, #0]
 8006bcc:	9101      	str	r1, [sp, #4]
 8006bce:	f000 f86f 	bl	8006cb0 <__ieee754_pow>
 8006bd2:	0022      	movs	r2, r4
 8006bd4:	0006      	movs	r6, r0
 8006bd6:	000f      	movs	r7, r1
 8006bd8:	002b      	movs	r3, r5
 8006bda:	0020      	movs	r0, r4
 8006bdc:	0029      	movs	r1, r5
 8006bde:	f7fb fb33 	bl	8002248 <__aeabi_dcmpun>
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d13f      	bne.n	8006c66 <pow+0xa2>
 8006be6:	9800      	ldr	r0, [sp, #0]
 8006be8:	9901      	ldr	r1, [sp, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2300      	movs	r3, #0
 8006bee:	f7f9 fc21 	bl	8000434 <__aeabi_dcmpeq>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d019      	beq.n	8006c2a <pow+0x66>
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	0020      	movs	r0, r4
 8006bfc:	0029      	movs	r1, r5
 8006bfe:	f7f9 fc19 	bl	8000434 <__aeabi_dcmpeq>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d146      	bne.n	8006c94 <pow+0xd0>
 8006c06:	0020      	movs	r0, r4
 8006c08:	0029      	movs	r1, r5
 8006c0a:	f000 f849 	bl	8006ca0 <finite>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d029      	beq.n	8006c66 <pow+0xa2>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	0020      	movs	r0, r4
 8006c18:	0029      	movs	r1, r5
 8006c1a:	f7f9 fc11 	bl	8000440 <__aeabi_dcmplt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d021      	beq.n	8006c66 <pow+0xa2>
 8006c22:	f7fe fe9f 	bl	8005964 <__errno>
 8006c26:	2322      	movs	r3, #34	; 0x22
 8006c28:	e01c      	b.n	8006c64 <pow+0xa0>
 8006c2a:	0030      	movs	r0, r6
 8006c2c:	0039      	movs	r1, r7
 8006c2e:	f000 f837 	bl	8006ca0 <finite>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d11b      	bne.n	8006c6e <pow+0xaa>
 8006c36:	9800      	ldr	r0, [sp, #0]
 8006c38:	9901      	ldr	r1, [sp, #4]
 8006c3a:	f000 f831 	bl	8006ca0 <finite>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d015      	beq.n	8006c6e <pow+0xaa>
 8006c42:	0020      	movs	r0, r4
 8006c44:	0029      	movs	r1, r5
 8006c46:	f000 f82b 	bl	8006ca0 <finite>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d00f      	beq.n	8006c6e <pow+0xaa>
 8006c4e:	0032      	movs	r2, r6
 8006c50:	003b      	movs	r3, r7
 8006c52:	0030      	movs	r0, r6
 8006c54:	0039      	movs	r1, r7
 8006c56:	f7fb faf7 	bl	8002248 <__aeabi_dcmpun>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d0e1      	beq.n	8006c22 <pow+0x5e>
 8006c5e:	f7fe fe81 	bl	8005964 <__errno>
 8006c62:	2321      	movs	r3, #33	; 0x21
 8006c64:	6003      	str	r3, [r0, #0]
 8006c66:	0030      	movs	r0, r6
 8006c68:	0039      	movs	r1, r7
 8006c6a:	b003      	add	sp, #12
 8006c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2300      	movs	r3, #0
 8006c72:	0030      	movs	r0, r6
 8006c74:	0039      	movs	r1, r7
 8006c76:	f7f9 fbdd 	bl	8000434 <__aeabi_dcmpeq>
 8006c7a:	2800      	cmp	r0, #0
 8006c7c:	d0f3      	beq.n	8006c66 <pow+0xa2>
 8006c7e:	9800      	ldr	r0, [sp, #0]
 8006c80:	9901      	ldr	r1, [sp, #4]
 8006c82:	f000 f80d 	bl	8006ca0 <finite>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d0ed      	beq.n	8006c66 <pow+0xa2>
 8006c8a:	0020      	movs	r0, r4
 8006c8c:	0029      	movs	r1, r5
 8006c8e:	f000 f807 	bl	8006ca0 <finite>
 8006c92:	e7c4      	b.n	8006c1e <pow+0x5a>
 8006c94:	2600      	movs	r6, #0
 8006c96:	4f01      	ldr	r7, [pc, #4]	; (8006c9c <pow+0xd8>)
 8006c98:	e7e5      	b.n	8006c66 <pow+0xa2>
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	3ff00000 	.word	0x3ff00000

08006ca0 <finite>:
 8006ca0:	4b02      	ldr	r3, [pc, #8]	; (8006cac <finite+0xc>)
 8006ca2:	0048      	lsls	r0, r1, #1
 8006ca4:	0840      	lsrs	r0, r0, #1
 8006ca6:	18c0      	adds	r0, r0, r3
 8006ca8:	0fc0      	lsrs	r0, r0, #31
 8006caa:	4770      	bx	lr
 8006cac:	80100000 	.word	0x80100000

08006cb0 <__ieee754_pow>:
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	b095      	sub	sp, #84	; 0x54
 8006cb4:	9202      	str	r2, [sp, #8]
 8006cb6:	9303      	str	r3, [sp, #12]
 8006cb8:	9b03      	ldr	r3, [sp, #12]
 8006cba:	9a03      	ldr	r2, [sp, #12]
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	9b02      	ldr	r3, [sp, #8]
 8006cc0:	0056      	lsls	r6, r2, #1
 8006cc2:	001a      	movs	r2, r3
 8006cc4:	0876      	lsrs	r6, r6, #1
 8006cc6:	0007      	movs	r7, r0
 8006cc8:	000d      	movs	r5, r1
 8006cca:	4332      	orrs	r2, r6
 8006ccc:	d119      	bne.n	8006d02 <__ieee754_pow+0x52>
 8006cce:	2180      	movs	r1, #128	; 0x80
 8006cd0:	0309      	lsls	r1, r1, #12
 8006cd2:	4069      	eors	r1, r5
 8006cd4:	0002      	movs	r2, r0
 8006cd6:	000b      	movs	r3, r1
 8006cd8:	1892      	adds	r2, r2, r2
 8006cda:	415b      	adcs	r3, r3
 8006cdc:	4989      	ldr	r1, [pc, #548]	; (8006f04 <__ieee754_pow+0x254>)
 8006cde:	428b      	cmp	r3, r1
 8006ce0:	d806      	bhi.n	8006cf0 <__ieee754_pow+0x40>
 8006ce2:	d001      	beq.n	8006ce8 <__ieee754_pow+0x38>
 8006ce4:	f000 fcb6 	bl	8007654 <__ieee754_pow+0x9a4>
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	d101      	bne.n	8006cf0 <__ieee754_pow+0x40>
 8006cec:	f000 fcb2 	bl	8007654 <__ieee754_pow+0x9a4>
 8006cf0:	9a02      	ldr	r2, [sp, #8]
 8006cf2:	9b03      	ldr	r3, [sp, #12]
 8006cf4:	0038      	movs	r0, r7
 8006cf6:	0029      	movs	r1, r5
 8006cf8:	f7f9 fd08 	bl	800070c <__aeabi_dadd>
 8006cfc:	9000      	str	r0, [sp, #0]
 8006cfe:	9101      	str	r1, [sp, #4]
 8006d00:	e0ad      	b.n	8006e5e <__ieee754_pow+0x1ae>
 8006d02:	4a81      	ldr	r2, [pc, #516]	; (8006f08 <__ieee754_pow+0x258>)
 8006d04:	004c      	lsls	r4, r1, #1
 8006d06:	9108      	str	r1, [sp, #32]
 8006d08:	9000      	str	r0, [sp, #0]
 8006d0a:	0864      	lsrs	r4, r4, #1
 8006d0c:	4294      	cmp	r4, r2
 8006d0e:	dc08      	bgt.n	8006d22 <__ieee754_pow+0x72>
 8006d10:	d101      	bne.n	8006d16 <__ieee754_pow+0x66>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d1ec      	bne.n	8006cf0 <__ieee754_pow+0x40>
 8006d16:	4a7c      	ldr	r2, [pc, #496]	; (8006f08 <__ieee754_pow+0x258>)
 8006d18:	4296      	cmp	r6, r2
 8006d1a:	dc02      	bgt.n	8006d22 <__ieee754_pow+0x72>
 8006d1c:	d10c      	bne.n	8006d38 <__ieee754_pow+0x88>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00a      	beq.n	8006d38 <__ieee754_pow+0x88>
 8006d22:	4b7a      	ldr	r3, [pc, #488]	; (8006f0c <__ieee754_pow+0x25c>)
 8006d24:	18eb      	adds	r3, r5, r3
 8006d26:	433b      	orrs	r3, r7
 8006d28:	d1e2      	bne.n	8006cf0 <__ieee754_pow+0x40>
 8006d2a:	2180      	movs	r1, #128	; 0x80
 8006d2c:	9803      	ldr	r0, [sp, #12]
 8006d2e:	0309      	lsls	r1, r1, #12
 8006d30:	4048      	eors	r0, r1
 8006d32:	0003      	movs	r3, r0
 8006d34:	9a02      	ldr	r2, [sp, #8]
 8006d36:	e7cf      	b.n	8006cd8 <__ieee754_pow+0x28>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	9206      	str	r2, [sp, #24]
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	da69      	bge.n	8006e14 <__ieee754_pow+0x164>
 8006d40:	4a73      	ldr	r2, [pc, #460]	; (8006f10 <__ieee754_pow+0x260>)
 8006d42:	4296      	cmp	r6, r2
 8006d44:	dc64      	bgt.n	8006e10 <__ieee754_pow+0x160>
 8006d46:	4a73      	ldr	r2, [pc, #460]	; (8006f14 <__ieee754_pow+0x264>)
 8006d48:	4296      	cmp	r6, r2
 8006d4a:	dd11      	ble.n	8006d70 <__ieee754_pow+0xc0>
 8006d4c:	4972      	ldr	r1, [pc, #456]	; (8006f18 <__ieee754_pow+0x268>)
 8006d4e:	1532      	asrs	r2, r6, #20
 8006d50:	1852      	adds	r2, r2, r1
 8006d52:	2a14      	cmp	r2, #20
 8006d54:	dd3c      	ble.n	8006dd0 <__ieee754_pow+0x120>
 8006d56:	2134      	movs	r1, #52	; 0x34
 8006d58:	1a89      	subs	r1, r1, r2
 8006d5a:	9a02      	ldr	r2, [sp, #8]
 8006d5c:	40ca      	lsrs	r2, r1
 8006d5e:	0010      	movs	r0, r2
 8006d60:	4088      	lsls	r0, r1
 8006d62:	4298      	cmp	r0, r3
 8006d64:	d104      	bne.n	8006d70 <__ieee754_pow+0xc0>
 8006d66:	2101      	movs	r1, #1
 8006d68:	400a      	ands	r2, r1
 8006d6a:	1849      	adds	r1, r1, r1
 8006d6c:	1a8a      	subs	r2, r1, r2
 8006d6e:	9206      	str	r2, [sp, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d03c      	beq.n	8006dee <__ieee754_pow+0x13e>
 8006d74:	0038      	movs	r0, r7
 8006d76:	0029      	movs	r1, r5
 8006d78:	f000 fca4 	bl	80076c4 <fabs>
 8006d7c:	9000      	str	r0, [sp, #0]
 8006d7e:	9101      	str	r1, [sp, #4]
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	d000      	beq.n	8006d86 <__ieee754_pow+0xd6>
 8006d84:	e094      	b.n	8006eb0 <__ieee754_pow+0x200>
 8006d86:	2c00      	cmp	r4, #0
 8006d88:	d005      	beq.n	8006d96 <__ieee754_pow+0xe6>
 8006d8a:	4a64      	ldr	r2, [pc, #400]	; (8006f1c <__ieee754_pow+0x26c>)
 8006d8c:	00ab      	lsls	r3, r5, #2
 8006d8e:	089b      	lsrs	r3, r3, #2
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d000      	beq.n	8006d96 <__ieee754_pow+0xe6>
 8006d94:	e08c      	b.n	8006eb0 <__ieee754_pow+0x200>
 8006d96:	9b04      	ldr	r3, [sp, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	da07      	bge.n	8006dac <__ieee754_pow+0xfc>
 8006d9c:	9a00      	ldr	r2, [sp, #0]
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	2000      	movs	r0, #0
 8006da2:	495e      	ldr	r1, [pc, #376]	; (8006f1c <__ieee754_pow+0x26c>)
 8006da4:	f7fa f812 	bl	8000dcc <__aeabi_ddiv>
 8006da8:	9000      	str	r0, [sp, #0]
 8006daa:	9101      	str	r1, [sp, #4]
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	da55      	bge.n	8006e5e <__ieee754_pow+0x1ae>
 8006db2:	4b56      	ldr	r3, [pc, #344]	; (8006f0c <__ieee754_pow+0x25c>)
 8006db4:	18e4      	adds	r4, r4, r3
 8006db6:	9b06      	ldr	r3, [sp, #24]
 8006db8:	431c      	orrs	r4, r3
 8006dba:	d000      	beq.n	8006dbe <__ieee754_pow+0x10e>
 8006dbc:	e06c      	b.n	8006e98 <__ieee754_pow+0x1e8>
 8006dbe:	9a00      	ldr	r2, [sp, #0]
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	0010      	movs	r0, r2
 8006dc4:	0019      	movs	r1, r3
 8006dc6:	f7fa febd 	bl	8001b44 <__aeabi_dsub>
 8006dca:	0002      	movs	r2, r0
 8006dcc:	000b      	movs	r3, r1
 8006dce:	e01c      	b.n	8006e0a <__ieee754_pow+0x15a>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1cf      	bne.n	8006d74 <__ieee754_pow+0xc4>
 8006dd4:	3314      	adds	r3, #20
 8006dd6:	1a9a      	subs	r2, r3, r2
 8006dd8:	0033      	movs	r3, r6
 8006dda:	4113      	asrs	r3, r2
 8006ddc:	0019      	movs	r1, r3
 8006dde:	4091      	lsls	r1, r2
 8006de0:	42b1      	cmp	r1, r6
 8006de2:	d104      	bne.n	8006dee <__ieee754_pow+0x13e>
 8006de4:	2201      	movs	r2, #1
 8006de6:	4013      	ands	r3, r2
 8006de8:	1892      	adds	r2, r2, r2
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	9306      	str	r3, [sp, #24]
 8006dee:	4b4b      	ldr	r3, [pc, #300]	; (8006f1c <__ieee754_pow+0x26c>)
 8006df0:	429e      	cmp	r6, r3
 8006df2:	d138      	bne.n	8006e66 <__ieee754_pow+0x1b6>
 8006df4:	0038      	movs	r0, r7
 8006df6:	0029      	movs	r1, r5
 8006df8:	9b04      	ldr	r3, [sp, #16]
 8006dfa:	9000      	str	r0, [sp, #0]
 8006dfc:	9101      	str	r1, [sp, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	da2d      	bge.n	8006e5e <__ieee754_pow+0x1ae>
 8006e02:	003a      	movs	r2, r7
 8006e04:	002b      	movs	r3, r5
 8006e06:	2000      	movs	r0, #0
 8006e08:	4944      	ldr	r1, [pc, #272]	; (8006f1c <__ieee754_pow+0x26c>)
 8006e0a:	f7f9 ffdf 	bl	8000dcc <__aeabi_ddiv>
 8006e0e:	e775      	b.n	8006cfc <__ieee754_pow+0x4c>
 8006e10:	2202      	movs	r2, #2
 8006e12:	9206      	str	r2, [sp, #24]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1ad      	bne.n	8006d74 <__ieee754_pow+0xc4>
 8006e18:	4b3b      	ldr	r3, [pc, #236]	; (8006f08 <__ieee754_pow+0x258>)
 8006e1a:	429e      	cmp	r6, r3
 8006e1c:	d1e7      	bne.n	8006dee <__ieee754_pow+0x13e>
 8006e1e:	4b3b      	ldr	r3, [pc, #236]	; (8006f0c <__ieee754_pow+0x25c>)
 8006e20:	18e3      	adds	r3, r4, r3
 8006e22:	433b      	orrs	r3, r7
 8006e24:	d101      	bne.n	8006e2a <__ieee754_pow+0x17a>
 8006e26:	f000 fc15 	bl	8007654 <__ieee754_pow+0x9a4>
 8006e2a:	4b3a      	ldr	r3, [pc, #232]	; (8006f14 <__ieee754_pow+0x264>)
 8006e2c:	429c      	cmp	r4, r3
 8006e2e:	dd09      	ble.n	8006e44 <__ieee754_pow+0x194>
 8006e30:	9b04      	ldr	r3, [sp, #16]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	da01      	bge.n	8006e3a <__ieee754_pow+0x18a>
 8006e36:	f000 fc11 	bl	800765c <__ieee754_pow+0x9ac>
 8006e3a:	9b02      	ldr	r3, [sp, #8]
 8006e3c:	9c03      	ldr	r4, [sp, #12]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	9401      	str	r4, [sp, #4]
 8006e42:	e00c      	b.n	8006e5e <__ieee754_pow+0x1ae>
 8006e44:	9b04      	ldr	r3, [sp, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	db01      	blt.n	8006e4e <__ieee754_pow+0x19e>
 8006e4a:	f000 fc07 	bl	800765c <__ieee754_pow+0x9ac>
 8006e4e:	2280      	movs	r2, #128	; 0x80
 8006e50:	0612      	lsls	r2, r2, #24
 8006e52:	4694      	mov	ip, r2
 8006e54:	9b02      	ldr	r3, [sp, #8]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	9b03      	ldr	r3, [sp, #12]
 8006e5a:	4463      	add	r3, ip
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	9800      	ldr	r0, [sp, #0]
 8006e60:	9901      	ldr	r1, [sp, #4]
 8006e62:	b015      	add	sp, #84	; 0x54
 8006e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e66:	2380      	movs	r3, #128	; 0x80
 8006e68:	9a04      	ldr	r2, [sp, #16]
 8006e6a:	05db      	lsls	r3, r3, #23
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d106      	bne.n	8006e7e <__ieee754_pow+0x1ce>
 8006e70:	003a      	movs	r2, r7
 8006e72:	002b      	movs	r3, r5
 8006e74:	0038      	movs	r0, r7
 8006e76:	0029      	movs	r1, r5
 8006e78:	f7fa fba2 	bl	80015c0 <__aeabi_dmul>
 8006e7c:	e73e      	b.n	8006cfc <__ieee754_pow+0x4c>
 8006e7e:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <__ieee754_pow+0x270>)
 8006e80:	9a04      	ldr	r2, [sp, #16]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d000      	beq.n	8006e88 <__ieee754_pow+0x1d8>
 8006e86:	e775      	b.n	8006d74 <__ieee754_pow+0xc4>
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	da00      	bge.n	8006e8e <__ieee754_pow+0x1de>
 8006e8c:	e772      	b.n	8006d74 <__ieee754_pow+0xc4>
 8006e8e:	0038      	movs	r0, r7
 8006e90:	0029      	movs	r1, r5
 8006e92:	f000 fcb7 	bl	8007804 <__ieee754_sqrt>
 8006e96:	e731      	b.n	8006cfc <__ieee754_pow+0x4c>
 8006e98:	9b06      	ldr	r3, [sp, #24]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d1df      	bne.n	8006e5e <__ieee754_pow+0x1ae>
 8006e9e:	9800      	ldr	r0, [sp, #0]
 8006ea0:	2180      	movs	r1, #128	; 0x80
 8006ea2:	0002      	movs	r2, r0
 8006ea4:	9801      	ldr	r0, [sp, #4]
 8006ea6:	0609      	lsls	r1, r1, #24
 8006ea8:	1843      	adds	r3, r0, r1
 8006eaa:	9200      	str	r2, [sp, #0]
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	e7d6      	b.n	8006e5e <__ieee754_pow+0x1ae>
 8006eb0:	0feb      	lsrs	r3, r5, #31
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	930e      	str	r3, [sp, #56]	; 0x38
 8006eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eb8:	9b06      	ldr	r3, [sp, #24]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	d104      	bne.n	8006ec8 <__ieee754_pow+0x218>
 8006ebe:	003a      	movs	r2, r7
 8006ec0:	002b      	movs	r3, r5
 8006ec2:	0038      	movs	r0, r7
 8006ec4:	0029      	movs	r1, r5
 8006ec6:	e77e      	b.n	8006dc6 <__ieee754_pow+0x116>
 8006ec8:	4b16      	ldr	r3, [pc, #88]	; (8006f24 <__ieee754_pow+0x274>)
 8006eca:	429e      	cmp	r6, r3
 8006ecc:	dc00      	bgt.n	8006ed0 <__ieee754_pow+0x220>
 8006ece:	e0f1      	b.n	80070b4 <__ieee754_pow+0x404>
 8006ed0:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <__ieee754_pow+0x278>)
 8006ed2:	429e      	cmp	r6, r3
 8006ed4:	dd09      	ble.n	8006eea <__ieee754_pow+0x23a>
 8006ed6:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <__ieee754_pow+0x264>)
 8006ed8:	429c      	cmp	r4, r3
 8006eda:	dc0c      	bgt.n	8006ef6 <__ieee754_pow+0x246>
 8006edc:	9b04      	ldr	r3, [sp, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da0c      	bge.n	8006efc <__ieee754_pow+0x24c>
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	f000 fc86 	bl	80077f4 <__math_oflow>
 8006ee8:	e708      	b.n	8006cfc <__ieee754_pow+0x4c>
 8006eea:	4b10      	ldr	r3, [pc, #64]	; (8006f2c <__ieee754_pow+0x27c>)
 8006eec:	429c      	cmp	r4, r3
 8006eee:	ddf5      	ble.n	8006edc <__ieee754_pow+0x22c>
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <__ieee754_pow+0x26c>)
 8006ef2:	429c      	cmp	r4, r3
 8006ef4:	dd1c      	ble.n	8006f30 <__ieee754_pow+0x280>
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dcf2      	bgt.n	8006ee2 <__ieee754_pow+0x232>
 8006efc:	2000      	movs	r0, #0
 8006efe:	f000 fc72 	bl	80077e6 <__math_uflow>
 8006f02:	e6fb      	b.n	8006cfc <__ieee754_pow+0x4c>
 8006f04:	fff00000 	.word	0xfff00000
 8006f08:	7ff00000 	.word	0x7ff00000
 8006f0c:	c0100000 	.word	0xc0100000
 8006f10:	433fffff 	.word	0x433fffff
 8006f14:	3fefffff 	.word	0x3fefffff
 8006f18:	fffffc01 	.word	0xfffffc01
 8006f1c:	3ff00000 	.word	0x3ff00000
 8006f20:	3fe00000 	.word	0x3fe00000
 8006f24:	41e00000 	.word	0x41e00000
 8006f28:	43f00000 	.word	0x43f00000
 8006f2c:	3feffffe 	.word	0x3feffffe
 8006f30:	2200      	movs	r2, #0
 8006f32:	9800      	ldr	r0, [sp, #0]
 8006f34:	9901      	ldr	r1, [sp, #4]
 8006f36:	4b53      	ldr	r3, [pc, #332]	; (8007084 <__ieee754_pow+0x3d4>)
 8006f38:	f7fa fe04 	bl	8001b44 <__aeabi_dsub>
 8006f3c:	22c0      	movs	r2, #192	; 0xc0
 8006f3e:	4b52      	ldr	r3, [pc, #328]	; (8007088 <__ieee754_pow+0x3d8>)
 8006f40:	05d2      	lsls	r2, r2, #23
 8006f42:	0004      	movs	r4, r0
 8006f44:	000d      	movs	r5, r1
 8006f46:	f7fa fb3b 	bl	80015c0 <__aeabi_dmul>
 8006f4a:	4a50      	ldr	r2, [pc, #320]	; (800708c <__ieee754_pow+0x3dc>)
 8006f4c:	0006      	movs	r6, r0
 8006f4e:	000f      	movs	r7, r1
 8006f50:	0020      	movs	r0, r4
 8006f52:	0029      	movs	r1, r5
 8006f54:	4b4e      	ldr	r3, [pc, #312]	; (8007090 <__ieee754_pow+0x3e0>)
 8006f56:	f7fa fb33 	bl	80015c0 <__aeabi_dmul>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	9000      	str	r0, [sp, #0]
 8006f5e:	9101      	str	r1, [sp, #4]
 8006f60:	4b4c      	ldr	r3, [pc, #304]	; (8007094 <__ieee754_pow+0x3e4>)
 8006f62:	0020      	movs	r0, r4
 8006f64:	0029      	movs	r1, r5
 8006f66:	f7fa fb2b 	bl	80015c0 <__aeabi_dmul>
 8006f6a:	0002      	movs	r2, r0
 8006f6c:	000b      	movs	r3, r1
 8006f6e:	484a      	ldr	r0, [pc, #296]	; (8007098 <__ieee754_pow+0x3e8>)
 8006f70:	494a      	ldr	r1, [pc, #296]	; (800709c <__ieee754_pow+0x3ec>)
 8006f72:	f7fa fde7 	bl	8001b44 <__aeabi_dsub>
 8006f76:	0022      	movs	r2, r4
 8006f78:	002b      	movs	r3, r5
 8006f7a:	f7fa fb21 	bl	80015c0 <__aeabi_dmul>
 8006f7e:	0002      	movs	r2, r0
 8006f80:	000b      	movs	r3, r1
 8006f82:	2000      	movs	r0, #0
 8006f84:	4946      	ldr	r1, [pc, #280]	; (80070a0 <__ieee754_pow+0x3f0>)
 8006f86:	f7fa fddd 	bl	8001b44 <__aeabi_dsub>
 8006f8a:	0022      	movs	r2, r4
 8006f8c:	002b      	movs	r3, r5
 8006f8e:	9004      	str	r0, [sp, #16]
 8006f90:	9105      	str	r1, [sp, #20]
 8006f92:	0020      	movs	r0, r4
 8006f94:	0029      	movs	r1, r5
 8006f96:	f7fa fb13 	bl	80015c0 <__aeabi_dmul>
 8006f9a:	0002      	movs	r2, r0
 8006f9c:	000b      	movs	r3, r1
 8006f9e:	9804      	ldr	r0, [sp, #16]
 8006fa0:	9905      	ldr	r1, [sp, #20]
 8006fa2:	f7fa fb0d 	bl	80015c0 <__aeabi_dmul>
 8006fa6:	4a3f      	ldr	r2, [pc, #252]	; (80070a4 <__ieee754_pow+0x3f4>)
 8006fa8:	4b37      	ldr	r3, [pc, #220]	; (8007088 <__ieee754_pow+0x3d8>)
 8006faa:	f7fa fb09 	bl	80015c0 <__aeabi_dmul>
 8006fae:	0002      	movs	r2, r0
 8006fb0:	000b      	movs	r3, r1
 8006fb2:	9800      	ldr	r0, [sp, #0]
 8006fb4:	9901      	ldr	r1, [sp, #4]
 8006fb6:	f7fa fdc5 	bl	8001b44 <__aeabi_dsub>
 8006fba:	0002      	movs	r2, r0
 8006fbc:	000b      	movs	r3, r1
 8006fbe:	0004      	movs	r4, r0
 8006fc0:	000d      	movs	r5, r1
 8006fc2:	0030      	movs	r0, r6
 8006fc4:	0039      	movs	r1, r7
 8006fc6:	f7f9 fba1 	bl	800070c <__aeabi_dadd>
 8006fca:	2000      	movs	r0, #0
 8006fcc:	0032      	movs	r2, r6
 8006fce:	003b      	movs	r3, r7
 8006fd0:	9004      	str	r0, [sp, #16]
 8006fd2:	9105      	str	r1, [sp, #20]
 8006fd4:	f7fa fdb6 	bl	8001b44 <__aeabi_dsub>
 8006fd8:	0002      	movs	r2, r0
 8006fda:	000b      	movs	r3, r1
 8006fdc:	0020      	movs	r0, r4
 8006fde:	0029      	movs	r1, r5
 8006fe0:	f7fa fdb0 	bl	8001b44 <__aeabi_dsub>
 8006fe4:	9b06      	ldr	r3, [sp, #24]
 8006fe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	0006      	movs	r6, r0
 8006fec:	000f      	movs	r7, r1
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	d000      	beq.n	8006ff4 <__ieee754_pow+0x344>
 8006ff2:	e1dc      	b.n	80073ae <__ieee754_pow+0x6fe>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4c2c      	ldr	r4, [pc, #176]	; (80070a8 <__ieee754_pow+0x3f8>)
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	9401      	str	r4, [sp, #4]
 8006ffc:	9c02      	ldr	r4, [sp, #8]
 8006ffe:	9d03      	ldr	r5, [sp, #12]
 8007000:	9802      	ldr	r0, [sp, #8]
 8007002:	9903      	ldr	r1, [sp, #12]
 8007004:	2400      	movs	r4, #0
 8007006:	002b      	movs	r3, r5
 8007008:	0022      	movs	r2, r4
 800700a:	f7fa fd9b 	bl	8001b44 <__aeabi_dsub>
 800700e:	9a04      	ldr	r2, [sp, #16]
 8007010:	9b05      	ldr	r3, [sp, #20]
 8007012:	f7fa fad5 	bl	80015c0 <__aeabi_dmul>
 8007016:	9a02      	ldr	r2, [sp, #8]
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	9006      	str	r0, [sp, #24]
 800701c:	9107      	str	r1, [sp, #28]
 800701e:	0030      	movs	r0, r6
 8007020:	0039      	movs	r1, r7
 8007022:	f7fa facd 	bl	80015c0 <__aeabi_dmul>
 8007026:	0002      	movs	r2, r0
 8007028:	000b      	movs	r3, r1
 800702a:	9806      	ldr	r0, [sp, #24]
 800702c:	9907      	ldr	r1, [sp, #28]
 800702e:	f7f9 fb6d 	bl	800070c <__aeabi_dadd>
 8007032:	0022      	movs	r2, r4
 8007034:	002b      	movs	r3, r5
 8007036:	0006      	movs	r6, r0
 8007038:	000f      	movs	r7, r1
 800703a:	9804      	ldr	r0, [sp, #16]
 800703c:	9905      	ldr	r1, [sp, #20]
 800703e:	f7fa fabf 	bl	80015c0 <__aeabi_dmul>
 8007042:	0003      	movs	r3, r0
 8007044:	000c      	movs	r4, r1
 8007046:	9004      	str	r0, [sp, #16]
 8007048:	9105      	str	r1, [sp, #20]
 800704a:	9306      	str	r3, [sp, #24]
 800704c:	9407      	str	r4, [sp, #28]
 800704e:	0002      	movs	r2, r0
 8007050:	000b      	movs	r3, r1
 8007052:	0030      	movs	r0, r6
 8007054:	0039      	movs	r1, r7
 8007056:	f7f9 fb59 	bl	800070c <__aeabi_dadd>
 800705a:	4b14      	ldr	r3, [pc, #80]	; (80070ac <__ieee754_pow+0x3fc>)
 800705c:	0005      	movs	r5, r0
 800705e:	000c      	movs	r4, r1
 8007060:	9108      	str	r1, [sp, #32]
 8007062:	4299      	cmp	r1, r3
 8007064:	dc00      	bgt.n	8007068 <__ieee754_pow+0x3b8>
 8007066:	e2d4      	b.n	8007612 <__ieee754_pow+0x962>
 8007068:	4b11      	ldr	r3, [pc, #68]	; (80070b0 <__ieee754_pow+0x400>)
 800706a:	18cb      	adds	r3, r1, r3
 800706c:	4303      	orrs	r3, r0
 800706e:	d100      	bne.n	8007072 <__ieee754_pow+0x3c2>
 8007070:	e1d6      	b.n	8007420 <__ieee754_pow+0x770>
 8007072:	9800      	ldr	r0, [sp, #0]
 8007074:	9901      	ldr	r1, [sp, #4]
 8007076:	2300      	movs	r3, #0
 8007078:	2200      	movs	r2, #0
 800707a:	f7f9 f9e1 	bl	8000440 <__aeabi_dcmplt>
 800707e:	1e43      	subs	r3, r0, #1
 8007080:	4198      	sbcs	r0, r3
 8007082:	e72f      	b.n	8006ee4 <__ieee754_pow+0x234>
 8007084:	3ff00000 	.word	0x3ff00000
 8007088:	3ff71547 	.word	0x3ff71547
 800708c:	f85ddf44 	.word	0xf85ddf44
 8007090:	3e54ae0b 	.word	0x3e54ae0b
 8007094:	3fd00000 	.word	0x3fd00000
 8007098:	55555555 	.word	0x55555555
 800709c:	3fd55555 	.word	0x3fd55555
 80070a0:	3fe00000 	.word	0x3fe00000
 80070a4:	652b82fe 	.word	0x652b82fe
 80070a8:	bff00000 	.word	0xbff00000
 80070ac:	408fffff 	.word	0x408fffff
 80070b0:	bf700000 	.word	0xbf700000
 80070b4:	4bbf      	ldr	r3, [pc, #764]	; (80073b4 <__ieee754_pow+0x704>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	422b      	tst	r3, r5
 80070ba:	d10a      	bne.n	80070d2 <__ieee754_pow+0x422>
 80070bc:	9800      	ldr	r0, [sp, #0]
 80070be:	9901      	ldr	r1, [sp, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	4bbd      	ldr	r3, [pc, #756]	; (80073b8 <__ieee754_pow+0x708>)
 80070c4:	f7fa fa7c 	bl	80015c0 <__aeabi_dmul>
 80070c8:	2235      	movs	r2, #53	; 0x35
 80070ca:	9000      	str	r0, [sp, #0]
 80070cc:	9101      	str	r1, [sp, #4]
 80070ce:	9c01      	ldr	r4, [sp, #4]
 80070d0:	4252      	negs	r2, r2
 80070d2:	49ba      	ldr	r1, [pc, #744]	; (80073bc <__ieee754_pow+0x70c>)
 80070d4:	1523      	asrs	r3, r4, #20
 80070d6:	185b      	adds	r3, r3, r1
 80070d8:	189b      	adds	r3, r3, r2
 80070da:	0324      	lsls	r4, r4, #12
 80070dc:	4db8      	ldr	r5, [pc, #736]	; (80073c0 <__ieee754_pow+0x710>)
 80070de:	930d      	str	r3, [sp, #52]	; 0x34
 80070e0:	4bb8      	ldr	r3, [pc, #736]	; (80073c4 <__ieee754_pow+0x714>)
 80070e2:	0b22      	lsrs	r2, r4, #12
 80070e4:	4315      	orrs	r5, r2
 80070e6:	2400      	movs	r4, #0
 80070e8:	429a      	cmp	r2, r3
 80070ea:	dd09      	ble.n	8007100 <__ieee754_pow+0x450>
 80070ec:	4bb6      	ldr	r3, [pc, #728]	; (80073c8 <__ieee754_pow+0x718>)
 80070ee:	3401      	adds	r4, #1
 80070f0:	429a      	cmp	r2, r3
 80070f2:	dd05      	ble.n	8007100 <__ieee754_pow+0x450>
 80070f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f6:	191b      	adds	r3, r3, r4
 80070f8:	2400      	movs	r4, #0
 80070fa:	930d      	str	r3, [sp, #52]	; 0x34
 80070fc:	4bb3      	ldr	r3, [pc, #716]	; (80073cc <__ieee754_pow+0x71c>)
 80070fe:	18ed      	adds	r5, r5, r3
 8007100:	4bb3      	ldr	r3, [pc, #716]	; (80073d0 <__ieee754_pow+0x720>)
 8007102:	00e2      	lsls	r2, r4, #3
 8007104:	189b      	adds	r3, r3, r2
 8007106:	9800      	ldr	r0, [sp, #0]
 8007108:	9901      	ldr	r1, [sp, #4]
 800710a:	920f      	str	r2, [sp, #60]	; 0x3c
 800710c:	0029      	movs	r1, r5
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	0006      	movs	r6, r0
 8007114:	920a      	str	r2, [sp, #40]	; 0x28
 8007116:	930b      	str	r3, [sp, #44]	; 0x2c
 8007118:	f7fa fd14 	bl	8001b44 <__aeabi_dsub>
 800711c:	0032      	movs	r2, r6
 800711e:	002b      	movs	r3, r5
 8007120:	9010      	str	r0, [sp, #64]	; 0x40
 8007122:	9111      	str	r1, [sp, #68]	; 0x44
 8007124:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007126:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007128:	f7f9 faf0 	bl	800070c <__aeabi_dadd>
 800712c:	0002      	movs	r2, r0
 800712e:	000b      	movs	r3, r1
 8007130:	2000      	movs	r0, #0
 8007132:	49a3      	ldr	r1, [pc, #652]	; (80073c0 <__ieee754_pow+0x710>)
 8007134:	f7f9 fe4a 	bl	8000dcc <__aeabi_ddiv>
 8007138:	0002      	movs	r2, r0
 800713a:	000b      	movs	r3, r1
 800713c:	9012      	str	r0, [sp, #72]	; 0x48
 800713e:	9113      	str	r1, [sp, #76]	; 0x4c
 8007140:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007142:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007144:	f7fa fa3c 	bl	80015c0 <__aeabi_dmul>
 8007148:	9008      	str	r0, [sp, #32]
 800714a:	9109      	str	r1, [sp, #36]	; 0x24
 800714c:	9a08      	ldr	r2, [sp, #32]
 800714e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007150:	9204      	str	r2, [sp, #16]
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	2300      	movs	r3, #0
 8007156:	2180      	movs	r1, #128	; 0x80
 8007158:	2080      	movs	r0, #128	; 0x80
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	9a04      	ldr	r2, [sp, #16]
 800715e:	9b05      	ldr	r3, [sp, #20]
 8007160:	9200      	str	r2, [sp, #0]
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	002f      	movs	r7, r5
 8007168:	0589      	lsls	r1, r1, #22
 800716a:	106d      	asrs	r5, r5, #1
 800716c:	4329      	orrs	r1, r5
 800716e:	0300      	lsls	r0, r0, #12
 8007170:	1809      	adds	r1, r1, r0
 8007172:	04a0      	lsls	r0, r4, #18
 8007174:	180b      	adds	r3, r1, r0
 8007176:	9800      	ldr	r0, [sp, #0]
 8007178:	9901      	ldr	r1, [sp, #4]
 800717a:	0014      	movs	r4, r2
 800717c:	001d      	movs	r5, r3
 800717e:	f7fa fa1f 	bl	80015c0 <__aeabi_dmul>
 8007182:	0002      	movs	r2, r0
 8007184:	000b      	movs	r3, r1
 8007186:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007188:	9911      	ldr	r1, [sp, #68]	; 0x44
 800718a:	f7fa fcdb 	bl	8001b44 <__aeabi_dsub>
 800718e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007192:	9010      	str	r0, [sp, #64]	; 0x40
 8007194:	9111      	str	r1, [sp, #68]	; 0x44
 8007196:	0020      	movs	r0, r4
 8007198:	0029      	movs	r1, r5
 800719a:	f7fa fcd3 	bl	8001b44 <__aeabi_dsub>
 800719e:	0002      	movs	r2, r0
 80071a0:	000b      	movs	r3, r1
 80071a2:	0030      	movs	r0, r6
 80071a4:	0039      	movs	r1, r7
 80071a6:	f7fa fccd 	bl	8001b44 <__aeabi_dsub>
 80071aa:	9a00      	ldr	r2, [sp, #0]
 80071ac:	9b01      	ldr	r3, [sp, #4]
 80071ae:	f7fa fa07 	bl	80015c0 <__aeabi_dmul>
 80071b2:	0002      	movs	r2, r0
 80071b4:	000b      	movs	r3, r1
 80071b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80071b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80071ba:	f7fa fcc3 	bl	8001b44 <__aeabi_dsub>
 80071be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071c2:	f7fa f9fd 	bl	80015c0 <__aeabi_dmul>
 80071c6:	9a08      	ldr	r2, [sp, #32]
 80071c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ca:	900a      	str	r0, [sp, #40]	; 0x28
 80071cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80071ce:	0010      	movs	r0, r2
 80071d0:	0019      	movs	r1, r3
 80071d2:	f7fa f9f5 	bl	80015c0 <__aeabi_dmul>
 80071d6:	0006      	movs	r6, r0
 80071d8:	000f      	movs	r7, r1
 80071da:	4a7e      	ldr	r2, [pc, #504]	; (80073d4 <__ieee754_pow+0x724>)
 80071dc:	4b7e      	ldr	r3, [pc, #504]	; (80073d8 <__ieee754_pow+0x728>)
 80071de:	f7fa f9ef 	bl	80015c0 <__aeabi_dmul>
 80071e2:	4a7e      	ldr	r2, [pc, #504]	; (80073dc <__ieee754_pow+0x72c>)
 80071e4:	4b7e      	ldr	r3, [pc, #504]	; (80073e0 <__ieee754_pow+0x730>)
 80071e6:	f7f9 fa91 	bl	800070c <__aeabi_dadd>
 80071ea:	0032      	movs	r2, r6
 80071ec:	003b      	movs	r3, r7
 80071ee:	f7fa f9e7 	bl	80015c0 <__aeabi_dmul>
 80071f2:	4a7c      	ldr	r2, [pc, #496]	; (80073e4 <__ieee754_pow+0x734>)
 80071f4:	4b7c      	ldr	r3, [pc, #496]	; (80073e8 <__ieee754_pow+0x738>)
 80071f6:	f7f9 fa89 	bl	800070c <__aeabi_dadd>
 80071fa:	0032      	movs	r2, r6
 80071fc:	003b      	movs	r3, r7
 80071fe:	f7fa f9df 	bl	80015c0 <__aeabi_dmul>
 8007202:	4a7a      	ldr	r2, [pc, #488]	; (80073ec <__ieee754_pow+0x73c>)
 8007204:	4b7a      	ldr	r3, [pc, #488]	; (80073f0 <__ieee754_pow+0x740>)
 8007206:	f7f9 fa81 	bl	800070c <__aeabi_dadd>
 800720a:	0032      	movs	r2, r6
 800720c:	003b      	movs	r3, r7
 800720e:	f7fa f9d7 	bl	80015c0 <__aeabi_dmul>
 8007212:	4a78      	ldr	r2, [pc, #480]	; (80073f4 <__ieee754_pow+0x744>)
 8007214:	4b78      	ldr	r3, [pc, #480]	; (80073f8 <__ieee754_pow+0x748>)
 8007216:	f7f9 fa79 	bl	800070c <__aeabi_dadd>
 800721a:	0032      	movs	r2, r6
 800721c:	003b      	movs	r3, r7
 800721e:	f7fa f9cf 	bl	80015c0 <__aeabi_dmul>
 8007222:	4a76      	ldr	r2, [pc, #472]	; (80073fc <__ieee754_pow+0x74c>)
 8007224:	4b76      	ldr	r3, [pc, #472]	; (8007400 <__ieee754_pow+0x750>)
 8007226:	f7f9 fa71 	bl	800070c <__aeabi_dadd>
 800722a:	0032      	movs	r2, r6
 800722c:	0004      	movs	r4, r0
 800722e:	000d      	movs	r5, r1
 8007230:	003b      	movs	r3, r7
 8007232:	0030      	movs	r0, r6
 8007234:	0039      	movs	r1, r7
 8007236:	f7fa f9c3 	bl	80015c0 <__aeabi_dmul>
 800723a:	0002      	movs	r2, r0
 800723c:	000b      	movs	r3, r1
 800723e:	0020      	movs	r0, r4
 8007240:	0029      	movs	r1, r5
 8007242:	f7fa f9bd 	bl	80015c0 <__aeabi_dmul>
 8007246:	9a00      	ldr	r2, [sp, #0]
 8007248:	9b01      	ldr	r3, [sp, #4]
 800724a:	0004      	movs	r4, r0
 800724c:	000d      	movs	r5, r1
 800724e:	9808      	ldr	r0, [sp, #32]
 8007250:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007252:	f7f9 fa5b 	bl	800070c <__aeabi_dadd>
 8007256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800725a:	f7fa f9b1 	bl	80015c0 <__aeabi_dmul>
 800725e:	0022      	movs	r2, r4
 8007260:	002b      	movs	r3, r5
 8007262:	f7f9 fa53 	bl	800070c <__aeabi_dadd>
 8007266:	9a00      	ldr	r2, [sp, #0]
 8007268:	9b01      	ldr	r3, [sp, #4]
 800726a:	9010      	str	r0, [sp, #64]	; 0x40
 800726c:	9111      	str	r1, [sp, #68]	; 0x44
 800726e:	0010      	movs	r0, r2
 8007270:	0019      	movs	r1, r3
 8007272:	f7fa f9a5 	bl	80015c0 <__aeabi_dmul>
 8007276:	2200      	movs	r2, #0
 8007278:	4b62      	ldr	r3, [pc, #392]	; (8007404 <__ieee754_pow+0x754>)
 800727a:	0004      	movs	r4, r0
 800727c:	000d      	movs	r5, r1
 800727e:	f7f9 fa45 	bl	800070c <__aeabi_dadd>
 8007282:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007284:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007286:	f7f9 fa41 	bl	800070c <__aeabi_dadd>
 800728a:	2000      	movs	r0, #0
 800728c:	000f      	movs	r7, r1
 800728e:	0006      	movs	r6, r0
 8007290:	0002      	movs	r2, r0
 8007292:	000b      	movs	r3, r1
 8007294:	9800      	ldr	r0, [sp, #0]
 8007296:	9901      	ldr	r1, [sp, #4]
 8007298:	f7fa f992 	bl	80015c0 <__aeabi_dmul>
 800729c:	2200      	movs	r2, #0
 800729e:	9000      	str	r0, [sp, #0]
 80072a0:	9101      	str	r1, [sp, #4]
 80072a2:	4b58      	ldr	r3, [pc, #352]	; (8007404 <__ieee754_pow+0x754>)
 80072a4:	0030      	movs	r0, r6
 80072a6:	0039      	movs	r1, r7
 80072a8:	f7fa fc4c 	bl	8001b44 <__aeabi_dsub>
 80072ac:	0022      	movs	r2, r4
 80072ae:	002b      	movs	r3, r5
 80072b0:	f7fa fc48 	bl	8001b44 <__aeabi_dsub>
 80072b4:	0002      	movs	r2, r0
 80072b6:	000b      	movs	r3, r1
 80072b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80072ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80072bc:	f7fa fc42 	bl	8001b44 <__aeabi_dsub>
 80072c0:	9a08      	ldr	r2, [sp, #32]
 80072c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c4:	f7fa f97c 	bl	80015c0 <__aeabi_dmul>
 80072c8:	0032      	movs	r2, r6
 80072ca:	0004      	movs	r4, r0
 80072cc:	000d      	movs	r5, r1
 80072ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 80072d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072d2:	003b      	movs	r3, r7
 80072d4:	f7fa f974 	bl	80015c0 <__aeabi_dmul>
 80072d8:	0002      	movs	r2, r0
 80072da:	000b      	movs	r3, r1
 80072dc:	0020      	movs	r0, r4
 80072de:	0029      	movs	r1, r5
 80072e0:	f7f9 fa14 	bl	800070c <__aeabi_dadd>
 80072e4:	0004      	movs	r4, r0
 80072e6:	000d      	movs	r5, r1
 80072e8:	0002      	movs	r2, r0
 80072ea:	000b      	movs	r3, r1
 80072ec:	9800      	ldr	r0, [sp, #0]
 80072ee:	9901      	ldr	r1, [sp, #4]
 80072f0:	f7f9 fa0c 	bl	800070c <__aeabi_dadd>
 80072f4:	22e0      	movs	r2, #224	; 0xe0
 80072f6:	2000      	movs	r0, #0
 80072f8:	4b43      	ldr	r3, [pc, #268]	; (8007408 <__ieee754_pow+0x758>)
 80072fa:	0612      	lsls	r2, r2, #24
 80072fc:	0006      	movs	r6, r0
 80072fe:	000f      	movs	r7, r1
 8007300:	f7fa f95e 	bl	80015c0 <__aeabi_dmul>
 8007304:	9008      	str	r0, [sp, #32]
 8007306:	9109      	str	r1, [sp, #36]	; 0x24
 8007308:	9a00      	ldr	r2, [sp, #0]
 800730a:	9b01      	ldr	r3, [sp, #4]
 800730c:	0030      	movs	r0, r6
 800730e:	0039      	movs	r1, r7
 8007310:	f7fa fc18 	bl	8001b44 <__aeabi_dsub>
 8007314:	0002      	movs	r2, r0
 8007316:	000b      	movs	r3, r1
 8007318:	0020      	movs	r0, r4
 800731a:	0029      	movs	r1, r5
 800731c:	f7fa fc12 	bl	8001b44 <__aeabi_dsub>
 8007320:	4a3a      	ldr	r2, [pc, #232]	; (800740c <__ieee754_pow+0x75c>)
 8007322:	4b39      	ldr	r3, [pc, #228]	; (8007408 <__ieee754_pow+0x758>)
 8007324:	f7fa f94c 	bl	80015c0 <__aeabi_dmul>
 8007328:	4a39      	ldr	r2, [pc, #228]	; (8007410 <__ieee754_pow+0x760>)
 800732a:	0004      	movs	r4, r0
 800732c:	000d      	movs	r5, r1
 800732e:	0030      	movs	r0, r6
 8007330:	0039      	movs	r1, r7
 8007332:	4b38      	ldr	r3, [pc, #224]	; (8007414 <__ieee754_pow+0x764>)
 8007334:	f7fa f944 	bl	80015c0 <__aeabi_dmul>
 8007338:	0002      	movs	r2, r0
 800733a:	000b      	movs	r3, r1
 800733c:	0020      	movs	r0, r4
 800733e:	0029      	movs	r1, r5
 8007340:	f7f9 f9e4 	bl	800070c <__aeabi_dadd>
 8007344:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007346:	4b34      	ldr	r3, [pc, #208]	; (8007418 <__ieee754_pow+0x768>)
 8007348:	189b      	adds	r3, r3, r2
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f7f9 f9dd 	bl	800070c <__aeabi_dadd>
 8007352:	9000      	str	r0, [sp, #0]
 8007354:	9101      	str	r1, [sp, #4]
 8007356:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007358:	f7fa ff94 	bl	8002284 <__aeabi_i2d>
 800735c:	0004      	movs	r4, r0
 800735e:	000d      	movs	r5, r1
 8007360:	9808      	ldr	r0, [sp, #32]
 8007362:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007364:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007366:	4b2d      	ldr	r3, [pc, #180]	; (800741c <__ieee754_pow+0x76c>)
 8007368:	189b      	adds	r3, r3, r2
 800736a:	681e      	ldr	r6, [r3, #0]
 800736c:	685f      	ldr	r7, [r3, #4]
 800736e:	9a00      	ldr	r2, [sp, #0]
 8007370:	9b01      	ldr	r3, [sp, #4]
 8007372:	f7f9 f9cb 	bl	800070c <__aeabi_dadd>
 8007376:	0032      	movs	r2, r6
 8007378:	003b      	movs	r3, r7
 800737a:	f7f9 f9c7 	bl	800070c <__aeabi_dadd>
 800737e:	0022      	movs	r2, r4
 8007380:	002b      	movs	r3, r5
 8007382:	f7f9 f9c3 	bl	800070c <__aeabi_dadd>
 8007386:	2000      	movs	r0, #0
 8007388:	0022      	movs	r2, r4
 800738a:	002b      	movs	r3, r5
 800738c:	9004      	str	r0, [sp, #16]
 800738e:	9105      	str	r1, [sp, #20]
 8007390:	f7fa fbd8 	bl	8001b44 <__aeabi_dsub>
 8007394:	0032      	movs	r2, r6
 8007396:	003b      	movs	r3, r7
 8007398:	f7fa fbd4 	bl	8001b44 <__aeabi_dsub>
 800739c:	9a08      	ldr	r2, [sp, #32]
 800739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a0:	f7fa fbd0 	bl	8001b44 <__aeabi_dsub>
 80073a4:	0002      	movs	r2, r0
 80073a6:	000b      	movs	r3, r1
 80073a8:	9800      	ldr	r0, [sp, #0]
 80073aa:	9901      	ldr	r1, [sp, #4]
 80073ac:	e618      	b.n	8006fe0 <__ieee754_pow+0x330>
 80073ae:	2300      	movs	r3, #0
 80073b0:	4c03      	ldr	r4, [pc, #12]	; (80073c0 <__ieee754_pow+0x710>)
 80073b2:	e621      	b.n	8006ff8 <__ieee754_pow+0x348>
 80073b4:	7ff00000 	.word	0x7ff00000
 80073b8:	43400000 	.word	0x43400000
 80073bc:	fffffc01 	.word	0xfffffc01
 80073c0:	3ff00000 	.word	0x3ff00000
 80073c4:	0003988e 	.word	0x0003988e
 80073c8:	000bb679 	.word	0x000bb679
 80073cc:	fff00000 	.word	0xfff00000
 80073d0:	08007c38 	.word	0x08007c38
 80073d4:	4a454eef 	.word	0x4a454eef
 80073d8:	3fca7e28 	.word	0x3fca7e28
 80073dc:	93c9db65 	.word	0x93c9db65
 80073e0:	3fcd864a 	.word	0x3fcd864a
 80073e4:	a91d4101 	.word	0xa91d4101
 80073e8:	3fd17460 	.word	0x3fd17460
 80073ec:	518f264d 	.word	0x518f264d
 80073f0:	3fd55555 	.word	0x3fd55555
 80073f4:	db6fabff 	.word	0xdb6fabff
 80073f8:	3fdb6db6 	.word	0x3fdb6db6
 80073fc:	33333303 	.word	0x33333303
 8007400:	3fe33333 	.word	0x3fe33333
 8007404:	40080000 	.word	0x40080000
 8007408:	3feec709 	.word	0x3feec709
 800740c:	dc3a03fd 	.word	0xdc3a03fd
 8007410:	145b01f5 	.word	0x145b01f5
 8007414:	be3e2fe0 	.word	0xbe3e2fe0
 8007418:	08007c58 	.word	0x08007c58
 800741c:	08007c48 	.word	0x08007c48
 8007420:	4a90      	ldr	r2, [pc, #576]	; (8007664 <__ieee754_pow+0x9b4>)
 8007422:	4b91      	ldr	r3, [pc, #580]	; (8007668 <__ieee754_pow+0x9b8>)
 8007424:	0030      	movs	r0, r6
 8007426:	0039      	movs	r1, r7
 8007428:	f7f9 f970 	bl	800070c <__aeabi_dadd>
 800742c:	9a04      	ldr	r2, [sp, #16]
 800742e:	9b05      	ldr	r3, [sp, #20]
 8007430:	9002      	str	r0, [sp, #8]
 8007432:	9103      	str	r1, [sp, #12]
 8007434:	0028      	movs	r0, r5
 8007436:	0021      	movs	r1, r4
 8007438:	f7fa fb84 	bl	8001b44 <__aeabi_dsub>
 800743c:	0002      	movs	r2, r0
 800743e:	000b      	movs	r3, r1
 8007440:	9802      	ldr	r0, [sp, #8]
 8007442:	9903      	ldr	r1, [sp, #12]
 8007444:	f7f9 f810 	bl	8000468 <__aeabi_dcmpgt>
 8007448:	2800      	cmp	r0, #0
 800744a:	d000      	beq.n	800744e <__ieee754_pow+0x79e>
 800744c:	e611      	b.n	8007072 <__ieee754_pow+0x3c2>
 800744e:	2100      	movs	r1, #0
 8007450:	4a86      	ldr	r2, [pc, #536]	; (800766c <__ieee754_pow+0x9bc>)
 8007452:	0063      	lsls	r3, r4, #1
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	9102      	str	r1, [sp, #8]
 8007458:	4293      	cmp	r3, r2
 800745a:	dd25      	ble.n	80074a8 <__ieee754_pow+0x7f8>
 800745c:	4a84      	ldr	r2, [pc, #528]	; (8007670 <__ieee754_pow+0x9c0>)
 800745e:	151b      	asrs	r3, r3, #20
 8007460:	189b      	adds	r3, r3, r2
 8007462:	2280      	movs	r2, #128	; 0x80
 8007464:	0352      	lsls	r2, r2, #13
 8007466:	0011      	movs	r1, r2
 8007468:	4119      	asrs	r1, r3
 800746a:	190b      	adds	r3, r1, r4
 800746c:	005c      	lsls	r4, r3, #1
 800746e:	4981      	ldr	r1, [pc, #516]	; (8007674 <__ieee754_pow+0x9c4>)
 8007470:	4d81      	ldr	r5, [pc, #516]	; (8007678 <__ieee754_pow+0x9c8>)
 8007472:	0d64      	lsrs	r4, r4, #21
 8007474:	1864      	adds	r4, r4, r1
 8007476:	4125      	asrs	r5, r4
 8007478:	401d      	ands	r5, r3
 800747a:	031b      	lsls	r3, r3, #12
 800747c:	0b1b      	lsrs	r3, r3, #12
 800747e:	4313      	orrs	r3, r2
 8007480:	2214      	movs	r2, #20
 8007482:	1b12      	subs	r2, r2, r4
 8007484:	4113      	asrs	r3, r2
 8007486:	9302      	str	r3, [sp, #8]
 8007488:	9b08      	ldr	r3, [sp, #32]
 800748a:	2000      	movs	r0, #0
 800748c:	0029      	movs	r1, r5
 800748e:	2b00      	cmp	r3, #0
 8007490:	da02      	bge.n	8007498 <__ieee754_pow+0x7e8>
 8007492:	9b02      	ldr	r3, [sp, #8]
 8007494:	425b      	negs	r3, r3
 8007496:	9302      	str	r3, [sp, #8]
 8007498:	0002      	movs	r2, r0
 800749a:	000b      	movs	r3, r1
 800749c:	9804      	ldr	r0, [sp, #16]
 800749e:	9905      	ldr	r1, [sp, #20]
 80074a0:	f7fa fb50 	bl	8001b44 <__aeabi_dsub>
 80074a4:	9006      	str	r0, [sp, #24]
 80074a6:	9107      	str	r1, [sp, #28]
 80074a8:	9806      	ldr	r0, [sp, #24]
 80074aa:	9907      	ldr	r1, [sp, #28]
 80074ac:	0032      	movs	r2, r6
 80074ae:	003b      	movs	r3, r7
 80074b0:	f7f9 f92c 	bl	800070c <__aeabi_dadd>
 80074b4:	2000      	movs	r0, #0
 80074b6:	2200      	movs	r2, #0
 80074b8:	4b70      	ldr	r3, [pc, #448]	; (800767c <__ieee754_pow+0x9cc>)
 80074ba:	9004      	str	r0, [sp, #16]
 80074bc:	9105      	str	r1, [sp, #20]
 80074be:	f7fa f87f 	bl	80015c0 <__aeabi_dmul>
 80074c2:	9a06      	ldr	r2, [sp, #24]
 80074c4:	9b07      	ldr	r3, [sp, #28]
 80074c6:	9008      	str	r0, [sp, #32]
 80074c8:	9109      	str	r1, [sp, #36]	; 0x24
 80074ca:	9804      	ldr	r0, [sp, #16]
 80074cc:	9905      	ldr	r1, [sp, #20]
 80074ce:	f7fa fb39 	bl	8001b44 <__aeabi_dsub>
 80074d2:	0002      	movs	r2, r0
 80074d4:	000b      	movs	r3, r1
 80074d6:	0030      	movs	r0, r6
 80074d8:	0039      	movs	r1, r7
 80074da:	f7fa fb33 	bl	8001b44 <__aeabi_dsub>
 80074de:	4a68      	ldr	r2, [pc, #416]	; (8007680 <__ieee754_pow+0x9d0>)
 80074e0:	4b68      	ldr	r3, [pc, #416]	; (8007684 <__ieee754_pow+0x9d4>)
 80074e2:	f7fa f86d 	bl	80015c0 <__aeabi_dmul>
 80074e6:	4a68      	ldr	r2, [pc, #416]	; (8007688 <__ieee754_pow+0x9d8>)
 80074e8:	0004      	movs	r4, r0
 80074ea:	000d      	movs	r5, r1
 80074ec:	9804      	ldr	r0, [sp, #16]
 80074ee:	9905      	ldr	r1, [sp, #20]
 80074f0:	4b66      	ldr	r3, [pc, #408]	; (800768c <__ieee754_pow+0x9dc>)
 80074f2:	f7fa f865 	bl	80015c0 <__aeabi_dmul>
 80074f6:	0002      	movs	r2, r0
 80074f8:	000b      	movs	r3, r1
 80074fa:	0020      	movs	r0, r4
 80074fc:	0029      	movs	r1, r5
 80074fe:	f7f9 f905 	bl	800070c <__aeabi_dadd>
 8007502:	0004      	movs	r4, r0
 8007504:	000d      	movs	r5, r1
 8007506:	0002      	movs	r2, r0
 8007508:	000b      	movs	r3, r1
 800750a:	9808      	ldr	r0, [sp, #32]
 800750c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800750e:	f7f9 f8fd 	bl	800070c <__aeabi_dadd>
 8007512:	9a08      	ldr	r2, [sp, #32]
 8007514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007516:	0006      	movs	r6, r0
 8007518:	000f      	movs	r7, r1
 800751a:	f7fa fb13 	bl	8001b44 <__aeabi_dsub>
 800751e:	0002      	movs	r2, r0
 8007520:	000b      	movs	r3, r1
 8007522:	0020      	movs	r0, r4
 8007524:	0029      	movs	r1, r5
 8007526:	f7fa fb0d 	bl	8001b44 <__aeabi_dsub>
 800752a:	0032      	movs	r2, r6
 800752c:	9004      	str	r0, [sp, #16]
 800752e:	9105      	str	r1, [sp, #20]
 8007530:	003b      	movs	r3, r7
 8007532:	0030      	movs	r0, r6
 8007534:	0039      	movs	r1, r7
 8007536:	f7fa f843 	bl	80015c0 <__aeabi_dmul>
 800753a:	0004      	movs	r4, r0
 800753c:	000d      	movs	r5, r1
 800753e:	4a54      	ldr	r2, [pc, #336]	; (8007690 <__ieee754_pow+0x9e0>)
 8007540:	4b54      	ldr	r3, [pc, #336]	; (8007694 <__ieee754_pow+0x9e4>)
 8007542:	f7fa f83d 	bl	80015c0 <__aeabi_dmul>
 8007546:	4a54      	ldr	r2, [pc, #336]	; (8007698 <__ieee754_pow+0x9e8>)
 8007548:	4b54      	ldr	r3, [pc, #336]	; (800769c <__ieee754_pow+0x9ec>)
 800754a:	f7fa fafb 	bl	8001b44 <__aeabi_dsub>
 800754e:	0022      	movs	r2, r4
 8007550:	002b      	movs	r3, r5
 8007552:	f7fa f835 	bl	80015c0 <__aeabi_dmul>
 8007556:	4a52      	ldr	r2, [pc, #328]	; (80076a0 <__ieee754_pow+0x9f0>)
 8007558:	4b52      	ldr	r3, [pc, #328]	; (80076a4 <__ieee754_pow+0x9f4>)
 800755a:	f7f9 f8d7 	bl	800070c <__aeabi_dadd>
 800755e:	0022      	movs	r2, r4
 8007560:	002b      	movs	r3, r5
 8007562:	f7fa f82d 	bl	80015c0 <__aeabi_dmul>
 8007566:	4a50      	ldr	r2, [pc, #320]	; (80076a8 <__ieee754_pow+0x9f8>)
 8007568:	4b50      	ldr	r3, [pc, #320]	; (80076ac <__ieee754_pow+0x9fc>)
 800756a:	f7fa faeb 	bl	8001b44 <__aeabi_dsub>
 800756e:	0022      	movs	r2, r4
 8007570:	002b      	movs	r3, r5
 8007572:	f7fa f825 	bl	80015c0 <__aeabi_dmul>
 8007576:	4a4e      	ldr	r2, [pc, #312]	; (80076b0 <__ieee754_pow+0xa00>)
 8007578:	4b4e      	ldr	r3, [pc, #312]	; (80076b4 <__ieee754_pow+0xa04>)
 800757a:	f7f9 f8c7 	bl	800070c <__aeabi_dadd>
 800757e:	0022      	movs	r2, r4
 8007580:	002b      	movs	r3, r5
 8007582:	f7fa f81d 	bl	80015c0 <__aeabi_dmul>
 8007586:	0002      	movs	r2, r0
 8007588:	000b      	movs	r3, r1
 800758a:	0030      	movs	r0, r6
 800758c:	0039      	movs	r1, r7
 800758e:	f7fa fad9 	bl	8001b44 <__aeabi_dsub>
 8007592:	0004      	movs	r4, r0
 8007594:	000d      	movs	r5, r1
 8007596:	0002      	movs	r2, r0
 8007598:	000b      	movs	r3, r1
 800759a:	0030      	movs	r0, r6
 800759c:	0039      	movs	r1, r7
 800759e:	f7fa f80f 	bl	80015c0 <__aeabi_dmul>
 80075a2:	2380      	movs	r3, #128	; 0x80
 80075a4:	9006      	str	r0, [sp, #24]
 80075a6:	9107      	str	r1, [sp, #28]
 80075a8:	2200      	movs	r2, #0
 80075aa:	0020      	movs	r0, r4
 80075ac:	0029      	movs	r1, r5
 80075ae:	05db      	lsls	r3, r3, #23
 80075b0:	f7fa fac8 	bl	8001b44 <__aeabi_dsub>
 80075b4:	0002      	movs	r2, r0
 80075b6:	000b      	movs	r3, r1
 80075b8:	9806      	ldr	r0, [sp, #24]
 80075ba:	9907      	ldr	r1, [sp, #28]
 80075bc:	f7f9 fc06 	bl	8000dcc <__aeabi_ddiv>
 80075c0:	9a04      	ldr	r2, [sp, #16]
 80075c2:	9b05      	ldr	r3, [sp, #20]
 80075c4:	0004      	movs	r4, r0
 80075c6:	000d      	movs	r5, r1
 80075c8:	0030      	movs	r0, r6
 80075ca:	0039      	movs	r1, r7
 80075cc:	f7f9 fff8 	bl	80015c0 <__aeabi_dmul>
 80075d0:	9a04      	ldr	r2, [sp, #16]
 80075d2:	9b05      	ldr	r3, [sp, #20]
 80075d4:	f7f9 f89a 	bl	800070c <__aeabi_dadd>
 80075d8:	0002      	movs	r2, r0
 80075da:	000b      	movs	r3, r1
 80075dc:	0020      	movs	r0, r4
 80075de:	0029      	movs	r1, r5
 80075e0:	f7fa fab0 	bl	8001b44 <__aeabi_dsub>
 80075e4:	0032      	movs	r2, r6
 80075e6:	003b      	movs	r3, r7
 80075e8:	f7fa faac 	bl	8001b44 <__aeabi_dsub>
 80075ec:	0002      	movs	r2, r0
 80075ee:	000b      	movs	r3, r1
 80075f0:	2000      	movs	r0, #0
 80075f2:	4931      	ldr	r1, [pc, #196]	; (80076b8 <__ieee754_pow+0xa08>)
 80075f4:	f7fa faa6 	bl	8001b44 <__aeabi_dsub>
 80075f8:	9b02      	ldr	r3, [sp, #8]
 80075fa:	051b      	lsls	r3, r3, #20
 80075fc:	185b      	adds	r3, r3, r1
 80075fe:	151a      	asrs	r2, r3, #20
 8007600:	2a00      	cmp	r2, #0
 8007602:	dc25      	bgt.n	8007650 <__ieee754_pow+0x9a0>
 8007604:	9a02      	ldr	r2, [sp, #8]
 8007606:	f000 f861 	bl	80076cc <scalbn>
 800760a:	9a00      	ldr	r2, [sp, #0]
 800760c:	9b01      	ldr	r3, [sp, #4]
 800760e:	f7ff fc33 	bl	8006e78 <__ieee754_pow+0x1c8>
 8007612:	4a2a      	ldr	r2, [pc, #168]	; (80076bc <__ieee754_pow+0xa0c>)
 8007614:	004b      	lsls	r3, r1, #1
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	4293      	cmp	r3, r2
 800761a:	dc00      	bgt.n	800761e <__ieee754_pow+0x96e>
 800761c:	e717      	b.n	800744e <__ieee754_pow+0x79e>
 800761e:	4b28      	ldr	r3, [pc, #160]	; (80076c0 <__ieee754_pow+0xa10>)
 8007620:	18cb      	adds	r3, r1, r3
 8007622:	4303      	orrs	r3, r0
 8007624:	d008      	beq.n	8007638 <__ieee754_pow+0x988>
 8007626:	9800      	ldr	r0, [sp, #0]
 8007628:	9901      	ldr	r1, [sp, #4]
 800762a:	2300      	movs	r3, #0
 800762c:	2200      	movs	r2, #0
 800762e:	f7f8 ff07 	bl	8000440 <__aeabi_dcmplt>
 8007632:	1e43      	subs	r3, r0, #1
 8007634:	4198      	sbcs	r0, r3
 8007636:	e462      	b.n	8006efe <__ieee754_pow+0x24e>
 8007638:	9a04      	ldr	r2, [sp, #16]
 800763a:	9b05      	ldr	r3, [sp, #20]
 800763c:	f7fa fa82 	bl	8001b44 <__aeabi_dsub>
 8007640:	0032      	movs	r2, r6
 8007642:	003b      	movs	r3, r7
 8007644:	f7f8 ff1a 	bl	800047c <__aeabi_dcmpge>
 8007648:	2800      	cmp	r0, #0
 800764a:	d100      	bne.n	800764e <__ieee754_pow+0x99e>
 800764c:	e6ff      	b.n	800744e <__ieee754_pow+0x79e>
 800764e:	e7ea      	b.n	8007626 <__ieee754_pow+0x976>
 8007650:	0019      	movs	r1, r3
 8007652:	e7da      	b.n	800760a <__ieee754_pow+0x95a>
 8007654:	2300      	movs	r3, #0
 8007656:	4c18      	ldr	r4, [pc, #96]	; (80076b8 <__ieee754_pow+0xa08>)
 8007658:	f7ff fbf1 	bl	8006e3e <__ieee754_pow+0x18e>
 800765c:	2300      	movs	r3, #0
 800765e:	2400      	movs	r4, #0
 8007660:	f7ff fbed 	bl	8006e3e <__ieee754_pow+0x18e>
 8007664:	652b82fe 	.word	0x652b82fe
 8007668:	3c971547 	.word	0x3c971547
 800766c:	3fe00000 	.word	0x3fe00000
 8007670:	fffffc02 	.word	0xfffffc02
 8007674:	fffffc01 	.word	0xfffffc01
 8007678:	fff00000 	.word	0xfff00000
 800767c:	3fe62e43 	.word	0x3fe62e43
 8007680:	fefa39ef 	.word	0xfefa39ef
 8007684:	3fe62e42 	.word	0x3fe62e42
 8007688:	0ca86c39 	.word	0x0ca86c39
 800768c:	be205c61 	.word	0xbe205c61
 8007690:	72bea4d0 	.word	0x72bea4d0
 8007694:	3e663769 	.word	0x3e663769
 8007698:	c5d26bf1 	.word	0xc5d26bf1
 800769c:	3ebbbd41 	.word	0x3ebbbd41
 80076a0:	af25de2c 	.word	0xaf25de2c
 80076a4:	3f11566a 	.word	0x3f11566a
 80076a8:	16bebd93 	.word	0x16bebd93
 80076ac:	3f66c16c 	.word	0x3f66c16c
 80076b0:	5555553e 	.word	0x5555553e
 80076b4:	3fc55555 	.word	0x3fc55555
 80076b8:	3ff00000 	.word	0x3ff00000
 80076bc:	4090cbff 	.word	0x4090cbff
 80076c0:	3f6f3400 	.word	0x3f6f3400

080076c4 <fabs>:
 80076c4:	0049      	lsls	r1, r1, #1
 80076c6:	084b      	lsrs	r3, r1, #1
 80076c8:	0019      	movs	r1, r3
 80076ca:	4770      	bx	lr

080076cc <scalbn>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	0014      	movs	r4, r2
 80076d0:	004a      	lsls	r2, r1, #1
 80076d2:	000b      	movs	r3, r1
 80076d4:	0d52      	lsrs	r2, r2, #21
 80076d6:	d10f      	bne.n	80076f8 <scalbn+0x2c>
 80076d8:	004b      	lsls	r3, r1, #1
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	4303      	orrs	r3, r0
 80076de:	d011      	beq.n	8007704 <scalbn+0x38>
 80076e0:	4b22      	ldr	r3, [pc, #136]	; (800776c <scalbn+0xa0>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	f7f9 ff6c 	bl	80015c0 <__aeabi_dmul>
 80076e8:	4b21      	ldr	r3, [pc, #132]	; (8007770 <scalbn+0xa4>)
 80076ea:	429c      	cmp	r4, r3
 80076ec:	da0b      	bge.n	8007706 <scalbn+0x3a>
 80076ee:	4a21      	ldr	r2, [pc, #132]	; (8007774 <scalbn+0xa8>)
 80076f0:	4b21      	ldr	r3, [pc, #132]	; (8007778 <scalbn+0xac>)
 80076f2:	f7f9 ff65 	bl	80015c0 <__aeabi_dmul>
 80076f6:	e005      	b.n	8007704 <scalbn+0x38>
 80076f8:	4d20      	ldr	r5, [pc, #128]	; (800777c <scalbn+0xb0>)
 80076fa:	42aa      	cmp	r2, r5
 80076fc:	d107      	bne.n	800770e <scalbn+0x42>
 80076fe:	0002      	movs	r2, r0
 8007700:	f7f9 f804 	bl	800070c <__aeabi_dadd>
 8007704:	bd70      	pop	{r4, r5, r6, pc}
 8007706:	000b      	movs	r3, r1
 8007708:	004a      	lsls	r2, r1, #1
 800770a:	0d52      	lsrs	r2, r2, #21
 800770c:	3a36      	subs	r2, #54	; 0x36
 800770e:	4d1c      	ldr	r5, [pc, #112]	; (8007780 <scalbn+0xb4>)
 8007710:	42ac      	cmp	r4, r5
 8007712:	dd0a      	ble.n	800772a <scalbn+0x5e>
 8007714:	4c1b      	ldr	r4, [pc, #108]	; (8007784 <scalbn+0xb8>)
 8007716:	4d1c      	ldr	r5, [pc, #112]	; (8007788 <scalbn+0xbc>)
 8007718:	2900      	cmp	r1, #0
 800771a:	da01      	bge.n	8007720 <scalbn+0x54>
 800771c:	4c19      	ldr	r4, [pc, #100]	; (8007784 <scalbn+0xb8>)
 800771e:	4d1b      	ldr	r5, [pc, #108]	; (800778c <scalbn+0xc0>)
 8007720:	4a18      	ldr	r2, [pc, #96]	; (8007784 <scalbn+0xb8>)
 8007722:	4b19      	ldr	r3, [pc, #100]	; (8007788 <scalbn+0xbc>)
 8007724:	0020      	movs	r0, r4
 8007726:	0029      	movs	r1, r5
 8007728:	e7e3      	b.n	80076f2 <scalbn+0x26>
 800772a:	18a2      	adds	r2, r4, r2
 800772c:	4c18      	ldr	r4, [pc, #96]	; (8007790 <scalbn+0xc4>)
 800772e:	42a2      	cmp	r2, r4
 8007730:	dcf0      	bgt.n	8007714 <scalbn+0x48>
 8007732:	2a00      	cmp	r2, #0
 8007734:	dd05      	ble.n	8007742 <scalbn+0x76>
 8007736:	4c17      	ldr	r4, [pc, #92]	; (8007794 <scalbn+0xc8>)
 8007738:	0512      	lsls	r2, r2, #20
 800773a:	4023      	ands	r3, r4
 800773c:	4313      	orrs	r3, r2
 800773e:	0019      	movs	r1, r3
 8007740:	e7e0      	b.n	8007704 <scalbn+0x38>
 8007742:	0014      	movs	r4, r2
 8007744:	3435      	adds	r4, #53	; 0x35
 8007746:	da08      	bge.n	800775a <scalbn+0x8e>
 8007748:	4c0a      	ldr	r4, [pc, #40]	; (8007774 <scalbn+0xa8>)
 800774a:	4d0b      	ldr	r5, [pc, #44]	; (8007778 <scalbn+0xac>)
 800774c:	2900      	cmp	r1, #0
 800774e:	da01      	bge.n	8007754 <scalbn+0x88>
 8007750:	4c08      	ldr	r4, [pc, #32]	; (8007774 <scalbn+0xa8>)
 8007752:	4d11      	ldr	r5, [pc, #68]	; (8007798 <scalbn+0xcc>)
 8007754:	4a07      	ldr	r2, [pc, #28]	; (8007774 <scalbn+0xa8>)
 8007756:	4b08      	ldr	r3, [pc, #32]	; (8007778 <scalbn+0xac>)
 8007758:	e7e4      	b.n	8007724 <scalbn+0x58>
 800775a:	4c0e      	ldr	r4, [pc, #56]	; (8007794 <scalbn+0xc8>)
 800775c:	3236      	adds	r2, #54	; 0x36
 800775e:	4023      	ands	r3, r4
 8007760:	0512      	lsls	r2, r2, #20
 8007762:	431a      	orrs	r2, r3
 8007764:	0011      	movs	r1, r2
 8007766:	4b0d      	ldr	r3, [pc, #52]	; (800779c <scalbn+0xd0>)
 8007768:	2200      	movs	r2, #0
 800776a:	e7c2      	b.n	80076f2 <scalbn+0x26>
 800776c:	43500000 	.word	0x43500000
 8007770:	ffff3cb0 	.word	0xffff3cb0
 8007774:	c2f8f359 	.word	0xc2f8f359
 8007778:	01a56e1f 	.word	0x01a56e1f
 800777c:	000007ff 	.word	0x000007ff
 8007780:	0000c350 	.word	0x0000c350
 8007784:	8800759c 	.word	0x8800759c
 8007788:	7e37e43c 	.word	0x7e37e43c
 800778c:	fe37e43c 	.word	0xfe37e43c
 8007790:	000007fe 	.word	0x000007fe
 8007794:	800fffff 	.word	0x800fffff
 8007798:	81a56e1f 	.word	0x81a56e1f
 800779c:	3c900000 	.word	0x3c900000

080077a0 <with_errno>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	000d      	movs	r5, r1
 80077a4:	0016      	movs	r6, r2
 80077a6:	0004      	movs	r4, r0
 80077a8:	f7fe f8dc 	bl	8005964 <__errno>
 80077ac:	0029      	movs	r1, r5
 80077ae:	6006      	str	r6, [r0, #0]
 80077b0:	0020      	movs	r0, r4
 80077b2:	bd70      	pop	{r4, r5, r6, pc}

080077b4 <xflow>:
 80077b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077b6:	0015      	movs	r5, r2
 80077b8:	001c      	movs	r4, r3
 80077ba:	2800      	cmp	r0, #0
 80077bc:	d010      	beq.n	80077e0 <xflow+0x2c>
 80077be:	2380      	movs	r3, #128	; 0x80
 80077c0:	0010      	movs	r0, r2
 80077c2:	061b      	lsls	r3, r3, #24
 80077c4:	18e1      	adds	r1, r4, r3
 80077c6:	9000      	str	r0, [sp, #0]
 80077c8:	9101      	str	r1, [sp, #4]
 80077ca:	9a00      	ldr	r2, [sp, #0]
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	0028      	movs	r0, r5
 80077d0:	0021      	movs	r1, r4
 80077d2:	f7f9 fef5 	bl	80015c0 <__aeabi_dmul>
 80077d6:	2222      	movs	r2, #34	; 0x22
 80077d8:	f7ff ffe2 	bl	80077a0 <with_errno>
 80077dc:	b003      	add	sp, #12
 80077de:	bd30      	pop	{r4, r5, pc}
 80077e0:	0010      	movs	r0, r2
 80077e2:	0019      	movs	r1, r3
 80077e4:	e7ef      	b.n	80077c6 <xflow+0x12>

080077e6 <__math_uflow>:
 80077e6:	2380      	movs	r3, #128	; 0x80
 80077e8:	b510      	push	{r4, lr}
 80077ea:	2200      	movs	r2, #0
 80077ec:	055b      	lsls	r3, r3, #21
 80077ee:	f7ff ffe1 	bl	80077b4 <xflow>
 80077f2:	bd10      	pop	{r4, pc}

080077f4 <__math_oflow>:
 80077f4:	23e0      	movs	r3, #224	; 0xe0
 80077f6:	b510      	push	{r4, lr}
 80077f8:	2200      	movs	r2, #0
 80077fa:	05db      	lsls	r3, r3, #23
 80077fc:	f7ff ffda 	bl	80077b4 <xflow>
 8007800:	bd10      	pop	{r4, pc}
	...

08007804 <__ieee754_sqrt>:
 8007804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007806:	000a      	movs	r2, r1
 8007808:	000c      	movs	r4, r1
 800780a:	496f      	ldr	r1, [pc, #444]	; (80079c8 <__ieee754_sqrt+0x1c4>)
 800780c:	0005      	movs	r5, r0
 800780e:	0003      	movs	r3, r0
 8007810:	0008      	movs	r0, r1
 8007812:	b087      	sub	sp, #28
 8007814:	4020      	ands	r0, r4
 8007816:	4288      	cmp	r0, r1
 8007818:	d111      	bne.n	800783e <__ieee754_sqrt+0x3a>
 800781a:	002a      	movs	r2, r5
 800781c:	0023      	movs	r3, r4
 800781e:	0028      	movs	r0, r5
 8007820:	0021      	movs	r1, r4
 8007822:	f7f9 fecd 	bl	80015c0 <__aeabi_dmul>
 8007826:	0002      	movs	r2, r0
 8007828:	000b      	movs	r3, r1
 800782a:	0028      	movs	r0, r5
 800782c:	0021      	movs	r1, r4
 800782e:	f7f8 ff6d 	bl	800070c <__aeabi_dadd>
 8007832:	0005      	movs	r5, r0
 8007834:	000c      	movs	r4, r1
 8007836:	0028      	movs	r0, r5
 8007838:	0021      	movs	r1, r4
 800783a:	b007      	add	sp, #28
 800783c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783e:	2c00      	cmp	r4, #0
 8007840:	dc12      	bgt.n	8007868 <__ieee754_sqrt+0x64>
 8007842:	0061      	lsls	r1, r4, #1
 8007844:	0849      	lsrs	r1, r1, #1
 8007846:	4329      	orrs	r1, r5
 8007848:	d0f5      	beq.n	8007836 <__ieee754_sqrt+0x32>
 800784a:	2100      	movs	r1, #0
 800784c:	428c      	cmp	r4, r1
 800784e:	d100      	bne.n	8007852 <__ieee754_sqrt+0x4e>
 8007850:	e09f      	b.n	8007992 <__ieee754_sqrt+0x18e>
 8007852:	002a      	movs	r2, r5
 8007854:	0023      	movs	r3, r4
 8007856:	0028      	movs	r0, r5
 8007858:	0021      	movs	r1, r4
 800785a:	f7fa f973 	bl	8001b44 <__aeabi_dsub>
 800785e:	0002      	movs	r2, r0
 8007860:	000b      	movs	r3, r1
 8007862:	f7f9 fab3 	bl	8000dcc <__aeabi_ddiv>
 8007866:	e7e4      	b.n	8007832 <__ieee754_sqrt+0x2e>
 8007868:	1521      	asrs	r1, r4, #20
 800786a:	d100      	bne.n	800786e <__ieee754_sqrt+0x6a>
 800786c:	e091      	b.n	8007992 <__ieee754_sqrt+0x18e>
 800786e:	4857      	ldr	r0, [pc, #348]	; (80079cc <__ieee754_sqrt+0x1c8>)
 8007870:	0312      	lsls	r2, r2, #12
 8007872:	180c      	adds	r4, r1, r0
 8007874:	2080      	movs	r0, #128	; 0x80
 8007876:	0b12      	lsrs	r2, r2, #12
 8007878:	0340      	lsls	r0, r0, #13
 800787a:	4310      	orrs	r0, r2
 800787c:	07c9      	lsls	r1, r1, #31
 800787e:	d403      	bmi.n	8007888 <__ieee754_sqrt+0x84>
 8007880:	0fda      	lsrs	r2, r3, #31
 8007882:	0040      	lsls	r0, r0, #1
 8007884:	1810      	adds	r0, r2, r0
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	2500      	movs	r5, #0
 800788a:	1062      	asrs	r2, r4, #1
 800788c:	0040      	lsls	r0, r0, #1
 800788e:	2480      	movs	r4, #128	; 0x80
 8007890:	9205      	str	r2, [sp, #20]
 8007892:	0fda      	lsrs	r2, r3, #31
 8007894:	1812      	adds	r2, r2, r0
 8007896:	0029      	movs	r1, r5
 8007898:	2016      	movs	r0, #22
 800789a:	005b      	lsls	r3, r3, #1
 800789c:	03a4      	lsls	r4, r4, #14
 800789e:	190e      	adds	r6, r1, r4
 80078a0:	4296      	cmp	r6, r2
 80078a2:	dc02      	bgt.n	80078aa <__ieee754_sqrt+0xa6>
 80078a4:	1931      	adds	r1, r6, r4
 80078a6:	1b92      	subs	r2, r2, r6
 80078a8:	192d      	adds	r5, r5, r4
 80078aa:	0fde      	lsrs	r6, r3, #31
 80078ac:	0052      	lsls	r2, r2, #1
 80078ae:	3801      	subs	r0, #1
 80078b0:	18b2      	adds	r2, r6, r2
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	0864      	lsrs	r4, r4, #1
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d1f1      	bne.n	800789e <__ieee754_sqrt+0x9a>
 80078ba:	2620      	movs	r6, #32
 80078bc:	2780      	movs	r7, #128	; 0x80
 80078be:	0004      	movs	r4, r0
 80078c0:	9604      	str	r6, [sp, #16]
 80078c2:	063f      	lsls	r7, r7, #24
 80078c4:	183e      	adds	r6, r7, r0
 80078c6:	46b4      	mov	ip, r6
 80078c8:	428a      	cmp	r2, r1
 80078ca:	dc02      	bgt.n	80078d2 <__ieee754_sqrt+0xce>
 80078cc:	d114      	bne.n	80078f8 <__ieee754_sqrt+0xf4>
 80078ce:	429e      	cmp	r6, r3
 80078d0:	d812      	bhi.n	80078f8 <__ieee754_sqrt+0xf4>
 80078d2:	4660      	mov	r0, ip
 80078d4:	4666      	mov	r6, ip
 80078d6:	19c0      	adds	r0, r0, r7
 80078d8:	9100      	str	r1, [sp, #0]
 80078da:	2e00      	cmp	r6, #0
 80078dc:	da03      	bge.n	80078e6 <__ieee754_sqrt+0xe2>
 80078de:	43c6      	mvns	r6, r0
 80078e0:	0ff6      	lsrs	r6, r6, #31
 80078e2:	198e      	adds	r6, r1, r6
 80078e4:	9600      	str	r6, [sp, #0]
 80078e6:	1a52      	subs	r2, r2, r1
 80078e8:	4563      	cmp	r3, ip
 80078ea:	4189      	sbcs	r1, r1
 80078ec:	4249      	negs	r1, r1
 80078ee:	1a52      	subs	r2, r2, r1
 80078f0:	4661      	mov	r1, ip
 80078f2:	1a5b      	subs	r3, r3, r1
 80078f4:	9900      	ldr	r1, [sp, #0]
 80078f6:	19e4      	adds	r4, r4, r7
 80078f8:	0fde      	lsrs	r6, r3, #31
 80078fa:	0052      	lsls	r2, r2, #1
 80078fc:	18b2      	adds	r2, r6, r2
 80078fe:	9e04      	ldr	r6, [sp, #16]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	3e01      	subs	r6, #1
 8007904:	087f      	lsrs	r7, r7, #1
 8007906:	9604      	str	r6, [sp, #16]
 8007908:	2e00      	cmp	r6, #0
 800790a:	d1db      	bne.n	80078c4 <__ieee754_sqrt+0xc0>
 800790c:	431a      	orrs	r2, r3
 800790e:	d01f      	beq.n	8007950 <__ieee754_sqrt+0x14c>
 8007910:	4e2f      	ldr	r6, [pc, #188]	; (80079d0 <__ieee754_sqrt+0x1cc>)
 8007912:	4f30      	ldr	r7, [pc, #192]	; (80079d4 <__ieee754_sqrt+0x1d0>)
 8007914:	6830      	ldr	r0, [r6, #0]
 8007916:	6871      	ldr	r1, [r6, #4]
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	9200      	str	r2, [sp, #0]
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	6832      	ldr	r2, [r6, #0]
 8007922:	6873      	ldr	r3, [r6, #4]
 8007924:	9202      	str	r2, [sp, #8]
 8007926:	9303      	str	r3, [sp, #12]
 8007928:	9a00      	ldr	r2, [sp, #0]
 800792a:	9b01      	ldr	r3, [sp, #4]
 800792c:	f7fa f90a 	bl	8001b44 <__aeabi_dsub>
 8007930:	0002      	movs	r2, r0
 8007932:	000b      	movs	r3, r1
 8007934:	9802      	ldr	r0, [sp, #8]
 8007936:	9903      	ldr	r1, [sp, #12]
 8007938:	f7f8 fd8c 	bl	8000454 <__aeabi_dcmple>
 800793c:	2800      	cmp	r0, #0
 800793e:	d007      	beq.n	8007950 <__ieee754_sqrt+0x14c>
 8007940:	6830      	ldr	r0, [r6, #0]
 8007942:	6871      	ldr	r1, [r6, #4]
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	1c67      	adds	r7, r4, #1
 800794a:	d127      	bne.n	800799c <__ieee754_sqrt+0x198>
 800794c:	9c04      	ldr	r4, [sp, #16]
 800794e:	3501      	adds	r5, #1
 8007950:	4b21      	ldr	r3, [pc, #132]	; (80079d8 <__ieee754_sqrt+0x1d4>)
 8007952:	1069      	asrs	r1, r5, #1
 8007954:	18c9      	adds	r1, r1, r3
 8007956:	0864      	lsrs	r4, r4, #1
 8007958:	07ed      	lsls	r5, r5, #31
 800795a:	d502      	bpl.n	8007962 <__ieee754_sqrt+0x15e>
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	061b      	lsls	r3, r3, #24
 8007960:	431c      	orrs	r4, r3
 8007962:	9b05      	ldr	r3, [sp, #20]
 8007964:	0025      	movs	r5, r4
 8007966:	0518      	lsls	r0, r3, #20
 8007968:	1843      	adds	r3, r0, r1
 800796a:	001c      	movs	r4, r3
 800796c:	e763      	b.n	8007836 <__ieee754_sqrt+0x32>
 800796e:	0ada      	lsrs	r2, r3, #11
 8007970:	3815      	subs	r0, #21
 8007972:	055b      	lsls	r3, r3, #21
 8007974:	2a00      	cmp	r2, #0
 8007976:	d0fa      	beq.n	800796e <__ieee754_sqrt+0x16a>
 8007978:	2480      	movs	r4, #128	; 0x80
 800797a:	0364      	lsls	r4, r4, #13
 800797c:	4222      	tst	r2, r4
 800797e:	d00a      	beq.n	8007996 <__ieee754_sqrt+0x192>
 8007980:	2420      	movs	r4, #32
 8007982:	001e      	movs	r6, r3
 8007984:	1a64      	subs	r4, r4, r1
 8007986:	40e6      	lsrs	r6, r4
 8007988:	1e4d      	subs	r5, r1, #1
 800798a:	408b      	lsls	r3, r1
 800798c:	4332      	orrs	r2, r6
 800798e:	1b41      	subs	r1, r0, r5
 8007990:	e76d      	b.n	800786e <__ieee754_sqrt+0x6a>
 8007992:	2000      	movs	r0, #0
 8007994:	e7ee      	b.n	8007974 <__ieee754_sqrt+0x170>
 8007996:	0052      	lsls	r2, r2, #1
 8007998:	3101      	adds	r1, #1
 800799a:	e7ef      	b.n	800797c <__ieee754_sqrt+0x178>
 800799c:	f7f8 feb6 	bl	800070c <__aeabi_dadd>
 80079a0:	6877      	ldr	r7, [r6, #4]
 80079a2:	6836      	ldr	r6, [r6, #0]
 80079a4:	0002      	movs	r2, r0
 80079a6:	000b      	movs	r3, r1
 80079a8:	0030      	movs	r0, r6
 80079aa:	0039      	movs	r1, r7
 80079ac:	f7f8 fd48 	bl	8000440 <__aeabi_dcmplt>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d004      	beq.n	80079be <__ieee754_sqrt+0x1ba>
 80079b4:	3402      	adds	r4, #2
 80079b6:	4263      	negs	r3, r4
 80079b8:	4163      	adcs	r3, r4
 80079ba:	18ed      	adds	r5, r5, r3
 80079bc:	e7c8      	b.n	8007950 <__ieee754_sqrt+0x14c>
 80079be:	2301      	movs	r3, #1
 80079c0:	3401      	adds	r4, #1
 80079c2:	439c      	bics	r4, r3
 80079c4:	e7c4      	b.n	8007950 <__ieee754_sqrt+0x14c>
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	7ff00000 	.word	0x7ff00000
 80079cc:	fffffc01 	.word	0xfffffc01
 80079d0:	20000080 	.word	0x20000080
 80079d4:	20000088 	.word	0x20000088
 80079d8:	3fe00000 	.word	0x3fe00000

080079dc <_init>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e2:	bc08      	pop	{r3}
 80079e4:	469e      	mov	lr, r3
 80079e6:	4770      	bx	lr

080079e8 <_fini>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr
