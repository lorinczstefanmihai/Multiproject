
Multiproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001be4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001ca0  08001ca0  00011ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cd8  08001cd8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08001cd8  08001cd8  00011cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ce0  08001ce0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ce0  08001ce0  00011ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ce4  08001ce4  00011ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000002c  08001d14  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08001d14  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000086b0  00000000  00000000  00020097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011b4  00000000  00000000  00028747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000628  00000000  00000000  00029900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c5  00000000  00000000  00029f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a155  00000000  00000000  0002a3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000876a  00000000  00000000  00044542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac33b  00000000  00000000  0004ccac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001524  00000000  00000000  000f8fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000fa50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000002c 	.word	0x2000002c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08001c88 	.word	0x08001c88

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000030 	.word	0x20000030
 8000100:	08001c88 	.word	0x08001c88

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SysTick_Handler>:

#include "main.h"


void SysTick_Handler (void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800044c:	f000 f998 	bl	8000780 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000450:	f000 fa66 	bl	8000920 <HAL_SYSTICK_IRQHandler>
}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <main>:

char start_console_message[30] = "---- STM32 RUNNNING ----";
char loading_console_message[40] = "GPS MODULE IS SEARCHING SIGNAL \n\r";

int main()
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	HAL_Init();
 8000460:	f000 f924 	bl	80006ac <HAL_Init>
	UART_Init();
 8000464:	f000 f820 	bl	80004a8 <UART_Init>

	HAL_UART_Transmit(&console_output,(uint8_t*)&start_console_message, 24, HAL_UART_TIMEOUT_VALUE);
 8000468:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <main+0x38>)
 800046a:	490b      	ldr	r1, [pc, #44]	; (8000498 <main+0x3c>)
 800046c:	480b      	ldr	r0, [pc, #44]	; (800049c <main+0x40>)
 800046e:	2218      	movs	r2, #24
 8000470:	f000 fcd2 	bl	8000e18 <HAL_UART_Transmit>


	while(1)
	{
		if(HAL_UART_Receive(&uart_gps,(uint8_t*)&data, 1, 100) == HAL_OK)
 8000474:	490a      	ldr	r1, [pc, #40]	; (80004a0 <main+0x44>)
 8000476:	480b      	ldr	r0, [pc, #44]	; (80004a4 <main+0x48>)
 8000478:	2364      	movs	r3, #100	; 0x64
 800047a:	2201      	movs	r2, #1
 800047c:	f000 fd70 	bl	8000f60 <HAL_UART_Receive>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d1f7      	bne.n	8000474 <main+0x18>
			HAL_UART_Transmit(&console_output, (uint8_t*)&data, 1, HAL_UART_TIMEOUT_VALUE);
 8000484:	4b03      	ldr	r3, [pc, #12]	; (8000494 <main+0x38>)
 8000486:	4906      	ldr	r1, [pc, #24]	; (80004a0 <main+0x44>)
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <main+0x40>)
 800048a:	2201      	movs	r2, #1
 800048c:	f000 fcc4 	bl	8000e18 <HAL_UART_Transmit>
		if(HAL_UART_Receive(&uart_gps,(uint8_t*)&data, 1, 100) == HAL_OK)
 8000490:	e7f0      	b.n	8000474 <main+0x18>
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	01ffffff 	.word	0x01ffffff
 8000498:	20000000 	.word	0x20000000
 800049c:	20000048 	.word	0x20000048
 80004a0:	20000170 	.word	0x20000170
 80004a4:	200000dc 	.word	0x200000dc

080004a8 <UART_Init>:
	}

}

void UART_Init()
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	console_output.Instance = USART2;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <UART_Init+0x84>)
 80004ae:	4a20      	ldr	r2, [pc, #128]	; (8000530 <UART_Init+0x88>)
 80004b0:	601a      	str	r2, [r3, #0]
	console_output.Init.BaudRate = 115200;
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <UART_Init+0x84>)
 80004b4:	22e1      	movs	r2, #225	; 0xe1
 80004b6:	0252      	lsls	r2, r2, #9
 80004b8:	605a      	str	r2, [r3, #4]
	console_output.Init.Mode = UART_MODE_TX;
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <UART_Init+0x84>)
 80004bc:	2208      	movs	r2, #8
 80004be:	615a      	str	r2, [r3, #20]
	console_output.Init.Parity = UART_PARITY_NONE;
 80004c0:	4b1a      	ldr	r3, [pc, #104]	; (800052c <UART_Init+0x84>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	611a      	str	r2, [r3, #16]
	console_output.Init.StopBits = UART_STOPBITS_1;
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <UART_Init+0x84>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
	console_output.Init.WordLength = UART_WORDLENGTH_8B;
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <UART_Init+0x84>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
	console_output.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <UART_Init+0x84>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&console_output) != HAL_OK)
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <UART_Init+0x84>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fc46 	bl	8000d6c <HAL_UART_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <UART_Init+0x40>
	{
		Error_handler();
 80004e4:	f000 f82a 	bl	800053c <Error_handler>
	}

	uart_gps.Instance = USART1;
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <UART_Init+0x8c>)
 80004ea:	4a13      	ldr	r2, [pc, #76]	; (8000538 <UART_Init+0x90>)
 80004ec:	601a      	str	r2, [r3, #0]
	uart_gps.Init.BaudRate = 9600;
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <UART_Init+0x8c>)
 80004f0:	2296      	movs	r2, #150	; 0x96
 80004f2:	0192      	lsls	r2, r2, #6
 80004f4:	605a      	str	r2, [r3, #4]
	uart_gps.Init.Mode = UART_MODE_TX_RX;
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <UART_Init+0x8c>)
 80004f8:	220c      	movs	r2, #12
 80004fa:	615a      	str	r2, [r3, #20]
	uart_gps.Init.Parity = UART_PARITY_NONE;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <UART_Init+0x8c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
	uart_gps.Init.StopBits = UART_STOPBITS_1;
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <UART_Init+0x8c>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
	uart_gps.Init.WordLength = UART_WORDLENGTH_8B;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <UART_Init+0x8c>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
	uart_gps.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <UART_Init+0x8c>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&uart_gps) != HAL_OK)
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <UART_Init+0x8c>)
 8000516:	0018      	movs	r0, r3
 8000518:	f000 fc28 	bl	8000d6c <HAL_UART_Init>
 800051c:	1e03      	subs	r3, r0, #0
 800051e:	d001      	beq.n	8000524 <UART_Init+0x7c>
	{
		Error_handler();
 8000520:	f000 f80c 	bl	800053c <Error_handler>
	}
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	20000048 	.word	0x20000048
 8000530:	40004400 	.word	0x40004400
 8000534:	200000dc 	.word	0x200000dc
 8000538:	40013800 	.word	0x40013800

0800053c <Error_handler>:

void Error_handler()
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	while(1);
 8000540:	e7fe      	b.n	8000540 <Error_handler+0x4>
	...

08000544 <HAL_MspInit>:
 *      Author: lorin
 */
#include "main.h"

void HAL_MspInit(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor


	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <HAL_MspInit+0x18>)
 800054a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <HAL_MspInit+0x18>)
 800054e:	21e0      	movs	r1, #224	; 0xe0
 8000550:	02c9      	lsls	r1, r1, #11
 8000552:	430a      	orrs	r2, r1
 8000554:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	e000ed00 	.word	0xe000ed00

08000560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b08d      	sub	sp, #52	; 0x34
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;

  /********************enable clocks********************/

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b36      	ldr	r3, [pc, #216]	; (8000644 <HAL_UART_MspInit+0xe4>)
 800056a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800056c:	4b35      	ldr	r3, [pc, #212]	; (8000644 <HAL_UART_MspInit+0xe4>)
 800056e:	2101      	movs	r1, #1
 8000570:	430a      	orrs	r2, r1
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
 8000574:	4b33      	ldr	r3, [pc, #204]	; (8000644 <HAL_UART_MspInit+0xe4>)
 8000576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000578:	2201      	movs	r2, #1
 800057a:	4013      	ands	r3, r2
 800057c:	61bb      	str	r3, [r7, #24]
 800057e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000580:	4b30      	ldr	r3, [pc, #192]	; (8000644 <HAL_UART_MspInit+0xe4>)
 8000582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000584:	4b2f      	ldr	r3, [pc, #188]	; (8000644 <HAL_UART_MspInit+0xe4>)
 8000586:	2104      	movs	r1, #4
 8000588:	430a      	orrs	r2, r1
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
 800058c:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <HAL_UART_MspInit+0xe4>)
 800058e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000590:	2204      	movs	r2, #4
 8000592:	4013      	ands	r3, r2
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	697b      	ldr	r3, [r7, #20]

  __HAL_RCC_USART1_CLK_ENABLE();
 8000598:	4b2a      	ldr	r3, [pc, #168]	; (8000644 <HAL_UART_MspInit+0xe4>)
 800059a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800059c:	4b29      	ldr	r3, [pc, #164]	; (8000644 <HAL_UART_MspInit+0xe4>)
 800059e:	2180      	movs	r1, #128	; 0x80
 80005a0:	01c9      	lsls	r1, r1, #7
 80005a2:	430a      	orrs	r2, r1
 80005a4:	641a      	str	r2, [r3, #64]	; 0x40
 80005a6:	4b27      	ldr	r3, [pc, #156]	; (8000644 <HAL_UART_MspInit+0xe4>)
 80005a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	01db      	lsls	r3, r3, #7
 80005ae:	4013      	ands	r3, r2
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_USART2_CLK_ENABLE();
 80005b4:	4b23      	ldr	r3, [pc, #140]	; (8000644 <HAL_UART_MspInit+0xe4>)
 80005b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <HAL_UART_MspInit+0xe4>)
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	0289      	lsls	r1, r1, #10
 80005be:	430a      	orrs	r2, r1
 80005c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <HAL_UART_MspInit+0xe4>)
 80005c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	029b      	lsls	r3, r3, #10
 80005ca:	4013      	ands	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]

  /********************pin muxing***********************/

  /* UART TX CONSOLE */
  gpio_uart.Pin = GPIO_PIN_2;
 80005d0:	241c      	movs	r4, #28
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2204      	movs	r2, #4
 80005d6:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2202      	movs	r2, #2
 80005dc:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART2;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2201      	movs	r2, #1
 80005e2:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 80005e4:	193b      	adds	r3, r7, r4
 80005e6:	2201      	movs	r2, #1
 80005e8:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	2202      	movs	r2, #2
 80005ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 80005f0:	193a      	adds	r2, r7, r4
 80005f2:	23a0      	movs	r3, #160	; 0xa0
 80005f4:	05db      	lsls	r3, r3, #23
 80005f6:	0011      	movs	r1, r2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 f99d 	bl	8000938 <HAL_GPIO_Init>

  /* UART TX GPS */
  gpio_uart.Pin = GPIO_PIN_4;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2210      	movs	r2, #16
 8000602:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2202      	movs	r2, #2
 8000608:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART1;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2201      	movs	r2, #1
 800060e:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2201      	movs	r2, #1
 8000614:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8000616:	193b      	adds	r3, r7, r4
 8000618:	2202      	movs	r2, #2
 800061a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 800061c:	193b      	adds	r3, r7, r4
 800061e:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <HAL_UART_MspInit+0xe8>)
 8000620:	0019      	movs	r1, r3
 8000622:	0010      	movs	r0, r2
 8000624:	f000 f988 	bl	8000938 <HAL_GPIO_Init>

  /* UART RX GPS */
  gpio_uart.Pin = GPIO_PIN_5;
 8000628:	0021      	movs	r1, r4
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2220      	movs	r2, #32
 800062e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 8000630:	187b      	adds	r3, r7, r1
 8000632:	4a05      	ldr	r2, [pc, #20]	; (8000648 <HAL_UART_MspInit+0xe8>)
 8000634:	0019      	movs	r1, r3
 8000636:	0010      	movs	r0, r2
 8000638:	f000 f97e 	bl	8000938 <HAL_GPIO_Init>

}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b00d      	add	sp, #52	; 0x34
 8000642:	bd90      	pop	{r4, r7, pc}
 8000644:	40021000 	.word	0x40021000
 8000648:	50000800 	.word	0x50000800

0800064c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000658:	480d      	ldr	r0, [pc, #52]	; (8000690 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800065a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800065c:	f7ff fff6 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <LoopForever+0x6>)
  ldr r1, =_edata
 8000662:	490d      	ldr	r1, [pc, #52]	; (8000698 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000664:	4a0d      	ldr	r2, [pc, #52]	; (800069c <LoopForever+0xe>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000668:	e002      	b.n	8000670 <LoopCopyDataInit>

0800066a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800066a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800066c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066e:	3304      	adds	r3, #4

08000670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000674:	d3f9      	bcc.n	800066a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000678:	4c0a      	ldr	r4, [pc, #40]	; (80006a4 <LoopForever+0x16>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800067c:	e001      	b.n	8000682 <LoopFillZerobss>

0800067e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000680:	3204      	adds	r2, #4

08000682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000684:	d3fb      	bcc.n	800067e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000686:	f001 fadb 	bl	8001c40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800068a:	f7ff fee7 	bl	800045c <main>

0800068e <LoopForever>:

LoopForever:
  b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   r0, =_estack
 8000690:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000698:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800069c:	08001ce8 	.word	0x08001ce8
  ldr r2, =_sbss
 80006a0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80006a4:	20000178 	.word	0x20000178

080006a8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_COMP_IRQHandler>
	...

080006ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <HAL_Init+0x3c>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <HAL_Init+0x3c>)
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	0049      	lsls	r1, r1, #1
 80006c2:	430a      	orrs	r2, r1
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006c6:	2000      	movs	r0, #0
 80006c8:	f000 f810 	bl	80006ec <HAL_InitTick>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d003      	beq.n	80006d8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80006d0:	1dfb      	adds	r3, r7, #7
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	e001      	b.n	80006dc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80006d8:	f7ff ff34 	bl	8000544 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006dc:	1dfb      	adds	r3, r7, #7
 80006de:	781b      	ldrb	r3, [r3, #0]
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b002      	add	sp, #8
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006f4:	230f      	movs	r3, #15
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <HAL_InitTick+0x88>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d02b      	beq.n	800075c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <HAL_InitTick+0x8c>)
 8000706:	681c      	ldr	r4, [r3, #0]
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <HAL_InitTick+0x88>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	0019      	movs	r1, r3
 800070e:	23fa      	movs	r3, #250	; 0xfa
 8000710:	0098      	lsls	r0, r3, #2
 8000712:	f7ff fcf7 	bl	8000104 <__udivsi3>
 8000716:	0003      	movs	r3, r0
 8000718:	0019      	movs	r1, r3
 800071a:	0020      	movs	r0, r4
 800071c:	f7ff fcf2 	bl	8000104 <__udivsi3>
 8000720:	0003      	movs	r3, r0
 8000722:	0018      	movs	r0, r3
 8000724:	f000 f8ef 	bl	8000906 <HAL_SYSTICK_Config>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d112      	bne.n	8000752 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d80a      	bhi.n	8000748 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	2301      	movs	r3, #1
 8000736:	425b      	negs	r3, r3
 8000738:	2200      	movs	r2, #0
 800073a:	0018      	movs	r0, r3
 800073c:	f000 f8ce 	bl	80008dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_InitTick+0x90>)
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	e00d      	b.n	8000764 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000748:	230f      	movs	r3, #15
 800074a:	18fb      	adds	r3, r7, r3
 800074c:	2201      	movs	r2, #1
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	e008      	b.n	8000764 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000752:	230f      	movs	r3, #15
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
 800075a:	e003      	b.n	8000764 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800075c:	230f      	movs	r3, #15
 800075e:	18fb      	adds	r3, r7, r3
 8000760:	2201      	movs	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000764:	230f      	movs	r3, #15
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	781b      	ldrb	r3, [r3, #0]
}
 800076a:	0018      	movs	r0, r3
 800076c:	46bd      	mov	sp, r7
 800076e:	b005      	add	sp, #20
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	20000028 	.word	0x20000028
 8000778:	20000020 	.word	0x20000020
 800077c:	20000024 	.word	0x20000024

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x1c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	001a      	movs	r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x20>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	18d2      	adds	r2, r2, r3
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <HAL_IncTick+0x20>)
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000028 	.word	0x20000028
 80007a0:	20000174 	.word	0x20000174

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <HAL_GetTick+0x10>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	20000174 	.word	0x20000174

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b7f      	cmp	r3, #127	; 0x7f
 80007cc:	d828      	bhi.n	8000820 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <__NVIC_SetPriority+0xd4>)
 80007d0:	1dfb      	adds	r3, r7, #7
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	33c0      	adds	r3, #192	; 0xc0
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	589b      	ldr	r3, [r3, r2]
 80007de:	1dfa      	adds	r2, r7, #7
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	0011      	movs	r1, r2
 80007e4:	2203      	movs	r2, #3
 80007e6:	400a      	ands	r2, r1
 80007e8:	00d2      	lsls	r2, r2, #3
 80007ea:	21ff      	movs	r1, #255	; 0xff
 80007ec:	4091      	lsls	r1, r2
 80007ee:	000a      	movs	r2, r1
 80007f0:	43d2      	mvns	r2, r2
 80007f2:	401a      	ands	r2, r3
 80007f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	22ff      	movs	r2, #255	; 0xff
 80007fc:	401a      	ands	r2, r3
 80007fe:	1dfb      	adds	r3, r7, #7
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	0018      	movs	r0, r3
 8000804:	2303      	movs	r3, #3
 8000806:	4003      	ands	r3, r0
 8000808:	00db      	lsls	r3, r3, #3
 800080a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800080c:	481f      	ldr	r0, [pc, #124]	; (800088c <__NVIC_SetPriority+0xd4>)
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	b25b      	sxtb	r3, r3
 8000814:	089b      	lsrs	r3, r3, #2
 8000816:	430a      	orrs	r2, r1
 8000818:	33c0      	adds	r3, #192	; 0xc0
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800081e:	e031      	b.n	8000884 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <__NVIC_SetPriority+0xd8>)
 8000822:	1dfb      	adds	r3, r7, #7
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	0019      	movs	r1, r3
 8000828:	230f      	movs	r3, #15
 800082a:	400b      	ands	r3, r1
 800082c:	3b08      	subs	r3, #8
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	3306      	adds	r3, #6
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	18d3      	adds	r3, r2, r3
 8000836:	3304      	adds	r3, #4
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	1dfa      	adds	r2, r7, #7
 800083c:	7812      	ldrb	r2, [r2, #0]
 800083e:	0011      	movs	r1, r2
 8000840:	2203      	movs	r2, #3
 8000842:	400a      	ands	r2, r1
 8000844:	00d2      	lsls	r2, r2, #3
 8000846:	21ff      	movs	r1, #255	; 0xff
 8000848:	4091      	lsls	r1, r2
 800084a:	000a      	movs	r2, r1
 800084c:	43d2      	mvns	r2, r2
 800084e:	401a      	ands	r2, r3
 8000850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	019b      	lsls	r3, r3, #6
 8000856:	22ff      	movs	r2, #255	; 0xff
 8000858:	401a      	ands	r2, r3
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	0018      	movs	r0, r3
 8000860:	2303      	movs	r3, #3
 8000862:	4003      	ands	r3, r0
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <__NVIC_SetPriority+0xd8>)
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	001c      	movs	r4, r3
 8000870:	230f      	movs	r3, #15
 8000872:	4023      	ands	r3, r4
 8000874:	3b08      	subs	r3, #8
 8000876:	089b      	lsrs	r3, r3, #2
 8000878:	430a      	orrs	r2, r1
 800087a:	3306      	adds	r3, #6
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	18c3      	adds	r3, r0, r3
 8000880:	3304      	adds	r3, #4
 8000882:	601a      	str	r2, [r3, #0]
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b003      	add	sp, #12
 800088a:	bd90      	pop	{r4, r7, pc}
 800088c:	e000e100 	.word	0xe000e100
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	1e5a      	subs	r2, r3, #1
 80008a0:	2380      	movs	r3, #128	; 0x80
 80008a2:	045b      	lsls	r3, r3, #17
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d301      	bcc.n	80008ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a8:	2301      	movs	r3, #1
 80008aa:	e010      	b.n	80008ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <SysTick_Config+0x44>)
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	3a01      	subs	r2, #1
 80008b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b4:	2301      	movs	r3, #1
 80008b6:	425b      	negs	r3, r3
 80008b8:	2103      	movs	r1, #3
 80008ba:	0018      	movs	r0, r3
 80008bc:	f7ff ff7c 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <SysTick_Config+0x44>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <SysTick_Config+0x44>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	0018      	movs	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	210f      	movs	r1, #15
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	1c02      	adds	r2, r0, #0
 80008ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	b25b      	sxtb	r3, r3
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b004      	add	sp, #16
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ffbf 	bl	8000894 <SysTick_Config>
 8000916:	0003      	movs	r3, r0
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000924:	f000 f803 	bl	800092e <HAL_SYSTICK_Callback>
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000946:	e14d      	b.n	8000be4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	4091      	lsls	r1, r2
 8000952:	000a      	movs	r2, r1
 8000954:	4013      	ands	r3, r2
 8000956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d100      	bne.n	8000960 <HAL_GPIO_Init+0x28>
 800095e:	e13e      	b.n	8000bde <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	2203      	movs	r2, #3
 8000966:	4013      	ands	r3, r2
 8000968:	2b01      	cmp	r3, #1
 800096a:	d005      	beq.n	8000978 <HAL_GPIO_Init+0x40>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2203      	movs	r2, #3
 8000972:	4013      	ands	r3, r2
 8000974:	2b02      	cmp	r3, #2
 8000976:	d130      	bne.n	80009da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	409a      	lsls	r2, r3
 8000986:	0013      	movs	r3, r2
 8000988:	43da      	mvns	r2, r3
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	4013      	ands	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	68da      	ldr	r2, [r3, #12]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	409a      	lsls	r2, r3
 800099a:	0013      	movs	r3, r2
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4313      	orrs	r3, r2
 80009a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ae:	2201      	movs	r2, #1
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	43da      	mvns	r2, r3
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	2201      	movs	r2, #1
 80009c6:	401a      	ands	r2, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	409a      	lsls	r2, r3
 80009cc:	0013      	movs	r3, r2
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2203      	movs	r2, #3
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d017      	beq.n	8000a16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	409a      	lsls	r2, r3
 8000a08:	0013      	movs	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d123      	bne.n	8000a6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	08da      	lsrs	r2, r3, #3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	3208      	adds	r2, #8
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	58d3      	ldr	r3, [r2, r3]
 8000a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	2207      	movs	r2, #7
 8000a34:	4013      	ands	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	220f      	movs	r2, #15
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	0013      	movs	r3, r2
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	691a      	ldr	r2, [r3, #16]
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	2107      	movs	r1, #7
 8000a4e:	400b      	ands	r3, r1
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	409a      	lsls	r2, r3
 8000a54:	0013      	movs	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	08da      	lsrs	r2, r3, #3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3208      	adds	r2, #8
 8000a64:	0092      	lsls	r2, r2, #2
 8000a66:	6939      	ldr	r1, [r7, #16]
 8000a68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2203      	movs	r2, #3
 8000a76:	409a      	lsls	r2, r3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	2203      	movs	r2, #3
 8000a88:	401a      	ands	r2, r3
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	409a      	lsls	r2, r3
 8000a90:	0013      	movs	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685a      	ldr	r2, [r3, #4]
 8000aa2:	23c0      	movs	r3, #192	; 0xc0
 8000aa4:	029b      	lsls	r3, r3, #10
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d100      	bne.n	8000aac <HAL_GPIO_Init+0x174>
 8000aaa:	e098      	b.n	8000bde <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000aac:	4a53      	ldr	r2, [pc, #332]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3318      	adds	r3, #24
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	589b      	ldr	r3, [r3, r2]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	2203      	movs	r2, #3
 8000abe:	4013      	ands	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	220f      	movs	r2, #15
 8000ac4:	409a      	lsls	r2, r3
 8000ac6:	0013      	movs	r3, r2
 8000ac8:	43da      	mvns	r2, r3
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4013      	ands	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	23a0      	movs	r3, #160	; 0xa0
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d019      	beq.n	8000b0e <HAL_GPIO_Init+0x1d6>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a48      	ldr	r2, [pc, #288]	; (8000c00 <HAL_GPIO_Init+0x2c8>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d013      	beq.n	8000b0a <HAL_GPIO_Init+0x1d2>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a47      	ldr	r2, [pc, #284]	; (8000c04 <HAL_GPIO_Init+0x2cc>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d00d      	beq.n	8000b06 <HAL_GPIO_Init+0x1ce>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a46      	ldr	r2, [pc, #280]	; (8000c08 <HAL_GPIO_Init+0x2d0>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d007      	beq.n	8000b02 <HAL_GPIO_Init+0x1ca>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a45      	ldr	r2, [pc, #276]	; (8000c0c <HAL_GPIO_Init+0x2d4>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d101      	bne.n	8000afe <HAL_GPIO_Init+0x1c6>
 8000afa:	2304      	movs	r3, #4
 8000afc:	e008      	b.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000afe:	2305      	movs	r3, #5
 8000b00:	e006      	b.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b02:	2303      	movs	r3, #3
 8000b04:	e004      	b.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b06:	2302      	movs	r3, #2
 8000b08:	e002      	b.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	2103      	movs	r1, #3
 8000b14:	400a      	ands	r2, r1
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000b20:	4936      	ldr	r1, [pc, #216]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	3318      	adds	r3, #24
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b2e:	4b33      	ldr	r3, [pc, #204]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	43da      	mvns	r2, r3
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	035b      	lsls	r3, r3, #13
 8000b46:	4013      	ands	r3, r2
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000b58:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	43da      	mvns	r2, r3
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	039b      	lsls	r3, r3, #14
 8000b70:	4013      	ands	r3, r2
 8000b72:	d003      	beq.n	8000b7c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b82:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000b84:	2384      	movs	r3, #132	; 0x84
 8000b86:	58d3      	ldr	r3, [r2, r3]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	43da      	mvns	r2, r3
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	029b      	lsls	r3, r3, #10
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	d003      	beq.n	8000ba8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ba8:	4914      	ldr	r1, [pc, #80]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000baa:	2284      	movs	r2, #132	; 0x84
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000bb0:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000bb2:	2380      	movs	r3, #128	; 0x80
 8000bb4:	58d3      	ldr	r3, [r2, r3]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bd6:	4909      	ldr	r1, [pc, #36]	; (8000bfc <HAL_GPIO_Init+0x2c4>)
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	40da      	lsrs	r2, r3
 8000bec:	1e13      	subs	r3, r2, #0
 8000bee:	d000      	beq.n	8000bf2 <HAL_GPIO_Init+0x2ba>
 8000bf0:	e6aa      	b.n	8000948 <HAL_GPIO_Init+0x10>
  }
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b006      	add	sp, #24
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021800 	.word	0x40021800
 8000c00:	50000400 	.word	0x50000400
 8000c04:	50000800 	.word	0x50000800
 8000c08:	50000c00 	.word	0x50000c00
 8000c0c:	50001000 	.word	0x50001000

08000c10 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000c16:	689a      	ldr	r2, [r3, #8]
 8000c18:	23e0      	movs	r3, #224	; 0xe0
 8000c1a:	01db      	lsls	r3, r3, #7
 8000c1c:	4013      	ands	r3, r2
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c2e:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	2238      	movs	r2, #56	; 0x38
 8000c34:	4013      	ands	r3, r2
 8000c36:	d10f      	bne.n	8000c58 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	0adb      	lsrs	r3, r3, #11
 8000c3e:	2207      	movs	r2, #7
 8000c40:	4013      	ands	r3, r2
 8000c42:	2201      	movs	r2, #1
 8000c44:	409a      	lsls	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8000c4a:	6839      	ldr	r1, [r7, #0]
 8000c4c:	4835      	ldr	r0, [pc, #212]	; (8000d24 <HAL_RCC_GetSysClockFreq+0xfc>)
 8000c4e:	f7ff fa59 	bl	8000104 <__udivsi3>
 8000c52:	0003      	movs	r3, r0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	e05d      	b.n	8000d14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c58:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2238      	movs	r2, #56	; 0x38
 8000c5e:	4013      	ands	r3, r2
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d102      	bne.n	8000c6a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000c64:	4b30      	ldr	r3, [pc, #192]	; (8000d28 <HAL_RCC_GetSysClockFreq+0x100>)
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	e054      	b.n	8000d14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c6a:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	2238      	movs	r2, #56	; 0x38
 8000c70:	4013      	ands	r3, r2
 8000c72:	2b10      	cmp	r3, #16
 8000c74:	d138      	bne.n	8000ce8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	091b      	lsrs	r3, r3, #4
 8000c86:	2207      	movs	r2, #7
 8000c88:	4013      	ands	r3, r2
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d10d      	bne.n	8000cb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	4824      	ldr	r0, [pc, #144]	; (8000d28 <HAL_RCC_GetSysClockFreq+0x100>)
 8000c98:	f7ff fa34 	bl	8000104 <__udivsi3>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0a1b      	lsrs	r3, r3, #8
 8000ca6:	227f      	movs	r2, #127	; 0x7f
 8000ca8:	4013      	ands	r3, r2
 8000caa:	434b      	muls	r3, r1
 8000cac:	617b      	str	r3, [r7, #20]
        break;
 8000cae:	e00d      	b.n	8000ccc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	481c      	ldr	r0, [pc, #112]	; (8000d24 <HAL_RCC_GetSysClockFreq+0xfc>)
 8000cb4:	f7ff fa26 	bl	8000104 <__udivsi3>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	0019      	movs	r1, r3
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	227f      	movs	r2, #127	; 0x7f
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	434b      	muls	r3, r1
 8000cc8:	617b      	str	r3, [r7, #20]
        break;
 8000cca:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0f5b      	lsrs	r3, r3, #29
 8000cd2:	2207      	movs	r2, #7
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	6978      	ldr	r0, [r7, #20]
 8000cde:	f7ff fa11 	bl	8000104 <__udivsi3>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	e015      	b.n	8000d14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	2238      	movs	r2, #56	; 0x38
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b20      	cmp	r3, #32
 8000cf2:	d103      	bne.n	8000cfc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	021b      	lsls	r3, r3, #8
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	e00b      	b.n	8000d14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8000cfc:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_RCC_GetSysClockFreq+0xf8>)
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	2238      	movs	r2, #56	; 0x38
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b18      	cmp	r3, #24
 8000d06:	d103      	bne.n	8000d10 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8000d08:	23fa      	movs	r3, #250	; 0xfa
 8000d0a:	01db      	lsls	r3, r3, #7
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	e001      	b.n	8000d14 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8000d14:	693b      	ldr	r3, [r7, #16]
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b006      	add	sp, #24
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000
 8000d24:	00f42400 	.word	0x00f42400
 8000d28:	007a1200 	.word	0x007a1200

08000d2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000020 	.word	0x20000020

08000d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d40:	b5b0      	push	{r4, r5, r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8000d44:	f7ff fff2 	bl	8000d2c <HAL_RCC_GetHCLKFreq>
 8000d48:	0004      	movs	r4, r0
 8000d4a:	f7ff ff61 	bl	8000c10 <LL_RCC_GetAPB1Prescaler>
 8000d4e:	0003      	movs	r3, r0
 8000d50:	0b1a      	lsrs	r2, r3, #12
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d54:	0092      	lsls	r2, r2, #2
 8000d56:	58d3      	ldr	r3, [r2, r3]
 8000d58:	221f      	movs	r2, #31
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	40dc      	lsrs	r4, r3
 8000d5e:	0023      	movs	r3, r4
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bdb0      	pop	{r4, r5, r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	08001ca0 	.word	0x08001ca0

08000d6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e046      	b.n	8000e0c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2288      	movs	r2, #136	; 0x88
 8000d82:	589b      	ldr	r3, [r3, r2]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d107      	bne.n	8000d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2284      	movs	r2, #132	; 0x84
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	0018      	movs	r0, r3
 8000d94:	f7ff fbe4 	bl	8000560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2288      	movs	r2, #136	; 0x88
 8000d9c:	2124      	movs	r1, #36	; 0x24
 8000d9e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2101      	movs	r1, #1
 8000dac:	438a      	bics	r2, r1
 8000dae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 fd0c 	bl	80017d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 f9b2 	bl	800112c <UART_SetConfig>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d101      	bne.n	8000dd2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e01c      	b.n	8000e0c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685a      	ldr	r2, [r3, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	490d      	ldr	r1, [pc, #52]	; (8000e14 <HAL_UART_Init+0xa8>)
 8000dde:	400a      	ands	r2, r1
 8000de0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	212a      	movs	r1, #42	; 0x2a
 8000dee:	438a      	bics	r2, r1
 8000df0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 fd9b 	bl	8001940 <UART_CheckIdleState>
 8000e0a:	0003      	movs	r3, r0
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b002      	add	sp, #8
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	ffffb7ff 	.word	0xffffb7ff

08000e18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af02      	add	r7, sp, #8
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	1dbb      	adds	r3, r7, #6
 8000e26:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2288      	movs	r2, #136	; 0x88
 8000e2c:	589b      	ldr	r3, [r3, r2]
 8000e2e:	2b20      	cmp	r3, #32
 8000e30:	d000      	beq.n	8000e34 <HAL_UART_Transmit+0x1c>
 8000e32:	e090      	b.n	8000f56 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_UART_Transmit+0x2a>
 8000e3a:	1dbb      	adds	r3, r7, #6
 8000e3c:	881b      	ldrh	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e088      	b.n	8000f58 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	2380      	movs	r3, #128	; 0x80
 8000e4c:	015b      	lsls	r3, r3, #5
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d109      	bne.n	8000e66 <HAL_UART_Transmit+0x4e>
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d001      	beq.n	8000e66 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e078      	b.n	8000f58 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2290      	movs	r2, #144	; 0x90
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2288      	movs	r2, #136	; 0x88
 8000e72:	2121      	movs	r1, #33	; 0x21
 8000e74:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000e76:	f7ff fc95 	bl	80007a4 <HAL_GetTick>
 8000e7a:	0003      	movs	r3, r0
 8000e7c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1dba      	adds	r2, r7, #6
 8000e82:	2154      	movs	r1, #84	; 0x54
 8000e84:	8812      	ldrh	r2, [r2, #0]
 8000e86:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1dba      	adds	r2, r7, #6
 8000e8c:	2156      	movs	r1, #86	; 0x56
 8000e8e:	8812      	ldrh	r2, [r2, #0]
 8000e90:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	015b      	lsls	r3, r3, #5
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d108      	bne.n	8000eb0 <HAL_UART_Transmit+0x98>
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d104      	bne.n	8000eb0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	e003      	b.n	8000eb8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000eb8:	e030      	b.n	8000f1c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	f000 fde4 	bl	8001a94 <UART_WaitOnFlagUntilTimeout>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d005      	beq.n	8000edc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2288      	movs	r2, #136	; 0x88
 8000ed4:	2120      	movs	r1, #32
 8000ed6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e03d      	b.n	8000f58 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10b      	bne.n	8000efa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	05d2      	lsls	r2, r2, #23
 8000eee:	0dd2      	lsrs	r2, r2, #23
 8000ef0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	e007      	b.n	8000f0a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	3301      	adds	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2256      	movs	r2, #86	; 0x56
 8000f0e:	5a9b      	ldrh	r3, [r3, r2]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	3b01      	subs	r3, #1
 8000f14:	b299      	uxth	r1, r3
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2256      	movs	r2, #86	; 0x56
 8000f1a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2256      	movs	r2, #86	; 0x56
 8000f20:	5a9b      	ldrh	r3, [r3, r2]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1c8      	bne.n	8000eba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	68f8      	ldr	r0, [r7, #12]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	0013      	movs	r3, r2
 8000f32:	2200      	movs	r2, #0
 8000f34:	2140      	movs	r1, #64	; 0x40
 8000f36:	f000 fdad 	bl	8001a94 <UART_WaitOnFlagUntilTimeout>
 8000f3a:	1e03      	subs	r3, r0, #0
 8000f3c:	d005      	beq.n	8000f4a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2288      	movs	r2, #136	; 0x88
 8000f42:	2120      	movs	r1, #32
 8000f44:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e006      	b.n	8000f58 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2288      	movs	r2, #136	; 0x88
 8000f4e:	2120      	movs	r1, #32
 8000f50:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8000f56:	2302      	movs	r3, #2
  }
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b008      	add	sp, #32
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	1dbb      	adds	r3, r7, #6
 8000f6e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	228c      	movs	r2, #140	; 0x8c
 8000f74:	589b      	ldr	r3, [r3, r2]
 8000f76:	2b20      	cmp	r3, #32
 8000f78:	d000      	beq.n	8000f7c <HAL_UART_Receive+0x1c>
 8000f7a:	e0d0      	b.n	800111e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_UART_Receive+0x2a>
 8000f82:	1dbb      	adds	r3, r7, #6
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e0c8      	b.n	8001120 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	015b      	lsls	r3, r3, #5
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d109      	bne.n	8000fae <HAL_UART_Receive+0x4e>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d105      	bne.n	8000fae <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d001      	beq.n	8000fae <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e0b8      	b.n	8001120 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2290      	movs	r2, #144	; 0x90
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	228c      	movs	r2, #140	; 0x8c
 8000fba:	2122      	movs	r1, #34	; 0x22
 8000fbc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000fc4:	f7ff fbee 	bl	80007a4 <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1dba      	adds	r2, r7, #6
 8000fd0:	215c      	movs	r1, #92	; 0x5c
 8000fd2:	8812      	ldrh	r2, [r2, #0]
 8000fd4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1dba      	adds	r2, r7, #6
 8000fda:	215e      	movs	r1, #94	; 0x5e
 8000fdc:	8812      	ldrh	r2, [r2, #0]
 8000fde:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d10d      	bne.n	8001008 <HAL_UART_Receive+0xa8>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d104      	bne.n	8000ffe <HAL_UART_Receive+0x9e>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2260      	movs	r2, #96	; 0x60
 8000ff8:	494b      	ldr	r1, [pc, #300]	; (8001128 <HAL_UART_Receive+0x1c8>)
 8000ffa:	5299      	strh	r1, [r3, r2]
 8000ffc:	e02e      	b.n	800105c <HAL_UART_Receive+0xfc>
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2260      	movs	r2, #96	; 0x60
 8001002:	21ff      	movs	r1, #255	; 0xff
 8001004:	5299      	strh	r1, [r3, r2]
 8001006:	e029      	b.n	800105c <HAL_UART_Receive+0xfc>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10d      	bne.n	800102c <HAL_UART_Receive+0xcc>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d104      	bne.n	8001022 <HAL_UART_Receive+0xc2>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2260      	movs	r2, #96	; 0x60
 800101c:	21ff      	movs	r1, #255	; 0xff
 800101e:	5299      	strh	r1, [r3, r2]
 8001020:	e01c      	b.n	800105c <HAL_UART_Receive+0xfc>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2260      	movs	r2, #96	; 0x60
 8001026:	217f      	movs	r1, #127	; 0x7f
 8001028:	5299      	strh	r1, [r3, r2]
 800102a:	e017      	b.n	800105c <HAL_UART_Receive+0xfc>
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	055b      	lsls	r3, r3, #21
 8001034:	429a      	cmp	r2, r3
 8001036:	d10d      	bne.n	8001054 <HAL_UART_Receive+0xf4>
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d104      	bne.n	800104a <HAL_UART_Receive+0xea>
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2260      	movs	r2, #96	; 0x60
 8001044:	217f      	movs	r1, #127	; 0x7f
 8001046:	5299      	strh	r1, [r3, r2]
 8001048:	e008      	b.n	800105c <HAL_UART_Receive+0xfc>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2260      	movs	r2, #96	; 0x60
 800104e:	213f      	movs	r1, #63	; 0x3f
 8001050:	5299      	strh	r1, [r3, r2]
 8001052:	e003      	b.n	800105c <HAL_UART_Receive+0xfc>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2260      	movs	r2, #96	; 0x60
 8001058:	2100      	movs	r1, #0
 800105a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800105c:	2312      	movs	r3, #18
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	2160      	movs	r1, #96	; 0x60
 8001064:	5a52      	ldrh	r2, [r2, r1]
 8001066:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	015b      	lsls	r3, r3, #5
 8001070:	429a      	cmp	r2, r3
 8001072:	d108      	bne.n	8001086 <HAL_UART_Receive+0x126>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d104      	bne.n	8001086 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	e003      	b.n	800108e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800108e:	e03a      	b.n	8001106 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	0013      	movs	r3, r2
 800109a:	2200      	movs	r2, #0
 800109c:	2120      	movs	r1, #32
 800109e:	f000 fcf9 	bl	8001a94 <UART_WaitOnFlagUntilTimeout>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d005      	beq.n	80010b2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	228c      	movs	r2, #140	; 0x8c
 80010aa:	2120      	movs	r1, #32
 80010ac:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e036      	b.n	8001120 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10e      	bne.n	80010d6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010be:	b29b      	uxth	r3, r3
 80010c0:	2212      	movs	r2, #18
 80010c2:	18ba      	adds	r2, r7, r2
 80010c4:	8812      	ldrh	r2, [r2, #0]
 80010c6:	4013      	ands	r3, r2
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	3302      	adds	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
 80010d4:	e00e      	b.n	80010f4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2212      	movs	r2, #18
 80010e0:	18ba      	adds	r2, r7, r2
 80010e2:	8812      	ldrh	r2, [r2, #0]
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	4013      	ands	r3, r2
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3301      	adds	r3, #1
 80010f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	225e      	movs	r2, #94	; 0x5e
 80010f8:	5a9b      	ldrh	r3, [r3, r2]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b299      	uxth	r1, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	225e      	movs	r2, #94	; 0x5e
 8001104:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	225e      	movs	r2, #94	; 0x5e
 800110a:	5a9b      	ldrh	r3, [r3, r2]
 800110c:	b29b      	uxth	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1be      	bne.n	8001090 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	228c      	movs	r2, #140	; 0x8c
 8001116:	2120      	movs	r1, #32
 8001118:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800111e:	2302      	movs	r3, #2
  }
}
 8001120:	0018      	movs	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	b008      	add	sp, #32
 8001126:	bd80      	pop	{r7, pc}
 8001128:	000001ff 	.word	0x000001ff

0800112c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800112c:	b5b0      	push	{r4, r5, r7, lr}
 800112e:	b090      	sub	sp, #64	; 0x40
 8001130:	af00      	add	r7, sp, #0
 8001132:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001134:	231a      	movs	r3, #26
 8001136:	2220      	movs	r2, #32
 8001138:	189b      	adds	r3, r3, r2
 800113a:	19db      	adds	r3, r3, r7
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	431a      	orrs	r2, r3
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	431a      	orrs	r2, r3
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	4313      	orrs	r3, r2
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4ac1      	ldr	r2, [pc, #772]	; (8001464 <UART_SetConfig+0x338>)
 8001160:	4013      	ands	r3, r2
 8001162:	0019      	movs	r1, r3
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800116a:	430b      	orrs	r3, r1
 800116c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	4abc      	ldr	r2, [pc, #752]	; (8001468 <UART_SetConfig+0x33c>)
 8001176:	4013      	ands	r3, r2
 8001178:	0018      	movs	r0, r3
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	68d9      	ldr	r1, [r3, #12]
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	0003      	movs	r3, r0
 8001184:	430b      	orrs	r3, r1
 8001186:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4ab6      	ldr	r2, [pc, #728]	; (800146c <UART_SetConfig+0x340>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d009      	beq.n	80011ac <UART_SetConfig+0x80>
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4ab4      	ldr	r2, [pc, #720]	; (8001470 <UART_SetConfig+0x344>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d004      	beq.n	80011ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011a8:	4313      	orrs	r3, r2
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	4ab0      	ldr	r2, [pc, #704]	; (8001474 <UART_SetConfig+0x348>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	0019      	movs	r1, r3
 80011b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011be:	430b      	orrs	r3, r1
 80011c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	220f      	movs	r2, #15
 80011ca:	4393      	bics	r3, r2
 80011cc:	0018      	movs	r0, r3
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	0003      	movs	r3, r0
 80011d8:	430b      	orrs	r3, r1
 80011da:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4aa5      	ldr	r2, [pc, #660]	; (8001478 <UART_SetConfig+0x34c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d131      	bne.n	800124a <UART_SetConfig+0x11e>
 80011e6:	4ba5      	ldr	r3, [pc, #660]	; (800147c <UART_SetConfig+0x350>)
 80011e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ea:	2203      	movs	r2, #3
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d01d      	beq.n	800122e <UART_SetConfig+0x102>
 80011f2:	d823      	bhi.n	800123c <UART_SetConfig+0x110>
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d00c      	beq.n	8001212 <UART_SetConfig+0xe6>
 80011f8:	d820      	bhi.n	800123c <UART_SetConfig+0x110>
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <UART_SetConfig+0xd8>
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d00e      	beq.n	8001220 <UART_SetConfig+0xf4>
 8001202:	e01b      	b.n	800123c <UART_SetConfig+0x110>
 8001204:	231b      	movs	r3, #27
 8001206:	2220      	movs	r2, #32
 8001208:	189b      	adds	r3, r3, r2
 800120a:	19db      	adds	r3, r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e154      	b.n	80014bc <UART_SetConfig+0x390>
 8001212:	231b      	movs	r3, #27
 8001214:	2220      	movs	r2, #32
 8001216:	189b      	adds	r3, r3, r2
 8001218:	19db      	adds	r3, r3, r7
 800121a:	2202      	movs	r2, #2
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e14d      	b.n	80014bc <UART_SetConfig+0x390>
 8001220:	231b      	movs	r3, #27
 8001222:	2220      	movs	r2, #32
 8001224:	189b      	adds	r3, r3, r2
 8001226:	19db      	adds	r3, r3, r7
 8001228:	2204      	movs	r2, #4
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e146      	b.n	80014bc <UART_SetConfig+0x390>
 800122e:	231b      	movs	r3, #27
 8001230:	2220      	movs	r2, #32
 8001232:	189b      	adds	r3, r3, r2
 8001234:	19db      	adds	r3, r3, r7
 8001236:	2208      	movs	r2, #8
 8001238:	701a      	strb	r2, [r3, #0]
 800123a:	e13f      	b.n	80014bc <UART_SetConfig+0x390>
 800123c:	231b      	movs	r3, #27
 800123e:	2220      	movs	r2, #32
 8001240:	189b      	adds	r3, r3, r2
 8001242:	19db      	adds	r3, r3, r7
 8001244:	2210      	movs	r2, #16
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	e138      	b.n	80014bc <UART_SetConfig+0x390>
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a8c      	ldr	r2, [pc, #560]	; (8001480 <UART_SetConfig+0x354>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d131      	bne.n	80012b8 <UART_SetConfig+0x18c>
 8001254:	4b89      	ldr	r3, [pc, #548]	; (800147c <UART_SetConfig+0x350>)
 8001256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001258:	220c      	movs	r2, #12
 800125a:	4013      	ands	r3, r2
 800125c:	2b0c      	cmp	r3, #12
 800125e:	d01d      	beq.n	800129c <UART_SetConfig+0x170>
 8001260:	d823      	bhi.n	80012aa <UART_SetConfig+0x17e>
 8001262:	2b08      	cmp	r3, #8
 8001264:	d00c      	beq.n	8001280 <UART_SetConfig+0x154>
 8001266:	d820      	bhi.n	80012aa <UART_SetConfig+0x17e>
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <UART_SetConfig+0x146>
 800126c:	2b04      	cmp	r3, #4
 800126e:	d00e      	beq.n	800128e <UART_SetConfig+0x162>
 8001270:	e01b      	b.n	80012aa <UART_SetConfig+0x17e>
 8001272:	231b      	movs	r3, #27
 8001274:	2220      	movs	r2, #32
 8001276:	189b      	adds	r3, r3, r2
 8001278:	19db      	adds	r3, r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e11d      	b.n	80014bc <UART_SetConfig+0x390>
 8001280:	231b      	movs	r3, #27
 8001282:	2220      	movs	r2, #32
 8001284:	189b      	adds	r3, r3, r2
 8001286:	19db      	adds	r3, r3, r7
 8001288:	2202      	movs	r2, #2
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	e116      	b.n	80014bc <UART_SetConfig+0x390>
 800128e:	231b      	movs	r3, #27
 8001290:	2220      	movs	r2, #32
 8001292:	189b      	adds	r3, r3, r2
 8001294:	19db      	adds	r3, r3, r7
 8001296:	2204      	movs	r2, #4
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e10f      	b.n	80014bc <UART_SetConfig+0x390>
 800129c:	231b      	movs	r3, #27
 800129e:	2220      	movs	r2, #32
 80012a0:	189b      	adds	r3, r3, r2
 80012a2:	19db      	adds	r3, r3, r7
 80012a4:	2208      	movs	r2, #8
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e108      	b.n	80014bc <UART_SetConfig+0x390>
 80012aa:	231b      	movs	r3, #27
 80012ac:	2220      	movs	r2, #32
 80012ae:	189b      	adds	r3, r3, r2
 80012b0:	19db      	adds	r3, r3, r7
 80012b2:	2210      	movs	r2, #16
 80012b4:	701a      	strb	r2, [r3, #0]
 80012b6:	e101      	b.n	80014bc <UART_SetConfig+0x390>
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a71      	ldr	r2, [pc, #452]	; (8001484 <UART_SetConfig+0x358>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d131      	bne.n	8001326 <UART_SetConfig+0x1fa>
 80012c2:	4b6e      	ldr	r3, [pc, #440]	; (800147c <UART_SetConfig+0x350>)
 80012c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c6:	2230      	movs	r2, #48	; 0x30
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b30      	cmp	r3, #48	; 0x30
 80012cc:	d01d      	beq.n	800130a <UART_SetConfig+0x1de>
 80012ce:	d823      	bhi.n	8001318 <UART_SetConfig+0x1ec>
 80012d0:	2b20      	cmp	r3, #32
 80012d2:	d00c      	beq.n	80012ee <UART_SetConfig+0x1c2>
 80012d4:	d820      	bhi.n	8001318 <UART_SetConfig+0x1ec>
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d002      	beq.n	80012e0 <UART_SetConfig+0x1b4>
 80012da:	2b10      	cmp	r3, #16
 80012dc:	d00e      	beq.n	80012fc <UART_SetConfig+0x1d0>
 80012de:	e01b      	b.n	8001318 <UART_SetConfig+0x1ec>
 80012e0:	231b      	movs	r3, #27
 80012e2:	2220      	movs	r2, #32
 80012e4:	189b      	adds	r3, r3, r2
 80012e6:	19db      	adds	r3, r3, r7
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	e0e6      	b.n	80014bc <UART_SetConfig+0x390>
 80012ee:	231b      	movs	r3, #27
 80012f0:	2220      	movs	r2, #32
 80012f2:	189b      	adds	r3, r3, r2
 80012f4:	19db      	adds	r3, r3, r7
 80012f6:	2202      	movs	r2, #2
 80012f8:	701a      	strb	r2, [r3, #0]
 80012fa:	e0df      	b.n	80014bc <UART_SetConfig+0x390>
 80012fc:	231b      	movs	r3, #27
 80012fe:	2220      	movs	r2, #32
 8001300:	189b      	adds	r3, r3, r2
 8001302:	19db      	adds	r3, r3, r7
 8001304:	2204      	movs	r2, #4
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e0d8      	b.n	80014bc <UART_SetConfig+0x390>
 800130a:	231b      	movs	r3, #27
 800130c:	2220      	movs	r2, #32
 800130e:	189b      	adds	r3, r3, r2
 8001310:	19db      	adds	r3, r3, r7
 8001312:	2208      	movs	r2, #8
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e0d1      	b.n	80014bc <UART_SetConfig+0x390>
 8001318:	231b      	movs	r3, #27
 800131a:	2220      	movs	r2, #32
 800131c:	189b      	adds	r3, r3, r2
 800131e:	19db      	adds	r3, r3, r7
 8001320:	2210      	movs	r2, #16
 8001322:	701a      	strb	r2, [r3, #0]
 8001324:	e0ca      	b.n	80014bc <UART_SetConfig+0x390>
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a57      	ldr	r2, [pc, #348]	; (8001488 <UART_SetConfig+0x35c>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d106      	bne.n	800133e <UART_SetConfig+0x212>
 8001330:	231b      	movs	r3, #27
 8001332:	2220      	movs	r2, #32
 8001334:	189b      	adds	r3, r3, r2
 8001336:	19db      	adds	r3, r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e0be      	b.n	80014bc <UART_SetConfig+0x390>
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a52      	ldr	r2, [pc, #328]	; (800148c <UART_SetConfig+0x360>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d106      	bne.n	8001356 <UART_SetConfig+0x22a>
 8001348:	231b      	movs	r3, #27
 800134a:	2220      	movs	r2, #32
 800134c:	189b      	adds	r3, r3, r2
 800134e:	19db      	adds	r3, r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e0b2      	b.n	80014bc <UART_SetConfig+0x390>
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <UART_SetConfig+0x364>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d106      	bne.n	800136e <UART_SetConfig+0x242>
 8001360:	231b      	movs	r3, #27
 8001362:	2220      	movs	r2, #32
 8001364:	189b      	adds	r3, r3, r2
 8001366:	19db      	adds	r3, r3, r7
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	e0a6      	b.n	80014bc <UART_SetConfig+0x390>
 800136e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a3e      	ldr	r2, [pc, #248]	; (800146c <UART_SetConfig+0x340>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d13e      	bne.n	80013f6 <UART_SetConfig+0x2ca>
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <UART_SetConfig+0x350>)
 800137a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800137c:	23c0      	movs	r3, #192	; 0xc0
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	4013      	ands	r3, r2
 8001382:	22c0      	movs	r2, #192	; 0xc0
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	4293      	cmp	r3, r2
 8001388:	d027      	beq.n	80013da <UART_SetConfig+0x2ae>
 800138a:	22c0      	movs	r2, #192	; 0xc0
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	4293      	cmp	r3, r2
 8001390:	d82a      	bhi.n	80013e8 <UART_SetConfig+0x2bc>
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	4293      	cmp	r3, r2
 8001398:	d011      	beq.n	80013be <UART_SetConfig+0x292>
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	0112      	lsls	r2, r2, #4
 800139e:	4293      	cmp	r3, r2
 80013a0:	d822      	bhi.n	80013e8 <UART_SetConfig+0x2bc>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <UART_SetConfig+0x284>
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	00d2      	lsls	r2, r2, #3
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00e      	beq.n	80013cc <UART_SetConfig+0x2a0>
 80013ae:	e01b      	b.n	80013e8 <UART_SetConfig+0x2bc>
 80013b0:	231b      	movs	r3, #27
 80013b2:	2220      	movs	r2, #32
 80013b4:	189b      	adds	r3, r3, r2
 80013b6:	19db      	adds	r3, r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	e07e      	b.n	80014bc <UART_SetConfig+0x390>
 80013be:	231b      	movs	r3, #27
 80013c0:	2220      	movs	r2, #32
 80013c2:	189b      	adds	r3, r3, r2
 80013c4:	19db      	adds	r3, r3, r7
 80013c6:	2202      	movs	r2, #2
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e077      	b.n	80014bc <UART_SetConfig+0x390>
 80013cc:	231b      	movs	r3, #27
 80013ce:	2220      	movs	r2, #32
 80013d0:	189b      	adds	r3, r3, r2
 80013d2:	19db      	adds	r3, r3, r7
 80013d4:	2204      	movs	r2, #4
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e070      	b.n	80014bc <UART_SetConfig+0x390>
 80013da:	231b      	movs	r3, #27
 80013dc:	2220      	movs	r2, #32
 80013de:	189b      	adds	r3, r3, r2
 80013e0:	19db      	adds	r3, r3, r7
 80013e2:	2208      	movs	r2, #8
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	e069      	b.n	80014bc <UART_SetConfig+0x390>
 80013e8:	231b      	movs	r3, #27
 80013ea:	2220      	movs	r2, #32
 80013ec:	189b      	adds	r3, r3, r2
 80013ee:	19db      	adds	r3, r3, r7
 80013f0:	2210      	movs	r2, #16
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	e062      	b.n	80014bc <UART_SetConfig+0x390>
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1d      	ldr	r2, [pc, #116]	; (8001470 <UART_SetConfig+0x344>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d157      	bne.n	80014b0 <UART_SetConfig+0x384>
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <UART_SetConfig+0x350>)
 8001402:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001404:	23c0      	movs	r3, #192	; 0xc0
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4013      	ands	r3, r2
 800140a:	22c0      	movs	r2, #192	; 0xc0
 800140c:	0092      	lsls	r2, r2, #2
 800140e:	4293      	cmp	r3, r2
 8001410:	d040      	beq.n	8001494 <UART_SetConfig+0x368>
 8001412:	22c0      	movs	r2, #192	; 0xc0
 8001414:	0092      	lsls	r2, r2, #2
 8001416:	4293      	cmp	r3, r2
 8001418:	d843      	bhi.n	80014a2 <UART_SetConfig+0x376>
 800141a:	2280      	movs	r2, #128	; 0x80
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	4293      	cmp	r3, r2
 8001420:	d011      	beq.n	8001446 <UART_SetConfig+0x31a>
 8001422:	2280      	movs	r2, #128	; 0x80
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	4293      	cmp	r3, r2
 8001428:	d83b      	bhi.n	80014a2 <UART_SetConfig+0x376>
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <UART_SetConfig+0x30c>
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	0052      	lsls	r2, r2, #1
 8001432:	4293      	cmp	r3, r2
 8001434:	d00e      	beq.n	8001454 <UART_SetConfig+0x328>
 8001436:	e034      	b.n	80014a2 <UART_SetConfig+0x376>
 8001438:	231b      	movs	r3, #27
 800143a:	2220      	movs	r2, #32
 800143c:	189b      	adds	r3, r3, r2
 800143e:	19db      	adds	r3, r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e03a      	b.n	80014bc <UART_SetConfig+0x390>
 8001446:	231b      	movs	r3, #27
 8001448:	2220      	movs	r2, #32
 800144a:	189b      	adds	r3, r3, r2
 800144c:	19db      	adds	r3, r3, r7
 800144e:	2202      	movs	r2, #2
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e033      	b.n	80014bc <UART_SetConfig+0x390>
 8001454:	231b      	movs	r3, #27
 8001456:	2220      	movs	r2, #32
 8001458:	189b      	adds	r3, r3, r2
 800145a:	19db      	adds	r3, r3, r7
 800145c:	2204      	movs	r2, #4
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	e02c      	b.n	80014bc <UART_SetConfig+0x390>
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	cfff69f3 	.word	0xcfff69f3
 8001468:	ffffcfff 	.word	0xffffcfff
 800146c:	40008000 	.word	0x40008000
 8001470:	40008400 	.word	0x40008400
 8001474:	11fff4ff 	.word	0x11fff4ff
 8001478:	40013800 	.word	0x40013800
 800147c:	40021000 	.word	0x40021000
 8001480:	40004400 	.word	0x40004400
 8001484:	40004800 	.word	0x40004800
 8001488:	40004c00 	.word	0x40004c00
 800148c:	40005000 	.word	0x40005000
 8001490:	40013c00 	.word	0x40013c00
 8001494:	231b      	movs	r3, #27
 8001496:	2220      	movs	r2, #32
 8001498:	189b      	adds	r3, r3, r2
 800149a:	19db      	adds	r3, r3, r7
 800149c:	2208      	movs	r2, #8
 800149e:	701a      	strb	r2, [r3, #0]
 80014a0:	e00c      	b.n	80014bc <UART_SetConfig+0x390>
 80014a2:	231b      	movs	r3, #27
 80014a4:	2220      	movs	r2, #32
 80014a6:	189b      	adds	r3, r3, r2
 80014a8:	19db      	adds	r3, r3, r7
 80014aa:	2210      	movs	r2, #16
 80014ac:	701a      	strb	r2, [r3, #0]
 80014ae:	e005      	b.n	80014bc <UART_SetConfig+0x390>
 80014b0:	231b      	movs	r3, #27
 80014b2:	2220      	movs	r2, #32
 80014b4:	189b      	adds	r3, r3, r2
 80014b6:	19db      	adds	r3, r3, r7
 80014b8:	2210      	movs	r2, #16
 80014ba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4ac1      	ldr	r2, [pc, #772]	; (80017c8 <UART_SetConfig+0x69c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d005      	beq.n	80014d2 <UART_SetConfig+0x3a6>
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4ac0      	ldr	r2, [pc, #768]	; (80017cc <UART_SetConfig+0x6a0>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d000      	beq.n	80014d2 <UART_SetConfig+0x3a6>
 80014d0:	e093      	b.n	80015fa <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80014d2:	231b      	movs	r3, #27
 80014d4:	2220      	movs	r2, #32
 80014d6:	189b      	adds	r3, r3, r2
 80014d8:	19db      	adds	r3, r3, r7
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d015      	beq.n	800150c <UART_SetConfig+0x3e0>
 80014e0:	dc18      	bgt.n	8001514 <UART_SetConfig+0x3e8>
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d00d      	beq.n	8001502 <UART_SetConfig+0x3d6>
 80014e6:	dc15      	bgt.n	8001514 <UART_SetConfig+0x3e8>
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <UART_SetConfig+0x3c6>
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d005      	beq.n	80014fc <UART_SetConfig+0x3d0>
 80014f0:	e010      	b.n	8001514 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80014f2:	f7ff fc25 	bl	8000d40 <HAL_RCC_GetPCLK1Freq>
 80014f6:	0003      	movs	r3, r0
 80014f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80014fa:	e014      	b.n	8001526 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80014fc:	4bb4      	ldr	r3, [pc, #720]	; (80017d0 <UART_SetConfig+0x6a4>)
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001500:	e011      	b.n	8001526 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001502:	f7ff fb91 	bl	8000c28 <HAL_RCC_GetSysClockFreq>
 8001506:	0003      	movs	r3, r0
 8001508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800150a:	e00c      	b.n	8001526 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	021b      	lsls	r3, r3, #8
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001512:	e008      	b.n	8001526 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001518:	231a      	movs	r3, #26
 800151a:	2220      	movs	r2, #32
 800151c:	189b      	adds	r3, r3, r2
 800151e:	19db      	adds	r3, r3, r7
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
        break;
 8001524:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001528:	2b00      	cmp	r3, #0
 800152a:	d100      	bne.n	800152e <UART_SetConfig+0x402>
 800152c:	e135      	b.n	800179a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001532:	4ba8      	ldr	r3, [pc, #672]	; (80017d4 <UART_SetConfig+0x6a8>)
 8001534:	0052      	lsls	r2, r2, #1
 8001536:	5ad3      	ldrh	r3, [r2, r3]
 8001538:	0019      	movs	r1, r3
 800153a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800153c:	f7fe fde2 	bl	8000104 <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	0013      	movs	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	189b      	adds	r3, r3, r2
 800154e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001550:	429a      	cmp	r2, r3
 8001552:	d305      	bcc.n	8001560 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800155a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800155c:	429a      	cmp	r2, r3
 800155e:	d906      	bls.n	800156e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8001560:	231a      	movs	r3, #26
 8001562:	2220      	movs	r2, #32
 8001564:	189b      	adds	r3, r3, r2
 8001566:	19db      	adds	r3, r3, r7
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	e044      	b.n	80015f8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157a:	4b96      	ldr	r3, [pc, #600]	; (80017d4 <UART_SetConfig+0x6a8>)
 800157c:	0052      	lsls	r2, r2, #1
 800157e:	5ad3      	ldrh	r3, [r2, r3]
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	69b8      	ldr	r0, [r7, #24]
 800158c:	69f9      	ldr	r1, [r7, #28]
 800158e:	f7fe fe45 	bl	800021c <__aeabi_uldivmod>
 8001592:	0002      	movs	r2, r0
 8001594:	000b      	movs	r3, r1
 8001596:	0e11      	lsrs	r1, r2, #24
 8001598:	021d      	lsls	r5, r3, #8
 800159a:	430d      	orrs	r5, r1
 800159c:	0214      	lsls	r4, r2, #8
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	085b      	lsrs	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68b8      	ldr	r0, [r7, #8]
 80015ac:	68f9      	ldr	r1, [r7, #12]
 80015ae:	1900      	adds	r0, r0, r4
 80015b0:	4169      	adcs	r1, r5
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f7fe fe2c 	bl	800021c <__aeabi_uldivmod>
 80015c4:	0002      	movs	r2, r0
 80015c6:	000b      	movs	r3, r1
 80015c8:	0013      	movs	r3, r2
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80015cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ce:	23c0      	movs	r3, #192	; 0xc0
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d309      	bcc.n	80015ea <UART_SetConfig+0x4be>
 80015d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	035b      	lsls	r3, r3, #13
 80015dc:	429a      	cmp	r2, r3
 80015de:	d204      	bcs.n	80015ea <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	e006      	b.n	80015f8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80015ea:	231a      	movs	r3, #26
 80015ec:	2220      	movs	r2, #32
 80015ee:	189b      	adds	r3, r3, r2
 80015f0:	19db      	adds	r3, r3, r7
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80015f6:	e0d0      	b.n	800179a <UART_SetConfig+0x66e>
 80015f8:	e0cf      	b.n	800179a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	69da      	ldr	r2, [r3, #28]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	429a      	cmp	r2, r3
 8001604:	d000      	beq.n	8001608 <UART_SetConfig+0x4dc>
 8001606:	e070      	b.n	80016ea <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8001608:	231b      	movs	r3, #27
 800160a:	2220      	movs	r2, #32
 800160c:	189b      	adds	r3, r3, r2
 800160e:	19db      	adds	r3, r3, r7
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b08      	cmp	r3, #8
 8001614:	d015      	beq.n	8001642 <UART_SetConfig+0x516>
 8001616:	dc18      	bgt.n	800164a <UART_SetConfig+0x51e>
 8001618:	2b04      	cmp	r3, #4
 800161a:	d00d      	beq.n	8001638 <UART_SetConfig+0x50c>
 800161c:	dc15      	bgt.n	800164a <UART_SetConfig+0x51e>
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <UART_SetConfig+0x4fc>
 8001622:	2b02      	cmp	r3, #2
 8001624:	d005      	beq.n	8001632 <UART_SetConfig+0x506>
 8001626:	e010      	b.n	800164a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001628:	f7ff fb8a 	bl	8000d40 <HAL_RCC_GetPCLK1Freq>
 800162c:	0003      	movs	r3, r0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001630:	e014      	b.n	800165c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001632:	4b67      	ldr	r3, [pc, #412]	; (80017d0 <UART_SetConfig+0x6a4>)
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001636:	e011      	b.n	800165c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001638:	f7ff faf6 	bl	8000c28 <HAL_RCC_GetSysClockFreq>
 800163c:	0003      	movs	r3, r0
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001640:	e00c      	b.n	800165c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001648:	e008      	b.n	800165c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800164e:	231a      	movs	r3, #26
 8001650:	2220      	movs	r2, #32
 8001652:	189b      	adds	r3, r3, r2
 8001654:	19db      	adds	r3, r3, r7
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
        break;
 800165a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800165c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165e:	2b00      	cmp	r3, #0
 8001660:	d100      	bne.n	8001664 <UART_SetConfig+0x538>
 8001662:	e09a      	b.n	800179a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001668:	4b5a      	ldr	r3, [pc, #360]	; (80017d4 <UART_SetConfig+0x6a8>)
 800166a:	0052      	lsls	r2, r2, #1
 800166c:	5ad3      	ldrh	r3, [r2, r3]
 800166e:	0019      	movs	r1, r3
 8001670:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001672:	f7fe fd47 	bl	8000104 <__udivsi3>
 8001676:	0003      	movs	r3, r0
 8001678:	005a      	lsls	r2, r3, #1
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	085b      	lsrs	r3, r3, #1
 8001680:	18d2      	adds	r2, r2, r3
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	0019      	movs	r1, r3
 8001688:	0010      	movs	r0, r2
 800168a:	f7fe fd3b 	bl	8000104 <__udivsi3>
 800168e:	0003      	movs	r3, r0
 8001690:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d921      	bls.n	80016dc <UART_SetConfig+0x5b0>
 8001698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	025b      	lsls	r3, r3, #9
 800169e:	429a      	cmp	r2, r3
 80016a0:	d21c      	bcs.n	80016dc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	200e      	movs	r0, #14
 80016a8:	2420      	movs	r4, #32
 80016aa:	1903      	adds	r3, r0, r4
 80016ac:	19db      	adds	r3, r3, r7
 80016ae:	210f      	movs	r1, #15
 80016b0:	438a      	bics	r2, r1
 80016b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	2207      	movs	r2, #7
 80016bc:	4013      	ands	r3, r2
 80016be:	b299      	uxth	r1, r3
 80016c0:	1903      	adds	r3, r0, r4
 80016c2:	19db      	adds	r3, r3, r7
 80016c4:	1902      	adds	r2, r0, r4
 80016c6:	19d2      	adds	r2, r2, r7
 80016c8:	8812      	ldrh	r2, [r2, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1902      	adds	r2, r0, r4
 80016d4:	19d2      	adds	r2, r2, r7
 80016d6:	8812      	ldrh	r2, [r2, #0]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	e05e      	b.n	800179a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80016dc:	231a      	movs	r3, #26
 80016de:	2220      	movs	r2, #32
 80016e0:	189b      	adds	r3, r3, r2
 80016e2:	19db      	adds	r3, r3, r7
 80016e4:	2201      	movs	r2, #1
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e057      	b.n	800179a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80016ea:	231b      	movs	r3, #27
 80016ec:	2220      	movs	r2, #32
 80016ee:	189b      	adds	r3, r3, r2
 80016f0:	19db      	adds	r3, r3, r7
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d015      	beq.n	8001724 <UART_SetConfig+0x5f8>
 80016f8:	dc18      	bgt.n	800172c <UART_SetConfig+0x600>
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d00d      	beq.n	800171a <UART_SetConfig+0x5ee>
 80016fe:	dc15      	bgt.n	800172c <UART_SetConfig+0x600>
 8001700:	2b00      	cmp	r3, #0
 8001702:	d002      	beq.n	800170a <UART_SetConfig+0x5de>
 8001704:	2b02      	cmp	r3, #2
 8001706:	d005      	beq.n	8001714 <UART_SetConfig+0x5e8>
 8001708:	e010      	b.n	800172c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800170a:	f7ff fb19 	bl	8000d40 <HAL_RCC_GetPCLK1Freq>
 800170e:	0003      	movs	r3, r0
 8001710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001712:	e014      	b.n	800173e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <UART_SetConfig+0x6a4>)
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001718:	e011      	b.n	800173e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800171a:	f7ff fa85 	bl	8000c28 <HAL_RCC_GetSysClockFreq>
 800171e:	0003      	movs	r3, r0
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8001722:	e00c      	b.n	800173e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800172a:	e008      	b.n	800173e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8001730:	231a      	movs	r3, #26
 8001732:	2220      	movs	r2, #32
 8001734:	189b      	adds	r3, r3, r2
 8001736:	19db      	adds	r3, r3, r7
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
        break;
 800173c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001740:	2b00      	cmp	r3, #0
 8001742:	d02a      	beq.n	800179a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <UART_SetConfig+0x6a8>)
 800174a:	0052      	lsls	r2, r2, #1
 800174c:	5ad3      	ldrh	r3, [r2, r3]
 800174e:	0019      	movs	r1, r3
 8001750:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001752:	f7fe fcd7 	bl	8000104 <__udivsi3>
 8001756:	0003      	movs	r3, r0
 8001758:	001a      	movs	r2, r3
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	085b      	lsrs	r3, r3, #1
 8001760:	18d2      	adds	r2, r2, r3
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f7fe fccb 	bl	8000104 <__udivsi3>
 800176e:	0003      	movs	r3, r0
 8001770:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001774:	2b0f      	cmp	r3, #15
 8001776:	d90a      	bls.n	800178e <UART_SetConfig+0x662>
 8001778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	429a      	cmp	r2, r3
 8001780:	d205      	bcs.n	800178e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001784:	b29a      	uxth	r2, r3
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	e005      	b.n	800179a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800178e:	231a      	movs	r3, #26
 8001790:	2220      	movs	r2, #32
 8001792:	189b      	adds	r3, r3, r2
 8001794:	19db      	adds	r3, r3, r7
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	226a      	movs	r2, #106	; 0x6a
 800179e:	2101      	movs	r1, #1
 80017a0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	2268      	movs	r2, #104	; 0x68
 80017a6:	2101      	movs	r1, #1
 80017a8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	2200      	movs	r2, #0
 80017ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	2200      	movs	r2, #0
 80017b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80017b6:	231a      	movs	r3, #26
 80017b8:	2220      	movs	r2, #32
 80017ba:	189b      	adds	r3, r3, r2
 80017bc:	19db      	adds	r3, r3, r7
 80017be:	781b      	ldrb	r3, [r3, #0]
}
 80017c0:	0018      	movs	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	b010      	add	sp, #64	; 0x40
 80017c6:	bdb0      	pop	{r4, r5, r7, pc}
 80017c8:	40008000 	.word	0x40008000
 80017cc:	40008400 	.word	0x40008400
 80017d0:	00f42400 	.word	0x00f42400
 80017d4:	08001cc0 	.word	0x08001cc0

080017d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	2208      	movs	r2, #8
 80017e6:	4013      	ands	r3, r2
 80017e8:	d00b      	beq.n	8001802 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a4a      	ldr	r2, [pc, #296]	; (800191c <UART_AdvFeatureConfig+0x144>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	2201      	movs	r2, #1
 8001808:	4013      	ands	r3, r2
 800180a:	d00b      	beq.n	8001824 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4a43      	ldr	r2, [pc, #268]	; (8001920 <UART_AdvFeatureConfig+0x148>)
 8001814:	4013      	ands	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d00b      	beq.n	8001846 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a3b      	ldr	r2, [pc, #236]	; (8001924 <UART_AdvFeatureConfig+0x14c>)
 8001836:	4013      	ands	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	2204      	movs	r2, #4
 800184c:	4013      	ands	r3, r2
 800184e:	d00b      	beq.n	8001868 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a34      	ldr	r2, [pc, #208]	; (8001928 <UART_AdvFeatureConfig+0x150>)
 8001858:	4013      	ands	r3, r2
 800185a:	0019      	movs	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	2210      	movs	r2, #16
 800186e:	4013      	ands	r3, r2
 8001870:	d00b      	beq.n	800188a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4a2c      	ldr	r2, [pc, #176]	; (800192c <UART_AdvFeatureConfig+0x154>)
 800187a:	4013      	ands	r3, r2
 800187c:	0019      	movs	r1, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	2220      	movs	r2, #32
 8001890:	4013      	ands	r3, r2
 8001892:	d00b      	beq.n	80018ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	4a25      	ldr	r2, [pc, #148]	; (8001930 <UART_AdvFeatureConfig+0x158>)
 800189c:	4013      	ands	r3, r2
 800189e:	0019      	movs	r1, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	2240      	movs	r2, #64	; 0x40
 80018b2:	4013      	ands	r3, r2
 80018b4:	d01d      	beq.n	80018f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <UART_AdvFeatureConfig+0x15c>)
 80018be:	4013      	ands	r3, r2
 80018c0:	0019      	movs	r1, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	035b      	lsls	r3, r3, #13
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d10b      	bne.n	80018f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a15      	ldr	r2, [pc, #84]	; (8001938 <UART_AdvFeatureConfig+0x160>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	4013      	ands	r3, r2
 80018fa:	d00b      	beq.n	8001914 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <UART_AdvFeatureConfig+0x164>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	605a      	str	r2, [r3, #4]
  }
}
 8001914:	46c0      	nop			; (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b002      	add	sp, #8
 800191a:	bd80      	pop	{r7, pc}
 800191c:	ffff7fff 	.word	0xffff7fff
 8001920:	fffdffff 	.word	0xfffdffff
 8001924:	fffeffff 	.word	0xfffeffff
 8001928:	fffbffff 	.word	0xfffbffff
 800192c:	ffffefff 	.word	0xffffefff
 8001930:	ffffdfff 	.word	0xffffdfff
 8001934:	ffefffff 	.word	0xffefffff
 8001938:	ff9fffff 	.word	0xff9fffff
 800193c:	fff7ffff 	.word	0xfff7ffff

08001940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b092      	sub	sp, #72	; 0x48
 8001944:	af02      	add	r7, sp, #8
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2290      	movs	r2, #144	; 0x90
 800194c:	2100      	movs	r1, #0
 800194e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001950:	f7fe ff28 	bl	80007a4 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2208      	movs	r2, #8
 8001960:	4013      	ands	r3, r2
 8001962:	2b08      	cmp	r3, #8
 8001964:	d12d      	bne.n	80019c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	0391      	lsls	r1, r2, #14
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	4a47      	ldr	r2, [pc, #284]	; (8001a8c <UART_CheckIdleState+0x14c>)
 8001970:	9200      	str	r2, [sp, #0]
 8001972:	2200      	movs	r2, #0
 8001974:	f000 f88e 	bl	8001a94 <UART_WaitOnFlagUntilTimeout>
 8001978:	1e03      	subs	r3, r0, #0
 800197a:	d022      	beq.n	80019c2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800197c:	f3ef 8310 	mrs	r3, PRIMASK
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
 8001986:	2301      	movs	r3, #1
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	f383 8810 	msr	PRIMASK, r3
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	438a      	bics	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a8:	f383 8810 	msr	PRIMASK, r3
}
 80019ac:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2288      	movs	r2, #136	; 0x88
 80019b2:	2120      	movs	r1, #32
 80019b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2284      	movs	r2, #132	; 0x84
 80019ba:	2100      	movs	r1, #0
 80019bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e060      	b.n	8001a84 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2204      	movs	r2, #4
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d146      	bne.n	8001a5e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80019d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d2:	2280      	movs	r2, #128	; 0x80
 80019d4:	03d1      	lsls	r1, r2, #15
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	4a2c      	ldr	r2, [pc, #176]	; (8001a8c <UART_CheckIdleState+0x14c>)
 80019da:	9200      	str	r2, [sp, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	f000 f859 	bl	8001a94 <UART_WaitOnFlagUntilTimeout>
 80019e2:	1e03      	subs	r3, r0, #0
 80019e4:	d03b      	beq.n	8001a5e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019e6:	f3ef 8310 	mrs	r3, PRIMASK
 80019ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80019ec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80019ee:	637b      	str	r3, [r7, #52]	; 0x34
 80019f0:	2301      	movs	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	f383 8810 	msr	PRIMASK, r3
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4922      	ldr	r1, [pc, #136]	; (8001a90 <UART_CheckIdleState+0x150>)
 8001a08:	400a      	ands	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f383 8810 	msr	PRIMASK, r3
}
 8001a16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a18:	f3ef 8310 	mrs	r3, PRIMASK
 8001a1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a1e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
 8001a22:	2301      	movs	r3, #1
 8001a24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f383 8810 	msr	PRIMASK, r3
}
 8001a2c:	46c0      	nop			; (mov r8, r8)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2101      	movs	r1, #1
 8001a3a:	438a      	bics	r2, r1
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a40:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f383 8810 	msr	PRIMASK, r3
}
 8001a48:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	228c      	movs	r2, #140	; 0x8c
 8001a4e:	2120      	movs	r1, #32
 8001a50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2284      	movs	r2, #132	; 0x84
 8001a56:	2100      	movs	r1, #0
 8001a58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e012      	b.n	8001a84 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2288      	movs	r2, #136	; 0x88
 8001a62:	2120      	movs	r1, #32
 8001a64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	228c      	movs	r2, #140	; 0x8c
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2284      	movs	r2, #132	; 0x84
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b010      	add	sp, #64	; 0x40
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	01ffffff 	.word	0x01ffffff
 8001a90:	fffffedf 	.word	0xfffffedf

08001a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	1dfb      	adds	r3, r7, #7
 8001aa2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aa4:	e051      	b.n	8001b4a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	d04e      	beq.n	8001b4a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aac:	f7fe fe7a 	bl	80007a4 <HAL_GetTick>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d302      	bcc.n	8001ac2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e051      	b.n	8001b6a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2204      	movs	r2, #4
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d03b      	beq.n	8001b4a <UART_WaitOnFlagUntilTimeout+0xb6>
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b80      	cmp	r3, #128	; 0x80
 8001ad6:	d038      	beq.n	8001b4a <UART_WaitOnFlagUntilTimeout+0xb6>
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b40      	cmp	r3, #64	; 0x40
 8001adc:	d035      	beq.n	8001b4a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d111      	bne.n	8001b10 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2208      	movs	r2, #8
 8001af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	0018      	movs	r0, r3
 8001af8:	f000 f83c 	bl	8001b74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2290      	movs	r2, #144	; 0x90
 8001b00:	2108      	movs	r1, #8
 8001b02:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2284      	movs	r2, #132	; 0x84
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e02c      	b.n	8001b6a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69da      	ldr	r2, [r3, #28]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d112      	bne.n	8001b4a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f000 f81f 	bl	8001b74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2290      	movs	r2, #144	; 0x90
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2284      	movs	r2, #132	; 0x84
 8001b42:	2100      	movs	r1, #0
 8001b44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e00f      	b.n	8001b6a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	4013      	ands	r3, r2
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	425a      	negs	r2, r3
 8001b5a:	4153      	adcs	r3, r2
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	001a      	movs	r2, r3
 8001b60:	1dfb      	adds	r3, r7, #7
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d09e      	beq.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b004      	add	sp, #16
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8001b80:	617b      	str	r3, [r7, #20]
  return(result);
 8001b82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001b84:	637b      	str	r3, [r7, #52]	; 0x34
 8001b86:	2301      	movs	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f383 8810 	msr	PRIMASK, r3
}
 8001b90:	46c0      	nop			; (mov r8, r8)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4926      	ldr	r1, [pc, #152]	; (8001c38 <UART_EndRxTransfer+0xc4>)
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	f383 8810 	msr	PRIMASK, r3
}
 8001bac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bae:	f3ef 8310 	mrs	r3, PRIMASK
 8001bb2:	623b      	str	r3, [r7, #32]
  return(result);
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
 8001bb8:	2301      	movs	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	f383 8810 	msr	PRIMASK, r3
}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	491b      	ldr	r1, [pc, #108]	; (8001c3c <UART_EndRxTransfer+0xc8>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bda:	f383 8810 	msr	PRIMASK, r3
}
 8001bde:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d118      	bne.n	8001c1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001be8:	f3ef 8310 	mrs	r3, PRIMASK
 8001bec:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f383 8810 	msr	PRIMASK, r3
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2110      	movs	r1, #16
 8001c0a:	438a      	bics	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	f383 8810 	msr	PRIMASK, r3
}
 8001c18:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	228c      	movs	r2, #140	; 0x8c
 8001c1e:	2120      	movs	r1, #32
 8001c20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b00e      	add	sp, #56	; 0x38
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	fffffedf 	.word	0xfffffedf
 8001c3c:	effffffe 	.word	0xeffffffe

08001c40 <__libc_init_array>:
 8001c40:	b570      	push	{r4, r5, r6, lr}
 8001c42:	2600      	movs	r6, #0
 8001c44:	4c0c      	ldr	r4, [pc, #48]	; (8001c78 <__libc_init_array+0x38>)
 8001c46:	4d0d      	ldr	r5, [pc, #52]	; (8001c7c <__libc_init_array+0x3c>)
 8001c48:	1b64      	subs	r4, r4, r5
 8001c4a:	10a4      	asrs	r4, r4, #2
 8001c4c:	42a6      	cmp	r6, r4
 8001c4e:	d109      	bne.n	8001c64 <__libc_init_array+0x24>
 8001c50:	2600      	movs	r6, #0
 8001c52:	f000 f819 	bl	8001c88 <_init>
 8001c56:	4c0a      	ldr	r4, [pc, #40]	; (8001c80 <__libc_init_array+0x40>)
 8001c58:	4d0a      	ldr	r5, [pc, #40]	; (8001c84 <__libc_init_array+0x44>)
 8001c5a:	1b64      	subs	r4, r4, r5
 8001c5c:	10a4      	asrs	r4, r4, #2
 8001c5e:	42a6      	cmp	r6, r4
 8001c60:	d105      	bne.n	8001c6e <__libc_init_array+0x2e>
 8001c62:	bd70      	pop	{r4, r5, r6, pc}
 8001c64:	00b3      	lsls	r3, r6, #2
 8001c66:	58eb      	ldr	r3, [r5, r3]
 8001c68:	4798      	blx	r3
 8001c6a:	3601      	adds	r6, #1
 8001c6c:	e7ee      	b.n	8001c4c <__libc_init_array+0xc>
 8001c6e:	00b3      	lsls	r3, r6, #2
 8001c70:	58eb      	ldr	r3, [r5, r3]
 8001c72:	4798      	blx	r3
 8001c74:	3601      	adds	r6, #1
 8001c76:	e7f2      	b.n	8001c5e <__libc_init_array+0x1e>
 8001c78:	08001ce0 	.word	0x08001ce0
 8001c7c:	08001ce0 	.word	0x08001ce0
 8001c80:	08001ce4 	.word	0x08001ce4
 8001c84:	08001ce0 	.word	0x08001ce0

08001c88 <_init>:
 8001c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c8e:	bc08      	pop	{r3}
 8001c90:	469e      	mov	lr, r3
 8001c92:	4770      	bx	lr

08001c94 <_fini>:
 8001c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c9a:	bc08      	pop	{r3}
 8001c9c:	469e      	mov	lr, r3
 8001c9e:	4770      	bx	lr
