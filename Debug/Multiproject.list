
Multiproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007990  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08007a50  08007a50  00017a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cc0  08007cc0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08007cc0  08007cc0  00017cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc8  08007cc8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ccc  08007ccc  00017ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08007cd0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  200000b0  08007d80  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08007d80  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aee3  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a72  00000000  00000000  0002affe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0002ca70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f1  00000000  00000000  0002d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b75c  00000000  00000000  0002d819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b64f  00000000  00000000  00048f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0e68  00000000  00000000  000545c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002724  00000000  00000000  0010542c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00107b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000b0 	.word	0x200000b0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007a34 	.word	0x08007a34

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000b4 	.word	0x200000b4
 8000100:	08007a34 	.word	0x08007a34

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0010      	movs	r0, r2
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	0019      	movs	r1, r3
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 f867 	bl	80014f8 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ffb7 	bl	80013a8 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f859 	bl	80014f8 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f84f 	bl	80014f8 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffdf 	bl	800142c <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffd5 	bl	800142c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_uldivmod>:
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000494:	2a00      	cmp	r2, #0
 8000496:	d10f      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000498:	2900      	cmp	r1, #0
 800049a:	d100      	bne.n	800049e <__aeabi_uldivmod+0xe>
 800049c:	2800      	cmp	r0, #0
 800049e:	d002      	beq.n	80004a6 <__aeabi_uldivmod+0x16>
 80004a0:	2100      	movs	r1, #0
 80004a2:	43c9      	mvns	r1, r1
 80004a4:	0008      	movs	r0, r1
 80004a6:	b407      	push	{r0, r1, r2}
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <__aeabi_uldivmod+0x24>)
 80004aa:	a102      	add	r1, pc, #8	; (adr r1, 80004b4 <__aeabi_uldivmod+0x24>)
 80004ac:	1840      	adds	r0, r0, r1
 80004ae:	9002      	str	r0, [sp, #8]
 80004b0:	bd03      	pop	{r0, r1, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	ffffff5d 	.word	0xffffff5d
 80004b8:	b403      	push	{r0, r1}
 80004ba:	4668      	mov	r0, sp
 80004bc:	b501      	push	{r0, lr}
 80004be:	9802      	ldr	r0, [sp, #8]
 80004c0:	f000 f806 	bl	80004d0 <__udivmoddi4>
 80004c4:	9b01      	ldr	r3, [sp, #4]
 80004c6:	469e      	mov	lr, r3
 80004c8:	b002      	add	sp, #8
 80004ca:	bc0c      	pop	{r2, r3}
 80004cc:	4770      	bx	lr
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__udivmoddi4>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	4657      	mov	r7, sl
 80004d4:	464e      	mov	r6, r9
 80004d6:	4645      	mov	r5, r8
 80004d8:	46de      	mov	lr, fp
 80004da:	b5e0      	push	{r5, r6, r7, lr}
 80004dc:	0004      	movs	r4, r0
 80004de:	000d      	movs	r5, r1
 80004e0:	4692      	mov	sl, r2
 80004e2:	4699      	mov	r9, r3
 80004e4:	b083      	sub	sp, #12
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d830      	bhi.n	800054c <__udivmoddi4+0x7c>
 80004ea:	d02d      	beq.n	8000548 <__udivmoddi4+0x78>
 80004ec:	4649      	mov	r1, r9
 80004ee:	4650      	mov	r0, sl
 80004f0:	f001 ffc2 	bl	8002478 <__clzdi2>
 80004f4:	0029      	movs	r1, r5
 80004f6:	0006      	movs	r6, r0
 80004f8:	0020      	movs	r0, r4
 80004fa:	f001 ffbd 	bl	8002478 <__clzdi2>
 80004fe:	1a33      	subs	r3, r6, r0
 8000500:	4698      	mov	r8, r3
 8000502:	3b20      	subs	r3, #32
 8000504:	d434      	bmi.n	8000570 <__udivmoddi4+0xa0>
 8000506:	469b      	mov	fp, r3
 8000508:	4653      	mov	r3, sl
 800050a:	465a      	mov	r2, fp
 800050c:	4093      	lsls	r3, r2
 800050e:	4642      	mov	r2, r8
 8000510:	001f      	movs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d83b      	bhi.n	8000594 <__udivmoddi4+0xc4>
 800051c:	42af      	cmp	r7, r5
 800051e:	d100      	bne.n	8000522 <__udivmoddi4+0x52>
 8000520:	e079      	b.n	8000616 <__udivmoddi4+0x146>
 8000522:	465b      	mov	r3, fp
 8000524:	1ba4      	subs	r4, r4, r6
 8000526:	41bd      	sbcs	r5, r7
 8000528:	2b00      	cmp	r3, #0
 800052a:	da00      	bge.n	800052e <__udivmoddi4+0x5e>
 800052c:	e076      	b.n	800061c <__udivmoddi4+0x14c>
 800052e:	2200      	movs	r2, #0
 8000530:	2300      	movs	r3, #0
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	465a      	mov	r2, fp
 800053a:	4093      	lsls	r3, r2
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	4642      	mov	r2, r8
 8000542:	4093      	lsls	r3, r2
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	e029      	b.n	800059c <__udivmoddi4+0xcc>
 8000548:	4282      	cmp	r2, r0
 800054a:	d9cf      	bls.n	80004ec <__udivmoddi4+0x1c>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <__udivmoddi4+0x8e>
 800055a:	601c      	str	r4, [r3, #0]
 800055c:	605d      	str	r5, [r3, #4]
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	b003      	add	sp, #12
 8000564:	bcf0      	pop	{r4, r5, r6, r7}
 8000566:	46bb      	mov	fp, r7
 8000568:	46b2      	mov	sl, r6
 800056a:	46a9      	mov	r9, r5
 800056c:	46a0      	mov	r8, r4
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	4642      	mov	r2, r8
 8000572:	469b      	mov	fp, r3
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	4652      	mov	r2, sl
 800057a:	40da      	lsrs	r2, r3
 800057c:	4641      	mov	r1, r8
 800057e:	0013      	movs	r3, r2
 8000580:	464a      	mov	r2, r9
 8000582:	408a      	lsls	r2, r1
 8000584:	0017      	movs	r7, r2
 8000586:	4642      	mov	r2, r8
 8000588:	431f      	orrs	r7, r3
 800058a:	4653      	mov	r3, sl
 800058c:	4093      	lsls	r3, r2
 800058e:	001e      	movs	r6, r3
 8000590:	42af      	cmp	r7, r5
 8000592:	d9c3      	bls.n	800051c <__udivmoddi4+0x4c>
 8000594:	2200      	movs	r2, #0
 8000596:	2300      	movs	r3, #0
 8000598:	9200      	str	r2, [sp, #0]
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	4643      	mov	r3, r8
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0d8      	beq.n	8000554 <__udivmoddi4+0x84>
 80005a2:	07fb      	lsls	r3, r7, #31
 80005a4:	0872      	lsrs	r2, r6, #1
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4646      	mov	r6, r8
 80005aa:	087b      	lsrs	r3, r7, #1
 80005ac:	e00e      	b.n	80005cc <__udivmoddi4+0xfc>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d101      	bne.n	80005b6 <__udivmoddi4+0xe6>
 80005b2:	42a2      	cmp	r2, r4
 80005b4:	d80c      	bhi.n	80005d0 <__udivmoddi4+0x100>
 80005b6:	1aa4      	subs	r4, r4, r2
 80005b8:	419d      	sbcs	r5, r3
 80005ba:	2001      	movs	r0, #1
 80005bc:	1924      	adds	r4, r4, r4
 80005be:	416d      	adcs	r5, r5
 80005c0:	2100      	movs	r1, #0
 80005c2:	3e01      	subs	r6, #1
 80005c4:	1824      	adds	r4, r4, r0
 80005c6:	414d      	adcs	r5, r1
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d006      	beq.n	80005da <__udivmoddi4+0x10a>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d9ee      	bls.n	80005ae <__udivmoddi4+0xde>
 80005d0:	3e01      	subs	r6, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d1f8      	bne.n	80005cc <__udivmoddi4+0xfc>
 80005da:	9800      	ldr	r0, [sp, #0]
 80005dc:	9901      	ldr	r1, [sp, #4]
 80005de:	465b      	mov	r3, fp
 80005e0:	1900      	adds	r0, r0, r4
 80005e2:	4169      	adcs	r1, r5
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	db24      	blt.n	8000632 <__udivmoddi4+0x162>
 80005e8:	002b      	movs	r3, r5
 80005ea:	465a      	mov	r2, fp
 80005ec:	4644      	mov	r4, r8
 80005ee:	40d3      	lsrs	r3, r2
 80005f0:	002a      	movs	r2, r5
 80005f2:	40e2      	lsrs	r2, r4
 80005f4:	001c      	movs	r4, r3
 80005f6:	465b      	mov	r3, fp
 80005f8:	0015      	movs	r5, r2
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db2a      	blt.n	8000654 <__udivmoddi4+0x184>
 80005fe:	0026      	movs	r6, r4
 8000600:	409e      	lsls	r6, r3
 8000602:	0033      	movs	r3, r6
 8000604:	0026      	movs	r6, r4
 8000606:	4647      	mov	r7, r8
 8000608:	40be      	lsls	r6, r7
 800060a:	0032      	movs	r2, r6
 800060c:	1a80      	subs	r0, r0, r2
 800060e:	4199      	sbcs	r1, r3
 8000610:	9000      	str	r0, [sp, #0]
 8000612:	9101      	str	r1, [sp, #4]
 8000614:	e79e      	b.n	8000554 <__udivmoddi4+0x84>
 8000616:	42a3      	cmp	r3, r4
 8000618:	d8bc      	bhi.n	8000594 <__udivmoddi4+0xc4>
 800061a:	e782      	b.n	8000522 <__udivmoddi4+0x52>
 800061c:	4642      	mov	r2, r8
 800061e:	2320      	movs	r3, #32
 8000620:	2100      	movs	r1, #0
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	2200      	movs	r2, #0
 8000626:	9100      	str	r1, [sp, #0]
 8000628:	9201      	str	r2, [sp, #4]
 800062a:	2201      	movs	r2, #1
 800062c:	40da      	lsrs	r2, r3
 800062e:	9201      	str	r2, [sp, #4]
 8000630:	e785      	b.n	800053e <__udivmoddi4+0x6e>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	002a      	movs	r2, r5
 800063a:	4646      	mov	r6, r8
 800063c:	409a      	lsls	r2, r3
 800063e:	0023      	movs	r3, r4
 8000640:	40f3      	lsrs	r3, r6
 8000642:	4644      	mov	r4, r8
 8000644:	4313      	orrs	r3, r2
 8000646:	002a      	movs	r2, r5
 8000648:	40e2      	lsrs	r2, r4
 800064a:	001c      	movs	r4, r3
 800064c:	465b      	mov	r3, fp
 800064e:	0015      	movs	r5, r2
 8000650:	2b00      	cmp	r3, #0
 8000652:	dad4      	bge.n	80005fe <__udivmoddi4+0x12e>
 8000654:	4642      	mov	r2, r8
 8000656:	002f      	movs	r7, r5
 8000658:	2320      	movs	r3, #32
 800065a:	0026      	movs	r6, r4
 800065c:	4097      	lsls	r7, r2
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	40de      	lsrs	r6, r3
 8000662:	003b      	movs	r3, r7
 8000664:	4333      	orrs	r3, r6
 8000666:	e7cd      	b.n	8000604 <__udivmoddi4+0x134>

08000668 <__aeabi_i2f>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	2800      	cmp	r0, #0
 800066c:	d013      	beq.n	8000696 <__aeabi_i2f+0x2e>
 800066e:	17c3      	asrs	r3, r0, #31
 8000670:	18c5      	adds	r5, r0, r3
 8000672:	405d      	eors	r5, r3
 8000674:	0fc4      	lsrs	r4, r0, #31
 8000676:	0028      	movs	r0, r5
 8000678:	f001 fee0 	bl	800243c <__clzsi2>
 800067c:	239e      	movs	r3, #158	; 0x9e
 800067e:	0001      	movs	r1, r0
 8000680:	1a1b      	subs	r3, r3, r0
 8000682:	2b96      	cmp	r3, #150	; 0x96
 8000684:	dc0f      	bgt.n	80006a6 <__aeabi_i2f+0x3e>
 8000686:	2808      	cmp	r0, #8
 8000688:	d031      	beq.n	80006ee <__aeabi_i2f+0x86>
 800068a:	3908      	subs	r1, #8
 800068c:	408d      	lsls	r5, r1
 800068e:	026d      	lsls	r5, r5, #9
 8000690:	0a6d      	lsrs	r5, r5, #9
 8000692:	b2d8      	uxtb	r0, r3
 8000694:	e002      	b.n	800069c <__aeabi_i2f+0x34>
 8000696:	2400      	movs	r4, #0
 8000698:	2000      	movs	r0, #0
 800069a:	2500      	movs	r5, #0
 800069c:	05c0      	lsls	r0, r0, #23
 800069e:	4328      	orrs	r0, r5
 80006a0:	07e4      	lsls	r4, r4, #31
 80006a2:	4320      	orrs	r0, r4
 80006a4:	bd70      	pop	{r4, r5, r6, pc}
 80006a6:	2b99      	cmp	r3, #153	; 0x99
 80006a8:	dd0c      	ble.n	80006c4 <__aeabi_i2f+0x5c>
 80006aa:	2205      	movs	r2, #5
 80006ac:	1a12      	subs	r2, r2, r0
 80006ae:	0028      	movs	r0, r5
 80006b0:	40d0      	lsrs	r0, r2
 80006b2:	0002      	movs	r2, r0
 80006b4:	0008      	movs	r0, r1
 80006b6:	301b      	adds	r0, #27
 80006b8:	4085      	lsls	r5, r0
 80006ba:	0028      	movs	r0, r5
 80006bc:	1e45      	subs	r5, r0, #1
 80006be:	41a8      	sbcs	r0, r5
 80006c0:	4302      	orrs	r2, r0
 80006c2:	0015      	movs	r5, r2
 80006c4:	2905      	cmp	r1, #5
 80006c6:	dc16      	bgt.n	80006f6 <__aeabi_i2f+0x8e>
 80006c8:	002a      	movs	r2, r5
 80006ca:	480f      	ldr	r0, [pc, #60]	; (8000708 <__aeabi_i2f+0xa0>)
 80006cc:	4002      	ands	r2, r0
 80006ce:	076e      	lsls	r6, r5, #29
 80006d0:	d009      	beq.n	80006e6 <__aeabi_i2f+0x7e>
 80006d2:	260f      	movs	r6, #15
 80006d4:	4035      	ands	r5, r6
 80006d6:	2d04      	cmp	r5, #4
 80006d8:	d005      	beq.n	80006e6 <__aeabi_i2f+0x7e>
 80006da:	3204      	adds	r2, #4
 80006dc:	0155      	lsls	r5, r2, #5
 80006de:	d502      	bpl.n	80006e6 <__aeabi_i2f+0x7e>
 80006e0:	239f      	movs	r3, #159	; 0x9f
 80006e2:	4002      	ands	r2, r0
 80006e4:	1a5b      	subs	r3, r3, r1
 80006e6:	0192      	lsls	r2, r2, #6
 80006e8:	0a55      	lsrs	r5, r2, #9
 80006ea:	b2d8      	uxtb	r0, r3
 80006ec:	e7d6      	b.n	800069c <__aeabi_i2f+0x34>
 80006ee:	026d      	lsls	r5, r5, #9
 80006f0:	2096      	movs	r0, #150	; 0x96
 80006f2:	0a6d      	lsrs	r5, r5, #9
 80006f4:	e7d2      	b.n	800069c <__aeabi_i2f+0x34>
 80006f6:	1f4a      	subs	r2, r1, #5
 80006f8:	4095      	lsls	r5, r2
 80006fa:	002a      	movs	r2, r5
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <__aeabi_i2f+0xa0>)
 80006fe:	4002      	ands	r2, r0
 8000700:	076e      	lsls	r6, r5, #29
 8000702:	d0f0      	beq.n	80006e6 <__aeabi_i2f+0x7e>
 8000704:	e7e5      	b.n	80006d2 <__aeabi_i2f+0x6a>
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	fbffffff 	.word	0xfbffffff

0800070c <__aeabi_dadd>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	464f      	mov	r7, r9
 8000710:	4646      	mov	r6, r8
 8000712:	46d6      	mov	lr, sl
 8000714:	0004      	movs	r4, r0
 8000716:	b5c0      	push	{r6, r7, lr}
 8000718:	001f      	movs	r7, r3
 800071a:	030b      	lsls	r3, r1, #12
 800071c:	0010      	movs	r0, r2
 800071e:	004e      	lsls	r6, r1, #1
 8000720:	0a5b      	lsrs	r3, r3, #9
 8000722:	0fcd      	lsrs	r5, r1, #31
 8000724:	0f61      	lsrs	r1, r4, #29
 8000726:	007a      	lsls	r2, r7, #1
 8000728:	4319      	orrs	r1, r3
 800072a:	00e3      	lsls	r3, r4, #3
 800072c:	033c      	lsls	r4, r7, #12
 800072e:	0fff      	lsrs	r7, r7, #31
 8000730:	46bc      	mov	ip, r7
 8000732:	0a64      	lsrs	r4, r4, #9
 8000734:	0f47      	lsrs	r7, r0, #29
 8000736:	4327      	orrs	r7, r4
 8000738:	0d76      	lsrs	r6, r6, #21
 800073a:	0d52      	lsrs	r2, r2, #21
 800073c:	00c0      	lsls	r0, r0, #3
 800073e:	46b9      	mov	r9, r7
 8000740:	4680      	mov	r8, r0
 8000742:	1ab7      	subs	r7, r6, r2
 8000744:	4565      	cmp	r5, ip
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x3e>
 8000748:	e09b      	b.n	8000882 <__aeabi_dadd+0x176>
 800074a:	2f00      	cmp	r7, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_dadd+0x44>
 800074e:	e084      	b.n	800085a <__aeabi_dadd+0x14e>
 8000750:	2a00      	cmp	r2, #0
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x4a>
 8000754:	e0be      	b.n	80008d4 <__aeabi_dadd+0x1c8>
 8000756:	4ac8      	ldr	r2, [pc, #800]	; (8000a78 <__aeabi_dadd+0x36c>)
 8000758:	4296      	cmp	r6, r2
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x52>
 800075c:	e124      	b.n	80009a8 <__aeabi_dadd+0x29c>
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	464c      	mov	r4, r9
 8000762:	0412      	lsls	r2, r2, #16
 8000764:	4314      	orrs	r4, r2
 8000766:	46a1      	mov	r9, r4
 8000768:	2f38      	cmp	r7, #56	; 0x38
 800076a:	dd00      	ble.n	800076e <__aeabi_dadd+0x62>
 800076c:	e167      	b.n	8000a3e <__aeabi_dadd+0x332>
 800076e:	2f1f      	cmp	r7, #31
 8000770:	dd00      	ble.n	8000774 <__aeabi_dadd+0x68>
 8000772:	e1d6      	b.n	8000b22 <__aeabi_dadd+0x416>
 8000774:	2220      	movs	r2, #32
 8000776:	464c      	mov	r4, r9
 8000778:	1bd2      	subs	r2, r2, r7
 800077a:	4094      	lsls	r4, r2
 800077c:	46a2      	mov	sl, r4
 800077e:	4644      	mov	r4, r8
 8000780:	40fc      	lsrs	r4, r7
 8000782:	0020      	movs	r0, r4
 8000784:	4654      	mov	r4, sl
 8000786:	4304      	orrs	r4, r0
 8000788:	4640      	mov	r0, r8
 800078a:	4090      	lsls	r0, r2
 800078c:	1e42      	subs	r2, r0, #1
 800078e:	4190      	sbcs	r0, r2
 8000790:	464a      	mov	r2, r9
 8000792:	40fa      	lsrs	r2, r7
 8000794:	4304      	orrs	r4, r0
 8000796:	1a89      	subs	r1, r1, r2
 8000798:	1b1c      	subs	r4, r3, r4
 800079a:	42a3      	cmp	r3, r4
 800079c:	4192      	sbcs	r2, r2
 800079e:	4252      	negs	r2, r2
 80007a0:	1a8b      	subs	r3, r1, r2
 80007a2:	469a      	mov	sl, r3
 80007a4:	4653      	mov	r3, sl
 80007a6:	021b      	lsls	r3, r3, #8
 80007a8:	d400      	bmi.n	80007ac <__aeabi_dadd+0xa0>
 80007aa:	e0d4      	b.n	8000956 <__aeabi_dadd+0x24a>
 80007ac:	4653      	mov	r3, sl
 80007ae:	025a      	lsls	r2, r3, #9
 80007b0:	0a53      	lsrs	r3, r2, #9
 80007b2:	469a      	mov	sl, r3
 80007b4:	4653      	mov	r3, sl
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0xb0>
 80007ba:	e104      	b.n	80009c6 <__aeabi_dadd+0x2ba>
 80007bc:	4650      	mov	r0, sl
 80007be:	f001 fe3d 	bl	800243c <__clzsi2>
 80007c2:	0003      	movs	r3, r0
 80007c4:	3b08      	subs	r3, #8
 80007c6:	2220      	movs	r2, #32
 80007c8:	0020      	movs	r0, r4
 80007ca:	1ad2      	subs	r2, r2, r3
 80007cc:	4651      	mov	r1, sl
 80007ce:	40d0      	lsrs	r0, r2
 80007d0:	4099      	lsls	r1, r3
 80007d2:	0002      	movs	r2, r0
 80007d4:	409c      	lsls	r4, r3
 80007d6:	430a      	orrs	r2, r1
 80007d8:	42b3      	cmp	r3, r6
 80007da:	da00      	bge.n	80007de <__aeabi_dadd+0xd2>
 80007dc:	e102      	b.n	80009e4 <__aeabi_dadd+0x2d8>
 80007de:	1b9b      	subs	r3, r3, r6
 80007e0:	1c59      	adds	r1, r3, #1
 80007e2:	291f      	cmp	r1, #31
 80007e4:	dd00      	ble.n	80007e8 <__aeabi_dadd+0xdc>
 80007e6:	e0a7      	b.n	8000938 <__aeabi_dadd+0x22c>
 80007e8:	2320      	movs	r3, #32
 80007ea:	0010      	movs	r0, r2
 80007ec:	0026      	movs	r6, r4
 80007ee:	1a5b      	subs	r3, r3, r1
 80007f0:	409c      	lsls	r4, r3
 80007f2:	4098      	lsls	r0, r3
 80007f4:	40ce      	lsrs	r6, r1
 80007f6:	40ca      	lsrs	r2, r1
 80007f8:	1e63      	subs	r3, r4, #1
 80007fa:	419c      	sbcs	r4, r3
 80007fc:	4330      	orrs	r0, r6
 80007fe:	4692      	mov	sl, r2
 8000800:	2600      	movs	r6, #0
 8000802:	4304      	orrs	r4, r0
 8000804:	0763      	lsls	r3, r4, #29
 8000806:	d009      	beq.n	800081c <__aeabi_dadd+0x110>
 8000808:	230f      	movs	r3, #15
 800080a:	4023      	ands	r3, r4
 800080c:	2b04      	cmp	r3, #4
 800080e:	d005      	beq.n	800081c <__aeabi_dadd+0x110>
 8000810:	1d23      	adds	r3, r4, #4
 8000812:	42a3      	cmp	r3, r4
 8000814:	41a4      	sbcs	r4, r4
 8000816:	4264      	negs	r4, r4
 8000818:	44a2      	add	sl, r4
 800081a:	001c      	movs	r4, r3
 800081c:	4653      	mov	r3, sl
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	d400      	bmi.n	8000824 <__aeabi_dadd+0x118>
 8000822:	e09b      	b.n	800095c <__aeabi_dadd+0x250>
 8000824:	4b94      	ldr	r3, [pc, #592]	; (8000a78 <__aeabi_dadd+0x36c>)
 8000826:	3601      	adds	r6, #1
 8000828:	429e      	cmp	r6, r3
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x122>
 800082c:	e0b8      	b.n	80009a0 <__aeabi_dadd+0x294>
 800082e:	4653      	mov	r3, sl
 8000830:	4992      	ldr	r1, [pc, #584]	; (8000a7c <__aeabi_dadd+0x370>)
 8000832:	08e4      	lsrs	r4, r4, #3
 8000834:	400b      	ands	r3, r1
 8000836:	0019      	movs	r1, r3
 8000838:	075b      	lsls	r3, r3, #29
 800083a:	4323      	orrs	r3, r4
 800083c:	0572      	lsls	r2, r6, #21
 800083e:	024c      	lsls	r4, r1, #9
 8000840:	0b24      	lsrs	r4, r4, #12
 8000842:	0d52      	lsrs	r2, r2, #21
 8000844:	0512      	lsls	r2, r2, #20
 8000846:	07ed      	lsls	r5, r5, #31
 8000848:	4322      	orrs	r2, r4
 800084a:	432a      	orrs	r2, r5
 800084c:	0018      	movs	r0, r3
 800084e:	0011      	movs	r1, r2
 8000850:	bce0      	pop	{r5, r6, r7}
 8000852:	46ba      	mov	sl, r7
 8000854:	46b1      	mov	r9, r6
 8000856:	46a8      	mov	r8, r5
 8000858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085a:	2f00      	cmp	r7, #0
 800085c:	d048      	beq.n	80008f0 <__aeabi_dadd+0x1e4>
 800085e:	1b97      	subs	r7, r2, r6
 8000860:	2e00      	cmp	r6, #0
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x15a>
 8000864:	e10e      	b.n	8000a84 <__aeabi_dadd+0x378>
 8000866:	000c      	movs	r4, r1
 8000868:	431c      	orrs	r4, r3
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x162>
 800086c:	e1b7      	b.n	8000bde <__aeabi_dadd+0x4d2>
 800086e:	1e7c      	subs	r4, r7, #1
 8000870:	2f01      	cmp	r7, #1
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x16a>
 8000874:	e226      	b.n	8000cc4 <__aeabi_dadd+0x5b8>
 8000876:	4d80      	ldr	r5, [pc, #512]	; (8000a78 <__aeabi_dadd+0x36c>)
 8000878:	42af      	cmp	r7, r5
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x172>
 800087c:	e1d5      	b.n	8000c2a <__aeabi_dadd+0x51e>
 800087e:	0027      	movs	r7, r4
 8000880:	e107      	b.n	8000a92 <__aeabi_dadd+0x386>
 8000882:	2f00      	cmp	r7, #0
 8000884:	dc00      	bgt.n	8000888 <__aeabi_dadd+0x17c>
 8000886:	e0b2      	b.n	80009ee <__aeabi_dadd+0x2e2>
 8000888:	2a00      	cmp	r2, #0
 800088a:	d047      	beq.n	800091c <__aeabi_dadd+0x210>
 800088c:	4a7a      	ldr	r2, [pc, #488]	; (8000a78 <__aeabi_dadd+0x36c>)
 800088e:	4296      	cmp	r6, r2
 8000890:	d100      	bne.n	8000894 <__aeabi_dadd+0x188>
 8000892:	e089      	b.n	80009a8 <__aeabi_dadd+0x29c>
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	464c      	mov	r4, r9
 8000898:	0412      	lsls	r2, r2, #16
 800089a:	4314      	orrs	r4, r2
 800089c:	46a1      	mov	r9, r4
 800089e:	2f38      	cmp	r7, #56	; 0x38
 80008a0:	dc6b      	bgt.n	800097a <__aeabi_dadd+0x26e>
 80008a2:	2f1f      	cmp	r7, #31
 80008a4:	dc00      	bgt.n	80008a8 <__aeabi_dadd+0x19c>
 80008a6:	e16e      	b.n	8000b86 <__aeabi_dadd+0x47a>
 80008a8:	003a      	movs	r2, r7
 80008aa:	4648      	mov	r0, r9
 80008ac:	3a20      	subs	r2, #32
 80008ae:	40d0      	lsrs	r0, r2
 80008b0:	4684      	mov	ip, r0
 80008b2:	2f20      	cmp	r7, #32
 80008b4:	d007      	beq.n	80008c6 <__aeabi_dadd+0x1ba>
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	4648      	mov	r0, r9
 80008ba:	1bd2      	subs	r2, r2, r7
 80008bc:	4090      	lsls	r0, r2
 80008be:	0002      	movs	r2, r0
 80008c0:	4640      	mov	r0, r8
 80008c2:	4310      	orrs	r0, r2
 80008c4:	4680      	mov	r8, r0
 80008c6:	4640      	mov	r0, r8
 80008c8:	1e42      	subs	r2, r0, #1
 80008ca:	4190      	sbcs	r0, r2
 80008cc:	4662      	mov	r2, ip
 80008ce:	0004      	movs	r4, r0
 80008d0:	4314      	orrs	r4, r2
 80008d2:	e057      	b.n	8000984 <__aeabi_dadd+0x278>
 80008d4:	464a      	mov	r2, r9
 80008d6:	4302      	orrs	r2, r0
 80008d8:	d100      	bne.n	80008dc <__aeabi_dadd+0x1d0>
 80008da:	e103      	b.n	8000ae4 <__aeabi_dadd+0x3d8>
 80008dc:	1e7a      	subs	r2, r7, #1
 80008de:	2f01      	cmp	r7, #1
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x1d8>
 80008e2:	e193      	b.n	8000c0c <__aeabi_dadd+0x500>
 80008e4:	4c64      	ldr	r4, [pc, #400]	; (8000a78 <__aeabi_dadd+0x36c>)
 80008e6:	42a7      	cmp	r7, r4
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x1e0>
 80008ea:	e18a      	b.n	8000c02 <__aeabi_dadd+0x4f6>
 80008ec:	0017      	movs	r7, r2
 80008ee:	e73b      	b.n	8000768 <__aeabi_dadd+0x5c>
 80008f0:	4c63      	ldr	r4, [pc, #396]	; (8000a80 <__aeabi_dadd+0x374>)
 80008f2:	1c72      	adds	r2, r6, #1
 80008f4:	4222      	tst	r2, r4
 80008f6:	d000      	beq.n	80008fa <__aeabi_dadd+0x1ee>
 80008f8:	e0e0      	b.n	8000abc <__aeabi_dadd+0x3b0>
 80008fa:	000a      	movs	r2, r1
 80008fc:	431a      	orrs	r2, r3
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d000      	beq.n	8000904 <__aeabi_dadd+0x1f8>
 8000902:	e174      	b.n	8000bee <__aeabi_dadd+0x4e2>
 8000904:	2a00      	cmp	r2, #0
 8000906:	d100      	bne.n	800090a <__aeabi_dadd+0x1fe>
 8000908:	e1d0      	b.n	8000cac <__aeabi_dadd+0x5a0>
 800090a:	464a      	mov	r2, r9
 800090c:	4302      	orrs	r2, r0
 800090e:	d000      	beq.n	8000912 <__aeabi_dadd+0x206>
 8000910:	e1e3      	b.n	8000cda <__aeabi_dadd+0x5ce>
 8000912:	074a      	lsls	r2, r1, #29
 8000914:	08db      	lsrs	r3, r3, #3
 8000916:	4313      	orrs	r3, r2
 8000918:	08c9      	lsrs	r1, r1, #3
 800091a:	e029      	b.n	8000970 <__aeabi_dadd+0x264>
 800091c:	464a      	mov	r2, r9
 800091e:	4302      	orrs	r2, r0
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x218>
 8000922:	e17d      	b.n	8000c20 <__aeabi_dadd+0x514>
 8000924:	1e7a      	subs	r2, r7, #1
 8000926:	2f01      	cmp	r7, #1
 8000928:	d100      	bne.n	800092c <__aeabi_dadd+0x220>
 800092a:	e0e0      	b.n	8000aee <__aeabi_dadd+0x3e2>
 800092c:	4c52      	ldr	r4, [pc, #328]	; (8000a78 <__aeabi_dadd+0x36c>)
 800092e:	42a7      	cmp	r7, r4
 8000930:	d100      	bne.n	8000934 <__aeabi_dadd+0x228>
 8000932:	e166      	b.n	8000c02 <__aeabi_dadd+0x4f6>
 8000934:	0017      	movs	r7, r2
 8000936:	e7b2      	b.n	800089e <__aeabi_dadd+0x192>
 8000938:	0010      	movs	r0, r2
 800093a:	3b1f      	subs	r3, #31
 800093c:	40d8      	lsrs	r0, r3
 800093e:	2920      	cmp	r1, #32
 8000940:	d003      	beq.n	800094a <__aeabi_dadd+0x23e>
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	1a5b      	subs	r3, r3, r1
 8000946:	409a      	lsls	r2, r3
 8000948:	4314      	orrs	r4, r2
 800094a:	1e63      	subs	r3, r4, #1
 800094c:	419c      	sbcs	r4, r3
 800094e:	2300      	movs	r3, #0
 8000950:	2600      	movs	r6, #0
 8000952:	469a      	mov	sl, r3
 8000954:	4304      	orrs	r4, r0
 8000956:	0763      	lsls	r3, r4, #29
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x250>
 800095a:	e755      	b.n	8000808 <__aeabi_dadd+0xfc>
 800095c:	4652      	mov	r2, sl
 800095e:	08e3      	lsrs	r3, r4, #3
 8000960:	0752      	lsls	r2, r2, #29
 8000962:	4313      	orrs	r3, r2
 8000964:	4652      	mov	r2, sl
 8000966:	0037      	movs	r7, r6
 8000968:	08d1      	lsrs	r1, r2, #3
 800096a:	4a43      	ldr	r2, [pc, #268]	; (8000a78 <__aeabi_dadd+0x36c>)
 800096c:	4297      	cmp	r7, r2
 800096e:	d01f      	beq.n	80009b0 <__aeabi_dadd+0x2a4>
 8000970:	0309      	lsls	r1, r1, #12
 8000972:	057a      	lsls	r2, r7, #21
 8000974:	0b0c      	lsrs	r4, r1, #12
 8000976:	0d52      	lsrs	r2, r2, #21
 8000978:	e764      	b.n	8000844 <__aeabi_dadd+0x138>
 800097a:	4642      	mov	r2, r8
 800097c:	464c      	mov	r4, r9
 800097e:	4314      	orrs	r4, r2
 8000980:	1e62      	subs	r2, r4, #1
 8000982:	4194      	sbcs	r4, r2
 8000984:	18e4      	adds	r4, r4, r3
 8000986:	429c      	cmp	r4, r3
 8000988:	4192      	sbcs	r2, r2
 800098a:	4252      	negs	r2, r2
 800098c:	4692      	mov	sl, r2
 800098e:	448a      	add	sl, r1
 8000990:	4653      	mov	r3, sl
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	d5df      	bpl.n	8000956 <__aeabi_dadd+0x24a>
 8000996:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <__aeabi_dadd+0x36c>)
 8000998:	3601      	adds	r6, #1
 800099a:	429e      	cmp	r6, r3
 800099c:	d000      	beq.n	80009a0 <__aeabi_dadd+0x294>
 800099e:	e0b3      	b.n	8000b08 <__aeabi_dadd+0x3fc>
 80009a0:	0032      	movs	r2, r6
 80009a2:	2400      	movs	r4, #0
 80009a4:	2300      	movs	r3, #0
 80009a6:	e74d      	b.n	8000844 <__aeabi_dadd+0x138>
 80009a8:	074a      	lsls	r2, r1, #29
 80009aa:	08db      	lsrs	r3, r3, #3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	08c9      	lsrs	r1, r1, #3
 80009b0:	001a      	movs	r2, r3
 80009b2:	430a      	orrs	r2, r1
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dadd+0x2ac>
 80009b6:	e200      	b.n	8000dba <__aeabi_dadd+0x6ae>
 80009b8:	2480      	movs	r4, #128	; 0x80
 80009ba:	0324      	lsls	r4, r4, #12
 80009bc:	430c      	orrs	r4, r1
 80009be:	0324      	lsls	r4, r4, #12
 80009c0:	4a2d      	ldr	r2, [pc, #180]	; (8000a78 <__aeabi_dadd+0x36c>)
 80009c2:	0b24      	lsrs	r4, r4, #12
 80009c4:	e73e      	b.n	8000844 <__aeabi_dadd+0x138>
 80009c6:	0020      	movs	r0, r4
 80009c8:	f001 fd38 	bl	800243c <__clzsi2>
 80009cc:	0003      	movs	r3, r0
 80009ce:	3318      	adds	r3, #24
 80009d0:	2b1f      	cmp	r3, #31
 80009d2:	dc00      	bgt.n	80009d6 <__aeabi_dadd+0x2ca>
 80009d4:	e6f7      	b.n	80007c6 <__aeabi_dadd+0xba>
 80009d6:	0022      	movs	r2, r4
 80009d8:	3808      	subs	r0, #8
 80009da:	4082      	lsls	r2, r0
 80009dc:	2400      	movs	r4, #0
 80009de:	42b3      	cmp	r3, r6
 80009e0:	db00      	blt.n	80009e4 <__aeabi_dadd+0x2d8>
 80009e2:	e6fc      	b.n	80007de <__aeabi_dadd+0xd2>
 80009e4:	1af6      	subs	r6, r6, r3
 80009e6:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <__aeabi_dadd+0x370>)
 80009e8:	401a      	ands	r2, r3
 80009ea:	4692      	mov	sl, r2
 80009ec:	e70a      	b.n	8000804 <__aeabi_dadd+0xf8>
 80009ee:	2f00      	cmp	r7, #0
 80009f0:	d02b      	beq.n	8000a4a <__aeabi_dadd+0x33e>
 80009f2:	1b97      	subs	r7, r2, r6
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d100      	bne.n	80009fa <__aeabi_dadd+0x2ee>
 80009f8:	e0b8      	b.n	8000b6c <__aeabi_dadd+0x460>
 80009fa:	4c1f      	ldr	r4, [pc, #124]	; (8000a78 <__aeabi_dadd+0x36c>)
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x2f6>
 8000a00:	e11c      	b.n	8000c3c <__aeabi_dadd+0x530>
 8000a02:	2480      	movs	r4, #128	; 0x80
 8000a04:	0424      	lsls	r4, r4, #16
 8000a06:	4321      	orrs	r1, r4
 8000a08:	2f38      	cmp	r7, #56	; 0x38
 8000a0a:	dd00      	ble.n	8000a0e <__aeabi_dadd+0x302>
 8000a0c:	e11e      	b.n	8000c4c <__aeabi_dadd+0x540>
 8000a0e:	2f1f      	cmp	r7, #31
 8000a10:	dd00      	ble.n	8000a14 <__aeabi_dadd+0x308>
 8000a12:	e19e      	b.n	8000d52 <__aeabi_dadd+0x646>
 8000a14:	2620      	movs	r6, #32
 8000a16:	000c      	movs	r4, r1
 8000a18:	1bf6      	subs	r6, r6, r7
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	40b3      	lsls	r3, r6
 8000a1e:	40b4      	lsls	r4, r6
 8000a20:	40f8      	lsrs	r0, r7
 8000a22:	1e5e      	subs	r6, r3, #1
 8000a24:	41b3      	sbcs	r3, r6
 8000a26:	40f9      	lsrs	r1, r7
 8000a28:	4304      	orrs	r4, r0
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	4489      	add	r9, r1
 8000a2e:	4444      	add	r4, r8
 8000a30:	4544      	cmp	r4, r8
 8000a32:	419b      	sbcs	r3, r3
 8000a34:	425b      	negs	r3, r3
 8000a36:	444b      	add	r3, r9
 8000a38:	469a      	mov	sl, r3
 8000a3a:	0016      	movs	r6, r2
 8000a3c:	e7a8      	b.n	8000990 <__aeabi_dadd+0x284>
 8000a3e:	4642      	mov	r2, r8
 8000a40:	464c      	mov	r4, r9
 8000a42:	4314      	orrs	r4, r2
 8000a44:	1e62      	subs	r2, r4, #1
 8000a46:	4194      	sbcs	r4, r2
 8000a48:	e6a6      	b.n	8000798 <__aeabi_dadd+0x8c>
 8000a4a:	4c0d      	ldr	r4, [pc, #52]	; (8000a80 <__aeabi_dadd+0x374>)
 8000a4c:	1c72      	adds	r2, r6, #1
 8000a4e:	4222      	tst	r2, r4
 8000a50:	d000      	beq.n	8000a54 <__aeabi_dadd+0x348>
 8000a52:	e0a8      	b.n	8000ba6 <__aeabi_dadd+0x49a>
 8000a54:	000a      	movs	r2, r1
 8000a56:	431a      	orrs	r2, r3
 8000a58:	2e00      	cmp	r6, #0
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_dadd+0x352>
 8000a5c:	e10a      	b.n	8000c74 <__aeabi_dadd+0x568>
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d100      	bne.n	8000a64 <__aeabi_dadd+0x358>
 8000a62:	e15e      	b.n	8000d22 <__aeabi_dadd+0x616>
 8000a64:	464a      	mov	r2, r9
 8000a66:	4302      	orrs	r2, r0
 8000a68:	d000      	beq.n	8000a6c <__aeabi_dadd+0x360>
 8000a6a:	e161      	b.n	8000d30 <__aeabi_dadd+0x624>
 8000a6c:	074a      	lsls	r2, r1, #29
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	e77c      	b.n	8000970 <__aeabi_dadd+0x264>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	000007ff 	.word	0x000007ff
 8000a7c:	ff7fffff 	.word	0xff7fffff
 8000a80:	000007fe 	.word	0x000007fe
 8000a84:	4ccf      	ldr	r4, [pc, #828]	; (8000dc4 <__aeabi_dadd+0x6b8>)
 8000a86:	42a2      	cmp	r2, r4
 8000a88:	d100      	bne.n	8000a8c <__aeabi_dadd+0x380>
 8000a8a:	e0ce      	b.n	8000c2a <__aeabi_dadd+0x51e>
 8000a8c:	2480      	movs	r4, #128	; 0x80
 8000a8e:	0424      	lsls	r4, r4, #16
 8000a90:	4321      	orrs	r1, r4
 8000a92:	2f38      	cmp	r7, #56	; 0x38
 8000a94:	dc5b      	bgt.n	8000b4e <__aeabi_dadd+0x442>
 8000a96:	2f1f      	cmp	r7, #31
 8000a98:	dd00      	ble.n	8000a9c <__aeabi_dadd+0x390>
 8000a9a:	e0dc      	b.n	8000c56 <__aeabi_dadd+0x54a>
 8000a9c:	2520      	movs	r5, #32
 8000a9e:	000c      	movs	r4, r1
 8000aa0:	1bed      	subs	r5, r5, r7
 8000aa2:	001e      	movs	r6, r3
 8000aa4:	40ab      	lsls	r3, r5
 8000aa6:	40ac      	lsls	r4, r5
 8000aa8:	40fe      	lsrs	r6, r7
 8000aaa:	1e5d      	subs	r5, r3, #1
 8000aac:	41ab      	sbcs	r3, r5
 8000aae:	4334      	orrs	r4, r6
 8000ab0:	40f9      	lsrs	r1, r7
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	464b      	mov	r3, r9
 8000ab6:	1a5b      	subs	r3, r3, r1
 8000ab8:	4699      	mov	r9, r3
 8000aba:	e04c      	b.n	8000b56 <__aeabi_dadd+0x44a>
 8000abc:	464a      	mov	r2, r9
 8000abe:	1a1c      	subs	r4, r3, r0
 8000ac0:	1a88      	subs	r0, r1, r2
 8000ac2:	42a3      	cmp	r3, r4
 8000ac4:	4192      	sbcs	r2, r2
 8000ac6:	4252      	negs	r2, r2
 8000ac8:	4692      	mov	sl, r2
 8000aca:	0002      	movs	r2, r0
 8000acc:	4650      	mov	r0, sl
 8000ace:	1a12      	subs	r2, r2, r0
 8000ad0:	4692      	mov	sl, r2
 8000ad2:	0212      	lsls	r2, r2, #8
 8000ad4:	d478      	bmi.n	8000bc8 <__aeabi_dadd+0x4bc>
 8000ad6:	4653      	mov	r3, sl
 8000ad8:	4323      	orrs	r3, r4
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x3d2>
 8000adc:	e66a      	b.n	80007b4 <__aeabi_dadd+0xa8>
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2500      	movs	r5, #0
 8000ae2:	e745      	b.n	8000970 <__aeabi_dadd+0x264>
 8000ae4:	074a      	lsls	r2, r1, #29
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	08c9      	lsrs	r1, r1, #3
 8000aec:	e73d      	b.n	800096a <__aeabi_dadd+0x25e>
 8000aee:	181c      	adds	r4, r3, r0
 8000af0:	429c      	cmp	r4, r3
 8000af2:	419b      	sbcs	r3, r3
 8000af4:	4449      	add	r1, r9
 8000af6:	468a      	mov	sl, r1
 8000af8:	425b      	negs	r3, r3
 8000afa:	449a      	add	sl, r3
 8000afc:	4653      	mov	r3, sl
 8000afe:	2601      	movs	r6, #1
 8000b00:	021b      	lsls	r3, r3, #8
 8000b02:	d400      	bmi.n	8000b06 <__aeabi_dadd+0x3fa>
 8000b04:	e727      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000b06:	2602      	movs	r6, #2
 8000b08:	4652      	mov	r2, sl
 8000b0a:	4baf      	ldr	r3, [pc, #700]	; (8000dc8 <__aeabi_dadd+0x6bc>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	401a      	ands	r2, r3
 8000b10:	0013      	movs	r3, r2
 8000b12:	4021      	ands	r1, r4
 8000b14:	0862      	lsrs	r2, r4, #1
 8000b16:	430a      	orrs	r2, r1
 8000b18:	07dc      	lsls	r4, r3, #31
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	4314      	orrs	r4, r2
 8000b20:	e670      	b.n	8000804 <__aeabi_dadd+0xf8>
 8000b22:	003a      	movs	r2, r7
 8000b24:	464c      	mov	r4, r9
 8000b26:	3a20      	subs	r2, #32
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	46a4      	mov	ip, r4
 8000b2c:	2f20      	cmp	r7, #32
 8000b2e:	d007      	beq.n	8000b40 <__aeabi_dadd+0x434>
 8000b30:	2240      	movs	r2, #64	; 0x40
 8000b32:	4648      	mov	r0, r9
 8000b34:	1bd2      	subs	r2, r2, r7
 8000b36:	4090      	lsls	r0, r2
 8000b38:	0002      	movs	r2, r0
 8000b3a:	4640      	mov	r0, r8
 8000b3c:	4310      	orrs	r0, r2
 8000b3e:	4680      	mov	r8, r0
 8000b40:	4640      	mov	r0, r8
 8000b42:	1e42      	subs	r2, r0, #1
 8000b44:	4190      	sbcs	r0, r2
 8000b46:	4662      	mov	r2, ip
 8000b48:	0004      	movs	r4, r0
 8000b4a:	4314      	orrs	r4, r2
 8000b4c:	e624      	b.n	8000798 <__aeabi_dadd+0x8c>
 8000b4e:	4319      	orrs	r1, r3
 8000b50:	000c      	movs	r4, r1
 8000b52:	1e63      	subs	r3, r4, #1
 8000b54:	419c      	sbcs	r4, r3
 8000b56:	4643      	mov	r3, r8
 8000b58:	1b1c      	subs	r4, r3, r4
 8000b5a:	45a0      	cmp	r8, r4
 8000b5c:	419b      	sbcs	r3, r3
 8000b5e:	4649      	mov	r1, r9
 8000b60:	425b      	negs	r3, r3
 8000b62:	1acb      	subs	r3, r1, r3
 8000b64:	469a      	mov	sl, r3
 8000b66:	4665      	mov	r5, ip
 8000b68:	0016      	movs	r6, r2
 8000b6a:	e61b      	b.n	80007a4 <__aeabi_dadd+0x98>
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	431c      	orrs	r4, r3
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x468>
 8000b72:	e0c7      	b.n	8000d04 <__aeabi_dadd+0x5f8>
 8000b74:	1e7c      	subs	r4, r7, #1
 8000b76:	2f01      	cmp	r7, #1
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x470>
 8000b7a:	e0f9      	b.n	8000d70 <__aeabi_dadd+0x664>
 8000b7c:	4e91      	ldr	r6, [pc, #580]	; (8000dc4 <__aeabi_dadd+0x6b8>)
 8000b7e:	42b7      	cmp	r7, r6
 8000b80:	d05c      	beq.n	8000c3c <__aeabi_dadd+0x530>
 8000b82:	0027      	movs	r7, r4
 8000b84:	e740      	b.n	8000a08 <__aeabi_dadd+0x2fc>
 8000b86:	2220      	movs	r2, #32
 8000b88:	464c      	mov	r4, r9
 8000b8a:	4640      	mov	r0, r8
 8000b8c:	1bd2      	subs	r2, r2, r7
 8000b8e:	4094      	lsls	r4, r2
 8000b90:	40f8      	lsrs	r0, r7
 8000b92:	4304      	orrs	r4, r0
 8000b94:	4640      	mov	r0, r8
 8000b96:	4090      	lsls	r0, r2
 8000b98:	1e42      	subs	r2, r0, #1
 8000b9a:	4190      	sbcs	r0, r2
 8000b9c:	464a      	mov	r2, r9
 8000b9e:	40fa      	lsrs	r2, r7
 8000ba0:	4304      	orrs	r4, r0
 8000ba2:	1889      	adds	r1, r1, r2
 8000ba4:	e6ee      	b.n	8000984 <__aeabi_dadd+0x278>
 8000ba6:	4c87      	ldr	r4, [pc, #540]	; (8000dc4 <__aeabi_dadd+0x6b8>)
 8000ba8:	42a2      	cmp	r2, r4
 8000baa:	d100      	bne.n	8000bae <__aeabi_dadd+0x4a2>
 8000bac:	e6f9      	b.n	80009a2 <__aeabi_dadd+0x296>
 8000bae:	1818      	adds	r0, r3, r0
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	419b      	sbcs	r3, r3
 8000bb4:	4449      	add	r1, r9
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	18cb      	adds	r3, r1, r3
 8000bba:	07dc      	lsls	r4, r3, #31
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	085b      	lsrs	r3, r3, #1
 8000bc0:	469a      	mov	sl, r3
 8000bc2:	0016      	movs	r6, r2
 8000bc4:	4304      	orrs	r4, r0
 8000bc6:	e6c6      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000bc8:	4642      	mov	r2, r8
 8000bca:	1ad4      	subs	r4, r2, r3
 8000bcc:	45a0      	cmp	r8, r4
 8000bce:	4180      	sbcs	r0, r0
 8000bd0:	464b      	mov	r3, r9
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	1a0b      	subs	r3, r1, r0
 8000bd8:	469a      	mov	sl, r3
 8000bda:	4665      	mov	r5, ip
 8000bdc:	e5ea      	b.n	80007b4 <__aeabi_dadd+0xa8>
 8000bde:	464b      	mov	r3, r9
 8000be0:	464a      	mov	r2, r9
 8000be2:	08c0      	lsrs	r0, r0, #3
 8000be4:	075b      	lsls	r3, r3, #29
 8000be6:	4665      	mov	r5, ip
 8000be8:	4303      	orrs	r3, r0
 8000bea:	08d1      	lsrs	r1, r2, #3
 8000bec:	e6bd      	b.n	800096a <__aeabi_dadd+0x25e>
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_dadd+0x4e8>
 8000bf2:	e08e      	b.n	8000d12 <__aeabi_dadd+0x606>
 8000bf4:	464b      	mov	r3, r9
 8000bf6:	4303      	orrs	r3, r0
 8000bf8:	d117      	bne.n	8000c2a <__aeabi_dadd+0x51e>
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	0309      	lsls	r1, r1, #12
 8000c00:	e6da      	b.n	80009b8 <__aeabi_dadd+0x2ac>
 8000c02:	074a      	lsls	r2, r1, #29
 8000c04:	08db      	lsrs	r3, r3, #3
 8000c06:	4313      	orrs	r3, r2
 8000c08:	08c9      	lsrs	r1, r1, #3
 8000c0a:	e6d1      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000c0c:	1a1c      	subs	r4, r3, r0
 8000c0e:	464a      	mov	r2, r9
 8000c10:	42a3      	cmp	r3, r4
 8000c12:	419b      	sbcs	r3, r3
 8000c14:	1a89      	subs	r1, r1, r2
 8000c16:	425b      	negs	r3, r3
 8000c18:	1acb      	subs	r3, r1, r3
 8000c1a:	469a      	mov	sl, r3
 8000c1c:	2601      	movs	r6, #1
 8000c1e:	e5c1      	b.n	80007a4 <__aeabi_dadd+0x98>
 8000c20:	074a      	lsls	r2, r1, #29
 8000c22:	08db      	lsrs	r3, r3, #3
 8000c24:	4313      	orrs	r3, r2
 8000c26:	08c9      	lsrs	r1, r1, #3
 8000c28:	e69f      	b.n	800096a <__aeabi_dadd+0x25e>
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	08d8      	lsrs	r0, r3, #3
 8000c2e:	464b      	mov	r3, r9
 8000c30:	464a      	mov	r2, r9
 8000c32:	075b      	lsls	r3, r3, #29
 8000c34:	4665      	mov	r5, ip
 8000c36:	4303      	orrs	r3, r0
 8000c38:	08d1      	lsrs	r1, r2, #3
 8000c3a:	e6b9      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000c3c:	4643      	mov	r3, r8
 8000c3e:	08d8      	lsrs	r0, r3, #3
 8000c40:	464b      	mov	r3, r9
 8000c42:	464a      	mov	r2, r9
 8000c44:	075b      	lsls	r3, r3, #29
 8000c46:	4303      	orrs	r3, r0
 8000c48:	08d1      	lsrs	r1, r2, #3
 8000c4a:	e6b1      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	000c      	movs	r4, r1
 8000c50:	1e63      	subs	r3, r4, #1
 8000c52:	419c      	sbcs	r4, r3
 8000c54:	e6eb      	b.n	8000a2e <__aeabi_dadd+0x322>
 8000c56:	003c      	movs	r4, r7
 8000c58:	000d      	movs	r5, r1
 8000c5a:	3c20      	subs	r4, #32
 8000c5c:	40e5      	lsrs	r5, r4
 8000c5e:	2f20      	cmp	r7, #32
 8000c60:	d003      	beq.n	8000c6a <__aeabi_dadd+0x55e>
 8000c62:	2440      	movs	r4, #64	; 0x40
 8000c64:	1be4      	subs	r4, r4, r7
 8000c66:	40a1      	lsls	r1, r4
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	001c      	movs	r4, r3
 8000c6c:	1e63      	subs	r3, r4, #1
 8000c6e:	419c      	sbcs	r4, r3
 8000c70:	432c      	orrs	r4, r5
 8000c72:	e770      	b.n	8000b56 <__aeabi_dadd+0x44a>
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	d0e1      	beq.n	8000c3c <__aeabi_dadd+0x530>
 8000c78:	464a      	mov	r2, r9
 8000c7a:	4302      	orrs	r2, r0
 8000c7c:	d0c1      	beq.n	8000c02 <__aeabi_dadd+0x4f6>
 8000c7e:	074a      	lsls	r2, r1, #29
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	4313      	orrs	r3, r2
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	08c9      	lsrs	r1, r1, #3
 8000c88:	0312      	lsls	r2, r2, #12
 8000c8a:	4211      	tst	r1, r2
 8000c8c:	d008      	beq.n	8000ca0 <__aeabi_dadd+0x594>
 8000c8e:	4648      	mov	r0, r9
 8000c90:	08c4      	lsrs	r4, r0, #3
 8000c92:	4214      	tst	r4, r2
 8000c94:	d104      	bne.n	8000ca0 <__aeabi_dadd+0x594>
 8000c96:	4643      	mov	r3, r8
 8000c98:	0021      	movs	r1, r4
 8000c9a:	08db      	lsrs	r3, r3, #3
 8000c9c:	0742      	lsls	r2, r0, #29
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	0f5a      	lsrs	r2, r3, #29
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	0752      	lsls	r2, r2, #29
 8000ca6:	08db      	lsrs	r3, r3, #3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	e681      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000cac:	464b      	mov	r3, r9
 8000cae:	4303      	orrs	r3, r0
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_dadd+0x5a8>
 8000cb2:	e714      	b.n	8000ade <__aeabi_dadd+0x3d2>
 8000cb4:	464b      	mov	r3, r9
 8000cb6:	464a      	mov	r2, r9
 8000cb8:	08c0      	lsrs	r0, r0, #3
 8000cba:	075b      	lsls	r3, r3, #29
 8000cbc:	4665      	mov	r5, ip
 8000cbe:	4303      	orrs	r3, r0
 8000cc0:	08d1      	lsrs	r1, r2, #3
 8000cc2:	e655      	b.n	8000970 <__aeabi_dadd+0x264>
 8000cc4:	1ac4      	subs	r4, r0, r3
 8000cc6:	45a0      	cmp	r8, r4
 8000cc8:	4180      	sbcs	r0, r0
 8000cca:	464b      	mov	r3, r9
 8000ccc:	4240      	negs	r0, r0
 8000cce:	1a59      	subs	r1, r3, r1
 8000cd0:	1a0b      	subs	r3, r1, r0
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	4665      	mov	r5, ip
 8000cd6:	2601      	movs	r6, #1
 8000cd8:	e564      	b.n	80007a4 <__aeabi_dadd+0x98>
 8000cda:	1a1c      	subs	r4, r3, r0
 8000cdc:	464a      	mov	r2, r9
 8000cde:	42a3      	cmp	r3, r4
 8000ce0:	4180      	sbcs	r0, r0
 8000ce2:	1a8a      	subs	r2, r1, r2
 8000ce4:	4240      	negs	r0, r0
 8000ce6:	1a12      	subs	r2, r2, r0
 8000ce8:	4692      	mov	sl, r2
 8000cea:	0212      	lsls	r2, r2, #8
 8000cec:	d549      	bpl.n	8000d82 <__aeabi_dadd+0x676>
 8000cee:	4642      	mov	r2, r8
 8000cf0:	1ad4      	subs	r4, r2, r3
 8000cf2:	45a0      	cmp	r8, r4
 8000cf4:	4180      	sbcs	r0, r0
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	1a59      	subs	r1, r3, r1
 8000cfc:	1a0b      	subs	r3, r1, r0
 8000cfe:	469a      	mov	sl, r3
 8000d00:	4665      	mov	r5, ip
 8000d02:	e57f      	b.n	8000804 <__aeabi_dadd+0xf8>
 8000d04:	464b      	mov	r3, r9
 8000d06:	464a      	mov	r2, r9
 8000d08:	08c0      	lsrs	r0, r0, #3
 8000d0a:	075b      	lsls	r3, r3, #29
 8000d0c:	4303      	orrs	r3, r0
 8000d0e:	08d1      	lsrs	r1, r2, #3
 8000d10:	e62b      	b.n	800096a <__aeabi_dadd+0x25e>
 8000d12:	464a      	mov	r2, r9
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	4302      	orrs	r2, r0
 8000d18:	d138      	bne.n	8000d8c <__aeabi_dadd+0x680>
 8000d1a:	074a      	lsls	r2, r1, #29
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	08c9      	lsrs	r1, r1, #3
 8000d20:	e646      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000d22:	464b      	mov	r3, r9
 8000d24:	464a      	mov	r2, r9
 8000d26:	08c0      	lsrs	r0, r0, #3
 8000d28:	075b      	lsls	r3, r3, #29
 8000d2a:	4303      	orrs	r3, r0
 8000d2c:	08d1      	lsrs	r1, r2, #3
 8000d2e:	e61f      	b.n	8000970 <__aeabi_dadd+0x264>
 8000d30:	181c      	adds	r4, r3, r0
 8000d32:	429c      	cmp	r4, r3
 8000d34:	419b      	sbcs	r3, r3
 8000d36:	4449      	add	r1, r9
 8000d38:	468a      	mov	sl, r1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	449a      	add	sl, r3
 8000d3e:	4653      	mov	r3, sl
 8000d40:	021b      	lsls	r3, r3, #8
 8000d42:	d400      	bmi.n	8000d46 <__aeabi_dadd+0x63a>
 8000d44:	e607      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000d46:	4652      	mov	r2, sl
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <__aeabi_dadd+0x6bc>)
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	4692      	mov	sl, r2
 8000d50:	e601      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000d52:	003c      	movs	r4, r7
 8000d54:	000e      	movs	r6, r1
 8000d56:	3c20      	subs	r4, #32
 8000d58:	40e6      	lsrs	r6, r4
 8000d5a:	2f20      	cmp	r7, #32
 8000d5c:	d003      	beq.n	8000d66 <__aeabi_dadd+0x65a>
 8000d5e:	2440      	movs	r4, #64	; 0x40
 8000d60:	1be4      	subs	r4, r4, r7
 8000d62:	40a1      	lsls	r1, r4
 8000d64:	430b      	orrs	r3, r1
 8000d66:	001c      	movs	r4, r3
 8000d68:	1e63      	subs	r3, r4, #1
 8000d6a:	419c      	sbcs	r4, r3
 8000d6c:	4334      	orrs	r4, r6
 8000d6e:	e65e      	b.n	8000a2e <__aeabi_dadd+0x322>
 8000d70:	4443      	add	r3, r8
 8000d72:	4283      	cmp	r3, r0
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	4449      	add	r1, r9
 8000d78:	468a      	mov	sl, r1
 8000d7a:	4240      	negs	r0, r0
 8000d7c:	001c      	movs	r4, r3
 8000d7e:	4482      	add	sl, r0
 8000d80:	e6bc      	b.n	8000afc <__aeabi_dadd+0x3f0>
 8000d82:	4653      	mov	r3, sl
 8000d84:	4323      	orrs	r3, r4
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dadd+0x67e>
 8000d88:	e6a9      	b.n	8000ade <__aeabi_dadd+0x3d2>
 8000d8a:	e5e4      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000d8c:	074a      	lsls	r2, r1, #29
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	08c9      	lsrs	r1, r1, #3
 8000d94:	0312      	lsls	r2, r2, #12
 8000d96:	4211      	tst	r1, r2
 8000d98:	d009      	beq.n	8000dae <__aeabi_dadd+0x6a2>
 8000d9a:	4648      	mov	r0, r9
 8000d9c:	08c4      	lsrs	r4, r0, #3
 8000d9e:	4214      	tst	r4, r2
 8000da0:	d105      	bne.n	8000dae <__aeabi_dadd+0x6a2>
 8000da2:	4643      	mov	r3, r8
 8000da4:	4665      	mov	r5, ip
 8000da6:	0021      	movs	r1, r4
 8000da8:	08db      	lsrs	r3, r3, #3
 8000daa:	0742      	lsls	r2, r0, #29
 8000dac:	4313      	orrs	r3, r2
 8000dae:	0f5a      	lsrs	r2, r3, #29
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	0752      	lsls	r2, r2, #29
 8000db6:	4313      	orrs	r3, r2
 8000db8:	e5fa      	b.n	80009b0 <__aeabi_dadd+0x2a4>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	4a01      	ldr	r2, [pc, #4]	; (8000dc4 <__aeabi_dadd+0x6b8>)
 8000dbe:	001c      	movs	r4, r3
 8000dc0:	e540      	b.n	8000844 <__aeabi_dadd+0x138>
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	000007ff 	.word	0x000007ff
 8000dc8:	ff7fffff 	.word	0xff7fffff

08000dcc <__aeabi_ddiv>:
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dce:	4657      	mov	r7, sl
 8000dd0:	464e      	mov	r6, r9
 8000dd2:	4645      	mov	r5, r8
 8000dd4:	46de      	mov	lr, fp
 8000dd6:	b5e0      	push	{r5, r6, r7, lr}
 8000dd8:	030c      	lsls	r4, r1, #12
 8000dda:	001f      	movs	r7, r3
 8000ddc:	004b      	lsls	r3, r1, #1
 8000dde:	4681      	mov	r9, r0
 8000de0:	4692      	mov	sl, r2
 8000de2:	0005      	movs	r5, r0
 8000de4:	b085      	sub	sp, #20
 8000de6:	0b24      	lsrs	r4, r4, #12
 8000de8:	0d5b      	lsrs	r3, r3, #21
 8000dea:	0fce      	lsrs	r6, r1, #31
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_ddiv+0x26>
 8000df0:	e152      	b.n	8001098 <__aeabi_ddiv+0x2cc>
 8000df2:	4ad2      	ldr	r2, [pc, #840]	; (800113c <__aeabi_ddiv+0x370>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d100      	bne.n	8000dfa <__aeabi_ddiv+0x2e>
 8000df8:	e16e      	b.n	80010d8 <__aeabi_ddiv+0x30c>
 8000dfa:	0f42      	lsrs	r2, r0, #29
 8000dfc:	00e4      	lsls	r4, r4, #3
 8000dfe:	4314      	orrs	r4, r2
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	0412      	lsls	r2, r2, #16
 8000e04:	4322      	orrs	r2, r4
 8000e06:	4690      	mov	r8, r2
 8000e08:	4acd      	ldr	r2, [pc, #820]	; (8001140 <__aeabi_ddiv+0x374>)
 8000e0a:	00c5      	lsls	r5, r0, #3
 8000e0c:	4693      	mov	fp, r2
 8000e0e:	449b      	add	fp, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	4699      	mov	r9, r3
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	033c      	lsls	r4, r7, #12
 8000e18:	007b      	lsls	r3, r7, #1
 8000e1a:	4650      	mov	r0, sl
 8000e1c:	0b24      	lsrs	r4, r4, #12
 8000e1e:	0d5b      	lsrs	r3, r3, #21
 8000e20:	0fff      	lsrs	r7, r7, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d100      	bne.n	8000e28 <__aeabi_ddiv+0x5c>
 8000e26:	e11a      	b.n	800105e <__aeabi_ddiv+0x292>
 8000e28:	4ac4      	ldr	r2, [pc, #784]	; (800113c <__aeabi_ddiv+0x370>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_ddiv+0x64>
 8000e2e:	e15e      	b.n	80010ee <__aeabi_ddiv+0x322>
 8000e30:	0f42      	lsrs	r2, r0, #29
 8000e32:	00e4      	lsls	r4, r4, #3
 8000e34:	4322      	orrs	r2, r4
 8000e36:	2480      	movs	r4, #128	; 0x80
 8000e38:	0424      	lsls	r4, r4, #16
 8000e3a:	4314      	orrs	r4, r2
 8000e3c:	4ac0      	ldr	r2, [pc, #768]	; (8001140 <__aeabi_ddiv+0x374>)
 8000e3e:	00c1      	lsls	r1, r0, #3
 8000e40:	4694      	mov	ip, r2
 8000e42:	465a      	mov	r2, fp
 8000e44:	4463      	add	r3, ip
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	469b      	mov	fp, r3
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	0033      	movs	r3, r6
 8000e4e:	407b      	eors	r3, r7
 8000e50:	469a      	mov	sl, r3
 8000e52:	464b      	mov	r3, r9
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d827      	bhi.n	8000ea8 <__aeabi_ddiv+0xdc>
 8000e58:	4aba      	ldr	r2, [pc, #744]	; (8001144 <__aeabi_ddiv+0x378>)
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	58d3      	ldr	r3, [r2, r3]
 8000e5e:	469f      	mov	pc, r3
 8000e60:	46b2      	mov	sl, r6
 8000e62:	9b00      	ldr	r3, [sp, #0]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d016      	beq.n	8000e96 <__aeabi_ddiv+0xca>
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d100      	bne.n	8000e6e <__aeabi_ddiv+0xa2>
 8000e6c:	e287      	b.n	800137e <__aeabi_ddiv+0x5b2>
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d000      	beq.n	8000e74 <__aeabi_ddiv+0xa8>
 8000e72:	e0d5      	b.n	8001020 <__aeabi_ddiv+0x254>
 8000e74:	2300      	movs	r3, #0
 8000e76:	2200      	movs	r2, #0
 8000e78:	2500      	movs	r5, #0
 8000e7a:	051b      	lsls	r3, r3, #20
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	4652      	mov	r2, sl
 8000e80:	07d2      	lsls	r2, r2, #31
 8000e82:	4313      	orrs	r3, r2
 8000e84:	0028      	movs	r0, r5
 8000e86:	0019      	movs	r1, r3
 8000e88:	b005      	add	sp, #20
 8000e8a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e8c:	46bb      	mov	fp, r7
 8000e8e:	46b2      	mov	sl, r6
 8000e90:	46a9      	mov	r9, r5
 8000e92:	46a0      	mov	r8, r4
 8000e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e96:	2200      	movs	r2, #0
 8000e98:	2500      	movs	r5, #0
 8000e9a:	4ba8      	ldr	r3, [pc, #672]	; (800113c <__aeabi_ddiv+0x370>)
 8000e9c:	e7ed      	b.n	8000e7a <__aeabi_ddiv+0xae>
 8000e9e:	46ba      	mov	sl, r7
 8000ea0:	46a0      	mov	r8, r4
 8000ea2:	000d      	movs	r5, r1
 8000ea4:	9000      	str	r0, [sp, #0]
 8000ea6:	e7dc      	b.n	8000e62 <__aeabi_ddiv+0x96>
 8000ea8:	4544      	cmp	r4, r8
 8000eaa:	d200      	bcs.n	8000eae <__aeabi_ddiv+0xe2>
 8000eac:	e1c4      	b.n	8001238 <__aeabi_ddiv+0x46c>
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_ddiv+0xe6>
 8000eb0:	e1bf      	b.n	8001232 <__aeabi_ddiv+0x466>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	002e      	movs	r6, r5
 8000eba:	4640      	mov	r0, r8
 8000ebc:	2500      	movs	r5, #0
 8000ebe:	44e3      	add	fp, ip
 8000ec0:	0223      	lsls	r3, r4, #8
 8000ec2:	0e0c      	lsrs	r4, r1, #24
 8000ec4:	431c      	orrs	r4, r3
 8000ec6:	0c1b      	lsrs	r3, r3, #16
 8000ec8:	4699      	mov	r9, r3
 8000eca:	0423      	lsls	r3, r4, #16
 8000ecc:	020a      	lsls	r2, r1, #8
 8000ece:	0c1f      	lsrs	r7, r3, #16
 8000ed0:	4649      	mov	r1, r9
 8000ed2:	9200      	str	r2, [sp, #0]
 8000ed4:	9701      	str	r7, [sp, #4]
 8000ed6:	f7ff f9ad 	bl	8000234 <__aeabi_uidivmod>
 8000eda:	0002      	movs	r2, r0
 8000edc:	437a      	muls	r2, r7
 8000ede:	040b      	lsls	r3, r1, #16
 8000ee0:	0c31      	lsrs	r1, r6, #16
 8000ee2:	4680      	mov	r8, r0
 8000ee4:	4319      	orrs	r1, r3
 8000ee6:	428a      	cmp	r2, r1
 8000ee8:	d907      	bls.n	8000efa <__aeabi_ddiv+0x12e>
 8000eea:	2301      	movs	r3, #1
 8000eec:	425b      	negs	r3, r3
 8000eee:	469c      	mov	ip, r3
 8000ef0:	1909      	adds	r1, r1, r4
 8000ef2:	44e0      	add	r8, ip
 8000ef4:	428c      	cmp	r4, r1
 8000ef6:	d800      	bhi.n	8000efa <__aeabi_ddiv+0x12e>
 8000ef8:	e201      	b.n	80012fe <__aeabi_ddiv+0x532>
 8000efa:	1a88      	subs	r0, r1, r2
 8000efc:	4649      	mov	r1, r9
 8000efe:	f7ff f999 	bl	8000234 <__aeabi_uidivmod>
 8000f02:	9a01      	ldr	r2, [sp, #4]
 8000f04:	0436      	lsls	r6, r6, #16
 8000f06:	4342      	muls	r2, r0
 8000f08:	0409      	lsls	r1, r1, #16
 8000f0a:	0c36      	lsrs	r6, r6, #16
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	430e      	orrs	r6, r1
 8000f10:	42b2      	cmp	r2, r6
 8000f12:	d904      	bls.n	8000f1e <__aeabi_ddiv+0x152>
 8000f14:	1936      	adds	r6, r6, r4
 8000f16:	3b01      	subs	r3, #1
 8000f18:	42b4      	cmp	r4, r6
 8000f1a:	d800      	bhi.n	8000f1e <__aeabi_ddiv+0x152>
 8000f1c:	e1e9      	b.n	80012f2 <__aeabi_ddiv+0x526>
 8000f1e:	1ab0      	subs	r0, r6, r2
 8000f20:	4642      	mov	r2, r8
 8000f22:	9e00      	ldr	r6, [sp, #0]
 8000f24:	0412      	lsls	r2, r2, #16
 8000f26:	431a      	orrs	r2, r3
 8000f28:	0c33      	lsrs	r3, r6, #16
 8000f2a:	001f      	movs	r7, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	4690      	mov	r8, r2
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	0413      	lsls	r3, r2, #16
 8000f34:	0432      	lsls	r2, r6, #16
 8000f36:	0c16      	lsrs	r6, r2, #16
 8000f38:	0032      	movs	r2, r6
 8000f3a:	0c1b      	lsrs	r3, r3, #16
 8000f3c:	435a      	muls	r2, r3
 8000f3e:	9603      	str	r6, [sp, #12]
 8000f40:	437b      	muls	r3, r7
 8000f42:	434e      	muls	r6, r1
 8000f44:	4379      	muls	r1, r7
 8000f46:	0c17      	lsrs	r7, r2, #16
 8000f48:	46bc      	mov	ip, r7
 8000f4a:	199b      	adds	r3, r3, r6
 8000f4c:	4463      	add	r3, ip
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	d903      	bls.n	8000f5a <__aeabi_ddiv+0x18e>
 8000f52:	2680      	movs	r6, #128	; 0x80
 8000f54:	0276      	lsls	r6, r6, #9
 8000f56:	46b4      	mov	ip, r6
 8000f58:	4461      	add	r1, ip
 8000f5a:	0c1e      	lsrs	r6, r3, #16
 8000f5c:	1871      	adds	r1, r6, r1
 8000f5e:	0416      	lsls	r6, r2, #16
 8000f60:	041b      	lsls	r3, r3, #16
 8000f62:	0c36      	lsrs	r6, r6, #16
 8000f64:	199e      	adds	r6, r3, r6
 8000f66:	4288      	cmp	r0, r1
 8000f68:	d302      	bcc.n	8000f70 <__aeabi_ddiv+0x1a4>
 8000f6a:	d112      	bne.n	8000f92 <__aeabi_ddiv+0x1c6>
 8000f6c:	42b5      	cmp	r5, r6
 8000f6e:	d210      	bcs.n	8000f92 <__aeabi_ddiv+0x1c6>
 8000f70:	4643      	mov	r3, r8
 8000f72:	1e5a      	subs	r2, r3, #1
 8000f74:	9b00      	ldr	r3, [sp, #0]
 8000f76:	469c      	mov	ip, r3
 8000f78:	4465      	add	r5, ip
 8000f7a:	001f      	movs	r7, r3
 8000f7c:	429d      	cmp	r5, r3
 8000f7e:	419b      	sbcs	r3, r3
 8000f80:	425b      	negs	r3, r3
 8000f82:	191b      	adds	r3, r3, r4
 8000f84:	18c0      	adds	r0, r0, r3
 8000f86:	4284      	cmp	r4, r0
 8000f88:	d200      	bcs.n	8000f8c <__aeabi_ddiv+0x1c0>
 8000f8a:	e19e      	b.n	80012ca <__aeabi_ddiv+0x4fe>
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_ddiv+0x1c4>
 8000f8e:	e199      	b.n	80012c4 <__aeabi_ddiv+0x4f8>
 8000f90:	4690      	mov	r8, r2
 8000f92:	1bae      	subs	r6, r5, r6
 8000f94:	42b5      	cmp	r5, r6
 8000f96:	41ad      	sbcs	r5, r5
 8000f98:	1a40      	subs	r0, r0, r1
 8000f9a:	426d      	negs	r5, r5
 8000f9c:	1b40      	subs	r0, r0, r5
 8000f9e:	4284      	cmp	r4, r0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_ddiv+0x1d8>
 8000fa2:	e1d2      	b.n	800134a <__aeabi_ddiv+0x57e>
 8000fa4:	4649      	mov	r1, r9
 8000fa6:	f7ff f945 	bl	8000234 <__aeabi_uidivmod>
 8000faa:	9a01      	ldr	r2, [sp, #4]
 8000fac:	040b      	lsls	r3, r1, #16
 8000fae:	4342      	muls	r2, r0
 8000fb0:	0c31      	lsrs	r1, r6, #16
 8000fb2:	0005      	movs	r5, r0
 8000fb4:	4319      	orrs	r1, r3
 8000fb6:	428a      	cmp	r2, r1
 8000fb8:	d900      	bls.n	8000fbc <__aeabi_ddiv+0x1f0>
 8000fba:	e16c      	b.n	8001296 <__aeabi_ddiv+0x4ca>
 8000fbc:	1a88      	subs	r0, r1, r2
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	f7ff f938 	bl	8000234 <__aeabi_uidivmod>
 8000fc4:	9a01      	ldr	r2, [sp, #4]
 8000fc6:	0436      	lsls	r6, r6, #16
 8000fc8:	4342      	muls	r2, r0
 8000fca:	0409      	lsls	r1, r1, #16
 8000fcc:	0c36      	lsrs	r6, r6, #16
 8000fce:	0003      	movs	r3, r0
 8000fd0:	430e      	orrs	r6, r1
 8000fd2:	42b2      	cmp	r2, r6
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x20c>
 8000fd6:	e153      	b.n	8001280 <__aeabi_ddiv+0x4b4>
 8000fd8:	9803      	ldr	r0, [sp, #12]
 8000fda:	1ab6      	subs	r6, r6, r2
 8000fdc:	0002      	movs	r2, r0
 8000fde:	042d      	lsls	r5, r5, #16
 8000fe0:	431d      	orrs	r5, r3
 8000fe2:	9f02      	ldr	r7, [sp, #8]
 8000fe4:	042b      	lsls	r3, r5, #16
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	435a      	muls	r2, r3
 8000fea:	437b      	muls	r3, r7
 8000fec:	469c      	mov	ip, r3
 8000fee:	0c29      	lsrs	r1, r5, #16
 8000ff0:	4348      	muls	r0, r1
 8000ff2:	0c13      	lsrs	r3, r2, #16
 8000ff4:	4484      	add	ip, r0
 8000ff6:	4463      	add	r3, ip
 8000ff8:	4379      	muls	r1, r7
 8000ffa:	4298      	cmp	r0, r3
 8000ffc:	d903      	bls.n	8001006 <__aeabi_ddiv+0x23a>
 8000ffe:	2080      	movs	r0, #128	; 0x80
 8001000:	0240      	lsls	r0, r0, #9
 8001002:	4684      	mov	ip, r0
 8001004:	4461      	add	r1, ip
 8001006:	0c18      	lsrs	r0, r3, #16
 8001008:	0412      	lsls	r2, r2, #16
 800100a:	041b      	lsls	r3, r3, #16
 800100c:	0c12      	lsrs	r2, r2, #16
 800100e:	1840      	adds	r0, r0, r1
 8001010:	189b      	adds	r3, r3, r2
 8001012:	4286      	cmp	r6, r0
 8001014:	d200      	bcs.n	8001018 <__aeabi_ddiv+0x24c>
 8001016:	e100      	b.n	800121a <__aeabi_ddiv+0x44e>
 8001018:	d100      	bne.n	800101c <__aeabi_ddiv+0x250>
 800101a:	e0fb      	b.n	8001214 <__aeabi_ddiv+0x448>
 800101c:	2301      	movs	r3, #1
 800101e:	431d      	orrs	r5, r3
 8001020:	4b49      	ldr	r3, [pc, #292]	; (8001148 <__aeabi_ddiv+0x37c>)
 8001022:	445b      	add	r3, fp
 8001024:	2b00      	cmp	r3, #0
 8001026:	dc00      	bgt.n	800102a <__aeabi_ddiv+0x25e>
 8001028:	e0aa      	b.n	8001180 <__aeabi_ddiv+0x3b4>
 800102a:	076a      	lsls	r2, r5, #29
 800102c:	d000      	beq.n	8001030 <__aeabi_ddiv+0x264>
 800102e:	e13d      	b.n	80012ac <__aeabi_ddiv+0x4e0>
 8001030:	08e9      	lsrs	r1, r5, #3
 8001032:	4642      	mov	r2, r8
 8001034:	01d2      	lsls	r2, r2, #7
 8001036:	d506      	bpl.n	8001046 <__aeabi_ddiv+0x27a>
 8001038:	4642      	mov	r2, r8
 800103a:	4b44      	ldr	r3, [pc, #272]	; (800114c <__aeabi_ddiv+0x380>)
 800103c:	401a      	ands	r2, r3
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	4690      	mov	r8, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	445b      	add	r3, fp
 8001046:	4a42      	ldr	r2, [pc, #264]	; (8001150 <__aeabi_ddiv+0x384>)
 8001048:	4293      	cmp	r3, r2
 800104a:	dd00      	ble.n	800104e <__aeabi_ddiv+0x282>
 800104c:	e723      	b.n	8000e96 <__aeabi_ddiv+0xca>
 800104e:	4642      	mov	r2, r8
 8001050:	055b      	lsls	r3, r3, #21
 8001052:	0755      	lsls	r5, r2, #29
 8001054:	0252      	lsls	r2, r2, #9
 8001056:	430d      	orrs	r5, r1
 8001058:	0b12      	lsrs	r2, r2, #12
 800105a:	0d5b      	lsrs	r3, r3, #21
 800105c:	e70d      	b.n	8000e7a <__aeabi_ddiv+0xae>
 800105e:	4651      	mov	r1, sl
 8001060:	4321      	orrs	r1, r4
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0x29a>
 8001064:	e07c      	b.n	8001160 <__aeabi_ddiv+0x394>
 8001066:	2c00      	cmp	r4, #0
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x2a0>
 800106a:	e0fb      	b.n	8001264 <__aeabi_ddiv+0x498>
 800106c:	0020      	movs	r0, r4
 800106e:	f001 f9e5 	bl	800243c <__clzsi2>
 8001072:	0002      	movs	r2, r0
 8001074:	3a0b      	subs	r2, #11
 8001076:	231d      	movs	r3, #29
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	4652      	mov	r2, sl
 800107c:	0001      	movs	r1, r0
 800107e:	40da      	lsrs	r2, r3
 8001080:	4653      	mov	r3, sl
 8001082:	3908      	subs	r1, #8
 8001084:	408b      	lsls	r3, r1
 8001086:	408c      	lsls	r4, r1
 8001088:	0019      	movs	r1, r3
 800108a:	4314      	orrs	r4, r2
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <__aeabi_ddiv+0x388>)
 800108e:	4458      	add	r0, fp
 8001090:	469b      	mov	fp, r3
 8001092:	4483      	add	fp, r0
 8001094:	2000      	movs	r0, #0
 8001096:	e6d9      	b.n	8000e4c <__aeabi_ddiv+0x80>
 8001098:	0003      	movs	r3, r0
 800109a:	4323      	orrs	r3, r4
 800109c:	4698      	mov	r8, r3
 800109e:	d044      	beq.n	800112a <__aeabi_ddiv+0x35e>
 80010a0:	2c00      	cmp	r4, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_ddiv+0x2da>
 80010a4:	e0cf      	b.n	8001246 <__aeabi_ddiv+0x47a>
 80010a6:	0020      	movs	r0, r4
 80010a8:	f001 f9c8 	bl	800243c <__clzsi2>
 80010ac:	0001      	movs	r1, r0
 80010ae:	0002      	movs	r2, r0
 80010b0:	390b      	subs	r1, #11
 80010b2:	231d      	movs	r3, #29
 80010b4:	1a5b      	subs	r3, r3, r1
 80010b6:	4649      	mov	r1, r9
 80010b8:	0010      	movs	r0, r2
 80010ba:	40d9      	lsrs	r1, r3
 80010bc:	3808      	subs	r0, #8
 80010be:	4084      	lsls	r4, r0
 80010c0:	000b      	movs	r3, r1
 80010c2:	464d      	mov	r5, r9
 80010c4:	4323      	orrs	r3, r4
 80010c6:	4698      	mov	r8, r3
 80010c8:	4085      	lsls	r5, r0
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <__aeabi_ddiv+0x38c>)
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	469b      	mov	fp, r3
 80010d0:	2300      	movs	r3, #0
 80010d2:	4699      	mov	r9, r3
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	e69e      	b.n	8000e16 <__aeabi_ddiv+0x4a>
 80010d8:	0002      	movs	r2, r0
 80010da:	4322      	orrs	r2, r4
 80010dc:	4690      	mov	r8, r2
 80010de:	d11d      	bne.n	800111c <__aeabi_ddiv+0x350>
 80010e0:	2208      	movs	r2, #8
 80010e2:	469b      	mov	fp, r3
 80010e4:	2302      	movs	r3, #2
 80010e6:	2500      	movs	r5, #0
 80010e8:	4691      	mov	r9, r2
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	e693      	b.n	8000e16 <__aeabi_ddiv+0x4a>
 80010ee:	4651      	mov	r1, sl
 80010f0:	4321      	orrs	r1, r4
 80010f2:	d109      	bne.n	8001108 <__aeabi_ddiv+0x33c>
 80010f4:	2302      	movs	r3, #2
 80010f6:	464a      	mov	r2, r9
 80010f8:	431a      	orrs	r2, r3
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <__aeabi_ddiv+0x390>)
 80010fc:	4691      	mov	r9, r2
 80010fe:	469c      	mov	ip, r3
 8001100:	2400      	movs	r4, #0
 8001102:	2002      	movs	r0, #2
 8001104:	44e3      	add	fp, ip
 8001106:	e6a1      	b.n	8000e4c <__aeabi_ddiv+0x80>
 8001108:	2303      	movs	r3, #3
 800110a:	464a      	mov	r2, r9
 800110c:	431a      	orrs	r2, r3
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <__aeabi_ddiv+0x390>)
 8001110:	4691      	mov	r9, r2
 8001112:	469c      	mov	ip, r3
 8001114:	4651      	mov	r1, sl
 8001116:	2003      	movs	r0, #3
 8001118:	44e3      	add	fp, ip
 800111a:	e697      	b.n	8000e4c <__aeabi_ddiv+0x80>
 800111c:	220c      	movs	r2, #12
 800111e:	469b      	mov	fp, r3
 8001120:	2303      	movs	r3, #3
 8001122:	46a0      	mov	r8, r4
 8001124:	4691      	mov	r9, r2
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	e675      	b.n	8000e16 <__aeabi_ddiv+0x4a>
 800112a:	2304      	movs	r3, #4
 800112c:	4699      	mov	r9, r3
 800112e:	2300      	movs	r3, #0
 8001130:	469b      	mov	fp, r3
 8001132:	3301      	adds	r3, #1
 8001134:	2500      	movs	r5, #0
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	e66d      	b.n	8000e16 <__aeabi_ddiv+0x4a>
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	000007ff 	.word	0x000007ff
 8001140:	fffffc01 	.word	0xfffffc01
 8001144:	08007ac8 	.word	0x08007ac8
 8001148:	000003ff 	.word	0x000003ff
 800114c:	feffffff 	.word	0xfeffffff
 8001150:	000007fe 	.word	0x000007fe
 8001154:	000003f3 	.word	0x000003f3
 8001158:	fffffc0d 	.word	0xfffffc0d
 800115c:	fffff801 	.word	0xfffff801
 8001160:	464a      	mov	r2, r9
 8001162:	2301      	movs	r3, #1
 8001164:	431a      	orrs	r2, r3
 8001166:	4691      	mov	r9, r2
 8001168:	2400      	movs	r4, #0
 800116a:	2001      	movs	r0, #1
 800116c:	e66e      	b.n	8000e4c <__aeabi_ddiv+0x80>
 800116e:	2300      	movs	r3, #0
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	469a      	mov	sl, r3
 8001174:	2500      	movs	r5, #0
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <__aeabi_ddiv+0x5cc>)
 8001178:	0312      	lsls	r2, r2, #12
 800117a:	e67e      	b.n	8000e7a <__aeabi_ddiv+0xae>
 800117c:	2501      	movs	r5, #1
 800117e:	426d      	negs	r5, r5
 8001180:	2201      	movs	r2, #1
 8001182:	1ad2      	subs	r2, r2, r3
 8001184:	2a38      	cmp	r2, #56	; 0x38
 8001186:	dd00      	ble.n	800118a <__aeabi_ddiv+0x3be>
 8001188:	e674      	b.n	8000e74 <__aeabi_ddiv+0xa8>
 800118a:	2a1f      	cmp	r2, #31
 800118c:	dc00      	bgt.n	8001190 <__aeabi_ddiv+0x3c4>
 800118e:	e0bd      	b.n	800130c <__aeabi_ddiv+0x540>
 8001190:	211f      	movs	r1, #31
 8001192:	4249      	negs	r1, r1
 8001194:	1acb      	subs	r3, r1, r3
 8001196:	4641      	mov	r1, r8
 8001198:	40d9      	lsrs	r1, r3
 800119a:	000b      	movs	r3, r1
 800119c:	2a20      	cmp	r2, #32
 800119e:	d004      	beq.n	80011aa <__aeabi_ddiv+0x3de>
 80011a0:	4641      	mov	r1, r8
 80011a2:	4a7e      	ldr	r2, [pc, #504]	; (800139c <__aeabi_ddiv+0x5d0>)
 80011a4:	445a      	add	r2, fp
 80011a6:	4091      	lsls	r1, r2
 80011a8:	430d      	orrs	r5, r1
 80011aa:	0029      	movs	r1, r5
 80011ac:	1e4a      	subs	r2, r1, #1
 80011ae:	4191      	sbcs	r1, r2
 80011b0:	4319      	orrs	r1, r3
 80011b2:	2307      	movs	r3, #7
 80011b4:	001d      	movs	r5, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	400d      	ands	r5, r1
 80011ba:	420b      	tst	r3, r1
 80011bc:	d100      	bne.n	80011c0 <__aeabi_ddiv+0x3f4>
 80011be:	e0d0      	b.n	8001362 <__aeabi_ddiv+0x596>
 80011c0:	220f      	movs	r2, #15
 80011c2:	2300      	movs	r3, #0
 80011c4:	400a      	ands	r2, r1
 80011c6:	2a04      	cmp	r2, #4
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x400>
 80011ca:	e0c7      	b.n	800135c <__aeabi_ddiv+0x590>
 80011cc:	1d0a      	adds	r2, r1, #4
 80011ce:	428a      	cmp	r2, r1
 80011d0:	4189      	sbcs	r1, r1
 80011d2:	4249      	negs	r1, r1
 80011d4:	185b      	adds	r3, r3, r1
 80011d6:	0011      	movs	r1, r2
 80011d8:	021a      	lsls	r2, r3, #8
 80011da:	d400      	bmi.n	80011de <__aeabi_ddiv+0x412>
 80011dc:	e0be      	b.n	800135c <__aeabi_ddiv+0x590>
 80011de:	2301      	movs	r3, #1
 80011e0:	2200      	movs	r2, #0
 80011e2:	2500      	movs	r5, #0
 80011e4:	e649      	b.n	8000e7a <__aeabi_ddiv+0xae>
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	4643      	mov	r3, r8
 80011ea:	0312      	lsls	r2, r2, #12
 80011ec:	4213      	tst	r3, r2
 80011ee:	d008      	beq.n	8001202 <__aeabi_ddiv+0x436>
 80011f0:	4214      	tst	r4, r2
 80011f2:	d106      	bne.n	8001202 <__aeabi_ddiv+0x436>
 80011f4:	4322      	orrs	r2, r4
 80011f6:	0312      	lsls	r2, r2, #12
 80011f8:	46ba      	mov	sl, r7
 80011fa:	000d      	movs	r5, r1
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <__aeabi_ddiv+0x5cc>)
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	e63b      	b.n	8000e7a <__aeabi_ddiv+0xae>
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	4643      	mov	r3, r8
 8001206:	0312      	lsls	r2, r2, #12
 8001208:	431a      	orrs	r2, r3
 800120a:	0312      	lsls	r2, r2, #12
 800120c:	46b2      	mov	sl, r6
 800120e:	4b62      	ldr	r3, [pc, #392]	; (8001398 <__aeabi_ddiv+0x5cc>)
 8001210:	0b12      	lsrs	r2, r2, #12
 8001212:	e632      	b.n	8000e7a <__aeabi_ddiv+0xae>
 8001214:	2b00      	cmp	r3, #0
 8001216:	d100      	bne.n	800121a <__aeabi_ddiv+0x44e>
 8001218:	e702      	b.n	8001020 <__aeabi_ddiv+0x254>
 800121a:	19a6      	adds	r6, r4, r6
 800121c:	1e6a      	subs	r2, r5, #1
 800121e:	42a6      	cmp	r6, r4
 8001220:	d200      	bcs.n	8001224 <__aeabi_ddiv+0x458>
 8001222:	e089      	b.n	8001338 <__aeabi_ddiv+0x56c>
 8001224:	4286      	cmp	r6, r0
 8001226:	d200      	bcs.n	800122a <__aeabi_ddiv+0x45e>
 8001228:	e09f      	b.n	800136a <__aeabi_ddiv+0x59e>
 800122a:	d100      	bne.n	800122e <__aeabi_ddiv+0x462>
 800122c:	e0af      	b.n	800138e <__aeabi_ddiv+0x5c2>
 800122e:	0015      	movs	r5, r2
 8001230:	e6f4      	b.n	800101c <__aeabi_ddiv+0x250>
 8001232:	42a9      	cmp	r1, r5
 8001234:	d900      	bls.n	8001238 <__aeabi_ddiv+0x46c>
 8001236:	e63c      	b.n	8000eb2 <__aeabi_ddiv+0xe6>
 8001238:	4643      	mov	r3, r8
 800123a:	07de      	lsls	r6, r3, #31
 800123c:	0858      	lsrs	r0, r3, #1
 800123e:	086b      	lsrs	r3, r5, #1
 8001240:	431e      	orrs	r6, r3
 8001242:	07ed      	lsls	r5, r5, #31
 8001244:	e63c      	b.n	8000ec0 <__aeabi_ddiv+0xf4>
 8001246:	f001 f8f9 	bl	800243c <__clzsi2>
 800124a:	0001      	movs	r1, r0
 800124c:	0002      	movs	r2, r0
 800124e:	3115      	adds	r1, #21
 8001250:	3220      	adds	r2, #32
 8001252:	291c      	cmp	r1, #28
 8001254:	dc00      	bgt.n	8001258 <__aeabi_ddiv+0x48c>
 8001256:	e72c      	b.n	80010b2 <__aeabi_ddiv+0x2e6>
 8001258:	464b      	mov	r3, r9
 800125a:	3808      	subs	r0, #8
 800125c:	4083      	lsls	r3, r0
 800125e:	2500      	movs	r5, #0
 8001260:	4698      	mov	r8, r3
 8001262:	e732      	b.n	80010ca <__aeabi_ddiv+0x2fe>
 8001264:	f001 f8ea 	bl	800243c <__clzsi2>
 8001268:	0003      	movs	r3, r0
 800126a:	001a      	movs	r2, r3
 800126c:	3215      	adds	r2, #21
 800126e:	3020      	adds	r0, #32
 8001270:	2a1c      	cmp	r2, #28
 8001272:	dc00      	bgt.n	8001276 <__aeabi_ddiv+0x4aa>
 8001274:	e6ff      	b.n	8001076 <__aeabi_ddiv+0x2aa>
 8001276:	4654      	mov	r4, sl
 8001278:	3b08      	subs	r3, #8
 800127a:	2100      	movs	r1, #0
 800127c:	409c      	lsls	r4, r3
 800127e:	e705      	b.n	800108c <__aeabi_ddiv+0x2c0>
 8001280:	1936      	adds	r6, r6, r4
 8001282:	3b01      	subs	r3, #1
 8001284:	42b4      	cmp	r4, r6
 8001286:	d900      	bls.n	800128a <__aeabi_ddiv+0x4be>
 8001288:	e6a6      	b.n	8000fd8 <__aeabi_ddiv+0x20c>
 800128a:	42b2      	cmp	r2, r6
 800128c:	d800      	bhi.n	8001290 <__aeabi_ddiv+0x4c4>
 800128e:	e6a3      	b.n	8000fd8 <__aeabi_ddiv+0x20c>
 8001290:	1e83      	subs	r3, r0, #2
 8001292:	1936      	adds	r6, r6, r4
 8001294:	e6a0      	b.n	8000fd8 <__aeabi_ddiv+0x20c>
 8001296:	1909      	adds	r1, r1, r4
 8001298:	3d01      	subs	r5, #1
 800129a:	428c      	cmp	r4, r1
 800129c:	d900      	bls.n	80012a0 <__aeabi_ddiv+0x4d4>
 800129e:	e68d      	b.n	8000fbc <__aeabi_ddiv+0x1f0>
 80012a0:	428a      	cmp	r2, r1
 80012a2:	d800      	bhi.n	80012a6 <__aeabi_ddiv+0x4da>
 80012a4:	e68a      	b.n	8000fbc <__aeabi_ddiv+0x1f0>
 80012a6:	1e85      	subs	r5, r0, #2
 80012a8:	1909      	adds	r1, r1, r4
 80012aa:	e687      	b.n	8000fbc <__aeabi_ddiv+0x1f0>
 80012ac:	220f      	movs	r2, #15
 80012ae:	402a      	ands	r2, r5
 80012b0:	2a04      	cmp	r2, #4
 80012b2:	d100      	bne.n	80012b6 <__aeabi_ddiv+0x4ea>
 80012b4:	e6bc      	b.n	8001030 <__aeabi_ddiv+0x264>
 80012b6:	1d29      	adds	r1, r5, #4
 80012b8:	42a9      	cmp	r1, r5
 80012ba:	41ad      	sbcs	r5, r5
 80012bc:	426d      	negs	r5, r5
 80012be:	08c9      	lsrs	r1, r1, #3
 80012c0:	44a8      	add	r8, r5
 80012c2:	e6b6      	b.n	8001032 <__aeabi_ddiv+0x266>
 80012c4:	42af      	cmp	r7, r5
 80012c6:	d900      	bls.n	80012ca <__aeabi_ddiv+0x4fe>
 80012c8:	e662      	b.n	8000f90 <__aeabi_ddiv+0x1c4>
 80012ca:	4281      	cmp	r1, r0
 80012cc:	d804      	bhi.n	80012d8 <__aeabi_ddiv+0x50c>
 80012ce:	d000      	beq.n	80012d2 <__aeabi_ddiv+0x506>
 80012d0:	e65e      	b.n	8000f90 <__aeabi_ddiv+0x1c4>
 80012d2:	42ae      	cmp	r6, r5
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x50c>
 80012d6:	e65b      	b.n	8000f90 <__aeabi_ddiv+0x1c4>
 80012d8:	2302      	movs	r3, #2
 80012da:	425b      	negs	r3, r3
 80012dc:	469c      	mov	ip, r3
 80012de:	9b00      	ldr	r3, [sp, #0]
 80012e0:	44e0      	add	r8, ip
 80012e2:	469c      	mov	ip, r3
 80012e4:	4465      	add	r5, ip
 80012e6:	429d      	cmp	r5, r3
 80012e8:	419b      	sbcs	r3, r3
 80012ea:	425b      	negs	r3, r3
 80012ec:	191b      	adds	r3, r3, r4
 80012ee:	18c0      	adds	r0, r0, r3
 80012f0:	e64f      	b.n	8000f92 <__aeabi_ddiv+0x1c6>
 80012f2:	42b2      	cmp	r2, r6
 80012f4:	d800      	bhi.n	80012f8 <__aeabi_ddiv+0x52c>
 80012f6:	e612      	b.n	8000f1e <__aeabi_ddiv+0x152>
 80012f8:	1e83      	subs	r3, r0, #2
 80012fa:	1936      	adds	r6, r6, r4
 80012fc:	e60f      	b.n	8000f1e <__aeabi_ddiv+0x152>
 80012fe:	428a      	cmp	r2, r1
 8001300:	d800      	bhi.n	8001304 <__aeabi_ddiv+0x538>
 8001302:	e5fa      	b.n	8000efa <__aeabi_ddiv+0x12e>
 8001304:	1e83      	subs	r3, r0, #2
 8001306:	4698      	mov	r8, r3
 8001308:	1909      	adds	r1, r1, r4
 800130a:	e5f6      	b.n	8000efa <__aeabi_ddiv+0x12e>
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <__aeabi_ddiv+0x5d4>)
 800130e:	0028      	movs	r0, r5
 8001310:	445b      	add	r3, fp
 8001312:	4641      	mov	r1, r8
 8001314:	409d      	lsls	r5, r3
 8001316:	4099      	lsls	r1, r3
 8001318:	40d0      	lsrs	r0, r2
 800131a:	1e6b      	subs	r3, r5, #1
 800131c:	419d      	sbcs	r5, r3
 800131e:	4643      	mov	r3, r8
 8001320:	4301      	orrs	r1, r0
 8001322:	4329      	orrs	r1, r5
 8001324:	40d3      	lsrs	r3, r2
 8001326:	074a      	lsls	r2, r1, #29
 8001328:	d100      	bne.n	800132c <__aeabi_ddiv+0x560>
 800132a:	e755      	b.n	80011d8 <__aeabi_ddiv+0x40c>
 800132c:	220f      	movs	r2, #15
 800132e:	400a      	ands	r2, r1
 8001330:	2a04      	cmp	r2, #4
 8001332:	d000      	beq.n	8001336 <__aeabi_ddiv+0x56a>
 8001334:	e74a      	b.n	80011cc <__aeabi_ddiv+0x400>
 8001336:	e74f      	b.n	80011d8 <__aeabi_ddiv+0x40c>
 8001338:	0015      	movs	r5, r2
 800133a:	4286      	cmp	r6, r0
 800133c:	d000      	beq.n	8001340 <__aeabi_ddiv+0x574>
 800133e:	e66d      	b.n	800101c <__aeabi_ddiv+0x250>
 8001340:	9a00      	ldr	r2, [sp, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d000      	beq.n	8001348 <__aeabi_ddiv+0x57c>
 8001346:	e669      	b.n	800101c <__aeabi_ddiv+0x250>
 8001348:	e66a      	b.n	8001020 <__aeabi_ddiv+0x254>
 800134a:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <__aeabi_ddiv+0x5d8>)
 800134c:	445b      	add	r3, fp
 800134e:	2b00      	cmp	r3, #0
 8001350:	dc00      	bgt.n	8001354 <__aeabi_ddiv+0x588>
 8001352:	e713      	b.n	800117c <__aeabi_ddiv+0x3b0>
 8001354:	2501      	movs	r5, #1
 8001356:	2100      	movs	r1, #0
 8001358:	44a8      	add	r8, r5
 800135a:	e66a      	b.n	8001032 <__aeabi_ddiv+0x266>
 800135c:	075d      	lsls	r5, r3, #29
 800135e:	025b      	lsls	r3, r3, #9
 8001360:	0b1a      	lsrs	r2, r3, #12
 8001362:	08c9      	lsrs	r1, r1, #3
 8001364:	2300      	movs	r3, #0
 8001366:	430d      	orrs	r5, r1
 8001368:	e587      	b.n	8000e7a <__aeabi_ddiv+0xae>
 800136a:	9900      	ldr	r1, [sp, #0]
 800136c:	3d02      	subs	r5, #2
 800136e:	004a      	lsls	r2, r1, #1
 8001370:	428a      	cmp	r2, r1
 8001372:	41bf      	sbcs	r7, r7
 8001374:	427f      	negs	r7, r7
 8001376:	193f      	adds	r7, r7, r4
 8001378:	19f6      	adds	r6, r6, r7
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	e7dd      	b.n	800133a <__aeabi_ddiv+0x56e>
 800137e:	2280      	movs	r2, #128	; 0x80
 8001380:	4643      	mov	r3, r8
 8001382:	0312      	lsls	r2, r2, #12
 8001384:	431a      	orrs	r2, r3
 8001386:	0312      	lsls	r2, r2, #12
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <__aeabi_ddiv+0x5cc>)
 800138a:	0b12      	lsrs	r2, r2, #12
 800138c:	e575      	b.n	8000e7a <__aeabi_ddiv+0xae>
 800138e:	9900      	ldr	r1, [sp, #0]
 8001390:	4299      	cmp	r1, r3
 8001392:	d3ea      	bcc.n	800136a <__aeabi_ddiv+0x59e>
 8001394:	0015      	movs	r5, r2
 8001396:	e7d3      	b.n	8001340 <__aeabi_ddiv+0x574>
 8001398:	000007ff 	.word	0x000007ff
 800139c:	0000043e 	.word	0x0000043e
 80013a0:	0000041e 	.word	0x0000041e
 80013a4:	000003ff 	.word	0x000003ff

080013a8 <__eqdf2>:
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013aa:	464e      	mov	r6, r9
 80013ac:	4645      	mov	r5, r8
 80013ae:	46de      	mov	lr, fp
 80013b0:	4657      	mov	r7, sl
 80013b2:	4690      	mov	r8, r2
 80013b4:	b5e0      	push	{r5, r6, r7, lr}
 80013b6:	0017      	movs	r7, r2
 80013b8:	031a      	lsls	r2, r3, #12
 80013ba:	0b12      	lsrs	r2, r2, #12
 80013bc:	0005      	movs	r5, r0
 80013be:	4684      	mov	ip, r0
 80013c0:	4819      	ldr	r0, [pc, #100]	; (8001428 <__eqdf2+0x80>)
 80013c2:	030e      	lsls	r6, r1, #12
 80013c4:	004c      	lsls	r4, r1, #1
 80013c6:	4691      	mov	r9, r2
 80013c8:	005a      	lsls	r2, r3, #1
 80013ca:	0fdb      	lsrs	r3, r3, #31
 80013cc:	469b      	mov	fp, r3
 80013ce:	0b36      	lsrs	r6, r6, #12
 80013d0:	0d64      	lsrs	r4, r4, #21
 80013d2:	0fc9      	lsrs	r1, r1, #31
 80013d4:	0d52      	lsrs	r2, r2, #21
 80013d6:	4284      	cmp	r4, r0
 80013d8:	d019      	beq.n	800140e <__eqdf2+0x66>
 80013da:	4282      	cmp	r2, r0
 80013dc:	d010      	beq.n	8001400 <__eqdf2+0x58>
 80013de:	2001      	movs	r0, #1
 80013e0:	4294      	cmp	r4, r2
 80013e2:	d10e      	bne.n	8001402 <__eqdf2+0x5a>
 80013e4:	454e      	cmp	r6, r9
 80013e6:	d10c      	bne.n	8001402 <__eqdf2+0x5a>
 80013e8:	2001      	movs	r0, #1
 80013ea:	45c4      	cmp	ip, r8
 80013ec:	d109      	bne.n	8001402 <__eqdf2+0x5a>
 80013ee:	4559      	cmp	r1, fp
 80013f0:	d017      	beq.n	8001422 <__eqdf2+0x7a>
 80013f2:	2c00      	cmp	r4, #0
 80013f4:	d105      	bne.n	8001402 <__eqdf2+0x5a>
 80013f6:	0030      	movs	r0, r6
 80013f8:	4328      	orrs	r0, r5
 80013fa:	1e43      	subs	r3, r0, #1
 80013fc:	4198      	sbcs	r0, r3
 80013fe:	e000      	b.n	8001402 <__eqdf2+0x5a>
 8001400:	2001      	movs	r0, #1
 8001402:	bcf0      	pop	{r4, r5, r6, r7}
 8001404:	46bb      	mov	fp, r7
 8001406:	46b2      	mov	sl, r6
 8001408:	46a9      	mov	r9, r5
 800140a:	46a0      	mov	r8, r4
 800140c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140e:	0033      	movs	r3, r6
 8001410:	2001      	movs	r0, #1
 8001412:	432b      	orrs	r3, r5
 8001414:	d1f5      	bne.n	8001402 <__eqdf2+0x5a>
 8001416:	42a2      	cmp	r2, r4
 8001418:	d1f3      	bne.n	8001402 <__eqdf2+0x5a>
 800141a:	464b      	mov	r3, r9
 800141c:	433b      	orrs	r3, r7
 800141e:	d1f0      	bne.n	8001402 <__eqdf2+0x5a>
 8001420:	e7e2      	b.n	80013e8 <__eqdf2+0x40>
 8001422:	2000      	movs	r0, #0
 8001424:	e7ed      	b.n	8001402 <__eqdf2+0x5a>
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	000007ff 	.word	0x000007ff

0800142c <__gedf2>:
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	4647      	mov	r7, r8
 8001430:	46ce      	mov	lr, r9
 8001432:	0004      	movs	r4, r0
 8001434:	0018      	movs	r0, r3
 8001436:	0016      	movs	r6, r2
 8001438:	031b      	lsls	r3, r3, #12
 800143a:	0b1b      	lsrs	r3, r3, #12
 800143c:	4d2d      	ldr	r5, [pc, #180]	; (80014f4 <__gedf2+0xc8>)
 800143e:	004a      	lsls	r2, r1, #1
 8001440:	4699      	mov	r9, r3
 8001442:	b580      	push	{r7, lr}
 8001444:	0043      	lsls	r3, r0, #1
 8001446:	030f      	lsls	r7, r1, #12
 8001448:	46a4      	mov	ip, r4
 800144a:	46b0      	mov	r8, r6
 800144c:	0b3f      	lsrs	r7, r7, #12
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	0fc9      	lsrs	r1, r1, #31
 8001452:	0d5b      	lsrs	r3, r3, #21
 8001454:	0fc0      	lsrs	r0, r0, #31
 8001456:	42aa      	cmp	r2, r5
 8001458:	d021      	beq.n	800149e <__gedf2+0x72>
 800145a:	42ab      	cmp	r3, r5
 800145c:	d013      	beq.n	8001486 <__gedf2+0x5a>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d122      	bne.n	80014a8 <__gedf2+0x7c>
 8001462:	433c      	orrs	r4, r7
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <__gedf2+0x42>
 8001468:	464d      	mov	r5, r9
 800146a:	432e      	orrs	r6, r5
 800146c:	d022      	beq.n	80014b4 <__gedf2+0x88>
 800146e:	2c00      	cmp	r4, #0
 8001470:	d010      	beq.n	8001494 <__gedf2+0x68>
 8001472:	4281      	cmp	r1, r0
 8001474:	d022      	beq.n	80014bc <__gedf2+0x90>
 8001476:	2002      	movs	r0, #2
 8001478:	3901      	subs	r1, #1
 800147a:	4008      	ands	r0, r1
 800147c:	3801      	subs	r0, #1
 800147e:	bcc0      	pop	{r6, r7}
 8001480:	46b9      	mov	r9, r7
 8001482:	46b0      	mov	r8, r6
 8001484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001486:	464d      	mov	r5, r9
 8001488:	432e      	orrs	r6, r5
 800148a:	d129      	bne.n	80014e0 <__gedf2+0xb4>
 800148c:	2a00      	cmp	r2, #0
 800148e:	d1f0      	bne.n	8001472 <__gedf2+0x46>
 8001490:	433c      	orrs	r4, r7
 8001492:	d1ee      	bne.n	8001472 <__gedf2+0x46>
 8001494:	2800      	cmp	r0, #0
 8001496:	d1f2      	bne.n	800147e <__gedf2+0x52>
 8001498:	2001      	movs	r0, #1
 800149a:	4240      	negs	r0, r0
 800149c:	e7ef      	b.n	800147e <__gedf2+0x52>
 800149e:	003d      	movs	r5, r7
 80014a0:	4325      	orrs	r5, r4
 80014a2:	d11d      	bne.n	80014e0 <__gedf2+0xb4>
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d0ee      	beq.n	8001486 <__gedf2+0x5a>
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e2      	bne.n	8001472 <__gedf2+0x46>
 80014ac:	464c      	mov	r4, r9
 80014ae:	4326      	orrs	r6, r4
 80014b0:	d1df      	bne.n	8001472 <__gedf2+0x46>
 80014b2:	e7e0      	b.n	8001476 <__gedf2+0x4a>
 80014b4:	2000      	movs	r0, #0
 80014b6:	2c00      	cmp	r4, #0
 80014b8:	d0e1      	beq.n	800147e <__gedf2+0x52>
 80014ba:	e7dc      	b.n	8001476 <__gedf2+0x4a>
 80014bc:	429a      	cmp	r2, r3
 80014be:	dc0a      	bgt.n	80014d6 <__gedf2+0xaa>
 80014c0:	dbe8      	blt.n	8001494 <__gedf2+0x68>
 80014c2:	454f      	cmp	r7, r9
 80014c4:	d8d7      	bhi.n	8001476 <__gedf2+0x4a>
 80014c6:	d00e      	beq.n	80014e6 <__gedf2+0xba>
 80014c8:	2000      	movs	r0, #0
 80014ca:	454f      	cmp	r7, r9
 80014cc:	d2d7      	bcs.n	800147e <__gedf2+0x52>
 80014ce:	2900      	cmp	r1, #0
 80014d0:	d0e2      	beq.n	8001498 <__gedf2+0x6c>
 80014d2:	0008      	movs	r0, r1
 80014d4:	e7d3      	b.n	800147e <__gedf2+0x52>
 80014d6:	4243      	negs	r3, r0
 80014d8:	4158      	adcs	r0, r3
 80014da:	0040      	lsls	r0, r0, #1
 80014dc:	3801      	subs	r0, #1
 80014de:	e7ce      	b.n	800147e <__gedf2+0x52>
 80014e0:	2002      	movs	r0, #2
 80014e2:	4240      	negs	r0, r0
 80014e4:	e7cb      	b.n	800147e <__gedf2+0x52>
 80014e6:	45c4      	cmp	ip, r8
 80014e8:	d8c5      	bhi.n	8001476 <__gedf2+0x4a>
 80014ea:	2000      	movs	r0, #0
 80014ec:	45c4      	cmp	ip, r8
 80014ee:	d2c6      	bcs.n	800147e <__gedf2+0x52>
 80014f0:	e7ed      	b.n	80014ce <__gedf2+0xa2>
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	000007ff 	.word	0x000007ff

080014f8 <__ledf2>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4647      	mov	r7, r8
 80014fc:	46ce      	mov	lr, r9
 80014fe:	0004      	movs	r4, r0
 8001500:	0018      	movs	r0, r3
 8001502:	0016      	movs	r6, r2
 8001504:	031b      	lsls	r3, r3, #12
 8001506:	0b1b      	lsrs	r3, r3, #12
 8001508:	4d2c      	ldr	r5, [pc, #176]	; (80015bc <__ledf2+0xc4>)
 800150a:	004a      	lsls	r2, r1, #1
 800150c:	4699      	mov	r9, r3
 800150e:	b580      	push	{r7, lr}
 8001510:	0043      	lsls	r3, r0, #1
 8001512:	030f      	lsls	r7, r1, #12
 8001514:	46a4      	mov	ip, r4
 8001516:	46b0      	mov	r8, r6
 8001518:	0b3f      	lsrs	r7, r7, #12
 800151a:	0d52      	lsrs	r2, r2, #21
 800151c:	0fc9      	lsrs	r1, r1, #31
 800151e:	0d5b      	lsrs	r3, r3, #21
 8001520:	0fc0      	lsrs	r0, r0, #31
 8001522:	42aa      	cmp	r2, r5
 8001524:	d00d      	beq.n	8001542 <__ledf2+0x4a>
 8001526:	42ab      	cmp	r3, r5
 8001528:	d010      	beq.n	800154c <__ledf2+0x54>
 800152a:	2a00      	cmp	r2, #0
 800152c:	d127      	bne.n	800157e <__ledf2+0x86>
 800152e:	433c      	orrs	r4, r7
 8001530:	2b00      	cmp	r3, #0
 8001532:	d111      	bne.n	8001558 <__ledf2+0x60>
 8001534:	464d      	mov	r5, r9
 8001536:	432e      	orrs	r6, r5
 8001538:	d10e      	bne.n	8001558 <__ledf2+0x60>
 800153a:	2000      	movs	r0, #0
 800153c:	2c00      	cmp	r4, #0
 800153e:	d015      	beq.n	800156c <__ledf2+0x74>
 8001540:	e00e      	b.n	8001560 <__ledf2+0x68>
 8001542:	003d      	movs	r5, r7
 8001544:	4325      	orrs	r5, r4
 8001546:	d110      	bne.n	800156a <__ledf2+0x72>
 8001548:	4293      	cmp	r3, r2
 800154a:	d118      	bne.n	800157e <__ledf2+0x86>
 800154c:	464d      	mov	r5, r9
 800154e:	432e      	orrs	r6, r5
 8001550:	d10b      	bne.n	800156a <__ledf2+0x72>
 8001552:	2a00      	cmp	r2, #0
 8001554:	d102      	bne.n	800155c <__ledf2+0x64>
 8001556:	433c      	orrs	r4, r7
 8001558:	2c00      	cmp	r4, #0
 800155a:	d00b      	beq.n	8001574 <__ledf2+0x7c>
 800155c:	4281      	cmp	r1, r0
 800155e:	d014      	beq.n	800158a <__ledf2+0x92>
 8001560:	2002      	movs	r0, #2
 8001562:	3901      	subs	r1, #1
 8001564:	4008      	ands	r0, r1
 8001566:	3801      	subs	r0, #1
 8001568:	e000      	b.n	800156c <__ledf2+0x74>
 800156a:	2002      	movs	r0, #2
 800156c:	bcc0      	pop	{r6, r7}
 800156e:	46b9      	mov	r9, r7
 8001570:	46b0      	mov	r8, r6
 8001572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001574:	2800      	cmp	r0, #0
 8001576:	d1f9      	bne.n	800156c <__ledf2+0x74>
 8001578:	2001      	movs	r0, #1
 800157a:	4240      	negs	r0, r0
 800157c:	e7f6      	b.n	800156c <__ledf2+0x74>
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ec      	bne.n	800155c <__ledf2+0x64>
 8001582:	464c      	mov	r4, r9
 8001584:	4326      	orrs	r6, r4
 8001586:	d1e9      	bne.n	800155c <__ledf2+0x64>
 8001588:	e7ea      	b.n	8001560 <__ledf2+0x68>
 800158a:	429a      	cmp	r2, r3
 800158c:	dd04      	ble.n	8001598 <__ledf2+0xa0>
 800158e:	4243      	negs	r3, r0
 8001590:	4158      	adcs	r0, r3
 8001592:	0040      	lsls	r0, r0, #1
 8001594:	3801      	subs	r0, #1
 8001596:	e7e9      	b.n	800156c <__ledf2+0x74>
 8001598:	429a      	cmp	r2, r3
 800159a:	dbeb      	blt.n	8001574 <__ledf2+0x7c>
 800159c:	454f      	cmp	r7, r9
 800159e:	d8df      	bhi.n	8001560 <__ledf2+0x68>
 80015a0:	d006      	beq.n	80015b0 <__ledf2+0xb8>
 80015a2:	2000      	movs	r0, #0
 80015a4:	454f      	cmp	r7, r9
 80015a6:	d2e1      	bcs.n	800156c <__ledf2+0x74>
 80015a8:	2900      	cmp	r1, #0
 80015aa:	d0e5      	beq.n	8001578 <__ledf2+0x80>
 80015ac:	0008      	movs	r0, r1
 80015ae:	e7dd      	b.n	800156c <__ledf2+0x74>
 80015b0:	45c4      	cmp	ip, r8
 80015b2:	d8d5      	bhi.n	8001560 <__ledf2+0x68>
 80015b4:	2000      	movs	r0, #0
 80015b6:	45c4      	cmp	ip, r8
 80015b8:	d2d8      	bcs.n	800156c <__ledf2+0x74>
 80015ba:	e7f5      	b.n	80015a8 <__ledf2+0xb0>
 80015bc:	000007ff 	.word	0x000007ff

080015c0 <__aeabi_dmul>:
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	4645      	mov	r5, r8
 80015c4:	46de      	mov	lr, fp
 80015c6:	4657      	mov	r7, sl
 80015c8:	464e      	mov	r6, r9
 80015ca:	b5e0      	push	{r5, r6, r7, lr}
 80015cc:	001f      	movs	r7, r3
 80015ce:	030b      	lsls	r3, r1, #12
 80015d0:	0b1b      	lsrs	r3, r3, #12
 80015d2:	469b      	mov	fp, r3
 80015d4:	004d      	lsls	r5, r1, #1
 80015d6:	0fcb      	lsrs	r3, r1, #31
 80015d8:	0004      	movs	r4, r0
 80015da:	4691      	mov	r9, r2
 80015dc:	4698      	mov	r8, r3
 80015de:	b087      	sub	sp, #28
 80015e0:	0d6d      	lsrs	r5, r5, #21
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dmul+0x26>
 80015e4:	e1cd      	b.n	8001982 <__aeabi_dmul+0x3c2>
 80015e6:	4bce      	ldr	r3, [pc, #824]	; (8001920 <__aeabi_dmul+0x360>)
 80015e8:	429d      	cmp	r5, r3
 80015ea:	d100      	bne.n	80015ee <__aeabi_dmul+0x2e>
 80015ec:	e1e9      	b.n	80019c2 <__aeabi_dmul+0x402>
 80015ee:	465a      	mov	r2, fp
 80015f0:	0f43      	lsrs	r3, r0, #29
 80015f2:	00d2      	lsls	r2, r2, #3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	0412      	lsls	r2, r2, #16
 80015fa:	431a      	orrs	r2, r3
 80015fc:	00c3      	lsls	r3, r0, #3
 80015fe:	469a      	mov	sl, r3
 8001600:	4bc8      	ldr	r3, [pc, #800]	; (8001924 <__aeabi_dmul+0x364>)
 8001602:	4693      	mov	fp, r2
 8001604:	469c      	mov	ip, r3
 8001606:	2300      	movs	r3, #0
 8001608:	2600      	movs	r6, #0
 800160a:	4465      	add	r5, ip
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	033c      	lsls	r4, r7, #12
 8001610:	007b      	lsls	r3, r7, #1
 8001612:	4648      	mov	r0, r9
 8001614:	0b24      	lsrs	r4, r4, #12
 8001616:	0d5b      	lsrs	r3, r3, #21
 8001618:	0fff      	lsrs	r7, r7, #31
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_dmul+0x60>
 800161e:	e189      	b.n	8001934 <__aeabi_dmul+0x374>
 8001620:	4abf      	ldr	r2, [pc, #764]	; (8001920 <__aeabi_dmul+0x360>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d019      	beq.n	800165a <__aeabi_dmul+0x9a>
 8001626:	0f42      	lsrs	r2, r0, #29
 8001628:	00e4      	lsls	r4, r4, #3
 800162a:	4322      	orrs	r2, r4
 800162c:	2480      	movs	r4, #128	; 0x80
 800162e:	0424      	lsls	r4, r4, #16
 8001630:	4314      	orrs	r4, r2
 8001632:	4abc      	ldr	r2, [pc, #752]	; (8001924 <__aeabi_dmul+0x364>)
 8001634:	2100      	movs	r1, #0
 8001636:	4694      	mov	ip, r2
 8001638:	4642      	mov	r2, r8
 800163a:	4463      	add	r3, ip
 800163c:	195b      	adds	r3, r3, r5
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	9b01      	ldr	r3, [sp, #4]
 8001642:	407a      	eors	r2, r7
 8001644:	3301      	adds	r3, #1
 8001646:	00c0      	lsls	r0, r0, #3
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2e0a      	cmp	r6, #10
 800164e:	dd1c      	ble.n	800168a <__aeabi_dmul+0xca>
 8001650:	003a      	movs	r2, r7
 8001652:	2e0b      	cmp	r6, #11
 8001654:	d05e      	beq.n	8001714 <__aeabi_dmul+0x154>
 8001656:	4647      	mov	r7, r8
 8001658:	e056      	b.n	8001708 <__aeabi_dmul+0x148>
 800165a:	4649      	mov	r1, r9
 800165c:	4bb0      	ldr	r3, [pc, #704]	; (8001920 <__aeabi_dmul+0x360>)
 800165e:	4321      	orrs	r1, r4
 8001660:	18eb      	adds	r3, r5, r3
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	2900      	cmp	r1, #0
 8001666:	d12a      	bne.n	80016be <__aeabi_dmul+0xfe>
 8001668:	2080      	movs	r0, #128	; 0x80
 800166a:	2202      	movs	r2, #2
 800166c:	0100      	lsls	r0, r0, #4
 800166e:	002b      	movs	r3, r5
 8001670:	4684      	mov	ip, r0
 8001672:	4316      	orrs	r6, r2
 8001674:	4642      	mov	r2, r8
 8001676:	4463      	add	r3, ip
 8001678:	407a      	eors	r2, r7
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	2e0a      	cmp	r6, #10
 8001680:	dd00      	ble.n	8001684 <__aeabi_dmul+0xc4>
 8001682:	e231      	b.n	8001ae8 <__aeabi_dmul+0x528>
 8001684:	2000      	movs	r0, #0
 8001686:	2400      	movs	r4, #0
 8001688:	2102      	movs	r1, #2
 800168a:	2e02      	cmp	r6, #2
 800168c:	dc26      	bgt.n	80016dc <__aeabi_dmul+0x11c>
 800168e:	3e01      	subs	r6, #1
 8001690:	2e01      	cmp	r6, #1
 8001692:	d852      	bhi.n	800173a <__aeabi_dmul+0x17a>
 8001694:	2902      	cmp	r1, #2
 8001696:	d04c      	beq.n	8001732 <__aeabi_dmul+0x172>
 8001698:	2901      	cmp	r1, #1
 800169a:	d000      	beq.n	800169e <__aeabi_dmul+0xde>
 800169c:	e118      	b.n	80018d0 <__aeabi_dmul+0x310>
 800169e:	2300      	movs	r3, #0
 80016a0:	2400      	movs	r4, #0
 80016a2:	2500      	movs	r5, #0
 80016a4:	051b      	lsls	r3, r3, #20
 80016a6:	4323      	orrs	r3, r4
 80016a8:	07d2      	lsls	r2, r2, #31
 80016aa:	4313      	orrs	r3, r2
 80016ac:	0028      	movs	r0, r5
 80016ae:	0019      	movs	r1, r3
 80016b0:	b007      	add	sp, #28
 80016b2:	bcf0      	pop	{r4, r5, r6, r7}
 80016b4:	46bb      	mov	fp, r7
 80016b6:	46b2      	mov	sl, r6
 80016b8:	46a9      	mov	r9, r5
 80016ba:	46a0      	mov	r8, r4
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	2203      	movs	r2, #3
 80016c2:	0109      	lsls	r1, r1, #4
 80016c4:	002b      	movs	r3, r5
 80016c6:	468c      	mov	ip, r1
 80016c8:	4316      	orrs	r6, r2
 80016ca:	4642      	mov	r2, r8
 80016cc:	4463      	add	r3, ip
 80016ce:	407a      	eors	r2, r7
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	2e0a      	cmp	r6, #10
 80016d6:	dd00      	ble.n	80016da <__aeabi_dmul+0x11a>
 80016d8:	e228      	b.n	8001b2c <__aeabi_dmul+0x56c>
 80016da:	2103      	movs	r1, #3
 80016dc:	2501      	movs	r5, #1
 80016de:	40b5      	lsls	r5, r6
 80016e0:	46ac      	mov	ip, r5
 80016e2:	26a6      	movs	r6, #166	; 0xa6
 80016e4:	4663      	mov	r3, ip
 80016e6:	00f6      	lsls	r6, r6, #3
 80016e8:	4035      	ands	r5, r6
 80016ea:	4233      	tst	r3, r6
 80016ec:	d10b      	bne.n	8001706 <__aeabi_dmul+0x146>
 80016ee:	2690      	movs	r6, #144	; 0x90
 80016f0:	00b6      	lsls	r6, r6, #2
 80016f2:	4233      	tst	r3, r6
 80016f4:	d118      	bne.n	8001728 <__aeabi_dmul+0x168>
 80016f6:	3eb9      	subs	r6, #185	; 0xb9
 80016f8:	3eff      	subs	r6, #255	; 0xff
 80016fa:	421e      	tst	r6, r3
 80016fc:	d01d      	beq.n	800173a <__aeabi_dmul+0x17a>
 80016fe:	46a3      	mov	fp, r4
 8001700:	4682      	mov	sl, r0
 8001702:	9100      	str	r1, [sp, #0]
 8001704:	e000      	b.n	8001708 <__aeabi_dmul+0x148>
 8001706:	0017      	movs	r7, r2
 8001708:	9900      	ldr	r1, [sp, #0]
 800170a:	003a      	movs	r2, r7
 800170c:	2902      	cmp	r1, #2
 800170e:	d010      	beq.n	8001732 <__aeabi_dmul+0x172>
 8001710:	465c      	mov	r4, fp
 8001712:	4650      	mov	r0, sl
 8001714:	2903      	cmp	r1, #3
 8001716:	d1bf      	bne.n	8001698 <__aeabi_dmul+0xd8>
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	031b      	lsls	r3, r3, #12
 800171c:	431c      	orrs	r4, r3
 800171e:	0324      	lsls	r4, r4, #12
 8001720:	0005      	movs	r5, r0
 8001722:	4b7f      	ldr	r3, [pc, #508]	; (8001920 <__aeabi_dmul+0x360>)
 8001724:	0b24      	lsrs	r4, r4, #12
 8001726:	e7bd      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001728:	2480      	movs	r4, #128	; 0x80
 800172a:	2200      	movs	r2, #0
 800172c:	4b7c      	ldr	r3, [pc, #496]	; (8001920 <__aeabi_dmul+0x360>)
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	e7b8      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001732:	2400      	movs	r4, #0
 8001734:	2500      	movs	r5, #0
 8001736:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <__aeabi_dmul+0x360>)
 8001738:	e7b4      	b.n	80016a4 <__aeabi_dmul+0xe4>
 800173a:	4653      	mov	r3, sl
 800173c:	041e      	lsls	r6, r3, #16
 800173e:	0c36      	lsrs	r6, r6, #16
 8001740:	0c1f      	lsrs	r7, r3, #16
 8001742:	0033      	movs	r3, r6
 8001744:	0c01      	lsrs	r1, r0, #16
 8001746:	0400      	lsls	r0, r0, #16
 8001748:	0c00      	lsrs	r0, r0, #16
 800174a:	4343      	muls	r3, r0
 800174c:	4698      	mov	r8, r3
 800174e:	0003      	movs	r3, r0
 8001750:	437b      	muls	r3, r7
 8001752:	4699      	mov	r9, r3
 8001754:	0033      	movs	r3, r6
 8001756:	434b      	muls	r3, r1
 8001758:	469c      	mov	ip, r3
 800175a:	4643      	mov	r3, r8
 800175c:	000d      	movs	r5, r1
 800175e:	0c1b      	lsrs	r3, r3, #16
 8001760:	469a      	mov	sl, r3
 8001762:	437d      	muls	r5, r7
 8001764:	44cc      	add	ip, r9
 8001766:	44d4      	add	ip, sl
 8001768:	9500      	str	r5, [sp, #0]
 800176a:	45e1      	cmp	r9, ip
 800176c:	d904      	bls.n	8001778 <__aeabi_dmul+0x1b8>
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	025b      	lsls	r3, r3, #9
 8001772:	4699      	mov	r9, r3
 8001774:	444d      	add	r5, r9
 8001776:	9500      	str	r5, [sp, #0]
 8001778:	4663      	mov	r3, ip
 800177a:	0c1b      	lsrs	r3, r3, #16
 800177c:	001d      	movs	r5, r3
 800177e:	4663      	mov	r3, ip
 8001780:	041b      	lsls	r3, r3, #16
 8001782:	469c      	mov	ip, r3
 8001784:	4643      	mov	r3, r8
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	0c1b      	lsrs	r3, r3, #16
 800178a:	4698      	mov	r8, r3
 800178c:	4663      	mov	r3, ip
 800178e:	4443      	add	r3, r8
 8001790:	9303      	str	r3, [sp, #12]
 8001792:	0c23      	lsrs	r3, r4, #16
 8001794:	4698      	mov	r8, r3
 8001796:	0033      	movs	r3, r6
 8001798:	0424      	lsls	r4, r4, #16
 800179a:	0c24      	lsrs	r4, r4, #16
 800179c:	4363      	muls	r3, r4
 800179e:	469c      	mov	ip, r3
 80017a0:	0023      	movs	r3, r4
 80017a2:	437b      	muls	r3, r7
 80017a4:	4699      	mov	r9, r3
 80017a6:	4643      	mov	r3, r8
 80017a8:	435e      	muls	r6, r3
 80017aa:	435f      	muls	r7, r3
 80017ac:	444e      	add	r6, r9
 80017ae:	4663      	mov	r3, ip
 80017b0:	46b2      	mov	sl, r6
 80017b2:	0c1e      	lsrs	r6, r3, #16
 80017b4:	4456      	add	r6, sl
 80017b6:	45b1      	cmp	r9, r6
 80017b8:	d903      	bls.n	80017c2 <__aeabi_dmul+0x202>
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	025b      	lsls	r3, r3, #9
 80017be:	4699      	mov	r9, r3
 80017c0:	444f      	add	r7, r9
 80017c2:	0c33      	lsrs	r3, r6, #16
 80017c4:	4699      	mov	r9, r3
 80017c6:	003b      	movs	r3, r7
 80017c8:	444b      	add	r3, r9
 80017ca:	9305      	str	r3, [sp, #20]
 80017cc:	4663      	mov	r3, ip
 80017ce:	46ac      	mov	ip, r5
 80017d0:	041f      	lsls	r7, r3, #16
 80017d2:	0c3f      	lsrs	r7, r7, #16
 80017d4:	0436      	lsls	r6, r6, #16
 80017d6:	19f6      	adds	r6, r6, r7
 80017d8:	44b4      	add	ip, r6
 80017da:	4663      	mov	r3, ip
 80017dc:	9304      	str	r3, [sp, #16]
 80017de:	465b      	mov	r3, fp
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	469c      	mov	ip, r3
 80017e4:	465b      	mov	r3, fp
 80017e6:	041f      	lsls	r7, r3, #16
 80017e8:	0c3f      	lsrs	r7, r7, #16
 80017ea:	003b      	movs	r3, r7
 80017ec:	4343      	muls	r3, r0
 80017ee:	4699      	mov	r9, r3
 80017f0:	4663      	mov	r3, ip
 80017f2:	4343      	muls	r3, r0
 80017f4:	469a      	mov	sl, r3
 80017f6:	464b      	mov	r3, r9
 80017f8:	4660      	mov	r0, ip
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	469b      	mov	fp, r3
 80017fe:	4348      	muls	r0, r1
 8001800:	4379      	muls	r1, r7
 8001802:	4451      	add	r1, sl
 8001804:	4459      	add	r1, fp
 8001806:	458a      	cmp	sl, r1
 8001808:	d903      	bls.n	8001812 <__aeabi_dmul+0x252>
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	025b      	lsls	r3, r3, #9
 800180e:	469a      	mov	sl, r3
 8001810:	4450      	add	r0, sl
 8001812:	0c0b      	lsrs	r3, r1, #16
 8001814:	469a      	mov	sl, r3
 8001816:	464b      	mov	r3, r9
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	0c1b      	lsrs	r3, r3, #16
 800181c:	4699      	mov	r9, r3
 800181e:	003b      	movs	r3, r7
 8001820:	4363      	muls	r3, r4
 8001822:	0409      	lsls	r1, r1, #16
 8001824:	4645      	mov	r5, r8
 8001826:	4449      	add	r1, r9
 8001828:	4699      	mov	r9, r3
 800182a:	4663      	mov	r3, ip
 800182c:	435c      	muls	r4, r3
 800182e:	436b      	muls	r3, r5
 8001830:	469c      	mov	ip, r3
 8001832:	464b      	mov	r3, r9
 8001834:	0c1b      	lsrs	r3, r3, #16
 8001836:	4698      	mov	r8, r3
 8001838:	436f      	muls	r7, r5
 800183a:	193f      	adds	r7, r7, r4
 800183c:	4447      	add	r7, r8
 800183e:	4450      	add	r0, sl
 8001840:	42bc      	cmp	r4, r7
 8001842:	d903      	bls.n	800184c <__aeabi_dmul+0x28c>
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	025b      	lsls	r3, r3, #9
 8001848:	4698      	mov	r8, r3
 800184a:	44c4      	add	ip, r8
 800184c:	9b04      	ldr	r3, [sp, #16]
 800184e:	9d00      	ldr	r5, [sp, #0]
 8001850:	4698      	mov	r8, r3
 8001852:	4445      	add	r5, r8
 8001854:	42b5      	cmp	r5, r6
 8001856:	41b6      	sbcs	r6, r6
 8001858:	4273      	negs	r3, r6
 800185a:	4698      	mov	r8, r3
 800185c:	464b      	mov	r3, r9
 800185e:	041e      	lsls	r6, r3, #16
 8001860:	9b05      	ldr	r3, [sp, #20]
 8001862:	043c      	lsls	r4, r7, #16
 8001864:	4699      	mov	r9, r3
 8001866:	0c36      	lsrs	r6, r6, #16
 8001868:	19a4      	adds	r4, r4, r6
 800186a:	444c      	add	r4, r9
 800186c:	46a1      	mov	r9, r4
 800186e:	4683      	mov	fp, r0
 8001870:	186e      	adds	r6, r5, r1
 8001872:	44c1      	add	r9, r8
 8001874:	428e      	cmp	r6, r1
 8001876:	4189      	sbcs	r1, r1
 8001878:	44cb      	add	fp, r9
 800187a:	465d      	mov	r5, fp
 800187c:	4249      	negs	r1, r1
 800187e:	186d      	adds	r5, r5, r1
 8001880:	429c      	cmp	r4, r3
 8001882:	41a4      	sbcs	r4, r4
 8001884:	45c1      	cmp	r9, r8
 8001886:	419b      	sbcs	r3, r3
 8001888:	4583      	cmp	fp, r0
 800188a:	4180      	sbcs	r0, r0
 800188c:	428d      	cmp	r5, r1
 800188e:	4189      	sbcs	r1, r1
 8001890:	425b      	negs	r3, r3
 8001892:	4264      	negs	r4, r4
 8001894:	431c      	orrs	r4, r3
 8001896:	4240      	negs	r0, r0
 8001898:	9b03      	ldr	r3, [sp, #12]
 800189a:	4249      	negs	r1, r1
 800189c:	4301      	orrs	r1, r0
 800189e:	0270      	lsls	r0, r6, #9
 80018a0:	0c3f      	lsrs	r7, r7, #16
 80018a2:	4318      	orrs	r0, r3
 80018a4:	19e4      	adds	r4, r4, r7
 80018a6:	1e47      	subs	r7, r0, #1
 80018a8:	41b8      	sbcs	r0, r7
 80018aa:	1864      	adds	r4, r4, r1
 80018ac:	4464      	add	r4, ip
 80018ae:	0df6      	lsrs	r6, r6, #23
 80018b0:	0261      	lsls	r1, r4, #9
 80018b2:	4330      	orrs	r0, r6
 80018b4:	0dec      	lsrs	r4, r5, #23
 80018b6:	026e      	lsls	r6, r5, #9
 80018b8:	430c      	orrs	r4, r1
 80018ba:	4330      	orrs	r0, r6
 80018bc:	01c9      	lsls	r1, r1, #7
 80018be:	d400      	bmi.n	80018c2 <__aeabi_dmul+0x302>
 80018c0:	e0f1      	b.n	8001aa6 <__aeabi_dmul+0x4e6>
 80018c2:	2101      	movs	r1, #1
 80018c4:	0843      	lsrs	r3, r0, #1
 80018c6:	4001      	ands	r1, r0
 80018c8:	430b      	orrs	r3, r1
 80018ca:	07e0      	lsls	r0, r4, #31
 80018cc:	4318      	orrs	r0, r3
 80018ce:	0864      	lsrs	r4, r4, #1
 80018d0:	4915      	ldr	r1, [pc, #84]	; (8001928 <__aeabi_dmul+0x368>)
 80018d2:	9b02      	ldr	r3, [sp, #8]
 80018d4:	468c      	mov	ip, r1
 80018d6:	4463      	add	r3, ip
 80018d8:	2b00      	cmp	r3, #0
 80018da:	dc00      	bgt.n	80018de <__aeabi_dmul+0x31e>
 80018dc:	e097      	b.n	8001a0e <__aeabi_dmul+0x44e>
 80018de:	0741      	lsls	r1, r0, #29
 80018e0:	d009      	beq.n	80018f6 <__aeabi_dmul+0x336>
 80018e2:	210f      	movs	r1, #15
 80018e4:	4001      	ands	r1, r0
 80018e6:	2904      	cmp	r1, #4
 80018e8:	d005      	beq.n	80018f6 <__aeabi_dmul+0x336>
 80018ea:	1d01      	adds	r1, r0, #4
 80018ec:	4281      	cmp	r1, r0
 80018ee:	4180      	sbcs	r0, r0
 80018f0:	4240      	negs	r0, r0
 80018f2:	1824      	adds	r4, r4, r0
 80018f4:	0008      	movs	r0, r1
 80018f6:	01e1      	lsls	r1, r4, #7
 80018f8:	d506      	bpl.n	8001908 <__aeabi_dmul+0x348>
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	00c9      	lsls	r1, r1, #3
 80018fe:	468c      	mov	ip, r1
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <__aeabi_dmul+0x36c>)
 8001902:	401c      	ands	r4, r3
 8001904:	9b02      	ldr	r3, [sp, #8]
 8001906:	4463      	add	r3, ip
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <__aeabi_dmul+0x370>)
 800190a:	428b      	cmp	r3, r1
 800190c:	dd00      	ble.n	8001910 <__aeabi_dmul+0x350>
 800190e:	e710      	b.n	8001732 <__aeabi_dmul+0x172>
 8001910:	0761      	lsls	r1, r4, #29
 8001912:	08c5      	lsrs	r5, r0, #3
 8001914:	0264      	lsls	r4, r4, #9
 8001916:	055b      	lsls	r3, r3, #21
 8001918:	430d      	orrs	r5, r1
 800191a:	0b24      	lsrs	r4, r4, #12
 800191c:	0d5b      	lsrs	r3, r3, #21
 800191e:	e6c1      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001920:	000007ff 	.word	0x000007ff
 8001924:	fffffc01 	.word	0xfffffc01
 8001928:	000003ff 	.word	0x000003ff
 800192c:	feffffff 	.word	0xfeffffff
 8001930:	000007fe 	.word	0x000007fe
 8001934:	464b      	mov	r3, r9
 8001936:	4323      	orrs	r3, r4
 8001938:	d059      	beq.n	80019ee <__aeabi_dmul+0x42e>
 800193a:	2c00      	cmp	r4, #0
 800193c:	d100      	bne.n	8001940 <__aeabi_dmul+0x380>
 800193e:	e0a3      	b.n	8001a88 <__aeabi_dmul+0x4c8>
 8001940:	0020      	movs	r0, r4
 8001942:	f000 fd7b 	bl	800243c <__clzsi2>
 8001946:	0001      	movs	r1, r0
 8001948:	0003      	movs	r3, r0
 800194a:	390b      	subs	r1, #11
 800194c:	221d      	movs	r2, #29
 800194e:	1a52      	subs	r2, r2, r1
 8001950:	4649      	mov	r1, r9
 8001952:	0018      	movs	r0, r3
 8001954:	40d1      	lsrs	r1, r2
 8001956:	464a      	mov	r2, r9
 8001958:	3808      	subs	r0, #8
 800195a:	4082      	lsls	r2, r0
 800195c:	4084      	lsls	r4, r0
 800195e:	0010      	movs	r0, r2
 8001960:	430c      	orrs	r4, r1
 8001962:	4a74      	ldr	r2, [pc, #464]	; (8001b34 <__aeabi_dmul+0x574>)
 8001964:	1aeb      	subs	r3, r5, r3
 8001966:	4694      	mov	ip, r2
 8001968:	4642      	mov	r2, r8
 800196a:	4463      	add	r3, ip
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	9b01      	ldr	r3, [sp, #4]
 8001970:	407a      	eors	r2, r7
 8001972:	3301      	adds	r3, #1
 8001974:	2100      	movs	r1, #0
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	2e0a      	cmp	r6, #10
 800197c:	dd00      	ble.n	8001980 <__aeabi_dmul+0x3c0>
 800197e:	e667      	b.n	8001650 <__aeabi_dmul+0x90>
 8001980:	e683      	b.n	800168a <__aeabi_dmul+0xca>
 8001982:	465b      	mov	r3, fp
 8001984:	4303      	orrs	r3, r0
 8001986:	469a      	mov	sl, r3
 8001988:	d02a      	beq.n	80019e0 <__aeabi_dmul+0x420>
 800198a:	465b      	mov	r3, fp
 800198c:	2b00      	cmp	r3, #0
 800198e:	d06d      	beq.n	8001a6c <__aeabi_dmul+0x4ac>
 8001990:	4658      	mov	r0, fp
 8001992:	f000 fd53 	bl	800243c <__clzsi2>
 8001996:	0001      	movs	r1, r0
 8001998:	0003      	movs	r3, r0
 800199a:	390b      	subs	r1, #11
 800199c:	221d      	movs	r2, #29
 800199e:	1a52      	subs	r2, r2, r1
 80019a0:	0021      	movs	r1, r4
 80019a2:	0018      	movs	r0, r3
 80019a4:	465d      	mov	r5, fp
 80019a6:	40d1      	lsrs	r1, r2
 80019a8:	3808      	subs	r0, #8
 80019aa:	4085      	lsls	r5, r0
 80019ac:	000a      	movs	r2, r1
 80019ae:	4084      	lsls	r4, r0
 80019b0:	432a      	orrs	r2, r5
 80019b2:	4693      	mov	fp, r2
 80019b4:	46a2      	mov	sl, r4
 80019b6:	4d5f      	ldr	r5, [pc, #380]	; (8001b34 <__aeabi_dmul+0x574>)
 80019b8:	2600      	movs	r6, #0
 80019ba:	1aed      	subs	r5, r5, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	e625      	b.n	800160e <__aeabi_dmul+0x4e>
 80019c2:	465b      	mov	r3, fp
 80019c4:	4303      	orrs	r3, r0
 80019c6:	469a      	mov	sl, r3
 80019c8:	d105      	bne.n	80019d6 <__aeabi_dmul+0x416>
 80019ca:	2300      	movs	r3, #0
 80019cc:	469b      	mov	fp, r3
 80019ce:	3302      	adds	r3, #2
 80019d0:	2608      	movs	r6, #8
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	e61b      	b.n	800160e <__aeabi_dmul+0x4e>
 80019d6:	2303      	movs	r3, #3
 80019d8:	4682      	mov	sl, r0
 80019da:	260c      	movs	r6, #12
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	e616      	b.n	800160e <__aeabi_dmul+0x4e>
 80019e0:	2300      	movs	r3, #0
 80019e2:	469b      	mov	fp, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	2604      	movs	r6, #4
 80019e8:	2500      	movs	r5, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	e60f      	b.n	800160e <__aeabi_dmul+0x4e>
 80019ee:	4642      	mov	r2, r8
 80019f0:	3301      	adds	r3, #1
 80019f2:	9501      	str	r5, [sp, #4]
 80019f4:	431e      	orrs	r6, r3
 80019f6:	9b01      	ldr	r3, [sp, #4]
 80019f8:	407a      	eors	r2, r7
 80019fa:	3301      	adds	r3, #1
 80019fc:	2400      	movs	r4, #0
 80019fe:	2000      	movs	r0, #0
 8001a00:	2101      	movs	r1, #1
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2e0a      	cmp	r6, #10
 8001a08:	dd00      	ble.n	8001a0c <__aeabi_dmul+0x44c>
 8001a0a:	e621      	b.n	8001650 <__aeabi_dmul+0x90>
 8001a0c:	e63d      	b.n	800168a <__aeabi_dmul+0xca>
 8001a0e:	2101      	movs	r1, #1
 8001a10:	1ac9      	subs	r1, r1, r3
 8001a12:	2938      	cmp	r1, #56	; 0x38
 8001a14:	dd00      	ble.n	8001a18 <__aeabi_dmul+0x458>
 8001a16:	e642      	b.n	800169e <__aeabi_dmul+0xde>
 8001a18:	291f      	cmp	r1, #31
 8001a1a:	dd47      	ble.n	8001aac <__aeabi_dmul+0x4ec>
 8001a1c:	261f      	movs	r6, #31
 8001a1e:	0025      	movs	r5, r4
 8001a20:	4276      	negs	r6, r6
 8001a22:	1af3      	subs	r3, r6, r3
 8001a24:	40dd      	lsrs	r5, r3
 8001a26:	002b      	movs	r3, r5
 8001a28:	2920      	cmp	r1, #32
 8001a2a:	d005      	beq.n	8001a38 <__aeabi_dmul+0x478>
 8001a2c:	4942      	ldr	r1, [pc, #264]	; (8001b38 <__aeabi_dmul+0x578>)
 8001a2e:	9d02      	ldr	r5, [sp, #8]
 8001a30:	468c      	mov	ip, r1
 8001a32:	4465      	add	r5, ip
 8001a34:	40ac      	lsls	r4, r5
 8001a36:	4320      	orrs	r0, r4
 8001a38:	1e41      	subs	r1, r0, #1
 8001a3a:	4188      	sbcs	r0, r1
 8001a3c:	4318      	orrs	r0, r3
 8001a3e:	2307      	movs	r3, #7
 8001a40:	001d      	movs	r5, r3
 8001a42:	2400      	movs	r4, #0
 8001a44:	4005      	ands	r5, r0
 8001a46:	4203      	tst	r3, r0
 8001a48:	d04a      	beq.n	8001ae0 <__aeabi_dmul+0x520>
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	4003      	ands	r3, r0
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d042      	beq.n	8001ada <__aeabi_dmul+0x51a>
 8001a54:	1d03      	adds	r3, r0, #4
 8001a56:	4283      	cmp	r3, r0
 8001a58:	4180      	sbcs	r0, r0
 8001a5a:	4240      	negs	r0, r0
 8001a5c:	1824      	adds	r4, r4, r0
 8001a5e:	0018      	movs	r0, r3
 8001a60:	0223      	lsls	r3, r4, #8
 8001a62:	d53a      	bpl.n	8001ada <__aeabi_dmul+0x51a>
 8001a64:	2301      	movs	r3, #1
 8001a66:	2400      	movs	r4, #0
 8001a68:	2500      	movs	r5, #0
 8001a6a:	e61b      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001a6c:	f000 fce6 	bl	800243c <__clzsi2>
 8001a70:	0001      	movs	r1, r0
 8001a72:	0003      	movs	r3, r0
 8001a74:	3115      	adds	r1, #21
 8001a76:	3320      	adds	r3, #32
 8001a78:	291c      	cmp	r1, #28
 8001a7a:	dd8f      	ble.n	800199c <__aeabi_dmul+0x3dc>
 8001a7c:	3808      	subs	r0, #8
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4084      	lsls	r4, r0
 8001a82:	4692      	mov	sl, r2
 8001a84:	46a3      	mov	fp, r4
 8001a86:	e796      	b.n	80019b6 <__aeabi_dmul+0x3f6>
 8001a88:	f000 fcd8 	bl	800243c <__clzsi2>
 8001a8c:	0001      	movs	r1, r0
 8001a8e:	0003      	movs	r3, r0
 8001a90:	3115      	adds	r1, #21
 8001a92:	3320      	adds	r3, #32
 8001a94:	291c      	cmp	r1, #28
 8001a96:	dc00      	bgt.n	8001a9a <__aeabi_dmul+0x4da>
 8001a98:	e758      	b.n	800194c <__aeabi_dmul+0x38c>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	464c      	mov	r4, r9
 8001a9e:	3a08      	subs	r2, #8
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	4094      	lsls	r4, r2
 8001aa4:	e75d      	b.n	8001962 <__aeabi_dmul+0x3a2>
 8001aa6:	9b01      	ldr	r3, [sp, #4]
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	e711      	b.n	80018d0 <__aeabi_dmul+0x310>
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <__aeabi_dmul+0x57c>)
 8001aae:	0026      	movs	r6, r4
 8001ab0:	469c      	mov	ip, r3
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	9d02      	ldr	r5, [sp, #8]
 8001ab6:	40cb      	lsrs	r3, r1
 8001ab8:	4465      	add	r5, ip
 8001aba:	40ae      	lsls	r6, r5
 8001abc:	431e      	orrs	r6, r3
 8001abe:	0003      	movs	r3, r0
 8001ac0:	40ab      	lsls	r3, r5
 8001ac2:	1e58      	subs	r0, r3, #1
 8001ac4:	4183      	sbcs	r3, r0
 8001ac6:	0030      	movs	r0, r6
 8001ac8:	4318      	orrs	r0, r3
 8001aca:	40cc      	lsrs	r4, r1
 8001acc:	0743      	lsls	r3, r0, #29
 8001ace:	d0c7      	beq.n	8001a60 <__aeabi_dmul+0x4a0>
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	4003      	ands	r3, r0
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d1bd      	bne.n	8001a54 <__aeabi_dmul+0x494>
 8001ad8:	e7c2      	b.n	8001a60 <__aeabi_dmul+0x4a0>
 8001ada:	0765      	lsls	r5, r4, #29
 8001adc:	0264      	lsls	r4, r4, #9
 8001ade:	0b24      	lsrs	r4, r4, #12
 8001ae0:	08c0      	lsrs	r0, r0, #3
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	4305      	orrs	r5, r0
 8001ae6:	e5dd      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001ae8:	2500      	movs	r5, #0
 8001aea:	2302      	movs	r3, #2
 8001aec:	2e0f      	cmp	r6, #15
 8001aee:	d10c      	bne.n	8001b0a <__aeabi_dmul+0x54a>
 8001af0:	2480      	movs	r4, #128	; 0x80
 8001af2:	465b      	mov	r3, fp
 8001af4:	0324      	lsls	r4, r4, #12
 8001af6:	4223      	tst	r3, r4
 8001af8:	d00e      	beq.n	8001b18 <__aeabi_dmul+0x558>
 8001afa:	4221      	tst	r1, r4
 8001afc:	d10c      	bne.n	8001b18 <__aeabi_dmul+0x558>
 8001afe:	430c      	orrs	r4, r1
 8001b00:	0324      	lsls	r4, r4, #12
 8001b02:	003a      	movs	r2, r7
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <__aeabi_dmul+0x580>)
 8001b06:	0b24      	lsrs	r4, r4, #12
 8001b08:	e5cc      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001b0a:	2e0b      	cmp	r6, #11
 8001b0c:	d000      	beq.n	8001b10 <__aeabi_dmul+0x550>
 8001b0e:	e5a2      	b.n	8001656 <__aeabi_dmul+0x96>
 8001b10:	468b      	mov	fp, r1
 8001b12:	46aa      	mov	sl, r5
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	e5f7      	b.n	8001708 <__aeabi_dmul+0x148>
 8001b18:	2480      	movs	r4, #128	; 0x80
 8001b1a:	465b      	mov	r3, fp
 8001b1c:	0324      	lsls	r4, r4, #12
 8001b1e:	431c      	orrs	r4, r3
 8001b20:	0324      	lsls	r4, r4, #12
 8001b22:	4642      	mov	r2, r8
 8001b24:	4655      	mov	r5, sl
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <__aeabi_dmul+0x580>)
 8001b28:	0b24      	lsrs	r4, r4, #12
 8001b2a:	e5bb      	b.n	80016a4 <__aeabi_dmul+0xe4>
 8001b2c:	464d      	mov	r5, r9
 8001b2e:	0021      	movs	r1, r4
 8001b30:	2303      	movs	r3, #3
 8001b32:	e7db      	b.n	8001aec <__aeabi_dmul+0x52c>
 8001b34:	fffffc0d 	.word	0xfffffc0d
 8001b38:	0000043e 	.word	0x0000043e
 8001b3c:	0000041e 	.word	0x0000041e
 8001b40:	000007ff 	.word	0x000007ff

08001b44 <__aeabi_dsub>:
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	4657      	mov	r7, sl
 8001b48:	464e      	mov	r6, r9
 8001b4a:	4645      	mov	r5, r8
 8001b4c:	46de      	mov	lr, fp
 8001b4e:	b5e0      	push	{r5, r6, r7, lr}
 8001b50:	000d      	movs	r5, r1
 8001b52:	0004      	movs	r4, r0
 8001b54:	0019      	movs	r1, r3
 8001b56:	0010      	movs	r0, r2
 8001b58:	032b      	lsls	r3, r5, #12
 8001b5a:	0a5b      	lsrs	r3, r3, #9
 8001b5c:	0f62      	lsrs	r2, r4, #29
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	00e3      	lsls	r3, r4, #3
 8001b62:	030c      	lsls	r4, r1, #12
 8001b64:	0a64      	lsrs	r4, r4, #9
 8001b66:	0f47      	lsrs	r7, r0, #29
 8001b68:	4327      	orrs	r7, r4
 8001b6a:	4cd0      	ldr	r4, [pc, #832]	; (8001eac <__aeabi_dsub+0x368>)
 8001b6c:	006e      	lsls	r6, r5, #1
 8001b6e:	4691      	mov	r9, r2
 8001b70:	b083      	sub	sp, #12
 8001b72:	004a      	lsls	r2, r1, #1
 8001b74:	00c0      	lsls	r0, r0, #3
 8001b76:	4698      	mov	r8, r3
 8001b78:	46a2      	mov	sl, r4
 8001b7a:	0d76      	lsrs	r6, r6, #21
 8001b7c:	0fed      	lsrs	r5, r5, #31
 8001b7e:	0d52      	lsrs	r2, r2, #21
 8001b80:	0fc9      	lsrs	r1, r1, #31
 8001b82:	9001      	str	r0, [sp, #4]
 8001b84:	42a2      	cmp	r2, r4
 8001b86:	d100      	bne.n	8001b8a <__aeabi_dsub+0x46>
 8001b88:	e0b9      	b.n	8001cfe <__aeabi_dsub+0x1ba>
 8001b8a:	2401      	movs	r4, #1
 8001b8c:	4061      	eors	r1, r4
 8001b8e:	468b      	mov	fp, r1
 8001b90:	428d      	cmp	r5, r1
 8001b92:	d100      	bne.n	8001b96 <__aeabi_dsub+0x52>
 8001b94:	e08d      	b.n	8001cb2 <__aeabi_dsub+0x16e>
 8001b96:	1ab4      	subs	r4, r6, r2
 8001b98:	46a4      	mov	ip, r4
 8001b9a:	2c00      	cmp	r4, #0
 8001b9c:	dc00      	bgt.n	8001ba0 <__aeabi_dsub+0x5c>
 8001b9e:	e0b7      	b.n	8001d10 <__aeabi_dsub+0x1cc>
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	d100      	bne.n	8001ba6 <__aeabi_dsub+0x62>
 8001ba4:	e0cb      	b.n	8001d3e <__aeabi_dsub+0x1fa>
 8001ba6:	4ac1      	ldr	r2, [pc, #772]	; (8001eac <__aeabi_dsub+0x368>)
 8001ba8:	4296      	cmp	r6, r2
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x6a>
 8001bac:	e186      	b.n	8001ebc <__aeabi_dsub+0x378>
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	0412      	lsls	r2, r2, #16
 8001bb2:	4317      	orrs	r7, r2
 8001bb4:	4662      	mov	r2, ip
 8001bb6:	2a38      	cmp	r2, #56	; 0x38
 8001bb8:	dd00      	ble.n	8001bbc <__aeabi_dsub+0x78>
 8001bba:	e1a4      	b.n	8001f06 <__aeabi_dsub+0x3c2>
 8001bbc:	2a1f      	cmp	r2, #31
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dsub+0x7e>
 8001bc0:	e21d      	b.n	8001ffe <__aeabi_dsub+0x4ba>
 8001bc2:	4661      	mov	r1, ip
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	003c      	movs	r4, r7
 8001bc8:	1a52      	subs	r2, r2, r1
 8001bca:	0001      	movs	r1, r0
 8001bcc:	4090      	lsls	r0, r2
 8001bce:	4094      	lsls	r4, r2
 8001bd0:	1e42      	subs	r2, r0, #1
 8001bd2:	4190      	sbcs	r0, r2
 8001bd4:	4662      	mov	r2, ip
 8001bd6:	46a0      	mov	r8, r4
 8001bd8:	4664      	mov	r4, ip
 8001bda:	40d7      	lsrs	r7, r2
 8001bdc:	464a      	mov	r2, r9
 8001bde:	40e1      	lsrs	r1, r4
 8001be0:	4644      	mov	r4, r8
 8001be2:	1bd2      	subs	r2, r2, r7
 8001be4:	4691      	mov	r9, r2
 8001be6:	430c      	orrs	r4, r1
 8001be8:	4304      	orrs	r4, r0
 8001bea:	1b1c      	subs	r4, r3, r4
 8001bec:	42a3      	cmp	r3, r4
 8001bee:	4192      	sbcs	r2, r2
 8001bf0:	464b      	mov	r3, r9
 8001bf2:	4252      	negs	r2, r2
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	469a      	mov	sl, r3
 8001bf8:	4653      	mov	r3, sl
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	d400      	bmi.n	8001c00 <__aeabi_dsub+0xbc>
 8001bfe:	e12b      	b.n	8001e58 <__aeabi_dsub+0x314>
 8001c00:	4653      	mov	r3, sl
 8001c02:	025a      	lsls	r2, r3, #9
 8001c04:	0a53      	lsrs	r3, r2, #9
 8001c06:	469a      	mov	sl, r3
 8001c08:	4653      	mov	r3, sl
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d100      	bne.n	8001c10 <__aeabi_dsub+0xcc>
 8001c0e:	e166      	b.n	8001ede <__aeabi_dsub+0x39a>
 8001c10:	4650      	mov	r0, sl
 8001c12:	f000 fc13 	bl	800243c <__clzsi2>
 8001c16:	0003      	movs	r3, r0
 8001c18:	3b08      	subs	r3, #8
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	1ad2      	subs	r2, r2, r3
 8001c20:	4651      	mov	r1, sl
 8001c22:	40d0      	lsrs	r0, r2
 8001c24:	4099      	lsls	r1, r3
 8001c26:	0002      	movs	r2, r0
 8001c28:	409c      	lsls	r4, r3
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	429e      	cmp	r6, r3
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0xee>
 8001c30:	e164      	b.n	8001efc <__aeabi_dsub+0x3b8>
 8001c32:	1b9b      	subs	r3, r3, r6
 8001c34:	1c59      	adds	r1, r3, #1
 8001c36:	291f      	cmp	r1, #31
 8001c38:	dd00      	ble.n	8001c3c <__aeabi_dsub+0xf8>
 8001c3a:	e0fe      	b.n	8001e3a <__aeabi_dsub+0x2f6>
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	0010      	movs	r0, r2
 8001c40:	0026      	movs	r6, r4
 8001c42:	1a5b      	subs	r3, r3, r1
 8001c44:	409c      	lsls	r4, r3
 8001c46:	4098      	lsls	r0, r3
 8001c48:	40ce      	lsrs	r6, r1
 8001c4a:	40ca      	lsrs	r2, r1
 8001c4c:	1e63      	subs	r3, r4, #1
 8001c4e:	419c      	sbcs	r4, r3
 8001c50:	4330      	orrs	r0, r6
 8001c52:	4692      	mov	sl, r2
 8001c54:	2600      	movs	r6, #0
 8001c56:	4304      	orrs	r4, r0
 8001c58:	0763      	lsls	r3, r4, #29
 8001c5a:	d009      	beq.n	8001c70 <__aeabi_dsub+0x12c>
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	4023      	ands	r3, r4
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d005      	beq.n	8001c70 <__aeabi_dsub+0x12c>
 8001c64:	1d23      	adds	r3, r4, #4
 8001c66:	42a3      	cmp	r3, r4
 8001c68:	41a4      	sbcs	r4, r4
 8001c6a:	4264      	negs	r4, r4
 8001c6c:	44a2      	add	sl, r4
 8001c6e:	001c      	movs	r4, r3
 8001c70:	4653      	mov	r3, sl
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	d400      	bmi.n	8001c78 <__aeabi_dsub+0x134>
 8001c76:	e0f2      	b.n	8001e5e <__aeabi_dsub+0x31a>
 8001c78:	4b8c      	ldr	r3, [pc, #560]	; (8001eac <__aeabi_dsub+0x368>)
 8001c7a:	3601      	adds	r6, #1
 8001c7c:	429e      	cmp	r6, r3
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x13e>
 8001c80:	e10f      	b.n	8001ea2 <__aeabi_dsub+0x35e>
 8001c82:	4653      	mov	r3, sl
 8001c84:	498a      	ldr	r1, [pc, #552]	; (8001eb0 <__aeabi_dsub+0x36c>)
 8001c86:	08e4      	lsrs	r4, r4, #3
 8001c88:	400b      	ands	r3, r1
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	075b      	lsls	r3, r3, #29
 8001c8e:	4323      	orrs	r3, r4
 8001c90:	0572      	lsls	r2, r6, #21
 8001c92:	024c      	lsls	r4, r1, #9
 8001c94:	0b24      	lsrs	r4, r4, #12
 8001c96:	0d52      	lsrs	r2, r2, #21
 8001c98:	0512      	lsls	r2, r2, #20
 8001c9a:	4322      	orrs	r2, r4
 8001c9c:	07ed      	lsls	r5, r5, #31
 8001c9e:	432a      	orrs	r2, r5
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	b003      	add	sp, #12
 8001ca6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ca8:	46bb      	mov	fp, r7
 8001caa:	46b2      	mov	sl, r6
 8001cac:	46a9      	mov	r9, r5
 8001cae:	46a0      	mov	r8, r4
 8001cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb2:	1ab4      	subs	r4, r6, r2
 8001cb4:	46a4      	mov	ip, r4
 8001cb6:	2c00      	cmp	r4, #0
 8001cb8:	dd59      	ble.n	8001d6e <__aeabi_dsub+0x22a>
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x17c>
 8001cbe:	e0b0      	b.n	8001e22 <__aeabi_dsub+0x2de>
 8001cc0:	4556      	cmp	r6, sl
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x182>
 8001cc4:	e0fa      	b.n	8001ebc <__aeabi_dsub+0x378>
 8001cc6:	2280      	movs	r2, #128	; 0x80
 8001cc8:	0412      	lsls	r2, r2, #16
 8001cca:	4317      	orrs	r7, r2
 8001ccc:	4662      	mov	r2, ip
 8001cce:	2a38      	cmp	r2, #56	; 0x38
 8001cd0:	dd00      	ble.n	8001cd4 <__aeabi_dsub+0x190>
 8001cd2:	e0d4      	b.n	8001e7e <__aeabi_dsub+0x33a>
 8001cd4:	2a1f      	cmp	r2, #31
 8001cd6:	dc00      	bgt.n	8001cda <__aeabi_dsub+0x196>
 8001cd8:	e1c0      	b.n	800205c <__aeabi_dsub+0x518>
 8001cda:	0039      	movs	r1, r7
 8001cdc:	3a20      	subs	r2, #32
 8001cde:	40d1      	lsrs	r1, r2
 8001ce0:	4662      	mov	r2, ip
 8001ce2:	2a20      	cmp	r2, #32
 8001ce4:	d006      	beq.n	8001cf4 <__aeabi_dsub+0x1b0>
 8001ce6:	4664      	mov	r4, ip
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	1b12      	subs	r2, r2, r4
 8001cec:	003c      	movs	r4, r7
 8001cee:	4094      	lsls	r4, r2
 8001cf0:	4304      	orrs	r4, r0
 8001cf2:	9401      	str	r4, [sp, #4]
 8001cf4:	9c01      	ldr	r4, [sp, #4]
 8001cf6:	1e62      	subs	r2, r4, #1
 8001cf8:	4194      	sbcs	r4, r2
 8001cfa:	430c      	orrs	r4, r1
 8001cfc:	e0c3      	b.n	8001e86 <__aeabi_dsub+0x342>
 8001cfe:	003c      	movs	r4, r7
 8001d00:	4304      	orrs	r4, r0
 8001d02:	d02b      	beq.n	8001d5c <__aeabi_dsub+0x218>
 8001d04:	468b      	mov	fp, r1
 8001d06:	428d      	cmp	r5, r1
 8001d08:	d02e      	beq.n	8001d68 <__aeabi_dsub+0x224>
 8001d0a:	4c6a      	ldr	r4, [pc, #424]	; (8001eb4 <__aeabi_dsub+0x370>)
 8001d0c:	46a4      	mov	ip, r4
 8001d0e:	44b4      	add	ip, r6
 8001d10:	4664      	mov	r4, ip
 8001d12:	2c00      	cmp	r4, #0
 8001d14:	d05f      	beq.n	8001dd6 <__aeabi_dsub+0x292>
 8001d16:	1b94      	subs	r4, r2, r6
 8001d18:	46a4      	mov	ip, r4
 8001d1a:	2e00      	cmp	r6, #0
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dsub+0x1dc>
 8001d1e:	e120      	b.n	8001f62 <__aeabi_dsub+0x41e>
 8001d20:	464c      	mov	r4, r9
 8001d22:	431c      	orrs	r4, r3
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x1e4>
 8001d26:	e1c7      	b.n	80020b8 <__aeabi_dsub+0x574>
 8001d28:	4661      	mov	r1, ip
 8001d2a:	1e4c      	subs	r4, r1, #1
 8001d2c:	2901      	cmp	r1, #1
 8001d2e:	d100      	bne.n	8001d32 <__aeabi_dsub+0x1ee>
 8001d30:	e223      	b.n	800217a <__aeabi_dsub+0x636>
 8001d32:	4d5e      	ldr	r5, [pc, #376]	; (8001eac <__aeabi_dsub+0x368>)
 8001d34:	45ac      	cmp	ip, r5
 8001d36:	d100      	bne.n	8001d3a <__aeabi_dsub+0x1f6>
 8001d38:	e1d8      	b.n	80020ec <__aeabi_dsub+0x5a8>
 8001d3a:	46a4      	mov	ip, r4
 8001d3c:	e11a      	b.n	8001f74 <__aeabi_dsub+0x430>
 8001d3e:	003a      	movs	r2, r7
 8001d40:	4302      	orrs	r2, r0
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dsub+0x202>
 8001d44:	e0e4      	b.n	8001f10 <__aeabi_dsub+0x3cc>
 8001d46:	0022      	movs	r2, r4
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	2c01      	cmp	r4, #1
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x20c>
 8001d4e:	e1c3      	b.n	80020d8 <__aeabi_dsub+0x594>
 8001d50:	4956      	ldr	r1, [pc, #344]	; (8001eac <__aeabi_dsub+0x368>)
 8001d52:	428c      	cmp	r4, r1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x214>
 8001d56:	e0b1      	b.n	8001ebc <__aeabi_dsub+0x378>
 8001d58:	4694      	mov	ip, r2
 8001d5a:	e72b      	b.n	8001bb4 <__aeabi_dsub+0x70>
 8001d5c:	2401      	movs	r4, #1
 8001d5e:	4061      	eors	r1, r4
 8001d60:	468b      	mov	fp, r1
 8001d62:	428d      	cmp	r5, r1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_dsub+0x224>
 8001d66:	e716      	b.n	8001b96 <__aeabi_dsub+0x52>
 8001d68:	4952      	ldr	r1, [pc, #328]	; (8001eb4 <__aeabi_dsub+0x370>)
 8001d6a:	468c      	mov	ip, r1
 8001d6c:	44b4      	add	ip, r6
 8001d6e:	4664      	mov	r4, ip
 8001d70:	2c00      	cmp	r4, #0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x232>
 8001d74:	e0d3      	b.n	8001f1e <__aeabi_dsub+0x3da>
 8001d76:	1b91      	subs	r1, r2, r6
 8001d78:	468c      	mov	ip, r1
 8001d7a:	2e00      	cmp	r6, #0
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x23c>
 8001d7e:	e15e      	b.n	800203e <__aeabi_dsub+0x4fa>
 8001d80:	494a      	ldr	r1, [pc, #296]	; (8001eac <__aeabi_dsub+0x368>)
 8001d82:	428a      	cmp	r2, r1
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x244>
 8001d86:	e1be      	b.n	8002106 <__aeabi_dsub+0x5c2>
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	464c      	mov	r4, r9
 8001d8c:	0409      	lsls	r1, r1, #16
 8001d8e:	430c      	orrs	r4, r1
 8001d90:	46a1      	mov	r9, r4
 8001d92:	4661      	mov	r1, ip
 8001d94:	2938      	cmp	r1, #56	; 0x38
 8001d96:	dd00      	ble.n	8001d9a <__aeabi_dsub+0x256>
 8001d98:	e1ba      	b.n	8002110 <__aeabi_dsub+0x5cc>
 8001d9a:	291f      	cmp	r1, #31
 8001d9c:	dd00      	ble.n	8001da0 <__aeabi_dsub+0x25c>
 8001d9e:	e227      	b.n	80021f0 <__aeabi_dsub+0x6ac>
 8001da0:	2420      	movs	r4, #32
 8001da2:	1a64      	subs	r4, r4, r1
 8001da4:	4649      	mov	r1, r9
 8001da6:	40a1      	lsls	r1, r4
 8001da8:	001e      	movs	r6, r3
 8001daa:	4688      	mov	r8, r1
 8001dac:	4661      	mov	r1, ip
 8001dae:	40a3      	lsls	r3, r4
 8001db0:	40ce      	lsrs	r6, r1
 8001db2:	4641      	mov	r1, r8
 8001db4:	1e5c      	subs	r4, r3, #1
 8001db6:	41a3      	sbcs	r3, r4
 8001db8:	4331      	orrs	r1, r6
 8001dba:	4319      	orrs	r1, r3
 8001dbc:	000c      	movs	r4, r1
 8001dbe:	4663      	mov	r3, ip
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	40d9      	lsrs	r1, r3
 8001dc4:	187f      	adds	r7, r7, r1
 8001dc6:	1824      	adds	r4, r4, r0
 8001dc8:	4284      	cmp	r4, r0
 8001dca:	419b      	sbcs	r3, r3
 8001dcc:	425b      	negs	r3, r3
 8001dce:	469a      	mov	sl, r3
 8001dd0:	0016      	movs	r6, r2
 8001dd2:	44ba      	add	sl, r7
 8001dd4:	e05d      	b.n	8001e92 <__aeabi_dsub+0x34e>
 8001dd6:	4c38      	ldr	r4, [pc, #224]	; (8001eb8 <__aeabi_dsub+0x374>)
 8001dd8:	1c72      	adds	r2, r6, #1
 8001dda:	4222      	tst	r2, r4
 8001ddc:	d000      	beq.n	8001de0 <__aeabi_dsub+0x29c>
 8001dde:	e0df      	b.n	8001fa0 <__aeabi_dsub+0x45c>
 8001de0:	464a      	mov	r2, r9
 8001de2:	431a      	orrs	r2, r3
 8001de4:	2e00      	cmp	r6, #0
 8001de6:	d000      	beq.n	8001dea <__aeabi_dsub+0x2a6>
 8001de8:	e15c      	b.n	80020a4 <__aeabi_dsub+0x560>
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d100      	bne.n	8001df0 <__aeabi_dsub+0x2ac>
 8001dee:	e1cf      	b.n	8002190 <__aeabi_dsub+0x64c>
 8001df0:	003a      	movs	r2, r7
 8001df2:	4302      	orrs	r2, r0
 8001df4:	d100      	bne.n	8001df8 <__aeabi_dsub+0x2b4>
 8001df6:	e17f      	b.n	80020f8 <__aeabi_dsub+0x5b4>
 8001df8:	1a1c      	subs	r4, r3, r0
 8001dfa:	464a      	mov	r2, r9
 8001dfc:	42a3      	cmp	r3, r4
 8001dfe:	4189      	sbcs	r1, r1
 8001e00:	1bd2      	subs	r2, r2, r7
 8001e02:	4249      	negs	r1, r1
 8001e04:	1a52      	subs	r2, r2, r1
 8001e06:	4692      	mov	sl, r2
 8001e08:	0212      	lsls	r2, r2, #8
 8001e0a:	d400      	bmi.n	8001e0e <__aeabi_dsub+0x2ca>
 8001e0c:	e20a      	b.n	8002224 <__aeabi_dsub+0x6e0>
 8001e0e:	1ac4      	subs	r4, r0, r3
 8001e10:	42a0      	cmp	r0, r4
 8001e12:	4180      	sbcs	r0, r0
 8001e14:	464b      	mov	r3, r9
 8001e16:	4240      	negs	r0, r0
 8001e18:	1aff      	subs	r7, r7, r3
 8001e1a:	1a3b      	subs	r3, r7, r0
 8001e1c:	469a      	mov	sl, r3
 8001e1e:	465d      	mov	r5, fp
 8001e20:	e71a      	b.n	8001c58 <__aeabi_dsub+0x114>
 8001e22:	003a      	movs	r2, r7
 8001e24:	4302      	orrs	r2, r0
 8001e26:	d073      	beq.n	8001f10 <__aeabi_dsub+0x3cc>
 8001e28:	0022      	movs	r2, r4
 8001e2a:	3a01      	subs	r2, #1
 8001e2c:	2c01      	cmp	r4, #1
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_dsub+0x2ee>
 8001e30:	e0cb      	b.n	8001fca <__aeabi_dsub+0x486>
 8001e32:	4554      	cmp	r4, sl
 8001e34:	d042      	beq.n	8001ebc <__aeabi_dsub+0x378>
 8001e36:	4694      	mov	ip, r2
 8001e38:	e748      	b.n	8001ccc <__aeabi_dsub+0x188>
 8001e3a:	0010      	movs	r0, r2
 8001e3c:	3b1f      	subs	r3, #31
 8001e3e:	40d8      	lsrs	r0, r3
 8001e40:	2920      	cmp	r1, #32
 8001e42:	d003      	beq.n	8001e4c <__aeabi_dsub+0x308>
 8001e44:	2340      	movs	r3, #64	; 0x40
 8001e46:	1a5b      	subs	r3, r3, r1
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	4314      	orrs	r4, r2
 8001e4c:	1e63      	subs	r3, r4, #1
 8001e4e:	419c      	sbcs	r4, r3
 8001e50:	2300      	movs	r3, #0
 8001e52:	2600      	movs	r6, #0
 8001e54:	469a      	mov	sl, r3
 8001e56:	4304      	orrs	r4, r0
 8001e58:	0763      	lsls	r3, r4, #29
 8001e5a:	d000      	beq.n	8001e5e <__aeabi_dsub+0x31a>
 8001e5c:	e6fe      	b.n	8001c5c <__aeabi_dsub+0x118>
 8001e5e:	4652      	mov	r2, sl
 8001e60:	08e3      	lsrs	r3, r4, #3
 8001e62:	0752      	lsls	r2, r2, #29
 8001e64:	4313      	orrs	r3, r2
 8001e66:	4652      	mov	r2, sl
 8001e68:	46b4      	mov	ip, r6
 8001e6a:	08d2      	lsrs	r2, r2, #3
 8001e6c:	490f      	ldr	r1, [pc, #60]	; (8001eac <__aeabi_dsub+0x368>)
 8001e6e:	458c      	cmp	ip, r1
 8001e70:	d02a      	beq.n	8001ec8 <__aeabi_dsub+0x384>
 8001e72:	0312      	lsls	r2, r2, #12
 8001e74:	0b14      	lsrs	r4, r2, #12
 8001e76:	4662      	mov	r2, ip
 8001e78:	0552      	lsls	r2, r2, #21
 8001e7a:	0d52      	lsrs	r2, r2, #21
 8001e7c:	e70c      	b.n	8001c98 <__aeabi_dsub+0x154>
 8001e7e:	003c      	movs	r4, r7
 8001e80:	4304      	orrs	r4, r0
 8001e82:	1e62      	subs	r2, r4, #1
 8001e84:	4194      	sbcs	r4, r2
 8001e86:	18e4      	adds	r4, r4, r3
 8001e88:	429c      	cmp	r4, r3
 8001e8a:	4192      	sbcs	r2, r2
 8001e8c:	4252      	negs	r2, r2
 8001e8e:	444a      	add	r2, r9
 8001e90:	4692      	mov	sl, r2
 8001e92:	4653      	mov	r3, sl
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	d5df      	bpl.n	8001e58 <__aeabi_dsub+0x314>
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <__aeabi_dsub+0x368>)
 8001e9a:	3601      	adds	r6, #1
 8001e9c:	429e      	cmp	r6, r3
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_dsub+0x35e>
 8001ea0:	e0a0      	b.n	8001fe4 <__aeabi_dsub+0x4a0>
 8001ea2:	0032      	movs	r2, r6
 8001ea4:	2400      	movs	r4, #0
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e6f6      	b.n	8001c98 <__aeabi_dsub+0x154>
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	000007ff 	.word	0x000007ff
 8001eb0:	ff7fffff 	.word	0xff7fffff
 8001eb4:	fffff801 	.word	0xfffff801
 8001eb8:	000007fe 	.word	0x000007fe
 8001ebc:	08db      	lsrs	r3, r3, #3
 8001ebe:	464a      	mov	r2, r9
 8001ec0:	0752      	lsls	r2, r2, #29
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	464a      	mov	r2, r9
 8001ec6:	08d2      	lsrs	r2, r2, #3
 8001ec8:	0019      	movs	r1, r3
 8001eca:	4311      	orrs	r1, r2
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_dsub+0x38c>
 8001ece:	e1b5      	b.n	800223c <__aeabi_dsub+0x6f8>
 8001ed0:	2480      	movs	r4, #128	; 0x80
 8001ed2:	0324      	lsls	r4, r4, #12
 8001ed4:	4314      	orrs	r4, r2
 8001ed6:	0324      	lsls	r4, r4, #12
 8001ed8:	4ad5      	ldr	r2, [pc, #852]	; (8002230 <__aeabi_dsub+0x6ec>)
 8001eda:	0b24      	lsrs	r4, r4, #12
 8001edc:	e6dc      	b.n	8001c98 <__aeabi_dsub+0x154>
 8001ede:	0020      	movs	r0, r4
 8001ee0:	f000 faac 	bl	800243c <__clzsi2>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	3318      	adds	r3, #24
 8001ee8:	2b1f      	cmp	r3, #31
 8001eea:	dc00      	bgt.n	8001eee <__aeabi_dsub+0x3aa>
 8001eec:	e695      	b.n	8001c1a <__aeabi_dsub+0xd6>
 8001eee:	0022      	movs	r2, r4
 8001ef0:	3808      	subs	r0, #8
 8001ef2:	4082      	lsls	r2, r0
 8001ef4:	2400      	movs	r4, #0
 8001ef6:	429e      	cmp	r6, r3
 8001ef8:	dc00      	bgt.n	8001efc <__aeabi_dsub+0x3b8>
 8001efa:	e69a      	b.n	8001c32 <__aeabi_dsub+0xee>
 8001efc:	1af6      	subs	r6, r6, r3
 8001efe:	4bcd      	ldr	r3, [pc, #820]	; (8002234 <__aeabi_dsub+0x6f0>)
 8001f00:	401a      	ands	r2, r3
 8001f02:	4692      	mov	sl, r2
 8001f04:	e6a8      	b.n	8001c58 <__aeabi_dsub+0x114>
 8001f06:	003c      	movs	r4, r7
 8001f08:	4304      	orrs	r4, r0
 8001f0a:	1e62      	subs	r2, r4, #1
 8001f0c:	4194      	sbcs	r4, r2
 8001f0e:	e66c      	b.n	8001bea <__aeabi_dsub+0xa6>
 8001f10:	464a      	mov	r2, r9
 8001f12:	08db      	lsrs	r3, r3, #3
 8001f14:	0752      	lsls	r2, r2, #29
 8001f16:	4313      	orrs	r3, r2
 8001f18:	464a      	mov	r2, r9
 8001f1a:	08d2      	lsrs	r2, r2, #3
 8001f1c:	e7a6      	b.n	8001e6c <__aeabi_dsub+0x328>
 8001f1e:	4cc6      	ldr	r4, [pc, #792]	; (8002238 <__aeabi_dsub+0x6f4>)
 8001f20:	1c72      	adds	r2, r6, #1
 8001f22:	4222      	tst	r2, r4
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dsub+0x3e4>
 8001f26:	e0ac      	b.n	8002082 <__aeabi_dsub+0x53e>
 8001f28:	464a      	mov	r2, r9
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	2e00      	cmp	r6, #0
 8001f2e:	d000      	beq.n	8001f32 <__aeabi_dsub+0x3ee>
 8001f30:	e105      	b.n	800213e <__aeabi_dsub+0x5fa>
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x3f4>
 8001f36:	e156      	b.n	80021e6 <__aeabi_dsub+0x6a2>
 8001f38:	003a      	movs	r2, r7
 8001f3a:	4302      	orrs	r2, r0
 8001f3c:	d100      	bne.n	8001f40 <__aeabi_dsub+0x3fc>
 8001f3e:	e0db      	b.n	80020f8 <__aeabi_dsub+0x5b4>
 8001f40:	181c      	adds	r4, r3, r0
 8001f42:	429c      	cmp	r4, r3
 8001f44:	419b      	sbcs	r3, r3
 8001f46:	444f      	add	r7, r9
 8001f48:	46ba      	mov	sl, r7
 8001f4a:	425b      	negs	r3, r3
 8001f4c:	449a      	add	sl, r3
 8001f4e:	4653      	mov	r3, sl
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	d400      	bmi.n	8001f56 <__aeabi_dsub+0x412>
 8001f54:	e780      	b.n	8001e58 <__aeabi_dsub+0x314>
 8001f56:	4652      	mov	r2, sl
 8001f58:	4bb6      	ldr	r3, [pc, #728]	; (8002234 <__aeabi_dsub+0x6f0>)
 8001f5a:	2601      	movs	r6, #1
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	4692      	mov	sl, r2
 8001f60:	e77a      	b.n	8001e58 <__aeabi_dsub+0x314>
 8001f62:	4cb3      	ldr	r4, [pc, #716]	; (8002230 <__aeabi_dsub+0x6ec>)
 8001f64:	42a2      	cmp	r2, r4
 8001f66:	d100      	bne.n	8001f6a <__aeabi_dsub+0x426>
 8001f68:	e0c0      	b.n	80020ec <__aeabi_dsub+0x5a8>
 8001f6a:	2480      	movs	r4, #128	; 0x80
 8001f6c:	464d      	mov	r5, r9
 8001f6e:	0424      	lsls	r4, r4, #16
 8001f70:	4325      	orrs	r5, r4
 8001f72:	46a9      	mov	r9, r5
 8001f74:	4664      	mov	r4, ip
 8001f76:	2c38      	cmp	r4, #56	; 0x38
 8001f78:	dc53      	bgt.n	8002022 <__aeabi_dsub+0x4de>
 8001f7a:	4661      	mov	r1, ip
 8001f7c:	2c1f      	cmp	r4, #31
 8001f7e:	dd00      	ble.n	8001f82 <__aeabi_dsub+0x43e>
 8001f80:	e0cd      	b.n	800211e <__aeabi_dsub+0x5da>
 8001f82:	2520      	movs	r5, #32
 8001f84:	001e      	movs	r6, r3
 8001f86:	1b2d      	subs	r5, r5, r4
 8001f88:	464c      	mov	r4, r9
 8001f8a:	40ab      	lsls	r3, r5
 8001f8c:	40ac      	lsls	r4, r5
 8001f8e:	40ce      	lsrs	r6, r1
 8001f90:	1e5d      	subs	r5, r3, #1
 8001f92:	41ab      	sbcs	r3, r5
 8001f94:	4334      	orrs	r4, r6
 8001f96:	4323      	orrs	r3, r4
 8001f98:	464c      	mov	r4, r9
 8001f9a:	40cc      	lsrs	r4, r1
 8001f9c:	1b3f      	subs	r7, r7, r4
 8001f9e:	e045      	b.n	800202c <__aeabi_dsub+0x4e8>
 8001fa0:	464a      	mov	r2, r9
 8001fa2:	1a1c      	subs	r4, r3, r0
 8001fa4:	1bd1      	subs	r1, r2, r7
 8001fa6:	42a3      	cmp	r3, r4
 8001fa8:	4192      	sbcs	r2, r2
 8001faa:	4252      	negs	r2, r2
 8001fac:	4692      	mov	sl, r2
 8001fae:	000a      	movs	r2, r1
 8001fb0:	4651      	mov	r1, sl
 8001fb2:	1a52      	subs	r2, r2, r1
 8001fb4:	4692      	mov	sl, r2
 8001fb6:	0212      	lsls	r2, r2, #8
 8001fb8:	d500      	bpl.n	8001fbc <__aeabi_dsub+0x478>
 8001fba:	e083      	b.n	80020c4 <__aeabi_dsub+0x580>
 8001fbc:	4653      	mov	r3, sl
 8001fbe:	4323      	orrs	r3, r4
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_dsub+0x480>
 8001fc2:	e621      	b.n	8001c08 <__aeabi_dsub+0xc4>
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2500      	movs	r5, #0
 8001fc8:	e753      	b.n	8001e72 <__aeabi_dsub+0x32e>
 8001fca:	181c      	adds	r4, r3, r0
 8001fcc:	429c      	cmp	r4, r3
 8001fce:	419b      	sbcs	r3, r3
 8001fd0:	444f      	add	r7, r9
 8001fd2:	46ba      	mov	sl, r7
 8001fd4:	425b      	negs	r3, r3
 8001fd6:	449a      	add	sl, r3
 8001fd8:	4653      	mov	r3, sl
 8001fda:	2601      	movs	r6, #1
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	d400      	bmi.n	8001fe2 <__aeabi_dsub+0x49e>
 8001fe0:	e73a      	b.n	8001e58 <__aeabi_dsub+0x314>
 8001fe2:	2602      	movs	r6, #2
 8001fe4:	4652      	mov	r2, sl
 8001fe6:	4b93      	ldr	r3, [pc, #588]	; (8002234 <__aeabi_dsub+0x6f0>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	401a      	ands	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	4021      	ands	r1, r4
 8001ff0:	0862      	lsrs	r2, r4, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	07dc      	lsls	r4, r3, #31
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	469a      	mov	sl, r3
 8001ffa:	4314      	orrs	r4, r2
 8001ffc:	e62c      	b.n	8001c58 <__aeabi_dsub+0x114>
 8001ffe:	0039      	movs	r1, r7
 8002000:	3a20      	subs	r2, #32
 8002002:	40d1      	lsrs	r1, r2
 8002004:	4662      	mov	r2, ip
 8002006:	2a20      	cmp	r2, #32
 8002008:	d006      	beq.n	8002018 <__aeabi_dsub+0x4d4>
 800200a:	4664      	mov	r4, ip
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	1b12      	subs	r2, r2, r4
 8002010:	003c      	movs	r4, r7
 8002012:	4094      	lsls	r4, r2
 8002014:	4304      	orrs	r4, r0
 8002016:	9401      	str	r4, [sp, #4]
 8002018:	9c01      	ldr	r4, [sp, #4]
 800201a:	1e62      	subs	r2, r4, #1
 800201c:	4194      	sbcs	r4, r2
 800201e:	430c      	orrs	r4, r1
 8002020:	e5e3      	b.n	8001bea <__aeabi_dsub+0xa6>
 8002022:	4649      	mov	r1, r9
 8002024:	4319      	orrs	r1, r3
 8002026:	000b      	movs	r3, r1
 8002028:	1e5c      	subs	r4, r3, #1
 800202a:	41a3      	sbcs	r3, r4
 800202c:	1ac4      	subs	r4, r0, r3
 800202e:	42a0      	cmp	r0, r4
 8002030:	419b      	sbcs	r3, r3
 8002032:	425b      	negs	r3, r3
 8002034:	1afb      	subs	r3, r7, r3
 8002036:	469a      	mov	sl, r3
 8002038:	465d      	mov	r5, fp
 800203a:	0016      	movs	r6, r2
 800203c:	e5dc      	b.n	8001bf8 <__aeabi_dsub+0xb4>
 800203e:	4649      	mov	r1, r9
 8002040:	4319      	orrs	r1, r3
 8002042:	d100      	bne.n	8002046 <__aeabi_dsub+0x502>
 8002044:	e0ae      	b.n	80021a4 <__aeabi_dsub+0x660>
 8002046:	4661      	mov	r1, ip
 8002048:	4664      	mov	r4, ip
 800204a:	3901      	subs	r1, #1
 800204c:	2c01      	cmp	r4, #1
 800204e:	d100      	bne.n	8002052 <__aeabi_dsub+0x50e>
 8002050:	e0e0      	b.n	8002214 <__aeabi_dsub+0x6d0>
 8002052:	4c77      	ldr	r4, [pc, #476]	; (8002230 <__aeabi_dsub+0x6ec>)
 8002054:	45a4      	cmp	ip, r4
 8002056:	d056      	beq.n	8002106 <__aeabi_dsub+0x5c2>
 8002058:	468c      	mov	ip, r1
 800205a:	e69a      	b.n	8001d92 <__aeabi_dsub+0x24e>
 800205c:	4661      	mov	r1, ip
 800205e:	2220      	movs	r2, #32
 8002060:	003c      	movs	r4, r7
 8002062:	1a52      	subs	r2, r2, r1
 8002064:	4094      	lsls	r4, r2
 8002066:	0001      	movs	r1, r0
 8002068:	4090      	lsls	r0, r2
 800206a:	46a0      	mov	r8, r4
 800206c:	4664      	mov	r4, ip
 800206e:	1e42      	subs	r2, r0, #1
 8002070:	4190      	sbcs	r0, r2
 8002072:	4662      	mov	r2, ip
 8002074:	40e1      	lsrs	r1, r4
 8002076:	4644      	mov	r4, r8
 8002078:	40d7      	lsrs	r7, r2
 800207a:	430c      	orrs	r4, r1
 800207c:	4304      	orrs	r4, r0
 800207e:	44b9      	add	r9, r7
 8002080:	e701      	b.n	8001e86 <__aeabi_dsub+0x342>
 8002082:	496b      	ldr	r1, [pc, #428]	; (8002230 <__aeabi_dsub+0x6ec>)
 8002084:	428a      	cmp	r2, r1
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x546>
 8002088:	e70c      	b.n	8001ea4 <__aeabi_dsub+0x360>
 800208a:	1818      	adds	r0, r3, r0
 800208c:	4298      	cmp	r0, r3
 800208e:	419b      	sbcs	r3, r3
 8002090:	444f      	add	r7, r9
 8002092:	425b      	negs	r3, r3
 8002094:	18fb      	adds	r3, r7, r3
 8002096:	07dc      	lsls	r4, r3, #31
 8002098:	0840      	lsrs	r0, r0, #1
 800209a:	085b      	lsrs	r3, r3, #1
 800209c:	469a      	mov	sl, r3
 800209e:	0016      	movs	r6, r2
 80020a0:	4304      	orrs	r4, r0
 80020a2:	e6d9      	b.n	8001e58 <__aeabi_dsub+0x314>
 80020a4:	2a00      	cmp	r2, #0
 80020a6:	d000      	beq.n	80020aa <__aeabi_dsub+0x566>
 80020a8:	e081      	b.n	80021ae <__aeabi_dsub+0x66a>
 80020aa:	003b      	movs	r3, r7
 80020ac:	4303      	orrs	r3, r0
 80020ae:	d11d      	bne.n	80020ec <__aeabi_dsub+0x5a8>
 80020b0:	2280      	movs	r2, #128	; 0x80
 80020b2:	2500      	movs	r5, #0
 80020b4:	0312      	lsls	r2, r2, #12
 80020b6:	e70b      	b.n	8001ed0 <__aeabi_dsub+0x38c>
 80020b8:	08c0      	lsrs	r0, r0, #3
 80020ba:	077b      	lsls	r3, r7, #29
 80020bc:	465d      	mov	r5, fp
 80020be:	4303      	orrs	r3, r0
 80020c0:	08fa      	lsrs	r2, r7, #3
 80020c2:	e6d3      	b.n	8001e6c <__aeabi_dsub+0x328>
 80020c4:	1ac4      	subs	r4, r0, r3
 80020c6:	42a0      	cmp	r0, r4
 80020c8:	4180      	sbcs	r0, r0
 80020ca:	464b      	mov	r3, r9
 80020cc:	4240      	negs	r0, r0
 80020ce:	1aff      	subs	r7, r7, r3
 80020d0:	1a3b      	subs	r3, r7, r0
 80020d2:	469a      	mov	sl, r3
 80020d4:	465d      	mov	r5, fp
 80020d6:	e597      	b.n	8001c08 <__aeabi_dsub+0xc4>
 80020d8:	1a1c      	subs	r4, r3, r0
 80020da:	464a      	mov	r2, r9
 80020dc:	42a3      	cmp	r3, r4
 80020de:	419b      	sbcs	r3, r3
 80020e0:	1bd7      	subs	r7, r2, r7
 80020e2:	425b      	negs	r3, r3
 80020e4:	1afb      	subs	r3, r7, r3
 80020e6:	469a      	mov	sl, r3
 80020e8:	2601      	movs	r6, #1
 80020ea:	e585      	b.n	8001bf8 <__aeabi_dsub+0xb4>
 80020ec:	08c0      	lsrs	r0, r0, #3
 80020ee:	077b      	lsls	r3, r7, #29
 80020f0:	465d      	mov	r5, fp
 80020f2:	4303      	orrs	r3, r0
 80020f4:	08fa      	lsrs	r2, r7, #3
 80020f6:	e6e7      	b.n	8001ec8 <__aeabi_dsub+0x384>
 80020f8:	464a      	mov	r2, r9
 80020fa:	08db      	lsrs	r3, r3, #3
 80020fc:	0752      	lsls	r2, r2, #29
 80020fe:	4313      	orrs	r3, r2
 8002100:	464a      	mov	r2, r9
 8002102:	08d2      	lsrs	r2, r2, #3
 8002104:	e6b5      	b.n	8001e72 <__aeabi_dsub+0x32e>
 8002106:	08c0      	lsrs	r0, r0, #3
 8002108:	077b      	lsls	r3, r7, #29
 800210a:	4303      	orrs	r3, r0
 800210c:	08fa      	lsrs	r2, r7, #3
 800210e:	e6db      	b.n	8001ec8 <__aeabi_dsub+0x384>
 8002110:	4649      	mov	r1, r9
 8002112:	4319      	orrs	r1, r3
 8002114:	000b      	movs	r3, r1
 8002116:	1e59      	subs	r1, r3, #1
 8002118:	418b      	sbcs	r3, r1
 800211a:	001c      	movs	r4, r3
 800211c:	e653      	b.n	8001dc6 <__aeabi_dsub+0x282>
 800211e:	464d      	mov	r5, r9
 8002120:	3c20      	subs	r4, #32
 8002122:	40e5      	lsrs	r5, r4
 8002124:	2920      	cmp	r1, #32
 8002126:	d005      	beq.n	8002134 <__aeabi_dsub+0x5f0>
 8002128:	2440      	movs	r4, #64	; 0x40
 800212a:	1a64      	subs	r4, r4, r1
 800212c:	4649      	mov	r1, r9
 800212e:	40a1      	lsls	r1, r4
 8002130:	430b      	orrs	r3, r1
 8002132:	4698      	mov	r8, r3
 8002134:	4643      	mov	r3, r8
 8002136:	1e5c      	subs	r4, r3, #1
 8002138:	41a3      	sbcs	r3, r4
 800213a:	432b      	orrs	r3, r5
 800213c:	e776      	b.n	800202c <__aeabi_dsub+0x4e8>
 800213e:	2a00      	cmp	r2, #0
 8002140:	d0e1      	beq.n	8002106 <__aeabi_dsub+0x5c2>
 8002142:	003a      	movs	r2, r7
 8002144:	08db      	lsrs	r3, r3, #3
 8002146:	4302      	orrs	r2, r0
 8002148:	d100      	bne.n	800214c <__aeabi_dsub+0x608>
 800214a:	e6b8      	b.n	8001ebe <__aeabi_dsub+0x37a>
 800214c:	464a      	mov	r2, r9
 800214e:	0752      	lsls	r2, r2, #29
 8002150:	2480      	movs	r4, #128	; 0x80
 8002152:	4313      	orrs	r3, r2
 8002154:	464a      	mov	r2, r9
 8002156:	0324      	lsls	r4, r4, #12
 8002158:	08d2      	lsrs	r2, r2, #3
 800215a:	4222      	tst	r2, r4
 800215c:	d007      	beq.n	800216e <__aeabi_dsub+0x62a>
 800215e:	08fe      	lsrs	r6, r7, #3
 8002160:	4226      	tst	r6, r4
 8002162:	d104      	bne.n	800216e <__aeabi_dsub+0x62a>
 8002164:	465d      	mov	r5, fp
 8002166:	0032      	movs	r2, r6
 8002168:	08c3      	lsrs	r3, r0, #3
 800216a:	077f      	lsls	r7, r7, #29
 800216c:	433b      	orrs	r3, r7
 800216e:	0f59      	lsrs	r1, r3, #29
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	0749      	lsls	r1, r1, #29
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	430b      	orrs	r3, r1
 8002178:	e6a6      	b.n	8001ec8 <__aeabi_dsub+0x384>
 800217a:	1ac4      	subs	r4, r0, r3
 800217c:	42a0      	cmp	r0, r4
 800217e:	4180      	sbcs	r0, r0
 8002180:	464b      	mov	r3, r9
 8002182:	4240      	negs	r0, r0
 8002184:	1aff      	subs	r7, r7, r3
 8002186:	1a3b      	subs	r3, r7, r0
 8002188:	469a      	mov	sl, r3
 800218a:	465d      	mov	r5, fp
 800218c:	2601      	movs	r6, #1
 800218e:	e533      	b.n	8001bf8 <__aeabi_dsub+0xb4>
 8002190:	003b      	movs	r3, r7
 8002192:	4303      	orrs	r3, r0
 8002194:	d100      	bne.n	8002198 <__aeabi_dsub+0x654>
 8002196:	e715      	b.n	8001fc4 <__aeabi_dsub+0x480>
 8002198:	08c0      	lsrs	r0, r0, #3
 800219a:	077b      	lsls	r3, r7, #29
 800219c:	465d      	mov	r5, fp
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e666      	b.n	8001e72 <__aeabi_dsub+0x32e>
 80021a4:	08c0      	lsrs	r0, r0, #3
 80021a6:	077b      	lsls	r3, r7, #29
 80021a8:	4303      	orrs	r3, r0
 80021aa:	08fa      	lsrs	r2, r7, #3
 80021ac:	e65e      	b.n	8001e6c <__aeabi_dsub+0x328>
 80021ae:	003a      	movs	r2, r7
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	4302      	orrs	r2, r0
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x674>
 80021b6:	e682      	b.n	8001ebe <__aeabi_dsub+0x37a>
 80021b8:	464a      	mov	r2, r9
 80021ba:	0752      	lsls	r2, r2, #29
 80021bc:	2480      	movs	r4, #128	; 0x80
 80021be:	4313      	orrs	r3, r2
 80021c0:	464a      	mov	r2, r9
 80021c2:	0324      	lsls	r4, r4, #12
 80021c4:	08d2      	lsrs	r2, r2, #3
 80021c6:	4222      	tst	r2, r4
 80021c8:	d007      	beq.n	80021da <__aeabi_dsub+0x696>
 80021ca:	08fe      	lsrs	r6, r7, #3
 80021cc:	4226      	tst	r6, r4
 80021ce:	d104      	bne.n	80021da <__aeabi_dsub+0x696>
 80021d0:	465d      	mov	r5, fp
 80021d2:	0032      	movs	r2, r6
 80021d4:	08c3      	lsrs	r3, r0, #3
 80021d6:	077f      	lsls	r7, r7, #29
 80021d8:	433b      	orrs	r3, r7
 80021da:	0f59      	lsrs	r1, r3, #29
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	08db      	lsrs	r3, r3, #3
 80021e0:	0749      	lsls	r1, r1, #29
 80021e2:	430b      	orrs	r3, r1
 80021e4:	e670      	b.n	8001ec8 <__aeabi_dsub+0x384>
 80021e6:	08c0      	lsrs	r0, r0, #3
 80021e8:	077b      	lsls	r3, r7, #29
 80021ea:	4303      	orrs	r3, r0
 80021ec:	08fa      	lsrs	r2, r7, #3
 80021ee:	e640      	b.n	8001e72 <__aeabi_dsub+0x32e>
 80021f0:	464c      	mov	r4, r9
 80021f2:	3920      	subs	r1, #32
 80021f4:	40cc      	lsrs	r4, r1
 80021f6:	4661      	mov	r1, ip
 80021f8:	2920      	cmp	r1, #32
 80021fa:	d006      	beq.n	800220a <__aeabi_dsub+0x6c6>
 80021fc:	4666      	mov	r6, ip
 80021fe:	2140      	movs	r1, #64	; 0x40
 8002200:	1b89      	subs	r1, r1, r6
 8002202:	464e      	mov	r6, r9
 8002204:	408e      	lsls	r6, r1
 8002206:	4333      	orrs	r3, r6
 8002208:	4698      	mov	r8, r3
 800220a:	4643      	mov	r3, r8
 800220c:	1e59      	subs	r1, r3, #1
 800220e:	418b      	sbcs	r3, r1
 8002210:	431c      	orrs	r4, r3
 8002212:	e5d8      	b.n	8001dc6 <__aeabi_dsub+0x282>
 8002214:	181c      	adds	r4, r3, r0
 8002216:	4284      	cmp	r4, r0
 8002218:	4180      	sbcs	r0, r0
 800221a:	444f      	add	r7, r9
 800221c:	46ba      	mov	sl, r7
 800221e:	4240      	negs	r0, r0
 8002220:	4482      	add	sl, r0
 8002222:	e6d9      	b.n	8001fd8 <__aeabi_dsub+0x494>
 8002224:	4653      	mov	r3, sl
 8002226:	4323      	orrs	r3, r4
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x6e8>
 800222a:	e6cb      	b.n	8001fc4 <__aeabi_dsub+0x480>
 800222c:	e614      	b.n	8001e58 <__aeabi_dsub+0x314>
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	000007ff 	.word	0x000007ff
 8002234:	ff7fffff 	.word	0xff7fffff
 8002238:	000007fe 	.word	0x000007fe
 800223c:	2300      	movs	r3, #0
 800223e:	4a01      	ldr	r2, [pc, #4]	; (8002244 <__aeabi_dsub+0x700>)
 8002240:	001c      	movs	r4, r3
 8002242:	e529      	b.n	8001c98 <__aeabi_dsub+0x154>
 8002244:	000007ff 	.word	0x000007ff

08002248 <__aeabi_dcmpun>:
 8002248:	b570      	push	{r4, r5, r6, lr}
 800224a:	0005      	movs	r5, r0
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <__aeabi_dcmpun+0x38>)
 800224e:	031c      	lsls	r4, r3, #12
 8002250:	0016      	movs	r6, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	030a      	lsls	r2, r1, #12
 8002256:	0049      	lsls	r1, r1, #1
 8002258:	0b12      	lsrs	r2, r2, #12
 800225a:	0d49      	lsrs	r1, r1, #21
 800225c:	0b24      	lsrs	r4, r4, #12
 800225e:	0d5b      	lsrs	r3, r3, #21
 8002260:	4281      	cmp	r1, r0
 8002262:	d008      	beq.n	8002276 <__aeabi_dcmpun+0x2e>
 8002264:	4a06      	ldr	r2, [pc, #24]	; (8002280 <__aeabi_dcmpun+0x38>)
 8002266:	2000      	movs	r0, #0
 8002268:	4293      	cmp	r3, r2
 800226a:	d103      	bne.n	8002274 <__aeabi_dcmpun+0x2c>
 800226c:	0020      	movs	r0, r4
 800226e:	4330      	orrs	r0, r6
 8002270:	1e43      	subs	r3, r0, #1
 8002272:	4198      	sbcs	r0, r3
 8002274:	bd70      	pop	{r4, r5, r6, pc}
 8002276:	2001      	movs	r0, #1
 8002278:	432a      	orrs	r2, r5
 800227a:	d1fb      	bne.n	8002274 <__aeabi_dcmpun+0x2c>
 800227c:	e7f2      	b.n	8002264 <__aeabi_dcmpun+0x1c>
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	000007ff 	.word	0x000007ff

08002284 <__aeabi_i2d>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	2800      	cmp	r0, #0
 8002288:	d016      	beq.n	80022b8 <__aeabi_i2d+0x34>
 800228a:	17c3      	asrs	r3, r0, #31
 800228c:	18c5      	adds	r5, r0, r3
 800228e:	405d      	eors	r5, r3
 8002290:	0fc4      	lsrs	r4, r0, #31
 8002292:	0028      	movs	r0, r5
 8002294:	f000 f8d2 	bl	800243c <__clzsi2>
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <__aeabi_i2d+0x5c>)
 800229a:	1a1b      	subs	r3, r3, r0
 800229c:	280a      	cmp	r0, #10
 800229e:	dc16      	bgt.n	80022ce <__aeabi_i2d+0x4a>
 80022a0:	0002      	movs	r2, r0
 80022a2:	002e      	movs	r6, r5
 80022a4:	3215      	adds	r2, #21
 80022a6:	4096      	lsls	r6, r2
 80022a8:	220b      	movs	r2, #11
 80022aa:	1a12      	subs	r2, r2, r0
 80022ac:	40d5      	lsrs	r5, r2
 80022ae:	055b      	lsls	r3, r3, #21
 80022b0:	032d      	lsls	r5, r5, #12
 80022b2:	0b2d      	lsrs	r5, r5, #12
 80022b4:	0d5b      	lsrs	r3, r3, #21
 80022b6:	e003      	b.n	80022c0 <__aeabi_i2d+0x3c>
 80022b8:	2400      	movs	r4, #0
 80022ba:	2300      	movs	r3, #0
 80022bc:	2500      	movs	r5, #0
 80022be:	2600      	movs	r6, #0
 80022c0:	051b      	lsls	r3, r3, #20
 80022c2:	432b      	orrs	r3, r5
 80022c4:	07e4      	lsls	r4, r4, #31
 80022c6:	4323      	orrs	r3, r4
 80022c8:	0030      	movs	r0, r6
 80022ca:	0019      	movs	r1, r3
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
 80022ce:	380b      	subs	r0, #11
 80022d0:	4085      	lsls	r5, r0
 80022d2:	055b      	lsls	r3, r3, #21
 80022d4:	032d      	lsls	r5, r5, #12
 80022d6:	2600      	movs	r6, #0
 80022d8:	0b2d      	lsrs	r5, r5, #12
 80022da:	0d5b      	lsrs	r3, r3, #21
 80022dc:	e7f0      	b.n	80022c0 <__aeabi_i2d+0x3c>
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	0000041e 	.word	0x0000041e

080022e4 <__aeabi_ui2d>:
 80022e4:	b510      	push	{r4, lr}
 80022e6:	1e04      	subs	r4, r0, #0
 80022e8:	d010      	beq.n	800230c <__aeabi_ui2d+0x28>
 80022ea:	f000 f8a7 	bl	800243c <__clzsi2>
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <__aeabi_ui2d+0x48>)
 80022f0:	1a1b      	subs	r3, r3, r0
 80022f2:	280a      	cmp	r0, #10
 80022f4:	dc11      	bgt.n	800231a <__aeabi_ui2d+0x36>
 80022f6:	220b      	movs	r2, #11
 80022f8:	0021      	movs	r1, r4
 80022fa:	1a12      	subs	r2, r2, r0
 80022fc:	40d1      	lsrs	r1, r2
 80022fe:	3015      	adds	r0, #21
 8002300:	030a      	lsls	r2, r1, #12
 8002302:	055b      	lsls	r3, r3, #21
 8002304:	4084      	lsls	r4, r0
 8002306:	0b12      	lsrs	r2, r2, #12
 8002308:	0d5b      	lsrs	r3, r3, #21
 800230a:	e001      	b.n	8002310 <__aeabi_ui2d+0x2c>
 800230c:	2300      	movs	r3, #0
 800230e:	2200      	movs	r2, #0
 8002310:	051b      	lsls	r3, r3, #20
 8002312:	4313      	orrs	r3, r2
 8002314:	0020      	movs	r0, r4
 8002316:	0019      	movs	r1, r3
 8002318:	bd10      	pop	{r4, pc}
 800231a:	0022      	movs	r2, r4
 800231c:	380b      	subs	r0, #11
 800231e:	4082      	lsls	r2, r0
 8002320:	055b      	lsls	r3, r3, #21
 8002322:	0312      	lsls	r2, r2, #12
 8002324:	2400      	movs	r4, #0
 8002326:	0b12      	lsrs	r2, r2, #12
 8002328:	0d5b      	lsrs	r3, r3, #21
 800232a:	e7f1      	b.n	8002310 <__aeabi_ui2d+0x2c>
 800232c:	0000041e 	.word	0x0000041e

08002330 <__aeabi_d2f>:
 8002330:	0002      	movs	r2, r0
 8002332:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002334:	004b      	lsls	r3, r1, #1
 8002336:	030d      	lsls	r5, r1, #12
 8002338:	0f40      	lsrs	r0, r0, #29
 800233a:	0d5b      	lsrs	r3, r3, #21
 800233c:	0fcc      	lsrs	r4, r1, #31
 800233e:	0a6d      	lsrs	r5, r5, #9
 8002340:	493a      	ldr	r1, [pc, #232]	; (800242c <__aeabi_d2f+0xfc>)
 8002342:	4305      	orrs	r5, r0
 8002344:	1c58      	adds	r0, r3, #1
 8002346:	00d7      	lsls	r7, r2, #3
 8002348:	4208      	tst	r0, r1
 800234a:	d00a      	beq.n	8002362 <__aeabi_d2f+0x32>
 800234c:	4938      	ldr	r1, [pc, #224]	; (8002430 <__aeabi_d2f+0x100>)
 800234e:	1859      	adds	r1, r3, r1
 8002350:	29fe      	cmp	r1, #254	; 0xfe
 8002352:	dd16      	ble.n	8002382 <__aeabi_d2f+0x52>
 8002354:	20ff      	movs	r0, #255	; 0xff
 8002356:	2200      	movs	r2, #0
 8002358:	05c0      	lsls	r0, r0, #23
 800235a:	4310      	orrs	r0, r2
 800235c:	07e4      	lsls	r4, r4, #31
 800235e:	4320      	orrs	r0, r4
 8002360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <__aeabi_d2f+0x44>
 8002366:	433d      	orrs	r5, r7
 8002368:	d026      	beq.n	80023b8 <__aeabi_d2f+0x88>
 800236a:	2205      	movs	r2, #5
 800236c:	0192      	lsls	r2, r2, #6
 800236e:	0a52      	lsrs	r2, r2, #9
 8002370:	b2d8      	uxtb	r0, r3
 8002372:	e7f1      	b.n	8002358 <__aeabi_d2f+0x28>
 8002374:	432f      	orrs	r7, r5
 8002376:	d0ed      	beq.n	8002354 <__aeabi_d2f+0x24>
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	03d2      	lsls	r2, r2, #15
 800237c:	20ff      	movs	r0, #255	; 0xff
 800237e:	432a      	orrs	r2, r5
 8002380:	e7ea      	b.n	8002358 <__aeabi_d2f+0x28>
 8002382:	2900      	cmp	r1, #0
 8002384:	dd1b      	ble.n	80023be <__aeabi_d2f+0x8e>
 8002386:	0192      	lsls	r2, r2, #6
 8002388:	1e50      	subs	r0, r2, #1
 800238a:	4182      	sbcs	r2, r0
 800238c:	00ed      	lsls	r5, r5, #3
 800238e:	0f7f      	lsrs	r7, r7, #29
 8002390:	432a      	orrs	r2, r5
 8002392:	433a      	orrs	r2, r7
 8002394:	0753      	lsls	r3, r2, #29
 8002396:	d047      	beq.n	8002428 <__aeabi_d2f+0xf8>
 8002398:	230f      	movs	r3, #15
 800239a:	4013      	ands	r3, r2
 800239c:	2b04      	cmp	r3, #4
 800239e:	d000      	beq.n	80023a2 <__aeabi_d2f+0x72>
 80023a0:	3204      	adds	r2, #4
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	04db      	lsls	r3, r3, #19
 80023a6:	4013      	ands	r3, r2
 80023a8:	d03e      	beq.n	8002428 <__aeabi_d2f+0xf8>
 80023aa:	1c48      	adds	r0, r1, #1
 80023ac:	29fe      	cmp	r1, #254	; 0xfe
 80023ae:	d0d1      	beq.n	8002354 <__aeabi_d2f+0x24>
 80023b0:	0192      	lsls	r2, r2, #6
 80023b2:	0a52      	lsrs	r2, r2, #9
 80023b4:	b2c0      	uxtb	r0, r0
 80023b6:	e7cf      	b.n	8002358 <__aeabi_d2f+0x28>
 80023b8:	2000      	movs	r0, #0
 80023ba:	2200      	movs	r2, #0
 80023bc:	e7cc      	b.n	8002358 <__aeabi_d2f+0x28>
 80023be:	000a      	movs	r2, r1
 80023c0:	3217      	adds	r2, #23
 80023c2:	db2f      	blt.n	8002424 <__aeabi_d2f+0xf4>
 80023c4:	2680      	movs	r6, #128	; 0x80
 80023c6:	0436      	lsls	r6, r6, #16
 80023c8:	432e      	orrs	r6, r5
 80023ca:	251e      	movs	r5, #30
 80023cc:	1a6d      	subs	r5, r5, r1
 80023ce:	2d1f      	cmp	r5, #31
 80023d0:	dd11      	ble.n	80023f6 <__aeabi_d2f+0xc6>
 80023d2:	2202      	movs	r2, #2
 80023d4:	4252      	negs	r2, r2
 80023d6:	1a52      	subs	r2, r2, r1
 80023d8:	0031      	movs	r1, r6
 80023da:	40d1      	lsrs	r1, r2
 80023dc:	2d20      	cmp	r5, #32
 80023de:	d004      	beq.n	80023ea <__aeabi_d2f+0xba>
 80023e0:	4a14      	ldr	r2, [pc, #80]	; (8002434 <__aeabi_d2f+0x104>)
 80023e2:	4694      	mov	ip, r2
 80023e4:	4463      	add	r3, ip
 80023e6:	409e      	lsls	r6, r3
 80023e8:	4337      	orrs	r7, r6
 80023ea:	003a      	movs	r2, r7
 80023ec:	1e53      	subs	r3, r2, #1
 80023ee:	419a      	sbcs	r2, r3
 80023f0:	430a      	orrs	r2, r1
 80023f2:	2100      	movs	r1, #0
 80023f4:	e7ce      	b.n	8002394 <__aeabi_d2f+0x64>
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <__aeabi_d2f+0x108>)
 80023f8:	0038      	movs	r0, r7
 80023fa:	4694      	mov	ip, r2
 80023fc:	4463      	add	r3, ip
 80023fe:	4098      	lsls	r0, r3
 8002400:	003a      	movs	r2, r7
 8002402:	1e41      	subs	r1, r0, #1
 8002404:	4188      	sbcs	r0, r1
 8002406:	409e      	lsls	r6, r3
 8002408:	40ea      	lsrs	r2, r5
 800240a:	4330      	orrs	r0, r6
 800240c:	4302      	orrs	r2, r0
 800240e:	2100      	movs	r1, #0
 8002410:	0753      	lsls	r3, r2, #29
 8002412:	d1c1      	bne.n	8002398 <__aeabi_d2f+0x68>
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	0013      	movs	r3, r2
 8002418:	04c9      	lsls	r1, r1, #19
 800241a:	2001      	movs	r0, #1
 800241c:	400b      	ands	r3, r1
 800241e:	420a      	tst	r2, r1
 8002420:	d1c6      	bne.n	80023b0 <__aeabi_d2f+0x80>
 8002422:	e7a3      	b.n	800236c <__aeabi_d2f+0x3c>
 8002424:	2300      	movs	r3, #0
 8002426:	e7a0      	b.n	800236a <__aeabi_d2f+0x3a>
 8002428:	000b      	movs	r3, r1
 800242a:	e79f      	b.n	800236c <__aeabi_d2f+0x3c>
 800242c:	000007fe 	.word	0x000007fe
 8002430:	fffffc80 	.word	0xfffffc80
 8002434:	fffffca2 	.word	0xfffffca2
 8002438:	fffffc82 	.word	0xfffffc82

0800243c <__clzsi2>:
 800243c:	211c      	movs	r1, #28
 800243e:	2301      	movs	r3, #1
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	4298      	cmp	r0, r3
 8002444:	d301      	bcc.n	800244a <__clzsi2+0xe>
 8002446:	0c00      	lsrs	r0, r0, #16
 8002448:	3910      	subs	r1, #16
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	4298      	cmp	r0, r3
 800244e:	d301      	bcc.n	8002454 <__clzsi2+0x18>
 8002450:	0a00      	lsrs	r0, r0, #8
 8002452:	3908      	subs	r1, #8
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	4298      	cmp	r0, r3
 8002458:	d301      	bcc.n	800245e <__clzsi2+0x22>
 800245a:	0900      	lsrs	r0, r0, #4
 800245c:	3904      	subs	r1, #4
 800245e:	a202      	add	r2, pc, #8	; (adr r2, 8002468 <__clzsi2+0x2c>)
 8002460:	5c10      	ldrb	r0, [r2, r0]
 8002462:	1840      	adds	r0, r0, r1
 8002464:	4770      	bx	lr
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	02020304 	.word	0x02020304
 800246c:	01010101 	.word	0x01010101
	...

08002478 <__clzdi2>:
 8002478:	b510      	push	{r4, lr}
 800247a:	2900      	cmp	r1, #0
 800247c:	d103      	bne.n	8002486 <__clzdi2+0xe>
 800247e:	f7ff ffdd 	bl	800243c <__clzsi2>
 8002482:	3020      	adds	r0, #32
 8002484:	e002      	b.n	800248c <__clzdi2+0x14>
 8002486:	0008      	movs	r0, r1
 8002488:	f7ff ffd8 	bl	800243c <__clzsi2>
 800248c:	bd10      	pop	{r4, pc}
 800248e:	46c0      	nop			; (mov r8, r8)

08002490 <decode_NMEA_message>:
#include "NMEA.h"
#include <stdio.h>
#include <math.h>

bool decode_NMEA_message(char input_data[550], GPGGA_struct *gpgga)
{
 8002490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002492:	b08d      	sub	sp, #52	; 0x34
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
	int idx = 0, i = 0, integral_part, fractional_part, data, valid_id ;
 800249a:	2300      	movs	r3, #0
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	2300      	movs	r3, #0
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28

	char buffer[12];
	memset(buffer,'\0',12);
 80024a2:	2308      	movs	r3, #8
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	220c      	movs	r2, #12
 80024a8:	2100      	movs	r1, #0
 80024aa:	0018      	movs	r0, r3
 80024ac:	f003 fa70 	bl	8005990 <memset>

	/******************* TIME DECODING *******************/

	while(input_data[idx] != 'G' || input_data[idx + 1] != 'P' || input_data[idx + 2] != 'G' || input_data[idx + 3] != 'G' || input_data[idx + 4] != 'A')
 80024b0:	e009      	b.n	80024c6 <decode_NMEA_message+0x36>
	{
		idx++;
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	3301      	adds	r3, #1
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(idx > 477)
 80024b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ba:	23ef      	movs	r3, #239	; 0xef
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	429a      	cmp	r2, r3
 80024c0:	db01      	blt.n	80024c6 <decode_NMEA_message+0x36>
			return FALSE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e237      	b.n	8002936 <decode_NMEA_message+0x4a6>
	while(input_data[idx] != 'G' || input_data[idx + 1] != 'P' || input_data[idx + 2] != 'G' || input_data[idx + 3] != 'G' || input_data[idx + 4] != 'A')
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	18d3      	adds	r3, r2, r3
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b47      	cmp	r3, #71	; 0x47
 80024d0:	d1ef      	bne.n	80024b2 <decode_NMEA_message+0x22>
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	3301      	adds	r3, #1
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	18d3      	adds	r3, r2, r3
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b50      	cmp	r3, #80	; 0x50
 80024de:	d1e8      	bne.n	80024b2 <decode_NMEA_message+0x22>
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	3302      	adds	r3, #2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	18d3      	adds	r3, r2, r3
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b47      	cmp	r3, #71	; 0x47
 80024ec:	d1e1      	bne.n	80024b2 <decode_NMEA_message+0x22>
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	3303      	adds	r3, #3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	18d3      	adds	r3, r2, r3
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b47      	cmp	r3, #71	; 0x47
 80024fa:	d1da      	bne.n	80024b2 <decode_NMEA_message+0x22>
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	3304      	adds	r3, #4
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	18d3      	adds	r3, r2, r3
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b41      	cmp	r3, #65	; 0x41
 8002508:	d1d3      	bne.n	80024b2 <decode_NMEA_message+0x22>
	}

	idx += 6; // We also take in consideration the comma
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	3306      	adds	r3, #6
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c

	valid_id = idx;
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	627b      	str	r3, [r7, #36]	; 0x24

	for(int i = 0; i <= 5; i++)
 8002514:	2300      	movs	r3, #0
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	e00e      	b.n	8002538 <decode_NMEA_message+0xa8>
	{
		while(input_data[valid_id] != ',')
			{
				valid_id++;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	3301      	adds	r3, #1
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
		while(input_data[valid_id] != ',')
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	18d3      	adds	r3, r2, r3
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b2c      	cmp	r3, #44	; 0x2c
 800252a:	d1f6      	bne.n	800251a <decode_NMEA_message+0x8a>
			}
		valid_id++;
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	3301      	adds	r3, #1
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i <= 5; i++)
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	3301      	adds	r3, #1
 8002536:	623b      	str	r3, [r7, #32]
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	2b05      	cmp	r3, #5
 800253c:	ddf0      	ble.n	8002520 <decode_NMEA_message+0x90>
	}

 	if(input_data[valid_id] < 49)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	18d3      	adds	r3, r2, r3
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b30      	cmp	r3, #48	; 0x30
 8002548:	d811      	bhi.n	800256e <decode_NMEA_message+0xde>
	{
		return FALSE;
 800254a:	2300      	movs	r3, #0
 800254c:	e1f3      	b.n	8002936 <decode_NMEA_message+0x4a6>
	}


	while(input_data[idx] != ',')
	{
		buffer[i] = input_data[idx];
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	18d3      	adds	r3, r2, r3
 8002554:	7819      	ldrb	r1, [r3, #0]
 8002556:	2308      	movs	r3, #8
 8002558:	18fa      	adds	r2, r7, r3
 800255a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255c:	18d3      	adds	r3, r2, r3
 800255e:	1c0a      	adds	r2, r1, #0
 8002560:	701a      	strb	r2, [r3, #0]
		idx++;
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	3301      	adds	r3, #1
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	3301      	adds	r3, #1
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != ',')
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	18d3      	adds	r3, r2, r3
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b2c      	cmp	r3, #44	; 0x2c
 8002578:	d1e9      	bne.n	800254e <decode_NMEA_message+0xbe>
	}

	sscanf(buffer, "%d", &data);
 800257a:	2314      	movs	r3, #20
 800257c:	18fa      	adds	r2, r7, r3
 800257e:	49cd      	ldr	r1, [pc, #820]	; (80028b4 <decode_NMEA_message+0x424>)
 8002580:	2408      	movs	r4, #8
 8002582:	193b      	adds	r3, r7, r4
 8002584:	0018      	movs	r0, r3
 8002586:	f003 f9d9 	bl	800593c <siscanf>

	gpgga->time.hr = data / 10000;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	49ca      	ldr	r1, [pc, #808]	; (80028b8 <decode_NMEA_message+0x428>)
 800258e:	0018      	movs	r0, r3
 8002590:	f7fd fe54 	bl	800023c <__divsi3>
 8002594:	0003      	movs	r3, r0
 8002596:	b2da      	uxtb	r2, r3
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	701a      	strb	r2, [r3, #0]
	gpgga->time.min = ((data / 100) % 100);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2164      	movs	r1, #100	; 0x64
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fd fe4b 	bl	800023c <__divsi3>
 80025a6:	0003      	movs	r3, r0
 80025a8:	2164      	movs	r1, #100	; 0x64
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7fd ff2c 	bl	8000408 <__aeabi_idivmod>
 80025b0:	000b      	movs	r3, r1
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	705a      	strb	r2, [r3, #1]
	gpgga->time.sec = data % 100;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2164      	movs	r1, #100	; 0x64
 80025bc:	0018      	movs	r0, r3
 80025be:	f7fd ff23 	bl	8000408 <__aeabi_idivmod>
 80025c2:	000b      	movs	r3, r1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	709a      	strb	r2, [r3, #2]

	memset(buffer,'\0',12);
 80025ca:	193b      	adds	r3, r7, r4
 80025cc:	220c      	movs	r2, #12
 80025ce:	2100      	movs	r1, #0
 80025d0:	0018      	movs	r0, r3
 80025d2:	f003 f9dd 	bl	8005990 <memset>
 	i = 0; //reset the length counter
 80025d6:	2300      	movs	r3, #0
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
	idx++; //reach the first character of latitude value
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	3301      	adds	r3, #1
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c

	/******************* LATITUDE DECODING *******************/

	while(input_data[idx] != '.')
 80025e0:	e00f      	b.n	8002602 <decode_NMEA_message+0x172>
	{
		buffer[i] = input_data[idx];
 80025e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	18d3      	adds	r3, r2, r3
 80025e8:	7819      	ldrb	r1, [r3, #0]
 80025ea:	2308      	movs	r3, #8
 80025ec:	18fa      	adds	r2, r7, r3
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	18d3      	adds	r3, r2, r3
 80025f2:	1c0a      	adds	r2, r1, #0
 80025f4:	701a      	strb	r2, [r3, #0]
		idx++;
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	3301      	adds	r3, #1
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 80025fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fe:	3301      	adds	r3, #1
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != '.')
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	18d3      	adds	r3, r2, r3
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b2e      	cmp	r3, #46	; 0x2e
 800260c:	d1e9      	bne.n	80025e2 <decode_NMEA_message+0x152>
	}

	sscanf(buffer, "%d", &integral_part);
 800260e:	231c      	movs	r3, #28
 8002610:	18fa      	adds	r2, r7, r3
 8002612:	49a8      	ldr	r1, [pc, #672]	; (80028b4 <decode_NMEA_message+0x424>)
 8002614:	2408      	movs	r4, #8
 8002616:	193b      	adds	r3, r7, r4
 8002618:	0018      	movs	r0, r3
 800261a:	f003 f98f 	bl	800593c <siscanf>
	i = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
	idx++; // pass the point
 8002622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002624:	3301      	adds	r3, #1
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(buffer,'\0',12);
 8002628:	193b      	adds	r3, r7, r4
 800262a:	220c      	movs	r2, #12
 800262c:	2100      	movs	r1, #0
 800262e:	0018      	movs	r0, r3
 8002630:	f003 f9ae 	bl	8005990 <memset>

	while(input_data[idx] != ',')
 8002634:	e00f      	b.n	8002656 <decode_NMEA_message+0x1c6>
	{
		buffer[i] = input_data[idx];
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	18d3      	adds	r3, r2, r3
 800263c:	7819      	ldrb	r1, [r3, #0]
 800263e:	2308      	movs	r3, #8
 8002640:	18fa      	adds	r2, r7, r3
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	18d3      	adds	r3, r2, r3
 8002646:	1c0a      	adds	r2, r1, #0
 8002648:	701a      	strb	r2, [r3, #0]
		idx++;
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	3301      	adds	r3, #1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	3301      	adds	r3, #1
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != ',')
 8002656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	18d3      	adds	r3, r2, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b2c      	cmp	r3, #44	; 0x2c
 8002660:	d1e9      	bne.n	8002636 <decode_NMEA_message+0x1a6>
	}

	sscanf(buffer, "%d", &fractional_part);
 8002662:	2318      	movs	r3, #24
 8002664:	18fa      	adds	r2, r7, r3
 8002666:	4993      	ldr	r1, [pc, #588]	; (80028b4 <decode_NMEA_message+0x424>)
 8002668:	2608      	movs	r6, #8
 800266a:	19bb      	adds	r3, r7, r6
 800266c:	0018      	movs	r0, r3
 800266e:	f003 f965 	bl	800593c <siscanf>


	gpgga->location.latitude = integral_part *pow(10, strlen(buffer)) + fractional_part;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff fe05 	bl	8002284 <__aeabi_i2d>
 800267a:	0004      	movs	r4, r0
 800267c:	000d      	movs	r5, r1
 800267e:	19bb      	adds	r3, r7, r6
 8002680:	0018      	movs	r0, r3
 8002682:	f7fd fd3f 	bl	8000104 <strlen>
 8002686:	0003      	movs	r3, r0
 8002688:	0018      	movs	r0, r3
 800268a:	f7ff fe2b 	bl	80022e4 <__aeabi_ui2d>
 800268e:	0002      	movs	r2, r0
 8002690:	000b      	movs	r3, r1
 8002692:	2000      	movs	r0, #0
 8002694:	4989      	ldr	r1, [pc, #548]	; (80028bc <decode_NMEA_message+0x42c>)
 8002696:	f004 fac1 	bl	8006c1c <pow>
 800269a:	0002      	movs	r2, r0
 800269c:	000b      	movs	r3, r1
 800269e:	0020      	movs	r0, r4
 80026a0:	0029      	movs	r1, r5
 80026a2:	f7fe ff8d 	bl	80015c0 <__aeabi_dmul>
 80026a6:	0002      	movs	r2, r0
 80026a8:	000b      	movs	r3, r1
 80026aa:	0014      	movs	r4, r2
 80026ac:	001d      	movs	r5, r3
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff fde7 	bl	8002284 <__aeabi_i2d>
 80026b6:	0002      	movs	r2, r0
 80026b8:	000b      	movs	r3, r1
 80026ba:	0020      	movs	r0, r4
 80026bc:	0029      	movs	r1, r5
 80026be:	f7fe f825 	bl	800070c <__aeabi_dadd>
 80026c2:	0002      	movs	r2, r0
 80026c4:	000b      	movs	r3, r1
 80026c6:	0010      	movs	r0, r2
 80026c8:	0019      	movs	r1, r3
 80026ca:	f7ff fe31 	bl	8002330 <__aeabi_d2f>
 80026ce:	1c02      	adds	r2, r0, #0
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	605a      	str	r2, [r3, #4]

	idx++;
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	3301      	adds	r3, #1
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c

	gpgga->location.NS = input_data[idx];
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	18d3      	adds	r3, r2, r3
 80026e0:	781a      	ldrb	r2, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	721a      	strb	r2, [r3, #8]

	idx += 2; //reach the longitude
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	3302      	adds	r3, #2
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c

	/******************* LONGITUDE DECODING *******************/
	memset(buffer,'\0',12);
 80026ec:	19bb      	adds	r3, r7, r6
 80026ee:	220c      	movs	r2, #12
 80026f0:	2100      	movs	r1, #0
 80026f2:	0018      	movs	r0, r3
 80026f4:	f003 f94c 	bl	8005990 <memset>
	i = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28

	while(input_data[idx] != '.')
 80026fc:	e00f      	b.n	800271e <decode_NMEA_message+0x28e>
	{
		buffer[i] = input_data[idx];
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	18d3      	adds	r3, r2, r3
 8002704:	7819      	ldrb	r1, [r3, #0]
 8002706:	2308      	movs	r3, #8
 8002708:	18fa      	adds	r2, r7, r3
 800270a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270c:	18d3      	adds	r3, r2, r3
 800270e:	1c0a      	adds	r2, r1, #0
 8002710:	701a      	strb	r2, [r3, #0]
		idx++;
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	3301      	adds	r3, #1
 8002716:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 8002718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271a:	3301      	adds	r3, #1
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != '.')
 800271e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	18d3      	adds	r3, r2, r3
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b2e      	cmp	r3, #46	; 0x2e
 8002728:	d1e9      	bne.n	80026fe <decode_NMEA_message+0x26e>
	}

	i = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
	idx++; // pass the point
 800272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002730:	3301      	adds	r3, #1
 8002732:	62fb      	str	r3, [r7, #44]	; 0x2c

	sscanf(buffer, "%d", &integral_part);
 8002734:	231c      	movs	r3, #28
 8002736:	18fa      	adds	r2, r7, r3
 8002738:	495e      	ldr	r1, [pc, #376]	; (80028b4 <decode_NMEA_message+0x424>)
 800273a:	2408      	movs	r4, #8
 800273c:	193b      	adds	r3, r7, r4
 800273e:	0018      	movs	r0, r3
 8002740:	f003 f8fc 	bl	800593c <siscanf>
	memset(buffer, '\0', 12);
 8002744:	193b      	adds	r3, r7, r4
 8002746:	220c      	movs	r2, #12
 8002748:	2100      	movs	r1, #0
 800274a:	0018      	movs	r0, r3
 800274c:	f003 f920 	bl	8005990 <memset>

	while(input_data[idx] != ',')
 8002750:	e00f      	b.n	8002772 <decode_NMEA_message+0x2e2>
	{
		buffer[i] = input_data[idx];
 8002752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	18d3      	adds	r3, r2, r3
 8002758:	7819      	ldrb	r1, [r3, #0]
 800275a:	2308      	movs	r3, #8
 800275c:	18fa      	adds	r2, r7, r3
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	18d3      	adds	r3, r2, r3
 8002762:	1c0a      	adds	r2, r1, #0
 8002764:	701a      	strb	r2, [r3, #0]
		idx++;
 8002766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002768:	3301      	adds	r3, #1
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	3301      	adds	r3, #1
 8002770:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != ',')
 8002772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	18d3      	adds	r3, r2, r3
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b2c      	cmp	r3, #44	; 0x2c
 800277c:	d1e9      	bne.n	8002752 <decode_NMEA_message+0x2c2>
	}

	sscanf(buffer, "%d", &fractional_part);
 800277e:	2318      	movs	r3, #24
 8002780:	18fa      	adds	r2, r7, r3
 8002782:	494c      	ldr	r1, [pc, #304]	; (80028b4 <decode_NMEA_message+0x424>)
 8002784:	2608      	movs	r6, #8
 8002786:	19bb      	adds	r3, r7, r6
 8002788:	0018      	movs	r0, r3
 800278a:	f003 f8d7 	bl	800593c <siscanf>


	gpgga->location.longitude = integral_part *pow(10, strlen(buffer)) + fractional_part;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	0018      	movs	r0, r3
 8002792:	f7ff fd77 	bl	8002284 <__aeabi_i2d>
 8002796:	0004      	movs	r4, r0
 8002798:	000d      	movs	r5, r1
 800279a:	19bb      	adds	r3, r7, r6
 800279c:	0018      	movs	r0, r3
 800279e:	f7fd fcb1 	bl	8000104 <strlen>
 80027a2:	0003      	movs	r3, r0
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fd9d 	bl	80022e4 <__aeabi_ui2d>
 80027aa:	0002      	movs	r2, r0
 80027ac:	000b      	movs	r3, r1
 80027ae:	2000      	movs	r0, #0
 80027b0:	4942      	ldr	r1, [pc, #264]	; (80028bc <decode_NMEA_message+0x42c>)
 80027b2:	f004 fa33 	bl	8006c1c <pow>
 80027b6:	0002      	movs	r2, r0
 80027b8:	000b      	movs	r3, r1
 80027ba:	0020      	movs	r0, r4
 80027bc:	0029      	movs	r1, r5
 80027be:	f7fe feff 	bl	80015c0 <__aeabi_dmul>
 80027c2:	0002      	movs	r2, r0
 80027c4:	000b      	movs	r3, r1
 80027c6:	0014      	movs	r4, r2
 80027c8:	001d      	movs	r5, r3
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7ff fd59 	bl	8002284 <__aeabi_i2d>
 80027d2:	0002      	movs	r2, r0
 80027d4:	000b      	movs	r3, r1
 80027d6:	0020      	movs	r0, r4
 80027d8:	0029      	movs	r1, r5
 80027da:	f7fd ff97 	bl	800070c <__aeabi_dadd>
 80027de:	0002      	movs	r2, r0
 80027e0:	000b      	movs	r3, r1
 80027e2:	0010      	movs	r0, r2
 80027e4:	0019      	movs	r1, r3
 80027e6:	f7ff fda3 	bl	8002330 <__aeabi_d2f>
 80027ea:	1c02      	adds	r2, r0, #0
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	60da      	str	r2, [r3, #12]

	idx++;
 80027f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f2:	3301      	adds	r3, #1
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c

	gpgga->location.EW = input_data[idx];
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	18d3      	adds	r3, r2, r3
 80027fc:	781a      	ldrb	r2, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	741a      	strb	r2, [r3, #16]

	idx += 2; //reach the fix quality
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	3302      	adds	r3, #2
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c

	memset(buffer,'\0',12);
 8002808:	19bb      	adds	r3, r7, r6
 800280a:	220c      	movs	r2, #12
 800280c:	2100      	movs	r1, #0
 800280e:	0018      	movs	r0, r3
 8002810:	f003 f8be 	bl	8005990 <memset>
	i = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28

	/******************* Fix Quality DECODING *******************/

	sscanf(input_data[idx], "%d", &gpgga->fix_quality );
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	18d3      	adds	r3, r2, r3
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	0018      	movs	r0, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	3314      	adds	r3, #20
 8002826:	001a      	movs	r2, r3
 8002828:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <decode_NMEA_message+0x424>)
 800282a:	0019      	movs	r1, r3
 800282c:	f003 f886 	bl	800593c <siscanf>

	if(gpgga->fix_quality < 1)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	7d1b      	ldrb	r3, [r3, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <decode_NMEA_message+0x3ac>
		return FALSE;
 8002838:	2300      	movs	r3, #0
 800283a:	e07c      	b.n	8002936 <decode_NMEA_message+0x4a6>

	idx += 2; //reach the number of satellites
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	3302      	adds	r3, #2
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c

	/******************* Number of satellites DECODING *******************/
	while(input_data[idx] != ',')
 8002842:	e00f      	b.n	8002864 <decode_NMEA_message+0x3d4>
	{
		buffer[i] = input_data[idx];
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	18d3      	adds	r3, r2, r3
 800284a:	7819      	ldrb	r1, [r3, #0]
 800284c:	2308      	movs	r3, #8
 800284e:	18fa      	adds	r2, r7, r3
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	18d3      	adds	r3, r2, r3
 8002854:	1c0a      	adds	r2, r1, #0
 8002856:	701a      	strb	r2, [r3, #0]
		idx++;
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	3301      	adds	r3, #1
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 800285e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002860:	3301      	adds	r3, #1
 8002862:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != ',')
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	18d3      	adds	r3, r2, r3
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b2c      	cmp	r3, #44	; 0x2c
 800286e:	d1e9      	bne.n	8002844 <decode_NMEA_message+0x3b4>
	}

	sscanf(buffer, "%d", &gpgga->nr_of_satellites );
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	3318      	adds	r3, #24
 8002874:	001a      	movs	r2, r3
 8002876:	490f      	ldr	r1, [pc, #60]	; (80028b4 <decode_NMEA_message+0x424>)
 8002878:	2408      	movs	r4, #8
 800287a:	193b      	adds	r3, r7, r4
 800287c:	0018      	movs	r0, r3
 800287e:	f003 f85d 	bl	800593c <siscanf>

	idx += 2;
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	3302      	adds	r3, #2
 8002886:	62fb      	str	r3, [r7, #44]	; 0x2c

	memset(buffer,'\0',12);
 8002888:	193b      	adds	r3, r7, r4
 800288a:	220c      	movs	r2, #12
 800288c:	2100      	movs	r1, #0
 800288e:	0018      	movs	r0, r3
 8002890:	f003 f87e 	bl	8005990 <memset>
	i = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28

	//get over next value, not needed
	while(input_data[idx] != ',')
 8002898:	e002      	b.n	80028a0 <decode_NMEA_message+0x410>
	{
		idx++;
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	3301      	adds	r3, #1
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(input_data[idx] != ',')
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	18d3      	adds	r3, r2, r3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b2c      	cmp	r3, #44	; 0x2c
 80028aa:	d1f6      	bne.n	800289a <decode_NMEA_message+0x40a>
	}
	idx++;
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	3301      	adds	r3, #1
 80028b0:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(input_data[idx] != '.')
 80028b2:	e015      	b.n	80028e0 <decode_NMEA_message+0x450>
 80028b4:	08007a50 	.word	0x08007a50
 80028b8:	00002710 	.word	0x00002710
 80028bc:	40240000 	.word	0x40240000
	{
		buffer[i] = input_data[idx];
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	7819      	ldrb	r1, [r3, #0]
 80028c8:	2308      	movs	r3, #8
 80028ca:	18fa      	adds	r2, r7, r3
 80028cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ce:	18d3      	adds	r3, r2, r3
 80028d0:	1c0a      	adds	r2, r1, #0
 80028d2:	701a      	strb	r2, [r3, #0]
		idx++;
 80028d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d6:	3301      	adds	r3, #1
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	3301      	adds	r3, #1
 80028de:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != '.')
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	18d3      	adds	r3, r2, r3
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b2e      	cmp	r3, #46	; 0x2e
 80028ea:	d1e9      	bne.n	80028c0 <decode_NMEA_message+0x430>
	}

	sscanf(buffer, "%d", &integral_part);
 80028ec:	231c      	movs	r3, #28
 80028ee:	18fa      	adds	r2, r7, r3
 80028f0:	4913      	ldr	r1, [pc, #76]	; (8002940 <decode_NMEA_message+0x4b0>)
 80028f2:	2308      	movs	r3, #8
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	0018      	movs	r0, r3
 80028f8:	f003 f820 	bl	800593c <siscanf>
	idx++;
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	3301      	adds	r3, #1
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c

	sscanf(input_data[idx], "%d", &fractional_part);
 8002902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	18d3      	adds	r3, r2, r3
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	0018      	movs	r0, r3
 800290c:	2318      	movs	r3, #24
 800290e:	18fa      	adds	r2, r7, r3
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <decode_NMEA_message+0x4b0>)
 8002912:	0019      	movs	r1, r3
 8002914:	f003 f812 	bl	800593c <siscanf>

	gpgga->altitude = integral_part * 10 + fractional_part;
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	0013      	movs	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	189b      	adds	r3, r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	001a      	movs	r2, r3
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	18d3      	adds	r3, r2, r3
 8002928:	0018      	movs	r0, r3
 800292a:	f7fd fe9d 	bl	8000668 <__aeabi_i2f>
 800292e:	1c02      	adds	r2, r0, #0
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	621a      	str	r2, [r3, #32]


	return TRUE;
 8002934:	2301      	movs	r3, #1


}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b00d      	add	sp, #52	; 0x34
 800293c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	08007a50 	.word	0x08007a50

08002944 <SysTick_Handler>:
#include "main.h"

extern UART_HandleTypeDef uart_gps;

void SysTick_Handler (void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002948:	f000 fb18 	bl	8002f7c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 800294c:	f000 fc10 	bl	8003170 <HAL_SYSTICK_IRQHandler>
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&uart_gps);
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <USART1_IRQHandler+0x14>)
 800295e:	0018      	movs	r0, r3
 8002960:	f001 f854 	bl	8003a0c <HAL_UART_IRQHandler>
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	20000160 	.word	0x20000160

08002970 <main>:
char loading_console_message[40] = "GPS MODULE IS SEARCHING SIGNAL \n\r";

GPGGA_struct gpgga;

int main()
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
 	HAL_Init();
 8002974:	f000 fa98 	bl	8002ea8 <HAL_Init>
	UART_Init();
 8002978:	f000 f818 	bl	80029ac <UART_Init>

	HAL_UART_Transmit(&console_output,(uint8_t*)&start_console_message, 27, HAL_UART_TIMEOUT_VALUE);
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <main+0x28>)
 800297e:	4907      	ldr	r1, [pc, #28]	; (800299c <main+0x2c>)
 8002980:	4807      	ldr	r0, [pc, #28]	; (80029a0 <main+0x30>)
 8002982:	221b      	movs	r2, #27
 8002984:	f000 ff38 	bl	80037f8 <HAL_UART_Transmit>


	while(1)
	{
		HAL_UART_Receive_IT(&uart_gps,(uint8_t*)&data, 700);
 8002988:	23af      	movs	r3, #175	; 0xaf
 800298a:	009a      	lsls	r2, r3, #2
 800298c:	4905      	ldr	r1, [pc, #20]	; (80029a4 <main+0x34>)
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <main+0x38>)
 8002990:	0018      	movs	r0, r3
 8002992:	f000 ffd5 	bl	8003940 <HAL_UART_Receive_IT>
 8002996:	e7f7      	b.n	8002988 <main+0x18>
 8002998:	01ffffff 	.word	0x01ffffff
 800299c:	20000020 	.word	0x20000020
 80029a0:	200000cc 	.word	0x200000cc
 80029a4:	200001f4 	.word	0x200001f4
 80029a8:	20000160 	.word	0x20000160

080029ac <UART_Init>:
	}

}

void UART_Init()
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
	console_output.Instance = USART2;
 80029b0:	4b1f      	ldr	r3, [pc, #124]	; (8002a30 <UART_Init+0x84>)
 80029b2:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <UART_Init+0x88>)
 80029b4:	601a      	str	r2, [r3, #0]
	console_output.Init.BaudRate = 115200;
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <UART_Init+0x84>)
 80029b8:	22e1      	movs	r2, #225	; 0xe1
 80029ba:	0252      	lsls	r2, r2, #9
 80029bc:	605a      	str	r2, [r3, #4]
	console_output.Init.Mode = UART_MODE_TX;
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <UART_Init+0x84>)
 80029c0:	2208      	movs	r2, #8
 80029c2:	615a      	str	r2, [r3, #20]
	console_output.Init.Parity = UART_PARITY_NONE;
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <UART_Init+0x84>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
	console_output.Init.StopBits = UART_STOPBITS_1;
 80029ca:	4b19      	ldr	r3, [pc, #100]	; (8002a30 <UART_Init+0x84>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
	console_output.Init.WordLength = UART_WORDLENGTH_8B;
 80029d0:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <UART_Init+0x84>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
	console_output.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d6:	4b16      	ldr	r3, [pc, #88]	; (8002a30 <UART_Init+0x84>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&console_output) != HAL_OK)
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <UART_Init+0x84>)
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 feb4 	bl	800374c <HAL_UART_Init>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d001      	beq.n	80029ec <UART_Init+0x40>
	{
		Error_handler();
 80029e8:	f000 f82a 	bl	8002a40 <Error_handler>
	}

	uart_gps.Instance = USART1;
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <UART_Init+0x8c>)
 80029ee:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <UART_Init+0x90>)
 80029f0:	601a      	str	r2, [r3, #0]
	uart_gps.Init.BaudRate = 9600;
 80029f2:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <UART_Init+0x8c>)
 80029f4:	2296      	movs	r2, #150	; 0x96
 80029f6:	0192      	lsls	r2, r2, #6
 80029f8:	605a      	str	r2, [r3, #4]
	uart_gps.Init.Mode = UART_MODE_TX_RX;
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <UART_Init+0x8c>)
 80029fc:	220c      	movs	r2, #12
 80029fe:	615a      	str	r2, [r3, #20]
	uart_gps.Init.Parity = UART_PARITY_NONE;
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <UART_Init+0x8c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
	uart_gps.Init.StopBits = UART_STOPBITS_1;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <UART_Init+0x8c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	60da      	str	r2, [r3, #12]
	uart_gps.Init.WordLength = UART_WORDLENGTH_8B;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <UART_Init+0x8c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
	uart_gps.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a12:	4b09      	ldr	r3, [pc, #36]	; (8002a38 <UART_Init+0x8c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&uart_gps) != HAL_OK)
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <UART_Init+0x8c>)
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f000 fe96 	bl	800374c <HAL_UART_Init>
 8002a20:	1e03      	subs	r3, r0, #0
 8002a22:	d001      	beq.n	8002a28 <UART_Init+0x7c>
	{
		Error_handler();
 8002a24:	f000 f80c 	bl	8002a40 <Error_handler>
	}
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	200000cc 	.word	0x200000cc
 8002a34:	40004400 	.word	0x40004400
 8002a38:	20000160 	.word	0x20000160
 8002a3c:	40013800 	.word	0x40013800

08002a40 <Error_handler>:

void Error_handler()
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
	while(1);
 8002a44:	e7fe      	b.n	8002a44 <Error_handler+0x4>
	...

08002a48 <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]


	if(decode_NMEA_message(data, &gpgga) != FALSE)
 8002a50:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <HAL_UART_RxCpltCallback+0x34>)
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_UART_RxCpltCallback+0x38>)
 8002a54:	0011      	movs	r1, r2
 8002a56:	0018      	movs	r0, r3
 8002a58:	f7ff fd1a 	bl	8002490 <decode_NMEA_message>
 8002a5c:	1e03      	subs	r3, r0, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_UART_RxCpltCallback+0x1e>
	{
		UART_GPS();
 8002a60:	f000 f816 	bl	8002a90 <UART_GPS>
	else{
		HAL_UART_Transmit(&console_output, (uint8_t*)&message_gps_not_connected, 30, HAL_UART_TIMEOUT_VALUE);
	}
		//	HAL_UART_Transmit(&console_output, (uint8_t*)&data, 700, HAL_UART_TIMEOUT_VALUE);

}
 8002a64:	e005      	b.n	8002a72 <HAL_UART_RxCpltCallback+0x2a>
		HAL_UART_Transmit(&console_output, (uint8_t*)&message_gps_not_connected, 30, HAL_UART_TIMEOUT_VALUE);
 8002a66:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_UART_RxCpltCallback+0x3c>)
 8002a68:	4907      	ldr	r1, [pc, #28]	; (8002a88 <HAL_UART_RxCpltCallback+0x40>)
 8002a6a:	4808      	ldr	r0, [pc, #32]	; (8002a8c <HAL_UART_RxCpltCallback+0x44>)
 8002a6c:	221e      	movs	r2, #30
 8002a6e:	f000 fec3 	bl	80037f8 <HAL_UART_Transmit>
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	2000041c 	.word	0x2000041c
 8002a80:	200001f4 	.word	0x200001f4
 8002a84:	01ffffff 	.word	0x01ffffff
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	200000cc 	.word	0x200000cc

08002a90 <UART_GPS>:

void UART_GPS()
{
 8002a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a92:	b09d      	sub	sp, #116	; 0x74
 8002a94:	af00      	add	r7, sp, #0
	char start_gps_message[13] = "GPS data: \n";
 8002a96:	2660      	movs	r6, #96	; 0x60
 8002a98:	19b9      	adds	r1, r7, r6
 8002a9a:	4a7d      	ldr	r2, [pc, #500]	; (8002c90 <UART_GPS+0x200>)
 8002a9c:	000b      	movs	r3, r1
 8002a9e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002aa0:	c331      	stmia	r3!, {r0, r4, r5}
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	730b      	strb	r3, [r1, #12]
	char time_message[6] = "Time:";
 8002aa6:	2358      	movs	r3, #88	; 0x58
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	4a7a      	ldr	r2, [pc, #488]	; (8002c94 <UART_GPS+0x204>)
 8002aac:	6811      	ldr	r1, [r2, #0]
 8002aae:	6019      	str	r1, [r3, #0]
 8002ab0:	8892      	ldrh	r2, [r2, #4]
 8002ab2:	809a      	strh	r2, [r3, #4]
	char latitude_message[12] = "\nLatitude:";
 8002ab4:	214c      	movs	r1, #76	; 0x4c
 8002ab6:	1879      	adds	r1, r7, r1
 8002ab8:	4a77      	ldr	r2, [pc, #476]	; (8002c98 <UART_GPS+0x208>)
 8002aba:	000b      	movs	r3, r1
 8002abc:	ca11      	ldmia	r2!, {r0, r4}
 8002abe:	c311      	stmia	r3!, {r0, r4}
 8002ac0:	8810      	ldrh	r0, [r2, #0]
 8002ac2:	8018      	strh	r0, [r3, #0]
 8002ac4:	7892      	ldrb	r2, [r2, #2]
 8002ac6:	709a      	strb	r2, [r3, #2]
 8002ac8:	230b      	movs	r3, #11
 8002aca:	2200      	movs	r2, #0
 8002acc:	54ca      	strb	r2, [r1, r3]
	char longitude_message[13] = "\nLongitude:";
 8002ace:	213c      	movs	r1, #60	; 0x3c
 8002ad0:	1879      	adds	r1, r7, r1
 8002ad2:	4a72      	ldr	r2, [pc, #456]	; (8002c9c <UART_GPS+0x20c>)
 8002ad4:	000b      	movs	r3, r1
 8002ad6:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002ad8:	c331      	stmia	r3!, {r0, r4, r5}
 8002ada:	2300      	movs	r3, #0
 8002adc:	730b      	strb	r3, [r1, #12]
	char nr_satttelites_message[24] = "\nNumber of satellites:";
 8002ade:	2124      	movs	r1, #36	; 0x24
 8002ae0:	1879      	adds	r1, r7, r1
 8002ae2:	4a6f      	ldr	r2, [pc, #444]	; (8002ca0 <UART_GPS+0x210>)
 8002ae4:	000b      	movs	r3, r1
 8002ae6:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002ae8:	c331      	stmia	r3!, {r0, r4, r5}
 8002aea:	ca11      	ldmia	r2!, {r0, r4}
 8002aec:	c311      	stmia	r3!, {r0, r4}
 8002aee:	8810      	ldrh	r0, [r2, #0]
 8002af0:	8018      	strh	r0, [r3, #0]
 8002af2:	7892      	ldrb	r2, [r2, #2]
 8002af4:	709a      	strb	r2, [r3, #2]
 8002af6:	2317      	movs	r3, #23
 8002af8:	2200      	movs	r2, #0
 8002afa:	54ca      	strb	r2, [r1, r3]
	char altitude[12] = "\nAltitude:";
 8002afc:	2118      	movs	r1, #24
 8002afe:	1879      	adds	r1, r7, r1
 8002b00:	4a68      	ldr	r2, [pc, #416]	; (8002ca4 <UART_GPS+0x214>)
 8002b02:	000b      	movs	r3, r1
 8002b04:	ca11      	ldmia	r2!, {r0, r4}
 8002b06:	c311      	stmia	r3!, {r0, r4}
 8002b08:	8810      	ldrh	r0, [r2, #0]
 8002b0a:	8018      	strh	r0, [r3, #0]
 8002b0c:	7892      	ldrb	r2, [r2, #2]
 8002b0e:	709a      	strb	r2, [r3, #2]
 8002b10:	230b      	movs	r3, #11
 8002b12:	2200      	movs	r2, #0
 8002b14:	54ca      	strb	r2, [r1, r3]

	char string[10], substring[10];
	memset(string,'\0',12);
 8002b16:	240c      	movs	r4, #12
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f002 ff36 	bl	8005990 <memset>
	memset(substring,'\0',12);
 8002b24:	003b      	movs	r3, r7
 8002b26:	220c      	movs	r2, #12
 8002b28:	2100      	movs	r1, #0
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f002 ff30 	bl	8005990 <memset>




	HAL_UART_Transmit(&console_output, start_gps_message, 12, HAL_UART_TIMEOUT_VALUE);
 8002b30:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <UART_GPS+0x218>)
 8002b32:	19b9      	adds	r1, r7, r6
 8002b34:	485d      	ldr	r0, [pc, #372]	; (8002cac <UART_GPS+0x21c>)
 8002b36:	220c      	movs	r2, #12
 8002b38:	f000 fe5e 	bl	80037f8 <HAL_UART_Transmit>

	HAL_UART_Transmit(&console_output, time_message, 6, HAL_UART_TIMEOUT_VALUE);
 8002b3c:	4b5a      	ldr	r3, [pc, #360]	; (8002ca8 <UART_GPS+0x218>)
 8002b3e:	2258      	movs	r2, #88	; 0x58
 8002b40:	18b9      	adds	r1, r7, r2
 8002b42:	485a      	ldr	r0, [pc, #360]	; (8002cac <UART_GPS+0x21c>)
 8002b44:	2206      	movs	r2, #6
 8002b46:	f000 fe57 	bl	80037f8 <HAL_UART_Transmit>

	sprintf(substring, "%d", gpgga.time.hr);
 8002b4a:	4b59      	ldr	r3, [pc, #356]	; (8002cb0 <UART_GPS+0x220>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	001a      	movs	r2, r3
 8002b50:	4958      	ldr	r1, [pc, #352]	; (8002cb4 <UART_GPS+0x224>)
 8002b52:	003b      	movs	r3, r7
 8002b54:	0018      	movs	r0, r3
 8002b56:	f002 fed1 	bl	80058fc <siprintf>
	if(gpgga.time.hr < 10)
 8002b5a:	4b55      	ldr	r3, [pc, #340]	; (8002cb0 <UART_GPS+0x220>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b09      	cmp	r3, #9
 8002b60:	d80e      	bhi.n	8002b80 <UART_GPS+0xf0>
	{
		strcat(string,"0");
 8002b62:	193b      	adds	r3, r7, r4
 8002b64:	0018      	movs	r0, r3
 8002b66:	f7fd facd 	bl	8000104 <strlen>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	189a      	adds	r2, r3, r2
 8002b72:	4b51      	ldr	r3, [pc, #324]	; (8002cb8 <UART_GPS+0x228>)
 8002b74:	0010      	movs	r0, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	2302      	movs	r3, #2
 8002b7a:	001a      	movs	r2, r3
 8002b7c:	f002 ff4a 	bl	8005a14 <memcpy>
	}

	strcat(string,substring);
 8002b80:	003a      	movs	r2, r7
 8002b82:	240c      	movs	r4, #12
 8002b84:	193b      	adds	r3, r7, r4
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f002 ff09 	bl	80059a0 <strcat>
	strcat(string,":");
 8002b8e:	193b      	adds	r3, r7, r4
 8002b90:	0018      	movs	r0, r3
 8002b92:	f7fd fab7 	bl	8000104 <strlen>
 8002b96:	0003      	movs	r3, r0
 8002b98:	001a      	movs	r2, r3
 8002b9a:	193b      	adds	r3, r7, r4
 8002b9c:	189a      	adds	r2, r3, r2
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <UART_GPS+0x22c>)
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	f002 ff34 	bl	8005a14 <memcpy>

	sprintf(substring, "%d", gpgga.time.min);
 8002bac:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <UART_GPS+0x220>)
 8002bae:	785b      	ldrb	r3, [r3, #1]
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	4940      	ldr	r1, [pc, #256]	; (8002cb4 <UART_GPS+0x224>)
 8002bb4:	003b      	movs	r3, r7
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f002 fea0 	bl	80058fc <siprintf>
	if(gpgga.time.min < 10)
 8002bbc:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <UART_GPS+0x220>)
 8002bbe:	785b      	ldrb	r3, [r3, #1]
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	d80e      	bhi.n	8002be2 <UART_GPS+0x152>
	{
		strcat(string,"0");
 8002bc4:	193b      	adds	r3, r7, r4
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7fd fa9c 	bl	8000104 <strlen>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	001a      	movs	r2, r3
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	189a      	adds	r2, r3, r2
 8002bd4:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <UART_GPS+0x228>)
 8002bd6:	0010      	movs	r0, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	2302      	movs	r3, #2
 8002bdc:	001a      	movs	r2, r3
 8002bde:	f002 ff19 	bl	8005a14 <memcpy>
	}

	strcat(string,substring);
 8002be2:	003a      	movs	r2, r7
 8002be4:	240c      	movs	r4, #12
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	0011      	movs	r1, r2
 8002bea:	0018      	movs	r0, r3
 8002bec:	f002 fed8 	bl	80059a0 <strcat>
	strcat(string,":");
 8002bf0:	193b      	adds	r3, r7, r4
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7fd fa86 	bl	8000104 <strlen>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	189a      	adds	r2, r3, r2
 8002c00:	4b2e      	ldr	r3, [pc, #184]	; (8002cbc <UART_GPS+0x22c>)
 8002c02:	0010      	movs	r0, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	2302      	movs	r3, #2
 8002c08:	001a      	movs	r2, r3
 8002c0a:	f002 ff03 	bl	8005a14 <memcpy>

	sprintf(substring, "%d", gpgga.time.sec);
 8002c0e:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <UART_GPS+0x220>)
 8002c10:	789b      	ldrb	r3, [r3, #2]
 8002c12:	001a      	movs	r2, r3
 8002c14:	4927      	ldr	r1, [pc, #156]	; (8002cb4 <UART_GPS+0x224>)
 8002c16:	003b      	movs	r3, r7
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f002 fe6f 	bl	80058fc <siprintf>
	if(gpgga.time.sec < 10)
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <UART_GPS+0x220>)
 8002c20:	789b      	ldrb	r3, [r3, #2]
 8002c22:	2b09      	cmp	r3, #9
 8002c24:	d80e      	bhi.n	8002c44 <UART_GPS+0x1b4>
	{
		strcat(string,"0");
 8002c26:	193b      	adds	r3, r7, r4
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7fd fa6b 	bl	8000104 <strlen>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	001a      	movs	r2, r3
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	189a      	adds	r2, r3, r2
 8002c36:	4b20      	ldr	r3, [pc, #128]	; (8002cb8 <UART_GPS+0x228>)
 8002c38:	0010      	movs	r0, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	001a      	movs	r2, r3
 8002c40:	f002 fee8 	bl	8005a14 <memcpy>
	}

	strcat(string,substring);
 8002c44:	003a      	movs	r2, r7
 8002c46:	240c      	movs	r4, #12
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f002 fea7 	bl	80059a0 <strcat>
	strcat(string,"\n");
 8002c52:	193b      	adds	r3, r7, r4
 8002c54:	0018      	movs	r0, r3
 8002c56:	f7fd fa55 	bl	8000104 <strlen>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	193b      	adds	r3, r7, r4
 8002c60:	189a      	adds	r2, r3, r2
 8002c62:	4b17      	ldr	r3, [pc, #92]	; (8002cc0 <UART_GPS+0x230>)
 8002c64:	0010      	movs	r0, r2
 8002c66:	0019      	movs	r1, r3
 8002c68:	2302      	movs	r3, #2
 8002c6a:	001a      	movs	r2, r3
 8002c6c:	f002 fed2 	bl	8005a14 <memcpy>

	HAL_UART_Transmit(&console_output, string, strlen(string), HAL_UART_TIMEOUT_VALUE);
 8002c70:	193b      	adds	r3, r7, r4
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7fd fa46 	bl	8000104 <strlen>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <UART_GPS+0x218>)
 8002c7e:	1939      	adds	r1, r7, r4
 8002c80:	480a      	ldr	r0, [pc, #40]	; (8002cac <UART_GPS+0x21c>)
 8002c82:	f000 fdb9 	bl	80037f8 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&console_output, latitude_message, 12, HAL_UART_TIMEOUT_VALUE);
	//HAL_UART_Transmit(&console_output, gpgga.location.latitude, 12, HAL_UART_TIMEOUT_VALUE);



}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b01d      	add	sp, #116	; 0x74
 8002c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	08007a64 	.word	0x08007a64
 8002c94:	08007a74 	.word	0x08007a74
 8002c98:	08007a7c 	.word	0x08007a7c
 8002c9c:	08007a88 	.word	0x08007a88
 8002ca0:	08007a98 	.word	0x08007a98
 8002ca4:	08007ab0 	.word	0x08007ab0
 8002ca8:	01ffffff 	.word	0x01ffffff
 8002cac:	200000cc 	.word	0x200000cc
 8002cb0:	2000041c 	.word	0x2000041c
 8002cb4:	08007a54 	.word	0x08007a54
 8002cb8:	08007a58 	.word	0x08007a58
 8002cbc:	08007a5c 	.word	0x08007a5c
 8002cc0:	08007a60 	.word	0x08007a60

08002cc4 <HAL_MspInit>:
 *      Author: lorin
 */
#include "main.h"

void HAL_MspInit(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor


	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_MspInit+0x18>)
 8002cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_MspInit+0x18>)
 8002cce:	21e0      	movs	r1, #224	; 0xe0
 8002cd0:	02c9      	lsls	r1, r1, #11
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b08d      	sub	sp, #52	; 0x34
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;

  /********************enable clocks********************/

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce8:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cec:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002cee:	2101      	movs	r1, #1
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf4:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d00:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d04:	4b33      	ldr	r3, [pc, #204]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002d06:	2104      	movs	r1, #4
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d0c:	4b31      	ldr	r3, [pc, #196]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	2204      	movs	r2, #4
 8002d12:	4013      	ands	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697b      	ldr	r3, [r7, #20]

  __HAL_RCC_USART1_CLK_ENABLE();
 8002d18:	4b2e      	ldr	r3, [pc, #184]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d1c:	4b2d      	ldr	r3, [pc, #180]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002d1e:	2180      	movs	r1, #128	; 0x80
 8002d20:	01c9      	lsls	r1, r1, #7
 8002d22:	430a      	orrs	r2, r1
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
 8002d26:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	01db      	lsls	r3, r3, #7
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_USART2_CLK_ENABLE();
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d38:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	0289      	lsls	r1, r1, #10
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_UART_MspInit+0xf4>)
 8002d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	029b      	lsls	r3, r3, #10
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]

  /********************pin muxing***********************/

  /* UART TX CONSOLE */
  gpio_uart.Pin = GPIO_PIN_2;
 8002d50:	241c      	movs	r4, #28
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	2204      	movs	r2, #4
 8002d56:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8002d58:	193b      	adds	r3, r7, r4
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART2;
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	2201      	movs	r2, #1
 8002d62:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8002d64:	193b      	adds	r3, r7, r4
 8002d66:	2201      	movs	r2, #1
 8002d68:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d6a:	193b      	adds	r3, r7, r4
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 8002d70:	193a      	adds	r2, r7, r4
 8002d72:	23a0      	movs	r3, #160	; 0xa0
 8002d74:	05db      	lsls	r3, r3, #23
 8002d76:	0011      	movs	r1, r2
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 facd 	bl	8003318 <HAL_GPIO_Init>

  /* UART TX GPS */
  gpio_uart.Pin = GPIO_PIN_4;
 8002d7e:	193b      	adds	r3, r7, r4
 8002d80:	2210      	movs	r2, #16
 8002d82:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	2202      	movs	r2, #2
 8002d88:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART1;
 8002d8a:	193b      	adds	r3, r7, r4
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8002d90:	193b      	adds	r3, r7, r4
 8002d92:	2201      	movs	r2, #1
 8002d94:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d96:	193b      	adds	r3, r7, r4
 8002d98:	2202      	movs	r2, #2
 8002d9a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <HAL_UART_MspInit+0xf8>)
 8002da0:	0019      	movs	r1, r3
 8002da2:	0010      	movs	r0, r2
 8002da4:	f000 fab8 	bl	8003318 <HAL_GPIO_Init>

  /* UART RX GPS */
  gpio_uart.Pin = GPIO_PIN_5;
 8002da8:	0021      	movs	r1, r4
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2220      	movs	r2, #32
 8002dae:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_UART_MspInit+0xf8>)
 8002db4:	0019      	movs	r1, r3
 8002db6:	0010      	movs	r0, r2
 8002db8:	f000 faae 	bl	8003318 <HAL_GPIO_Init>

  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dbc:	201b      	movs	r0, #27
 8002dbe:	f000 f9ba 	bl	8003136 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn,15,0);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	210f      	movs	r1, #15
 8002dc6:	201b      	movs	r0, #27
 8002dc8:	f000 f9a0 	bl	800310c <HAL_NVIC_SetPriority>

}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b00d      	add	sp, #52	; 0x34
 8002dd2:	bd90      	pop	{r4, r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	50000800 	.word	0x50000800

08002ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de4:	4a14      	ldr	r2, [pc, #80]	; (8002e38 <_sbrk+0x5c>)
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <_sbrk+0x60>)
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <_sbrk+0x64>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <_sbrk+0x64>)
 8002dfa:	4a12      	ldr	r2, [pc, #72]	; (8002e44 <_sbrk+0x68>)
 8002dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	18d3      	adds	r3, r2, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d207      	bcs.n	8002e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e0c:	f002 fdd6 	bl	80059bc <__errno>
 8002e10:	0003      	movs	r3, r0
 8002e12:	220c      	movs	r2, #12
 8002e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e16:	2301      	movs	r3, #1
 8002e18:	425b      	negs	r3, r3
 8002e1a:	e009      	b.n	8002e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e22:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <_sbrk+0x64>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	18d2      	adds	r2, r2, r3
 8002e2a:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <_sbrk+0x64>)
 8002e2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b006      	add	sp, #24
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20024000 	.word	0x20024000
 8002e3c:	00000400 	.word	0x00000400
 8002e40:	20000440 	.word	0x20000440
 8002e44:	20000590 	.word	0x20000590

08002e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
	...

08002e54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e54:	480d      	ldr	r0, [pc, #52]	; (8002e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e58:	f7ff fff6 	bl	8002e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e5e:	490d      	ldr	r1, [pc, #52]	; (8002e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e60:	4a0d      	ldr	r2, [pc, #52]	; (8002e98 <LoopForever+0xe>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e64:	e002      	b.n	8002e6c <LoopCopyDataInit>

08002e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6a:	3304      	adds	r3, #4

08002e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e70:	d3f9      	bcc.n	8002e66 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e74:	4c0a      	ldr	r4, [pc, #40]	; (8002ea0 <LoopForever+0x16>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e78:	e001      	b.n	8002e7e <LoopFillZerobss>

08002e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e7c:	3204      	adds	r2, #4

08002e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e80:	d3fb      	bcc.n	8002e7a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e82:	f002 fda1 	bl	80059c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002e86:	f7ff fd73 	bl	8002970 <main>

08002e8a <LoopForever>:

LoopForever:
  b LoopForever
 8002e8a:	e7fe      	b.n	8002e8a <LoopForever>
  ldr   r0, =_estack
 8002e8c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e94:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002e98:	08007cd0 	.word	0x08007cd0
  ldr r2, =_sbss
 8002e9c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002ea0:	20000590 	.word	0x20000590

08002ea4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ea4:	e7fe      	b.n	8002ea4 <ADC1_COMP_IRQHandler>
	...

08002ea8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_Init+0x3c>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <HAL_Init+0x3c>)
 8002eba:	2180      	movs	r1, #128	; 0x80
 8002ebc:	0049      	lsls	r1, r1, #1
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	f000 f810 	bl	8002ee8 <HAL_InitTick>
 8002ec8:	1e03      	subs	r3, r0, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e001      	b.n	8002ed8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ed4:	f7ff fef6 	bl	8002cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	781b      	ldrb	r3, [r3, #0]
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40022000 	.word	0x40022000

08002ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ef0:	230f      	movs	r3, #15
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_InitTick+0x88>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02b      	beq.n	8002f58 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002f00:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_InitTick+0x8c>)
 8002f02:	681c      	ldr	r4, [r3, #0]
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <HAL_InitTick+0x88>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	0019      	movs	r1, r3
 8002f0a:	23fa      	movs	r3, #250	; 0xfa
 8002f0c:	0098      	lsls	r0, r3, #2
 8002f0e:	f7fd f90b 	bl	8000128 <__udivsi3>
 8002f12:	0003      	movs	r3, r0
 8002f14:	0019      	movs	r1, r3
 8002f16:	0020      	movs	r0, r4
 8002f18:	f7fd f906 	bl	8000128 <__udivsi3>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 f919 	bl	8003156 <HAL_SYSTICK_Config>
 8002f24:	1e03      	subs	r3, r0, #0
 8002f26:	d112      	bne.n	8002f4e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d80a      	bhi.n	8002f44 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	2301      	movs	r3, #1
 8002f32:	425b      	negs	r3, r3
 8002f34:	2200      	movs	r2, #0
 8002f36:	0018      	movs	r0, r3
 8002f38:	f000 f8e8 	bl	800310c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_InitTick+0x90>)
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e00d      	b.n	8002f60 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f44:	230f      	movs	r3, #15
 8002f46:	18fb      	adds	r3, r7, r3
 8002f48:	2201      	movs	r2, #1
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	e008      	b.n	8002f60 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f4e:	230f      	movs	r3, #15
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	e003      	b.n	8002f60 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f58:	230f      	movs	r3, #15
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f60:	230f      	movs	r3, #15
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	781b      	ldrb	r3, [r3, #0]
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b005      	add	sp, #20
 8002f6c:	bd90      	pop	{r4, r7, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000048 	.word	0x20000048
 8002f74:	20000040 	.word	0x20000040
 8002f78:	20000044 	.word	0x20000044

08002f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_IncTick+0x1c>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	001a      	movs	r2, r3
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_IncTick+0x20>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	18d2      	adds	r2, r2, r3
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_IncTick+0x20>)
 8002f8e:	601a      	str	r2, [r3, #0]
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	20000048 	.word	0x20000048
 8002f9c:	20000444 	.word	0x20000444

08002fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa4:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <HAL_GetTick+0x10>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	20000444 	.word	0x20000444

08002fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	0002      	movs	r2, r0
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fc0:	1dfb      	adds	r3, r7, #7
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc6:	d809      	bhi.n	8002fdc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc8:	1dfb      	adds	r3, r7, #7
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	001a      	movs	r2, r3
 8002fce:	231f      	movs	r3, #31
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <__NVIC_EnableIRQ+0x30>)
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	4091      	lsls	r1, r2
 8002fd8:	000a      	movs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	e000e100 	.word	0xe000e100

08002fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	0002      	movs	r2, r0
 8002ff0:	6039      	str	r1, [r7, #0]
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	1dfb      	adds	r3, r7, #7
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8002ffc:	d828      	bhi.n	8003050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ffe:	4a2f      	ldr	r2, [pc, #188]	; (80030bc <__NVIC_SetPriority+0xd4>)
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	b25b      	sxtb	r3, r3
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	33c0      	adds	r3, #192	; 0xc0
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	589b      	ldr	r3, [r3, r2]
 800300e:	1dfa      	adds	r2, r7, #7
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	0011      	movs	r1, r2
 8003014:	2203      	movs	r2, #3
 8003016:	400a      	ands	r2, r1
 8003018:	00d2      	lsls	r2, r2, #3
 800301a:	21ff      	movs	r1, #255	; 0xff
 800301c:	4091      	lsls	r1, r2
 800301e:	000a      	movs	r2, r1
 8003020:	43d2      	mvns	r2, r2
 8003022:	401a      	ands	r2, r3
 8003024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	019b      	lsls	r3, r3, #6
 800302a:	22ff      	movs	r2, #255	; 0xff
 800302c:	401a      	ands	r2, r3
 800302e:	1dfb      	adds	r3, r7, #7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	0018      	movs	r0, r3
 8003034:	2303      	movs	r3, #3
 8003036:	4003      	ands	r3, r0
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800303c:	481f      	ldr	r0, [pc, #124]	; (80030bc <__NVIC_SetPriority+0xd4>)
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b25b      	sxtb	r3, r3
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	430a      	orrs	r2, r1
 8003048:	33c0      	adds	r3, #192	; 0xc0
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800304e:	e031      	b.n	80030b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003050:	4a1b      	ldr	r2, [pc, #108]	; (80030c0 <__NVIC_SetPriority+0xd8>)
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	0019      	movs	r1, r3
 8003058:	230f      	movs	r3, #15
 800305a:	400b      	ands	r3, r1
 800305c:	3b08      	subs	r3, #8
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	3306      	adds	r3, #6
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	18d3      	adds	r3, r2, r3
 8003066:	3304      	adds	r3, #4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	1dfa      	adds	r2, r7, #7
 800306c:	7812      	ldrb	r2, [r2, #0]
 800306e:	0011      	movs	r1, r2
 8003070:	2203      	movs	r2, #3
 8003072:	400a      	ands	r2, r1
 8003074:	00d2      	lsls	r2, r2, #3
 8003076:	21ff      	movs	r1, #255	; 0xff
 8003078:	4091      	lsls	r1, r2
 800307a:	000a      	movs	r2, r1
 800307c:	43d2      	mvns	r2, r2
 800307e:	401a      	ands	r2, r3
 8003080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	019b      	lsls	r3, r3, #6
 8003086:	22ff      	movs	r2, #255	; 0xff
 8003088:	401a      	ands	r2, r3
 800308a:	1dfb      	adds	r3, r7, #7
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	0018      	movs	r0, r3
 8003090:	2303      	movs	r3, #3
 8003092:	4003      	ands	r3, r0
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003098:	4809      	ldr	r0, [pc, #36]	; (80030c0 <__NVIC_SetPriority+0xd8>)
 800309a:	1dfb      	adds	r3, r7, #7
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	001c      	movs	r4, r3
 80030a0:	230f      	movs	r3, #15
 80030a2:	4023      	ands	r3, r4
 80030a4:	3b08      	subs	r3, #8
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	430a      	orrs	r2, r1
 80030aa:	3306      	adds	r3, #6
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	18c3      	adds	r3, r0, r3
 80030b0:	3304      	adds	r3, #4
 80030b2:	601a      	str	r2, [r3, #0]
}
 80030b4:	46c0      	nop			; (mov r8, r8)
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b003      	add	sp, #12
 80030ba:	bd90      	pop	{r4, r7, pc}
 80030bc:	e000e100 	.word	0xe000e100
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	1e5a      	subs	r2, r3, #1
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	045b      	lsls	r3, r3, #17
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d301      	bcc.n	80030dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030d8:	2301      	movs	r3, #1
 80030da:	e010      	b.n	80030fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <SysTick_Config+0x44>)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	3a01      	subs	r2, #1
 80030e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e4:	2301      	movs	r3, #1
 80030e6:	425b      	negs	r3, r3
 80030e8:	2103      	movs	r1, #3
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7ff ff7c 	bl	8002fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f0:	4b05      	ldr	r3, [pc, #20]	; (8003108 <SysTick_Config+0x44>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f6:	4b04      	ldr	r3, [pc, #16]	; (8003108 <SysTick_Config+0x44>)
 80030f8:	2207      	movs	r2, #7
 80030fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	e000e010 	.word	0xe000e010

0800310c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	210f      	movs	r1, #15
 8003118:	187b      	adds	r3, r7, r1
 800311a:	1c02      	adds	r2, r0, #0
 800311c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	187b      	adds	r3, r7, r1
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b25b      	sxtb	r3, r3
 8003126:	0011      	movs	r1, r2
 8003128:	0018      	movs	r0, r3
 800312a:	f7ff ff5d 	bl	8002fe8 <__NVIC_SetPriority>
}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b082      	sub	sp, #8
 800313a:	af00      	add	r7, sp, #0
 800313c:	0002      	movs	r2, r0
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b25b      	sxtb	r3, r3
 8003148:	0018      	movs	r0, r3
 800314a:	f7ff ff33 	bl	8002fb4 <__NVIC_EnableIRQ>
}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	b002      	add	sp, #8
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff ffaf 	bl	80030c4 <SysTick_Config>
 8003166:	0003      	movs	r3, r0
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003174:	f000 f803 	bl	800317e <HAL_SYSTICK_Callback>
}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e04f      	b.n	800323a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2225      	movs	r2, #37	; 0x25
 800319e:	5c9b      	ldrb	r3, [r3, r2]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d008      	beq.n	80031b8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2204      	movs	r2, #4
 80031aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	2100      	movs	r1, #0
 80031b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e040      	b.n	800323a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	210e      	movs	r1, #14
 80031c4:	438a      	bics	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d2:	491c      	ldr	r1, [pc, #112]	; (8003244 <HAL_DMA_Abort+0xbc>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	438a      	bics	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ec:	221c      	movs	r2, #28
 80031ee:	401a      	ands	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2101      	movs	r1, #1
 80031f6:	4091      	lsls	r1, r2
 80031f8:	000a      	movs	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003204:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	490a      	ldr	r1, [pc, #40]	; (8003244 <HAL_DMA_Abort+0xbc>)
 800321a:	400a      	ands	r2, r1
 800321c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003226:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2225      	movs	r2, #37	; 0x25
 800322c:	2101      	movs	r1, #1
 800322e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2224      	movs	r2, #36	; 0x24
 8003234:	2100      	movs	r1, #0
 8003236:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b002      	add	sp, #8
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	fffffeff 	.word	0xfffffeff

08003248 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	210f      	movs	r1, #15
 8003252:	187b      	adds	r3, r7, r1
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2225      	movs	r2, #37	; 0x25
 800325c:	5c9b      	ldrb	r3, [r3, r2]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d006      	beq.n	8003272 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2204      	movs	r2, #4
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e048      	b.n	8003304 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	210e      	movs	r1, #14
 800327e:	438a      	bics	r2, r1
 8003280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2101      	movs	r1, #1
 800328e:	438a      	bics	r2, r1
 8003290:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	491d      	ldr	r1, [pc, #116]	; (8003314 <HAL_DMA_Abort_IT+0xcc>)
 800329e:	400a      	ands	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	221c      	movs	r2, #28
 80032a8:	401a      	ands	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	2101      	movs	r1, #1
 80032b0:	4091      	lsls	r1, r2
 80032b2:	000a      	movs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032be:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00c      	beq.n	80032e2 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	4910      	ldr	r1, [pc, #64]	; (8003314 <HAL_DMA_Abort_IT+0xcc>)
 80032d4:	400a      	ands	r2, r1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032e0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2225      	movs	r2, #37	; 0x25
 80032e6:	2101      	movs	r1, #1
 80032e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2224      	movs	r2, #36	; 0x24
 80032ee:	2100      	movs	r1, #0
 80032f0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	0010      	movs	r0, r2
 8003302:	4798      	blx	r3
    }
  }
  return status;
 8003304:	230f      	movs	r3, #15
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	781b      	ldrb	r3, [r3, #0]
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b004      	add	sp, #16
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	fffffeff 	.word	0xfffffeff

08003318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003326:	e14d      	b.n	80035c4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4091      	lsls	r1, r2
 8003332:	000a      	movs	r2, r1
 8003334:	4013      	ands	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d100      	bne.n	8003340 <HAL_GPIO_Init+0x28>
 800333e:	e13e      	b.n	80035be <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2203      	movs	r2, #3
 8003346:	4013      	ands	r3, r2
 8003348:	2b01      	cmp	r3, #1
 800334a:	d005      	beq.n	8003358 <HAL_GPIO_Init+0x40>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2203      	movs	r2, #3
 8003352:	4013      	ands	r3, r2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d130      	bne.n	80033ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	2203      	movs	r2, #3
 8003364:	409a      	lsls	r2, r3
 8003366:	0013      	movs	r3, r2
 8003368:	43da      	mvns	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	409a      	lsls	r2, r3
 800337a:	0013      	movs	r3, r2
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800338e:	2201      	movs	r2, #1
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
 8003394:	0013      	movs	r3, r2
 8003396:	43da      	mvns	r2, r3
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	091b      	lsrs	r3, r3, #4
 80033a4:	2201      	movs	r2, #1
 80033a6:	401a      	ands	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	409a      	lsls	r2, r3
 80033ac:	0013      	movs	r3, r2
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2203      	movs	r2, #3
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d017      	beq.n	80033f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	2203      	movs	r2, #3
 80033d2:	409a      	lsls	r2, r3
 80033d4:	0013      	movs	r3, r2
 80033d6:	43da      	mvns	r2, r3
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4013      	ands	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	0013      	movs	r3, r2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2203      	movs	r2, #3
 80033fc:	4013      	ands	r3, r2
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d123      	bne.n	800344a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	08da      	lsrs	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3208      	adds	r2, #8
 800340a:	0092      	lsls	r2, r2, #2
 800340c:	58d3      	ldr	r3, [r2, r3]
 800340e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2207      	movs	r2, #7
 8003414:	4013      	ands	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	220f      	movs	r2, #15
 800341a:	409a      	lsls	r2, r3
 800341c:	0013      	movs	r3, r2
 800341e:	43da      	mvns	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	2107      	movs	r1, #7
 800342e:	400b      	ands	r3, r1
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	409a      	lsls	r2, r3
 8003434:	0013      	movs	r3, r2
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	08da      	lsrs	r2, r3, #3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3208      	adds	r2, #8
 8003444:	0092      	lsls	r2, r2, #2
 8003446:	6939      	ldr	r1, [r7, #16]
 8003448:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	2203      	movs	r2, #3
 8003456:	409a      	lsls	r2, r3
 8003458:	0013      	movs	r3, r2
 800345a:	43da      	mvns	r2, r3
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2203      	movs	r2, #3
 8003468:	401a      	ands	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	409a      	lsls	r2, r3
 8003470:	0013      	movs	r3, r2
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	23c0      	movs	r3, #192	; 0xc0
 8003484:	029b      	lsls	r3, r3, #10
 8003486:	4013      	ands	r3, r2
 8003488:	d100      	bne.n	800348c <HAL_GPIO_Init+0x174>
 800348a:	e098      	b.n	80035be <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800348c:	4a53      	ldr	r2, [pc, #332]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	3318      	adds	r3, #24
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	589b      	ldr	r3, [r3, r2]
 8003498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2203      	movs	r2, #3
 800349e:	4013      	ands	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	220f      	movs	r2, #15
 80034a4:	409a      	lsls	r2, r3
 80034a6:	0013      	movs	r3, r2
 80034a8:	43da      	mvns	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	23a0      	movs	r3, #160	; 0xa0
 80034b4:	05db      	lsls	r3, r3, #23
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d019      	beq.n	80034ee <HAL_GPIO_Init+0x1d6>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a48      	ldr	r2, [pc, #288]	; (80035e0 <HAL_GPIO_Init+0x2c8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_GPIO_Init+0x1d2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a47      	ldr	r2, [pc, #284]	; (80035e4 <HAL_GPIO_Init+0x2cc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00d      	beq.n	80034e6 <HAL_GPIO_Init+0x1ce>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a46      	ldr	r2, [pc, #280]	; (80035e8 <HAL_GPIO_Init+0x2d0>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <HAL_GPIO_Init+0x1ca>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a45      	ldr	r2, [pc, #276]	; (80035ec <HAL_GPIO_Init+0x2d4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_GPIO_Init+0x1c6>
 80034da:	2304      	movs	r3, #4
 80034dc:	e008      	b.n	80034f0 <HAL_GPIO_Init+0x1d8>
 80034de:	2305      	movs	r3, #5
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x1d8>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e004      	b.n	80034f0 <HAL_GPIO_Init+0x1d8>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_Init+0x1d8>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x1d8>
 80034ee:	2300      	movs	r3, #0
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	2103      	movs	r1, #3
 80034f4:	400a      	ands	r2, r1
 80034f6:	00d2      	lsls	r2, r2, #3
 80034f8:	4093      	lsls	r3, r2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003500:	4936      	ldr	r1, [pc, #216]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3318      	adds	r3, #24
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800350e:	4b33      	ldr	r3, [pc, #204]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	43da      	mvns	r2, r3
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4013      	ands	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	035b      	lsls	r3, r3, #13
 8003526:	4013      	ands	r3, r2
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003532:	4b2a      	ldr	r3, [pc, #168]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003538:	4b28      	ldr	r3, [pc, #160]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	43da      	mvns	r2, r3
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	039b      	lsls	r3, r3, #14
 8003550:	4013      	ands	r3, r2
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003562:	4a1e      	ldr	r2, [pc, #120]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 8003564:	2384      	movs	r3, #132	; 0x84
 8003566:	58d3      	ldr	r3, [r2, r3]
 8003568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	43da      	mvns	r2, r3
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	029b      	lsls	r3, r3, #10
 800357c:	4013      	ands	r3, r2
 800357e:	d003      	beq.n	8003588 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003588:	4914      	ldr	r1, [pc, #80]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 800358a:	2284      	movs	r2, #132	; 0x84
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003590:	4a12      	ldr	r2, [pc, #72]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	58d3      	ldr	r3, [r2, r3]
 8003596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43da      	mvns	r2, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	025b      	lsls	r3, r3, #9
 80035aa:	4013      	ands	r3, r2
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035b6:	4909      	ldr	r1, [pc, #36]	; (80035dc <HAL_GPIO_Init+0x2c4>)
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3301      	adds	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	40da      	lsrs	r2, r3
 80035cc:	1e13      	subs	r3, r2, #0
 80035ce:	d000      	beq.n	80035d2 <HAL_GPIO_Init+0x2ba>
 80035d0:	e6aa      	b.n	8003328 <HAL_GPIO_Init+0x10>
  }
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46c0      	nop			; (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b006      	add	sp, #24
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021800 	.word	0x40021800
 80035e0:	50000400 	.word	0x50000400
 80035e4:	50000800 	.word	0x50000800
 80035e8:	50000c00 	.word	0x50000c00
 80035ec:	50001000 	.word	0x50001000

080035f0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80035f4:	4b03      	ldr	r3, [pc, #12]	; (8003604 <LL_RCC_GetAPB1Prescaler+0x14>)
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	23e0      	movs	r3, #224	; 0xe0
 80035fa:	01db      	lsls	r3, r3, #7
 80035fc:	4013      	ands	r3, r2
}
 80035fe:	0018      	movs	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40021000 	.word	0x40021000

08003608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800360e:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2238      	movs	r2, #56	; 0x38
 8003614:	4013      	ands	r3, r2
 8003616:	d10f      	bne.n	8003638 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003618:	4b39      	ldr	r3, [pc, #228]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0adb      	lsrs	r3, r3, #11
 800361e:	2207      	movs	r2, #7
 8003620:	4013      	ands	r3, r2
 8003622:	2201      	movs	r2, #1
 8003624:	409a      	lsls	r2, r3
 8003626:	0013      	movs	r3, r2
 8003628:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800362a:	6839      	ldr	r1, [r7, #0]
 800362c:	4835      	ldr	r0, [pc, #212]	; (8003704 <HAL_RCC_GetSysClockFreq+0xfc>)
 800362e:	f7fc fd7b 	bl	8000128 <__udivsi3>
 8003632:	0003      	movs	r3, r0
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	e05d      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003638:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2238      	movs	r2, #56	; 0x38
 800363e:	4013      	ands	r3, r2
 8003640:	2b08      	cmp	r3, #8
 8003642:	d102      	bne.n	800364a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <HAL_RCC_GetSysClockFreq+0x100>)
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	e054      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364a:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2238      	movs	r2, #56	; 0x38
 8003650:	4013      	ands	r3, r2
 8003652:	2b10      	cmp	r3, #16
 8003654:	d138      	bne.n	80036c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003656:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2203      	movs	r2, #3
 800365c:	4013      	ands	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	2207      	movs	r2, #7
 8003668:	4013      	ands	r3, r2
 800366a:	3301      	adds	r3, #1
 800366c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d10d      	bne.n	8003690 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4824      	ldr	r0, [pc, #144]	; (8003708 <HAL_RCC_GetSysClockFreq+0x100>)
 8003678:	f7fc fd56 	bl	8000128 <__udivsi3>
 800367c:	0003      	movs	r3, r0
 800367e:	0019      	movs	r1, r3
 8003680:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	0a1b      	lsrs	r3, r3, #8
 8003686:	227f      	movs	r2, #127	; 0x7f
 8003688:	4013      	ands	r3, r2
 800368a:	434b      	muls	r3, r1
 800368c:	617b      	str	r3, [r7, #20]
        break;
 800368e:	e00d      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	481c      	ldr	r0, [pc, #112]	; (8003704 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003694:	f7fc fd48 	bl	8000128 <__udivsi3>
 8003698:	0003      	movs	r3, r0
 800369a:	0019      	movs	r1, r3
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	227f      	movs	r2, #127	; 0x7f
 80036a4:	4013      	ands	r3, r2
 80036a6:	434b      	muls	r3, r1
 80036a8:	617b      	str	r3, [r7, #20]
        break;
 80036aa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	0f5b      	lsrs	r3, r3, #29
 80036b2:	2207      	movs	r2, #7
 80036b4:	4013      	ands	r3, r2
 80036b6:	3301      	adds	r3, #1
 80036b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	6978      	ldr	r0, [r7, #20]
 80036be:	f7fc fd33 	bl	8000128 <__udivsi3>
 80036c2:	0003      	movs	r3, r0
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	e015      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2238      	movs	r2, #56	; 0x38
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b20      	cmp	r3, #32
 80036d2:	d103      	bne.n	80036dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2238      	movs	r2, #56	; 0x38
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b18      	cmp	r3, #24
 80036e6:	d103      	bne.n	80036f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80036e8:	23fa      	movs	r3, #250	; 0xfa
 80036ea:	01db      	lsls	r3, r3, #7
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	e001      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80036f4:	693b      	ldr	r3, [r7, #16]
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b006      	add	sp, #24
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	40021000 	.word	0x40021000
 8003704:	00f42400 	.word	0x00f42400
 8003708:	007a1200 	.word	0x007a1200

0800370c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <HAL_RCC_GetHCLKFreq+0x10>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	20000040 	.word	0x20000040

08003720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003720:	b5b0      	push	{r4, r5, r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003724:	f7ff fff2 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003728:	0004      	movs	r4, r0
 800372a:	f7ff ff61 	bl	80035f0 <LL_RCC_GetAPB1Prescaler>
 800372e:	0003      	movs	r3, r0
 8003730:	0b1a      	lsrs	r2, r3, #12
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003734:	0092      	lsls	r2, r2, #2
 8003736:	58d3      	ldr	r3, [r2, r3]
 8003738:	221f      	movs	r2, #31
 800373a:	4013      	ands	r3, r2
 800373c:	40dc      	lsrs	r4, r3
 800373e:	0023      	movs	r3, r4
}
 8003740:	0018      	movs	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	bdb0      	pop	{r4, r5, r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	08007b08 	.word	0x08007b08

0800374c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e046      	b.n	80037ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2288      	movs	r2, #136	; 0x88
 8003762:	589b      	ldr	r3, [r3, r2]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d107      	bne.n	8003778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2284      	movs	r2, #132	; 0x84
 800376c:	2100      	movs	r1, #0
 800376e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff fab4 	bl	8002ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2288      	movs	r2, #136	; 0x88
 800377c:	2124      	movs	r1, #36	; 0x24
 800377e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2101      	movs	r1, #1
 800378c:	438a      	bics	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f000 ffce 	bl	800473c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 fc74 	bl	8004090 <UART_SetConfig>
 80037a8:	0003      	movs	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e01c      	b.n	80037ec <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	490d      	ldr	r1, [pc, #52]	; (80037f4 <HAL_UART_Init+0xa8>)
 80037be:	400a      	ands	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	212a      	movs	r1, #42	; 0x2a
 80037ce:	438a      	bics	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f001 f85d 	bl	80048a4 <UART_CheckIdleState>
 80037ea:	0003      	movs	r3, r0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	ffffb7ff 	.word	0xffffb7ff

080037f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	1dbb      	adds	r3, r7, #6
 8003806:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2288      	movs	r2, #136	; 0x88
 800380c:	589b      	ldr	r3, [r3, r2]
 800380e:	2b20      	cmp	r3, #32
 8003810:	d000      	beq.n	8003814 <HAL_UART_Transmit+0x1c>
 8003812:	e090      	b.n	8003936 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_UART_Transmit+0x2a>
 800381a:	1dbb      	adds	r3, r7, #6
 800381c:	881b      	ldrh	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e088      	b.n	8003938 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	015b      	lsls	r3, r3, #5
 800382e:	429a      	cmp	r2, r3
 8003830:	d109      	bne.n	8003846 <HAL_UART_Transmit+0x4e>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2201      	movs	r2, #1
 800383e:	4013      	ands	r3, r2
 8003840:	d001      	beq.n	8003846 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e078      	b.n	8003938 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2290      	movs	r2, #144	; 0x90
 800384a:	2100      	movs	r1, #0
 800384c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2288      	movs	r2, #136	; 0x88
 8003852:	2121      	movs	r1, #33	; 0x21
 8003854:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003856:	f7ff fba3 	bl	8002fa0 <HAL_GetTick>
 800385a:	0003      	movs	r3, r0
 800385c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1dba      	adds	r2, r7, #6
 8003862:	2154      	movs	r1, #84	; 0x54
 8003864:	8812      	ldrh	r2, [r2, #0]
 8003866:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	1dba      	adds	r2, r7, #6
 800386c:	2156      	movs	r1, #86	; 0x56
 800386e:	8812      	ldrh	r2, [r2, #0]
 8003870:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	015b      	lsls	r3, r3, #5
 800387a:	429a      	cmp	r2, r3
 800387c:	d108      	bne.n	8003890 <HAL_UART_Transmit+0x98>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	e003      	b.n	8003898 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003894:	2300      	movs	r3, #0
 8003896:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003898:	e030      	b.n	80038fc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	0013      	movs	r3, r2
 80038a4:	2200      	movs	r2, #0
 80038a6:	2180      	movs	r1, #128	; 0x80
 80038a8:	f001 f8a6 	bl	80049f8 <UART_WaitOnFlagUntilTimeout>
 80038ac:	1e03      	subs	r3, r0, #0
 80038ae:	d005      	beq.n	80038bc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2288      	movs	r2, #136	; 0x88
 80038b4:	2120      	movs	r1, #32
 80038b6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e03d      	b.n	8003938 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	001a      	movs	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	05d2      	lsls	r2, r2, #23
 80038ce:	0dd2      	lsrs	r2, r2, #23
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	3302      	adds	r3, #2
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	e007      	b.n	80038ea <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	781a      	ldrb	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3301      	adds	r3, #1
 80038e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2256      	movs	r2, #86	; 0x56
 80038ee:	5a9b      	ldrh	r3, [r3, r2]
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b299      	uxth	r1, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2256      	movs	r2, #86	; 0x56
 80038fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2256      	movs	r2, #86	; 0x56
 8003900:	5a9b      	ldrh	r3, [r3, r2]
 8003902:	b29b      	uxth	r3, r3
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1c8      	bne.n	800389a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	0013      	movs	r3, r2
 8003912:	2200      	movs	r2, #0
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	f001 f86f 	bl	80049f8 <UART_WaitOnFlagUntilTimeout>
 800391a:	1e03      	subs	r3, r0, #0
 800391c:	d005      	beq.n	800392a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2288      	movs	r2, #136	; 0x88
 8003922:	2120      	movs	r1, #32
 8003924:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e006      	b.n	8003938 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2288      	movs	r2, #136	; 0x88
 800392e:	2120      	movs	r1, #32
 8003930:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e000      	b.n	8003938 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003936:	2302      	movs	r3, #2
  }
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b008      	add	sp, #32
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	1dbb      	adds	r3, r7, #6
 800394c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	228c      	movs	r2, #140	; 0x8c
 8003952:	589b      	ldr	r3, [r3, r2]
 8003954:	2b20      	cmp	r3, #32
 8003956:	d14f      	bne.n	80039f8 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_UART_Receive_IT+0x26>
 800395e:	1dbb      	adds	r3, r7, #6
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e047      	b.n	80039fa <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	2380      	movs	r3, #128	; 0x80
 8003970:	015b      	lsls	r3, r3, #5
 8003972:	429a      	cmp	r2, r3
 8003974:	d109      	bne.n	800398a <HAL_UART_Receive_IT+0x4a>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d105      	bne.n	800398a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2201      	movs	r2, #1
 8003982:	4013      	ands	r3, r2
 8003984:	d001      	beq.n	800398a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e037      	b.n	80039fa <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_UART_Receive_IT+0xc4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d025      	beq.n	80039e6 <HAL_UART_Receive_IT+0xa6>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_UART_Receive_IT+0xc8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d020      	beq.n	80039e6 <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	4013      	ands	r3, r2
 80039b0:	d019      	beq.n	80039e6 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b2:	f3ef 8310 	mrs	r3, PRIMASK
 80039b6:	613b      	str	r3, [r7, #16]
  return(result);
 80039b8:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	2301      	movs	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f383 8810 	msr	PRIMASK, r3
}
 80039c6:	46c0      	nop			; (mov r8, r8)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2180      	movs	r1, #128	; 0x80
 80039d4:	04c9      	lsls	r1, r1, #19
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	f383 8810 	msr	PRIMASK, r3
}
 80039e4:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80039e6:	1dbb      	adds	r3, r7, #6
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f001 f872 	bl	8004ad8 <UART_Start_Receive_IT>
 80039f4:	0003      	movs	r3, r0
 80039f6:	e000      	b.n	80039fa <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	0018      	movs	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b008      	add	sp, #32
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	40008000 	.word	0x40008000
 8003a08:	40008400 	.word	0x40008400

08003a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a0c:	b5b0      	push	{r4, r5, r7, lr}
 8003a0e:	b0aa      	sub	sp, #168	; 0xa8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	22a4      	movs	r2, #164	; 0xa4
 8003a1c:	18b9      	adds	r1, r7, r2
 8003a1e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	20a0      	movs	r0, #160	; 0xa0
 8003a28:	1839      	adds	r1, r7, r0
 8003a2a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	249c      	movs	r4, #156	; 0x9c
 8003a34:	1939      	adds	r1, r7, r4
 8003a36:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a38:	0011      	movs	r1, r2
 8003a3a:	18bb      	adds	r3, r7, r2
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4aa2      	ldr	r2, [pc, #648]	; (8003cc8 <HAL_UART_IRQHandler+0x2bc>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	2298      	movs	r2, #152	; 0x98
 8003a44:	18bd      	adds	r5, r7, r2
 8003a46:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003a48:	18bb      	adds	r3, r7, r2
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d11a      	bne.n	8003a86 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2220      	movs	r2, #32
 8003a56:	4013      	ands	r3, r2
 8003a58:	d015      	beq.n	8003a86 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a5a:	183b      	adds	r3, r7, r0
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	4013      	ands	r3, r2
 8003a62:	d105      	bne.n	8003a70 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	055b      	lsls	r3, r3, #21
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d00a      	beq.n	8003a86 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d100      	bne.n	8003a7a <HAL_UART_IRQHandler+0x6e>
 8003a78:	e2dc      	b.n	8004034 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	0010      	movs	r0, r2
 8003a82:	4798      	blx	r3
      }
      return;
 8003a84:	e2d6      	b.n	8004034 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a86:	2398      	movs	r3, #152	; 0x98
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d100      	bne.n	8003a92 <HAL_UART_IRQHandler+0x86>
 8003a90:	e122      	b.n	8003cd8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003a92:	239c      	movs	r3, #156	; 0x9c
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a8c      	ldr	r2, [pc, #560]	; (8003ccc <HAL_UART_IRQHandler+0x2c0>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d106      	bne.n	8003aac <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003a9e:	23a0      	movs	r3, #160	; 0xa0
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a8a      	ldr	r2, [pc, #552]	; (8003cd0 <HAL_UART_IRQHandler+0x2c4>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d100      	bne.n	8003aac <HAL_UART_IRQHandler+0xa0>
 8003aaa:	e115      	b.n	8003cd8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003aac:	23a4      	movs	r3, #164	; 0xa4
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d012      	beq.n	8003ade <HAL_UART_IRQHandler+0xd2>
 8003ab8:	23a0      	movs	r3, #160	; 0xa0
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2201      	movs	r2, #1
 8003acc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2290      	movs	r2, #144	; 0x90
 8003ad2:	589b      	ldr	r3, [r3, r2]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2190      	movs	r1, #144	; 0x90
 8003adc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ade:	23a4      	movs	r3, #164	; 0xa4
 8003ae0:	18fb      	adds	r3, r7, r3
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d011      	beq.n	8003b0e <HAL_UART_IRQHandler+0x102>
 8003aea:	239c      	movs	r3, #156	; 0x9c
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2201      	movs	r2, #1
 8003af2:	4013      	ands	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2202      	movs	r2, #2
 8003afc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2290      	movs	r2, #144	; 0x90
 8003b02:	589b      	ldr	r3, [r3, r2]
 8003b04:	2204      	movs	r2, #4
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2190      	movs	r1, #144	; 0x90
 8003b0c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b0e:	23a4      	movs	r3, #164	; 0xa4
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2204      	movs	r2, #4
 8003b16:	4013      	ands	r3, r2
 8003b18:	d011      	beq.n	8003b3e <HAL_UART_IRQHandler+0x132>
 8003b1a:	239c      	movs	r3, #156	; 0x9c
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	4013      	ands	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2290      	movs	r2, #144	; 0x90
 8003b32:	589b      	ldr	r3, [r3, r2]
 8003b34:	2202      	movs	r2, #2
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2190      	movs	r1, #144	; 0x90
 8003b3c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b3e:	23a4      	movs	r3, #164	; 0xa4
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2208      	movs	r2, #8
 8003b46:	4013      	ands	r3, r2
 8003b48:	d017      	beq.n	8003b7a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b4a:	23a0      	movs	r3, #160	; 0xa0
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2220      	movs	r2, #32
 8003b52:	4013      	ands	r3, r2
 8003b54:	d105      	bne.n	8003b62 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003b56:	239c      	movs	r3, #156	; 0x9c
 8003b58:	18fb      	adds	r3, r7, r3
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a5b      	ldr	r2, [pc, #364]	; (8003ccc <HAL_UART_IRQHandler+0x2c0>)
 8003b5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003b60:	d00b      	beq.n	8003b7a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2208      	movs	r2, #8
 8003b68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2290      	movs	r2, #144	; 0x90
 8003b6e:	589b      	ldr	r3, [r3, r2]
 8003b70:	2208      	movs	r2, #8
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2190      	movs	r1, #144	; 0x90
 8003b78:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b7a:	23a4      	movs	r3, #164	; 0xa4
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	4013      	ands	r3, r2
 8003b86:	d013      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x1a4>
 8003b88:	23a0      	movs	r3, #160	; 0xa0
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	04db      	lsls	r3, r3, #19
 8003b92:	4013      	ands	r3, r2
 8003b94:	d00c      	beq.n	8003bb0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	0112      	lsls	r2, r2, #4
 8003b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2290      	movs	r2, #144	; 0x90
 8003ba4:	589b      	ldr	r3, [r3, r2]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2190      	movs	r1, #144	; 0x90
 8003bae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2290      	movs	r2, #144	; 0x90
 8003bb4:	589b      	ldr	r3, [r3, r2]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d100      	bne.n	8003bbc <HAL_UART_IRQHandler+0x1b0>
 8003bba:	e23d      	b.n	8004038 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003bbc:	23a4      	movs	r3, #164	; 0xa4
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d015      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003bc8:	23a0      	movs	r3, #160	; 0xa0
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d106      	bne.n	8003be2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003bd4:	239c      	movs	r3, #156	; 0x9c
 8003bd6:	18fb      	adds	r3, r7, r3
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	055b      	lsls	r3, r3, #21
 8003bde:	4013      	ands	r3, r2
 8003be0:	d008      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d004      	beq.n	8003bf4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	0010      	movs	r0, r2
 8003bf2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2290      	movs	r2, #144	; 0x90
 8003bf8:	589b      	ldr	r3, [r3, r2]
 8003bfa:	2194      	movs	r1, #148	; 0x94
 8003bfc:	187a      	adds	r2, r7, r1
 8003bfe:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2240      	movs	r2, #64	; 0x40
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d004      	beq.n	8003c18 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2228      	movs	r2, #40	; 0x28
 8003c14:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c16:	d04c      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f001 f880 	bl	8004d20 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2240      	movs	r2, #64	; 0x40
 8003c28:	4013      	ands	r3, r2
 8003c2a:	2b40      	cmp	r3, #64	; 0x40
 8003c2c:	d13c      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c32:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c36:	2090      	movs	r0, #144	; 0x90
 8003c38:	183a      	adds	r2, r7, r0
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c42:	f383 8810 	msr	PRIMASK, r3
}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2140      	movs	r1, #64	; 0x40
 8003c54:	438a      	bics	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	183b      	adds	r3, r7, r0
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2280      	movs	r2, #128	; 0x80
 8003c6a:	589b      	ldr	r3, [r3, r2]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d016      	beq.n	8003c9e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2280      	movs	r2, #128	; 0x80
 8003c74:	589b      	ldr	r3, [r3, r2]
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <HAL_UART_IRQHandler+0x2c8>)
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2280      	movs	r2, #128	; 0x80
 8003c7e:	589b      	ldr	r3, [r3, r2]
 8003c80:	0018      	movs	r0, r3
 8003c82:	f7ff fae1 	bl	8003248 <HAL_DMA_Abort_IT>
 8003c86:	1e03      	subs	r3, r0, #0
 8003c88:	d01c      	beq.n	8003cc4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2280      	movs	r2, #128	; 0x80
 8003c8e:	589b      	ldr	r3, [r3, r2]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	2180      	movs	r1, #128	; 0x80
 8003c96:	5852      	ldr	r2, [r2, r1]
 8003c98:	0010      	movs	r0, r2
 8003c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e012      	b.n	8003cc4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 f9e1 	bl	8004068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca6:	e00d      	b.n	8003cc4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	0018      	movs	r0, r3
 8003cac:	f000 f9dc 	bl	8004068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e008      	b.n	8003cc4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f000 f9d7 	bl	8004068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2290      	movs	r2, #144	; 0x90
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003cc2:	e1b9      	b.n	8004038 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	46c0      	nop			; (mov r8, r8)
    return;
 8003cc6:	e1b7      	b.n	8004038 <HAL_UART_IRQHandler+0x62c>
 8003cc8:	0000080f 	.word	0x0000080f
 8003ccc:	10000001 	.word	0x10000001
 8003cd0:	04000120 	.word	0x04000120
 8003cd4:	08004ded 	.word	0x08004ded

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d000      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x2d6>
 8003ce0:	e13e      	b.n	8003f60 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ce2:	23a4      	movs	r3, #164	; 0xa4
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	4013      	ands	r3, r2
 8003cec:	d100      	bne.n	8003cf0 <HAL_UART_IRQHandler+0x2e4>
 8003cee:	e137      	b.n	8003f60 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cf0:	23a0      	movs	r3, #160	; 0xa0
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	d100      	bne.n	8003cfe <HAL_UART_IRQHandler+0x2f2>
 8003cfc:	e130      	b.n	8003f60 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2210      	movs	r2, #16
 8003d04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d000      	beq.n	8003d16 <HAL_UART_IRQHandler+0x30a>
 8003d14:	e0a4      	b.n	8003e60 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	589b      	ldr	r3, [r3, r2]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	217e      	movs	r1, #126	; 0x7e
 8003d22:	187b      	adds	r3, r7, r1
 8003d24:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003d26:	187b      	adds	r3, r7, r1
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d100      	bne.n	8003d30 <HAL_UART_IRQHandler+0x324>
 8003d2e:	e185      	b.n	800403c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	225c      	movs	r2, #92	; 0x5c
 8003d34:	5a9b      	ldrh	r3, [r3, r2]
 8003d36:	187a      	adds	r2, r7, r1
 8003d38:	8812      	ldrh	r2, [r2, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d300      	bcc.n	8003d40 <HAL_UART_IRQHandler+0x334>
 8003d3e:	e17d      	b.n	800403c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	187a      	adds	r2, r7, r1
 8003d44:	215e      	movs	r1, #94	; 0x5e
 8003d46:	8812      	ldrh	r2, [r2, #0]
 8003d48:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2280      	movs	r2, #128	; 0x80
 8003d4e:	589b      	ldr	r3, [r3, r2]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2220      	movs	r2, #32
 8003d56:	4013      	ands	r3, r2
 8003d58:	d170      	bne.n	8003e3c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d62:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d64:	2301      	movs	r3, #1
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	f383 8810 	msr	PRIMASK, r3
}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	49b4      	ldr	r1, [pc, #720]	; (800404c <HAL_UART_IRQHandler+0x640>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d86:	f383 8810 	msr	PRIMASK, r3
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d94:	677b      	str	r3, [r7, #116]	; 0x74
 8003d96:	2301      	movs	r3, #1
 8003d98:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9c:	f383 8810 	msr	PRIMASK, r3
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2101      	movs	r1, #1
 8003dae:	438a      	bics	r2, r1
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db8:	f383 8810 	msr	PRIMASK, r3
}
 8003dbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc6:	673b      	str	r3, [r7, #112]	; 0x70
 8003dc8:	2301      	movs	r3, #1
 8003dca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dce:	f383 8810 	msr	PRIMASK, r3
}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2140      	movs	r1, #64	; 0x40
 8003de0:	438a      	bics	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dea:	f383 8810 	msr	PRIMASK, r3
}
 8003dee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	228c      	movs	r2, #140	; 0x8c
 8003df4:	2120      	movs	r1, #32
 8003df6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003e02:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e08:	2301      	movs	r3, #1
 8003e0a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e0e:	f383 8810 	msr	PRIMASK, r3
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2110      	movs	r1, #16
 8003e20:	438a      	bics	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e26:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2a:	f383 8810 	msr	PRIMASK, r3
}
 8003e2e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	589b      	ldr	r3, [r3, r2]
 8003e36:	0018      	movs	r0, r3
 8003e38:	f7ff f9a6 	bl	8003188 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	225c      	movs	r2, #92	; 0x5c
 8003e46:	5a9a      	ldrh	r2, [r3, r2]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	215e      	movs	r1, #94	; 0x5e
 8003e4c:	5a5b      	ldrh	r3, [r3, r1]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f000 f90d 	bl	8004078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e5e:	e0ed      	b.n	800403c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	225c      	movs	r2, #92	; 0x5c
 8003e64:	5a99      	ldrh	r1, [r3, r2]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	225e      	movs	r2, #94	; 0x5e
 8003e6a:	5a9b      	ldrh	r3, [r3, r2]
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	208e      	movs	r0, #142	; 0x8e
 8003e70:	183b      	adds	r3, r7, r0
 8003e72:	1a8a      	subs	r2, r1, r2
 8003e74:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	225e      	movs	r2, #94	; 0x5e
 8003e7a:	5a9b      	ldrh	r3, [r3, r2]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d100      	bne.n	8003e84 <HAL_UART_IRQHandler+0x478>
 8003e82:	e0dd      	b.n	8004040 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003e84:	183b      	adds	r3, r7, r0
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d100      	bne.n	8003e8e <HAL_UART_IRQHandler+0x482>
 8003e8c:	e0d8      	b.n	8004040 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e94:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e96:	2488      	movs	r4, #136	; 0x88
 8003e98:	193a      	adds	r2, r7, r4
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f383 8810 	msr	PRIMASK, r3
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4967      	ldr	r1, [pc, #412]	; (8004050 <HAL_UART_IRQHandler+0x644>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	193b      	adds	r3, r7, r4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f383 8810 	msr	PRIMASK, r3
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eca:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ecc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ece:	2484      	movs	r4, #132	; 0x84
 8003ed0:	193a      	adds	r2, r7, r4
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	495a      	ldr	r1, [pc, #360]	; (8004054 <HAL_UART_IRQHandler+0x648>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	193b      	adds	r3, r7, r4
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f383 8810 	msr	PRIMASK, r3
}
 8003efc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	228c      	movs	r2, #140	; 0x8c
 8003f02:	2120      	movs	r1, #32
 8003f04:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f12:	f3ef 8310 	mrs	r3, PRIMASK
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1a:	2480      	movs	r4, #128	; 0x80
 8003f1c:	193a      	adds	r2, r7, r4
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	2301      	movs	r3, #1
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	f383 8810 	msr	PRIMASK, r3
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2110      	movs	r1, #16
 8003f38:	438a      	bics	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	f383 8810 	msr	PRIMASK, r3
}
 8003f48:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f50:	183b      	adds	r3, r7, r0
 8003f52:	881a      	ldrh	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	0011      	movs	r1, r2
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f000 f88d 	bl	8004078 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f5e:	e06f      	b.n	8004040 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f60:	23a4      	movs	r3, #164	; 0xa4
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	2380      	movs	r3, #128	; 0x80
 8003f68:	035b      	lsls	r3, r3, #13
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d010      	beq.n	8003f90 <HAL_UART_IRQHandler+0x584>
 8003f6e:	239c      	movs	r3, #156	; 0x9c
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	03db      	lsls	r3, r3, #15
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d009      	beq.n	8003f90 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	0352      	lsls	r2, r2, #13
 8003f84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f001 fc9f 	bl	80058cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f8e:	e05a      	b.n	8004046 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003f90:	23a4      	movs	r3, #164	; 0xa4
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d016      	beq.n	8003fca <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003f9c:	23a0      	movs	r3, #160	; 0xa0
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2280      	movs	r2, #128	; 0x80
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d106      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003fa8:	239c      	movs	r3, #156	; 0x9c
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d009      	beq.n	8003fca <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d042      	beq.n	8004044 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	0010      	movs	r0, r2
 8003fc6:	4798      	blx	r3
    }
    return;
 8003fc8:	e03c      	b.n	8004044 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fca:	23a4      	movs	r3, #164	; 0xa4
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2240      	movs	r2, #64	; 0x40
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d00a      	beq.n	8003fec <HAL_UART_IRQHandler+0x5e0>
 8003fd6:	23a0      	movs	r3, #160	; 0xa0
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2240      	movs	r2, #64	; 0x40
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d004      	beq.n	8003fec <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f000 ff18 	bl	8004e1a <UART_EndTransmit_IT>
    return;
 8003fea:	e02c      	b.n	8004046 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003fec:	23a4      	movs	r3, #164	; 0xa4
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	041b      	lsls	r3, r3, #16
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d00b      	beq.n	8004012 <HAL_UART_IRQHandler+0x606>
 8003ffa:	23a0      	movs	r3, #160	; 0xa0
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	05db      	lsls	r3, r3, #23
 8004004:	4013      	ands	r3, r2
 8004006:	d004      	beq.n	8004012 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	0018      	movs	r0, r3
 800400c:	f001 fc6e 	bl	80058ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004010:	e019      	b.n	8004046 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004012:	23a4      	movs	r3, #164	; 0xa4
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	045b      	lsls	r3, r3, #17
 800401c:	4013      	ands	r3, r2
 800401e:	d012      	beq.n	8004046 <HAL_UART_IRQHandler+0x63a>
 8004020:	23a0      	movs	r3, #160	; 0xa0
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	da0d      	bge.n	8004046 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0018      	movs	r0, r3
 800402e:	f001 fc55 	bl	80058dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004032:	e008      	b.n	8004046 <HAL_UART_IRQHandler+0x63a>
      return;
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	e006      	b.n	8004046 <HAL_UART_IRQHandler+0x63a>
    return;
 8004038:	46c0      	nop			; (mov r8, r8)
 800403a:	e004      	b.n	8004046 <HAL_UART_IRQHandler+0x63a>
      return;
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	e002      	b.n	8004046 <HAL_UART_IRQHandler+0x63a>
      return;
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	e000      	b.n	8004046 <HAL_UART_IRQHandler+0x63a>
    return;
 8004044:	46c0      	nop			; (mov r8, r8)
  }
}
 8004046:	46bd      	mov	sp, r7
 8004048:	b02a      	add	sp, #168	; 0xa8
 800404a:	bdb0      	pop	{r4, r5, r7, pc}
 800404c:	fffffeff 	.word	0xfffffeff
 8004050:	fffffedf 	.word	0xfffffedf
 8004054:	effffffe 	.word	0xeffffffe

08004058 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004060:	46c0      	nop			; (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b002      	add	sp, #8
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b002      	add	sp, #8
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	000a      	movs	r2, r1
 8004082:	1cbb      	adds	r3, r7, #2
 8004084:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004090:	b5b0      	push	{r4, r5, r7, lr}
 8004092:	b090      	sub	sp, #64	; 0x40
 8004094:	af00      	add	r7, sp, #0
 8004096:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004098:	231a      	movs	r3, #26
 800409a:	2220      	movs	r2, #32
 800409c:	189b      	adds	r3, r3, r2
 800409e:	19db      	adds	r3, r3, r7
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	431a      	orrs	r2, r3
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4ac1      	ldr	r2, [pc, #772]	; (80043c8 <UART_SetConfig+0x338>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	0019      	movs	r1, r3
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ce:	430b      	orrs	r3, r1
 80040d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4abc      	ldr	r2, [pc, #752]	; (80043cc <UART_SetConfig+0x33c>)
 80040da:	4013      	ands	r3, r2
 80040dc:	0018      	movs	r0, r3
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	68d9      	ldr	r1, [r3, #12]
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	0003      	movs	r3, r0
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4ab6      	ldr	r2, [pc, #728]	; (80043d0 <UART_SetConfig+0x340>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d009      	beq.n	8004110 <UART_SetConfig+0x80>
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4ab4      	ldr	r2, [pc, #720]	; (80043d4 <UART_SetConfig+0x344>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d004      	beq.n	8004110 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800410c:	4313      	orrs	r3, r2
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	4ab0      	ldr	r2, [pc, #704]	; (80043d8 <UART_SetConfig+0x348>)
 8004118:	4013      	ands	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	430b      	orrs	r3, r1
 8004124:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	220f      	movs	r2, #15
 800412e:	4393      	bics	r3, r2
 8004130:	0018      	movs	r0, r3
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	0003      	movs	r3, r0
 800413c:	430b      	orrs	r3, r1
 800413e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4aa5      	ldr	r2, [pc, #660]	; (80043dc <UART_SetConfig+0x34c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d131      	bne.n	80041ae <UART_SetConfig+0x11e>
 800414a:	4ba5      	ldr	r3, [pc, #660]	; (80043e0 <UART_SetConfig+0x350>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	2203      	movs	r2, #3
 8004150:	4013      	ands	r3, r2
 8004152:	2b03      	cmp	r3, #3
 8004154:	d01d      	beq.n	8004192 <UART_SetConfig+0x102>
 8004156:	d823      	bhi.n	80041a0 <UART_SetConfig+0x110>
 8004158:	2b02      	cmp	r3, #2
 800415a:	d00c      	beq.n	8004176 <UART_SetConfig+0xe6>
 800415c:	d820      	bhi.n	80041a0 <UART_SetConfig+0x110>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <UART_SetConfig+0xd8>
 8004162:	2b01      	cmp	r3, #1
 8004164:	d00e      	beq.n	8004184 <UART_SetConfig+0xf4>
 8004166:	e01b      	b.n	80041a0 <UART_SetConfig+0x110>
 8004168:	231b      	movs	r3, #27
 800416a:	2220      	movs	r2, #32
 800416c:	189b      	adds	r3, r3, r2
 800416e:	19db      	adds	r3, r3, r7
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e154      	b.n	8004420 <UART_SetConfig+0x390>
 8004176:	231b      	movs	r3, #27
 8004178:	2220      	movs	r2, #32
 800417a:	189b      	adds	r3, r3, r2
 800417c:	19db      	adds	r3, r3, r7
 800417e:	2202      	movs	r2, #2
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e14d      	b.n	8004420 <UART_SetConfig+0x390>
 8004184:	231b      	movs	r3, #27
 8004186:	2220      	movs	r2, #32
 8004188:	189b      	adds	r3, r3, r2
 800418a:	19db      	adds	r3, r3, r7
 800418c:	2204      	movs	r2, #4
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e146      	b.n	8004420 <UART_SetConfig+0x390>
 8004192:	231b      	movs	r3, #27
 8004194:	2220      	movs	r2, #32
 8004196:	189b      	adds	r3, r3, r2
 8004198:	19db      	adds	r3, r3, r7
 800419a:	2208      	movs	r2, #8
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e13f      	b.n	8004420 <UART_SetConfig+0x390>
 80041a0:	231b      	movs	r3, #27
 80041a2:	2220      	movs	r2, #32
 80041a4:	189b      	adds	r3, r3, r2
 80041a6:	19db      	adds	r3, r3, r7
 80041a8:	2210      	movs	r2, #16
 80041aa:	701a      	strb	r2, [r3, #0]
 80041ac:	e138      	b.n	8004420 <UART_SetConfig+0x390>
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a8c      	ldr	r2, [pc, #560]	; (80043e4 <UART_SetConfig+0x354>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d131      	bne.n	800421c <UART_SetConfig+0x18c>
 80041b8:	4b89      	ldr	r3, [pc, #548]	; (80043e0 <UART_SetConfig+0x350>)
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	220c      	movs	r2, #12
 80041be:	4013      	ands	r3, r2
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d01d      	beq.n	8004200 <UART_SetConfig+0x170>
 80041c4:	d823      	bhi.n	800420e <UART_SetConfig+0x17e>
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d00c      	beq.n	80041e4 <UART_SetConfig+0x154>
 80041ca:	d820      	bhi.n	800420e <UART_SetConfig+0x17e>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <UART_SetConfig+0x146>
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d00e      	beq.n	80041f2 <UART_SetConfig+0x162>
 80041d4:	e01b      	b.n	800420e <UART_SetConfig+0x17e>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2220      	movs	r2, #32
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e11d      	b.n	8004420 <UART_SetConfig+0x390>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2220      	movs	r2, #32
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	2202      	movs	r2, #2
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e116      	b.n	8004420 <UART_SetConfig+0x390>
 80041f2:	231b      	movs	r3, #27
 80041f4:	2220      	movs	r2, #32
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	19db      	adds	r3, r3, r7
 80041fa:	2204      	movs	r2, #4
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	e10f      	b.n	8004420 <UART_SetConfig+0x390>
 8004200:	231b      	movs	r3, #27
 8004202:	2220      	movs	r2, #32
 8004204:	189b      	adds	r3, r3, r2
 8004206:	19db      	adds	r3, r3, r7
 8004208:	2208      	movs	r2, #8
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e108      	b.n	8004420 <UART_SetConfig+0x390>
 800420e:	231b      	movs	r3, #27
 8004210:	2220      	movs	r2, #32
 8004212:	189b      	adds	r3, r3, r2
 8004214:	19db      	adds	r3, r3, r7
 8004216:	2210      	movs	r2, #16
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	e101      	b.n	8004420 <UART_SetConfig+0x390>
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a71      	ldr	r2, [pc, #452]	; (80043e8 <UART_SetConfig+0x358>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d131      	bne.n	800428a <UART_SetConfig+0x1fa>
 8004226:	4b6e      	ldr	r3, [pc, #440]	; (80043e0 <UART_SetConfig+0x350>)
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	2230      	movs	r2, #48	; 0x30
 800422c:	4013      	ands	r3, r2
 800422e:	2b30      	cmp	r3, #48	; 0x30
 8004230:	d01d      	beq.n	800426e <UART_SetConfig+0x1de>
 8004232:	d823      	bhi.n	800427c <UART_SetConfig+0x1ec>
 8004234:	2b20      	cmp	r3, #32
 8004236:	d00c      	beq.n	8004252 <UART_SetConfig+0x1c2>
 8004238:	d820      	bhi.n	800427c <UART_SetConfig+0x1ec>
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <UART_SetConfig+0x1b4>
 800423e:	2b10      	cmp	r3, #16
 8004240:	d00e      	beq.n	8004260 <UART_SetConfig+0x1d0>
 8004242:	e01b      	b.n	800427c <UART_SetConfig+0x1ec>
 8004244:	231b      	movs	r3, #27
 8004246:	2220      	movs	r2, #32
 8004248:	189b      	adds	r3, r3, r2
 800424a:	19db      	adds	r3, r3, r7
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	e0e6      	b.n	8004420 <UART_SetConfig+0x390>
 8004252:	231b      	movs	r3, #27
 8004254:	2220      	movs	r2, #32
 8004256:	189b      	adds	r3, r3, r2
 8004258:	19db      	adds	r3, r3, r7
 800425a:	2202      	movs	r2, #2
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e0df      	b.n	8004420 <UART_SetConfig+0x390>
 8004260:	231b      	movs	r3, #27
 8004262:	2220      	movs	r2, #32
 8004264:	189b      	adds	r3, r3, r2
 8004266:	19db      	adds	r3, r3, r7
 8004268:	2204      	movs	r2, #4
 800426a:	701a      	strb	r2, [r3, #0]
 800426c:	e0d8      	b.n	8004420 <UART_SetConfig+0x390>
 800426e:	231b      	movs	r3, #27
 8004270:	2220      	movs	r2, #32
 8004272:	189b      	adds	r3, r3, r2
 8004274:	19db      	adds	r3, r3, r7
 8004276:	2208      	movs	r2, #8
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e0d1      	b.n	8004420 <UART_SetConfig+0x390>
 800427c:	231b      	movs	r3, #27
 800427e:	2220      	movs	r2, #32
 8004280:	189b      	adds	r3, r3, r2
 8004282:	19db      	adds	r3, r3, r7
 8004284:	2210      	movs	r2, #16
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e0ca      	b.n	8004420 <UART_SetConfig+0x390>
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a57      	ldr	r2, [pc, #348]	; (80043ec <UART_SetConfig+0x35c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d106      	bne.n	80042a2 <UART_SetConfig+0x212>
 8004294:	231b      	movs	r3, #27
 8004296:	2220      	movs	r2, #32
 8004298:	189b      	adds	r3, r3, r2
 800429a:	19db      	adds	r3, r3, r7
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e0be      	b.n	8004420 <UART_SetConfig+0x390>
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a52      	ldr	r2, [pc, #328]	; (80043f0 <UART_SetConfig+0x360>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d106      	bne.n	80042ba <UART_SetConfig+0x22a>
 80042ac:	231b      	movs	r3, #27
 80042ae:	2220      	movs	r2, #32
 80042b0:	189b      	adds	r3, r3, r2
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e0b2      	b.n	8004420 <UART_SetConfig+0x390>
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a4d      	ldr	r2, [pc, #308]	; (80043f4 <UART_SetConfig+0x364>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d106      	bne.n	80042d2 <UART_SetConfig+0x242>
 80042c4:	231b      	movs	r3, #27
 80042c6:	2220      	movs	r2, #32
 80042c8:	189b      	adds	r3, r3, r2
 80042ca:	19db      	adds	r3, r3, r7
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	e0a6      	b.n	8004420 <UART_SetConfig+0x390>
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a3e      	ldr	r2, [pc, #248]	; (80043d0 <UART_SetConfig+0x340>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d13e      	bne.n	800435a <UART_SetConfig+0x2ca>
 80042dc:	4b40      	ldr	r3, [pc, #256]	; (80043e0 <UART_SetConfig+0x350>)
 80042de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042e0:	23c0      	movs	r3, #192	; 0xc0
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	4013      	ands	r3, r2
 80042e6:	22c0      	movs	r2, #192	; 0xc0
 80042e8:	0112      	lsls	r2, r2, #4
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d027      	beq.n	800433e <UART_SetConfig+0x2ae>
 80042ee:	22c0      	movs	r2, #192	; 0xc0
 80042f0:	0112      	lsls	r2, r2, #4
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d82a      	bhi.n	800434c <UART_SetConfig+0x2bc>
 80042f6:	2280      	movs	r2, #128	; 0x80
 80042f8:	0112      	lsls	r2, r2, #4
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d011      	beq.n	8004322 <UART_SetConfig+0x292>
 80042fe:	2280      	movs	r2, #128	; 0x80
 8004300:	0112      	lsls	r2, r2, #4
 8004302:	4293      	cmp	r3, r2
 8004304:	d822      	bhi.n	800434c <UART_SetConfig+0x2bc>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d004      	beq.n	8004314 <UART_SetConfig+0x284>
 800430a:	2280      	movs	r2, #128	; 0x80
 800430c:	00d2      	lsls	r2, r2, #3
 800430e:	4293      	cmp	r3, r2
 8004310:	d00e      	beq.n	8004330 <UART_SetConfig+0x2a0>
 8004312:	e01b      	b.n	800434c <UART_SetConfig+0x2bc>
 8004314:	231b      	movs	r3, #27
 8004316:	2220      	movs	r2, #32
 8004318:	189b      	adds	r3, r3, r2
 800431a:	19db      	adds	r3, r3, r7
 800431c:	2200      	movs	r2, #0
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e07e      	b.n	8004420 <UART_SetConfig+0x390>
 8004322:	231b      	movs	r3, #27
 8004324:	2220      	movs	r2, #32
 8004326:	189b      	adds	r3, r3, r2
 8004328:	19db      	adds	r3, r3, r7
 800432a:	2202      	movs	r2, #2
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e077      	b.n	8004420 <UART_SetConfig+0x390>
 8004330:	231b      	movs	r3, #27
 8004332:	2220      	movs	r2, #32
 8004334:	189b      	adds	r3, r3, r2
 8004336:	19db      	adds	r3, r3, r7
 8004338:	2204      	movs	r2, #4
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	e070      	b.n	8004420 <UART_SetConfig+0x390>
 800433e:	231b      	movs	r3, #27
 8004340:	2220      	movs	r2, #32
 8004342:	189b      	adds	r3, r3, r2
 8004344:	19db      	adds	r3, r3, r7
 8004346:	2208      	movs	r2, #8
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	e069      	b.n	8004420 <UART_SetConfig+0x390>
 800434c:	231b      	movs	r3, #27
 800434e:	2220      	movs	r2, #32
 8004350:	189b      	adds	r3, r3, r2
 8004352:	19db      	adds	r3, r3, r7
 8004354:	2210      	movs	r2, #16
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e062      	b.n	8004420 <UART_SetConfig+0x390>
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <UART_SetConfig+0x344>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d157      	bne.n	8004414 <UART_SetConfig+0x384>
 8004364:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <UART_SetConfig+0x350>)
 8004366:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004368:	23c0      	movs	r3, #192	; 0xc0
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4013      	ands	r3, r2
 800436e:	22c0      	movs	r2, #192	; 0xc0
 8004370:	0092      	lsls	r2, r2, #2
 8004372:	4293      	cmp	r3, r2
 8004374:	d040      	beq.n	80043f8 <UART_SetConfig+0x368>
 8004376:	22c0      	movs	r2, #192	; 0xc0
 8004378:	0092      	lsls	r2, r2, #2
 800437a:	4293      	cmp	r3, r2
 800437c:	d843      	bhi.n	8004406 <UART_SetConfig+0x376>
 800437e:	2280      	movs	r2, #128	; 0x80
 8004380:	0092      	lsls	r2, r2, #2
 8004382:	4293      	cmp	r3, r2
 8004384:	d011      	beq.n	80043aa <UART_SetConfig+0x31a>
 8004386:	2280      	movs	r2, #128	; 0x80
 8004388:	0092      	lsls	r2, r2, #2
 800438a:	4293      	cmp	r3, r2
 800438c:	d83b      	bhi.n	8004406 <UART_SetConfig+0x376>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d004      	beq.n	800439c <UART_SetConfig+0x30c>
 8004392:	2280      	movs	r2, #128	; 0x80
 8004394:	0052      	lsls	r2, r2, #1
 8004396:	4293      	cmp	r3, r2
 8004398:	d00e      	beq.n	80043b8 <UART_SetConfig+0x328>
 800439a:	e034      	b.n	8004406 <UART_SetConfig+0x376>
 800439c:	231b      	movs	r3, #27
 800439e:	2220      	movs	r2, #32
 80043a0:	189b      	adds	r3, r3, r2
 80043a2:	19db      	adds	r3, r3, r7
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e03a      	b.n	8004420 <UART_SetConfig+0x390>
 80043aa:	231b      	movs	r3, #27
 80043ac:	2220      	movs	r2, #32
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	19db      	adds	r3, r3, r7
 80043b2:	2202      	movs	r2, #2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e033      	b.n	8004420 <UART_SetConfig+0x390>
 80043b8:	231b      	movs	r3, #27
 80043ba:	2220      	movs	r2, #32
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	19db      	adds	r3, r3, r7
 80043c0:	2204      	movs	r2, #4
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e02c      	b.n	8004420 <UART_SetConfig+0x390>
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	cfff69f3 	.word	0xcfff69f3
 80043cc:	ffffcfff 	.word	0xffffcfff
 80043d0:	40008000 	.word	0x40008000
 80043d4:	40008400 	.word	0x40008400
 80043d8:	11fff4ff 	.word	0x11fff4ff
 80043dc:	40013800 	.word	0x40013800
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40004400 	.word	0x40004400
 80043e8:	40004800 	.word	0x40004800
 80043ec:	40004c00 	.word	0x40004c00
 80043f0:	40005000 	.word	0x40005000
 80043f4:	40013c00 	.word	0x40013c00
 80043f8:	231b      	movs	r3, #27
 80043fa:	2220      	movs	r2, #32
 80043fc:	189b      	adds	r3, r3, r2
 80043fe:	19db      	adds	r3, r3, r7
 8004400:	2208      	movs	r2, #8
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	e00c      	b.n	8004420 <UART_SetConfig+0x390>
 8004406:	231b      	movs	r3, #27
 8004408:	2220      	movs	r2, #32
 800440a:	189b      	adds	r3, r3, r2
 800440c:	19db      	adds	r3, r3, r7
 800440e:	2210      	movs	r2, #16
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	e005      	b.n	8004420 <UART_SetConfig+0x390>
 8004414:	231b      	movs	r3, #27
 8004416:	2220      	movs	r2, #32
 8004418:	189b      	adds	r3, r3, r2
 800441a:	19db      	adds	r3, r3, r7
 800441c:	2210      	movs	r2, #16
 800441e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4ac1      	ldr	r2, [pc, #772]	; (800472c <UART_SetConfig+0x69c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d005      	beq.n	8004436 <UART_SetConfig+0x3a6>
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4ac0      	ldr	r2, [pc, #768]	; (8004730 <UART_SetConfig+0x6a0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d000      	beq.n	8004436 <UART_SetConfig+0x3a6>
 8004434:	e093      	b.n	800455e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004436:	231b      	movs	r3, #27
 8004438:	2220      	movs	r2, #32
 800443a:	189b      	adds	r3, r3, r2
 800443c:	19db      	adds	r3, r3, r7
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d015      	beq.n	8004470 <UART_SetConfig+0x3e0>
 8004444:	dc18      	bgt.n	8004478 <UART_SetConfig+0x3e8>
 8004446:	2b04      	cmp	r3, #4
 8004448:	d00d      	beq.n	8004466 <UART_SetConfig+0x3d6>
 800444a:	dc15      	bgt.n	8004478 <UART_SetConfig+0x3e8>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <UART_SetConfig+0x3c6>
 8004450:	2b02      	cmp	r3, #2
 8004452:	d005      	beq.n	8004460 <UART_SetConfig+0x3d0>
 8004454:	e010      	b.n	8004478 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004456:	f7ff f963 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 800445a:	0003      	movs	r3, r0
 800445c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800445e:	e014      	b.n	800448a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004460:	4bb4      	ldr	r3, [pc, #720]	; (8004734 <UART_SetConfig+0x6a4>)
 8004462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004464:	e011      	b.n	800448a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004466:	f7ff f8cf 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 800446a:	0003      	movs	r3, r0
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800446e:	e00c      	b.n	800448a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004476:	e008      	b.n	800448a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800447c:	231a      	movs	r3, #26
 800447e:	2220      	movs	r2, #32
 8004480:	189b      	adds	r3, r3, r2
 8004482:	19db      	adds	r3, r3, r7
 8004484:	2201      	movs	r2, #1
 8004486:	701a      	strb	r2, [r3, #0]
        break;
 8004488:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800448a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448c:	2b00      	cmp	r3, #0
 800448e:	d100      	bne.n	8004492 <UART_SetConfig+0x402>
 8004490:	e135      	b.n	80046fe <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004496:	4ba8      	ldr	r3, [pc, #672]	; (8004738 <UART_SetConfig+0x6a8>)
 8004498:	0052      	lsls	r2, r2, #1
 800449a:	5ad3      	ldrh	r3, [r2, r3]
 800449c:	0019      	movs	r1, r3
 800449e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044a0:	f7fb fe42 	bl	8000128 <__udivsi3>
 80044a4:	0003      	movs	r3, r0
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	0013      	movs	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	189b      	adds	r3, r3, r2
 80044b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d305      	bcc.n	80044c4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d906      	bls.n	80044d2 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80044c4:	231a      	movs	r3, #26
 80044c6:	2220      	movs	r2, #32
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	19db      	adds	r3, r3, r7
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
 80044d0:	e044      	b.n	800455c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044de:	4b96      	ldr	r3, [pc, #600]	; (8004738 <UART_SetConfig+0x6a8>)
 80044e0:	0052      	lsls	r2, r2, #1
 80044e2:	5ad3      	ldrh	r3, [r2, r3]
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	69b8      	ldr	r0, [r7, #24]
 80044f0:	69f9      	ldr	r1, [r7, #28]
 80044f2:	f7fb ffcd 	bl	8000490 <__aeabi_uldivmod>
 80044f6:	0002      	movs	r2, r0
 80044f8:	000b      	movs	r3, r1
 80044fa:	0e11      	lsrs	r1, r2, #24
 80044fc:	021d      	lsls	r5, r3, #8
 80044fe:	430d      	orrs	r5, r1
 8004500:	0214      	lsls	r4, r2, #8
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68b8      	ldr	r0, [r7, #8]
 8004510:	68f9      	ldr	r1, [r7, #12]
 8004512:	1900      	adds	r0, r0, r4
 8004514:	4169      	adcs	r1, r5
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	2300      	movs	r3, #0
 800451e:	607b      	str	r3, [r7, #4]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f7fb ffb4 	bl	8000490 <__aeabi_uldivmod>
 8004528:	0002      	movs	r2, r0
 800452a:	000b      	movs	r3, r1
 800452c:	0013      	movs	r3, r2
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004532:	23c0      	movs	r3, #192	; 0xc0
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	429a      	cmp	r2, r3
 8004538:	d309      	bcc.n	800454e <UART_SetConfig+0x4be>
 800453a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	035b      	lsls	r3, r3, #13
 8004540:	429a      	cmp	r2, r3
 8004542:	d204      	bcs.n	800454e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454a:	60da      	str	r2, [r3, #12]
 800454c:	e006      	b.n	800455c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800454e:	231a      	movs	r3, #26
 8004550:	2220      	movs	r2, #32
 8004552:	189b      	adds	r3, r3, r2
 8004554:	19db      	adds	r3, r3, r7
 8004556:	2201      	movs	r2, #1
 8004558:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800455a:	e0d0      	b.n	80046fe <UART_SetConfig+0x66e>
 800455c:	e0cf      	b.n	80046fe <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	69da      	ldr	r2, [r3, #28]
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	429a      	cmp	r2, r3
 8004568:	d000      	beq.n	800456c <UART_SetConfig+0x4dc>
 800456a:	e070      	b.n	800464e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800456c:	231b      	movs	r3, #27
 800456e:	2220      	movs	r2, #32
 8004570:	189b      	adds	r3, r3, r2
 8004572:	19db      	adds	r3, r3, r7
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b08      	cmp	r3, #8
 8004578:	d015      	beq.n	80045a6 <UART_SetConfig+0x516>
 800457a:	dc18      	bgt.n	80045ae <UART_SetConfig+0x51e>
 800457c:	2b04      	cmp	r3, #4
 800457e:	d00d      	beq.n	800459c <UART_SetConfig+0x50c>
 8004580:	dc15      	bgt.n	80045ae <UART_SetConfig+0x51e>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d002      	beq.n	800458c <UART_SetConfig+0x4fc>
 8004586:	2b02      	cmp	r3, #2
 8004588:	d005      	beq.n	8004596 <UART_SetConfig+0x506>
 800458a:	e010      	b.n	80045ae <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800458c:	f7ff f8c8 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8004590:	0003      	movs	r3, r0
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004594:	e014      	b.n	80045c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004596:	4b67      	ldr	r3, [pc, #412]	; (8004734 <UART_SetConfig+0x6a4>)
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800459a:	e011      	b.n	80045c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800459c:	f7ff f834 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 80045a0:	0003      	movs	r3, r0
 80045a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045a4:	e00c      	b.n	80045c0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045a6:	2380      	movs	r3, #128	; 0x80
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045ac:	e008      	b.n	80045c0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80045b2:	231a      	movs	r3, #26
 80045b4:	2220      	movs	r2, #32
 80045b6:	189b      	adds	r3, r3, r2
 80045b8:	19db      	adds	r3, r3, r7
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
        break;
 80045be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d100      	bne.n	80045c8 <UART_SetConfig+0x538>
 80045c6:	e09a      	b.n	80046fe <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045cc:	4b5a      	ldr	r3, [pc, #360]	; (8004738 <UART_SetConfig+0x6a8>)
 80045ce:	0052      	lsls	r2, r2, #1
 80045d0:	5ad3      	ldrh	r3, [r2, r3]
 80045d2:	0019      	movs	r1, r3
 80045d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045d6:	f7fb fda7 	bl	8000128 <__udivsi3>
 80045da:	0003      	movs	r3, r0
 80045dc:	005a      	lsls	r2, r3, #1
 80045de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	18d2      	adds	r2, r2, r3
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	0019      	movs	r1, r3
 80045ec:	0010      	movs	r0, r2
 80045ee:	f7fb fd9b 	bl	8000128 <__udivsi3>
 80045f2:	0003      	movs	r3, r0
 80045f4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	2b0f      	cmp	r3, #15
 80045fa:	d921      	bls.n	8004640 <UART_SetConfig+0x5b0>
 80045fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	025b      	lsls	r3, r3, #9
 8004602:	429a      	cmp	r2, r3
 8004604:	d21c      	bcs.n	8004640 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	b29a      	uxth	r2, r3
 800460a:	200e      	movs	r0, #14
 800460c:	2420      	movs	r4, #32
 800460e:	1903      	adds	r3, r0, r4
 8004610:	19db      	adds	r3, r3, r7
 8004612:	210f      	movs	r1, #15
 8004614:	438a      	bics	r2, r1
 8004616:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	b29b      	uxth	r3, r3
 800461e:	2207      	movs	r2, #7
 8004620:	4013      	ands	r3, r2
 8004622:	b299      	uxth	r1, r3
 8004624:	1903      	adds	r3, r0, r4
 8004626:	19db      	adds	r3, r3, r7
 8004628:	1902      	adds	r2, r0, r4
 800462a:	19d2      	adds	r2, r2, r7
 800462c:	8812      	ldrh	r2, [r2, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	1902      	adds	r2, r0, r4
 8004638:	19d2      	adds	r2, r2, r7
 800463a:	8812      	ldrh	r2, [r2, #0]
 800463c:	60da      	str	r2, [r3, #12]
 800463e:	e05e      	b.n	80046fe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004640:	231a      	movs	r3, #26
 8004642:	2220      	movs	r2, #32
 8004644:	189b      	adds	r3, r3, r2
 8004646:	19db      	adds	r3, r3, r7
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e057      	b.n	80046fe <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800464e:	231b      	movs	r3, #27
 8004650:	2220      	movs	r2, #32
 8004652:	189b      	adds	r3, r3, r2
 8004654:	19db      	adds	r3, r3, r7
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d015      	beq.n	8004688 <UART_SetConfig+0x5f8>
 800465c:	dc18      	bgt.n	8004690 <UART_SetConfig+0x600>
 800465e:	2b04      	cmp	r3, #4
 8004660:	d00d      	beq.n	800467e <UART_SetConfig+0x5ee>
 8004662:	dc15      	bgt.n	8004690 <UART_SetConfig+0x600>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <UART_SetConfig+0x5de>
 8004668:	2b02      	cmp	r3, #2
 800466a:	d005      	beq.n	8004678 <UART_SetConfig+0x5e8>
 800466c:	e010      	b.n	8004690 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466e:	f7ff f857 	bl	8003720 <HAL_RCC_GetPCLK1Freq>
 8004672:	0003      	movs	r3, r0
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004676:	e014      	b.n	80046a2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004678:	4b2e      	ldr	r3, [pc, #184]	; (8004734 <UART_SetConfig+0x6a4>)
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800467c:	e011      	b.n	80046a2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467e:	f7fe ffc3 	bl	8003608 <HAL_RCC_GetSysClockFreq>
 8004682:	0003      	movs	r3, r0
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004686:	e00c      	b.n	80046a2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800468e:	e008      	b.n	80046a2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004694:	231a      	movs	r3, #26
 8004696:	2220      	movs	r2, #32
 8004698:	189b      	adds	r3, r3, r2
 800469a:	19db      	adds	r3, r3, r7
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
        break;
 80046a0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d02a      	beq.n	80046fe <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ac:	4b22      	ldr	r3, [pc, #136]	; (8004738 <UART_SetConfig+0x6a8>)
 80046ae:	0052      	lsls	r2, r2, #1
 80046b0:	5ad3      	ldrh	r3, [r2, r3]
 80046b2:	0019      	movs	r1, r3
 80046b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80046b6:	f7fb fd37 	bl	8000128 <__udivsi3>
 80046ba:	0003      	movs	r3, r0
 80046bc:	001a      	movs	r2, r3
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	085b      	lsrs	r3, r3, #1
 80046c4:	18d2      	adds	r2, r2, r3
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	0019      	movs	r1, r3
 80046cc:	0010      	movs	r0, r2
 80046ce:	f7fb fd2b 	bl	8000128 <__udivsi3>
 80046d2:	0003      	movs	r3, r0
 80046d4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	2b0f      	cmp	r3, #15
 80046da:	d90a      	bls.n	80046f2 <UART_SetConfig+0x662>
 80046dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	025b      	lsls	r3, r3, #9
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d205      	bcs.n	80046f2 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	60da      	str	r2, [r3, #12]
 80046f0:	e005      	b.n	80046fe <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80046f2:	231a      	movs	r3, #26
 80046f4:	2220      	movs	r2, #32
 80046f6:	189b      	adds	r3, r3, r2
 80046f8:	19db      	adds	r3, r3, r7
 80046fa:	2201      	movs	r2, #1
 80046fc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	226a      	movs	r2, #106	; 0x6a
 8004702:	2101      	movs	r1, #1
 8004704:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	2268      	movs	r2, #104	; 0x68
 800470a:	2101      	movs	r1, #1
 800470c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	2200      	movs	r2, #0
 8004712:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	2200      	movs	r2, #0
 8004718:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800471a:	231a      	movs	r3, #26
 800471c:	2220      	movs	r2, #32
 800471e:	189b      	adds	r3, r3, r2
 8004720:	19db      	adds	r3, r3, r7
 8004722:	781b      	ldrb	r3, [r3, #0]
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b010      	add	sp, #64	; 0x40
 800472a:	bdb0      	pop	{r4, r5, r7, pc}
 800472c:	40008000 	.word	0x40008000
 8004730:	40008400 	.word	0x40008400
 8004734:	00f42400 	.word	0x00f42400
 8004738:	08007b28 	.word	0x08007b28

0800473c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	2208      	movs	r2, #8
 800474a:	4013      	ands	r3, r2
 800474c:	d00b      	beq.n	8004766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	4a4a      	ldr	r2, [pc, #296]	; (8004880 <UART_AdvFeatureConfig+0x144>)
 8004756:	4013      	ands	r3, r2
 8004758:	0019      	movs	r1, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	2201      	movs	r2, #1
 800476c:	4013      	ands	r3, r2
 800476e:	d00b      	beq.n	8004788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4a43      	ldr	r2, [pc, #268]	; (8004884 <UART_AdvFeatureConfig+0x148>)
 8004778:	4013      	ands	r3, r2
 800477a:	0019      	movs	r1, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	2202      	movs	r2, #2
 800478e:	4013      	ands	r3, r2
 8004790:	d00b      	beq.n	80047aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a3b      	ldr	r2, [pc, #236]	; (8004888 <UART_AdvFeatureConfig+0x14c>)
 800479a:	4013      	ands	r3, r2
 800479c:	0019      	movs	r1, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	2204      	movs	r2, #4
 80047b0:	4013      	ands	r3, r2
 80047b2:	d00b      	beq.n	80047cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4a34      	ldr	r2, [pc, #208]	; (800488c <UART_AdvFeatureConfig+0x150>)
 80047bc:	4013      	ands	r3, r2
 80047be:	0019      	movs	r1, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	2210      	movs	r2, #16
 80047d2:	4013      	ands	r3, r2
 80047d4:	d00b      	beq.n	80047ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a2c      	ldr	r2, [pc, #176]	; (8004890 <UART_AdvFeatureConfig+0x154>)
 80047de:	4013      	ands	r3, r2
 80047e0:	0019      	movs	r1, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f2:	2220      	movs	r2, #32
 80047f4:	4013      	ands	r3, r2
 80047f6:	d00b      	beq.n	8004810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	4a25      	ldr	r2, [pc, #148]	; (8004894 <UART_AdvFeatureConfig+0x158>)
 8004800:	4013      	ands	r3, r2
 8004802:	0019      	movs	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	2240      	movs	r2, #64	; 0x40
 8004816:	4013      	ands	r3, r2
 8004818:	d01d      	beq.n	8004856 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a1d      	ldr	r2, [pc, #116]	; (8004898 <UART_AdvFeatureConfig+0x15c>)
 8004822:	4013      	ands	r3, r2
 8004824:	0019      	movs	r1, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004836:	2380      	movs	r3, #128	; 0x80
 8004838:	035b      	lsls	r3, r3, #13
 800483a:	429a      	cmp	r2, r3
 800483c:	d10b      	bne.n	8004856 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	4a15      	ldr	r2, [pc, #84]	; (800489c <UART_AdvFeatureConfig+0x160>)
 8004846:	4013      	ands	r3, r2
 8004848:	0019      	movs	r1, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	4013      	ands	r3, r2
 800485e:	d00b      	beq.n	8004878 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <UART_AdvFeatureConfig+0x164>)
 8004868:	4013      	ands	r3, r2
 800486a:	0019      	movs	r1, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
  }
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b002      	add	sp, #8
 800487e:	bd80      	pop	{r7, pc}
 8004880:	ffff7fff 	.word	0xffff7fff
 8004884:	fffdffff 	.word	0xfffdffff
 8004888:	fffeffff 	.word	0xfffeffff
 800488c:	fffbffff 	.word	0xfffbffff
 8004890:	ffffefff 	.word	0xffffefff
 8004894:	ffffdfff 	.word	0xffffdfff
 8004898:	ffefffff 	.word	0xffefffff
 800489c:	ff9fffff 	.word	0xff9fffff
 80048a0:	fff7ffff 	.word	0xfff7ffff

080048a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b092      	sub	sp, #72	; 0x48
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2290      	movs	r2, #144	; 0x90
 80048b0:	2100      	movs	r1, #0
 80048b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048b4:	f7fe fb74 	bl	8002fa0 <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2208      	movs	r2, #8
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d12d      	bne.n	8004926 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048cc:	2280      	movs	r2, #128	; 0x80
 80048ce:	0391      	lsls	r1, r2, #14
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4a47      	ldr	r2, [pc, #284]	; (80049f0 <UART_CheckIdleState+0x14c>)
 80048d4:	9200      	str	r2, [sp, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f000 f88e 	bl	80049f8 <UART_WaitOnFlagUntilTimeout>
 80048dc:	1e03      	subs	r3, r0, #0
 80048de:	d022      	beq.n	8004926 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e0:	f3ef 8310 	mrs	r3, PRIMASK
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80048e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80048ea:	2301      	movs	r3, #1
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	f383 8810 	msr	PRIMASK, r3
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2180      	movs	r1, #128	; 0x80
 8004902:	438a      	bics	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490c:	f383 8810 	msr	PRIMASK, r3
}
 8004910:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2288      	movs	r2, #136	; 0x88
 8004916:	2120      	movs	r1, #32
 8004918:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2284      	movs	r2, #132	; 0x84
 800491e:	2100      	movs	r1, #0
 8004920:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e060      	b.n	80049e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2204      	movs	r2, #4
 800492e:	4013      	ands	r3, r2
 8004930:	2b04      	cmp	r3, #4
 8004932:	d146      	bne.n	80049c2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004936:	2280      	movs	r2, #128	; 0x80
 8004938:	03d1      	lsls	r1, r2, #15
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4a2c      	ldr	r2, [pc, #176]	; (80049f0 <UART_CheckIdleState+0x14c>)
 800493e:	9200      	str	r2, [sp, #0]
 8004940:	2200      	movs	r2, #0
 8004942:	f000 f859 	bl	80049f8 <UART_WaitOnFlagUntilTimeout>
 8004946:	1e03      	subs	r3, r0, #0
 8004948:	d03b      	beq.n	80049c2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494a:	f3ef 8310 	mrs	r3, PRIMASK
 800494e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004950:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
 8004954:	2301      	movs	r3, #1
 8004956:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f383 8810 	msr	PRIMASK, r3
}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4922      	ldr	r1, [pc, #136]	; (80049f4 <UART_CheckIdleState+0x150>)
 800496c:	400a      	ands	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004972:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f383 8810 	msr	PRIMASK, r3
}
 800497a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497c:	f3ef 8310 	mrs	r3, PRIMASK
 8004980:	61bb      	str	r3, [r7, #24]
  return(result);
 8004982:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004984:	633b      	str	r3, [r7, #48]	; 0x30
 8004986:	2301      	movs	r3, #1
 8004988:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			; (mov r8, r8)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2101      	movs	r1, #1
 800499e:	438a      	bics	r2, r1
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	228c      	movs	r2, #140	; 0x8c
 80049b2:	2120      	movs	r1, #32
 80049b4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2284      	movs	r2, #132	; 0x84
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e012      	b.n	80049e8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2288      	movs	r2, #136	; 0x88
 80049c6:	2120      	movs	r1, #32
 80049c8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	228c      	movs	r2, #140	; 0x8c
 80049ce:	2120      	movs	r1, #32
 80049d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2284      	movs	r2, #132	; 0x84
 80049e2:	2100      	movs	r1, #0
 80049e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	0018      	movs	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b010      	add	sp, #64	; 0x40
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	01ffffff 	.word	0x01ffffff
 80049f4:	fffffedf 	.word	0xfffffedf

080049f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	603b      	str	r3, [r7, #0]
 8004a04:	1dfb      	adds	r3, r7, #7
 8004a06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a08:	e051      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	d04e      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a10:	f7fe fac6 	bl	8002fa0 <HAL_GetTick>
 8004a14:	0002      	movs	r2, r0
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e051      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2204      	movs	r2, #4
 8004a32:	4013      	ands	r3, r2
 8004a34:	d03b      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b80      	cmp	r3, #128	; 0x80
 8004a3a:	d038      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d035      	beq.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d111      	bne.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2208      	movs	r2, #8
 8004a56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f000 f960 	bl	8004d20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2290      	movs	r2, #144	; 0x90
 8004a64:	2108      	movs	r1, #8
 8004a66:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2284      	movs	r2, #132	; 0x84
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e02c      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	2380      	movs	r3, #128	; 0x80
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	401a      	ands	r2, r3
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d112      	bne.n	8004aae <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	0112      	lsls	r2, r2, #4
 8004a90:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f000 f943 	bl	8004d20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2290      	movs	r2, #144	; 0x90
 8004a9e:	2120      	movs	r1, #32
 8004aa0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2284      	movs	r2, #132	; 0x84
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e00f      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	425a      	negs	r2, r3
 8004abe:	4153      	adcs	r3, r2
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	1dfb      	adds	r3, r7, #7
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d09e      	beq.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	0018      	movs	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b004      	add	sp, #16
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b098      	sub	sp, #96	; 0x60
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	1dbb      	adds	r3, r7, #6
 8004ae4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	1dba      	adds	r2, r7, #6
 8004af0:	215c      	movs	r1, #92	; 0x5c
 8004af2:	8812      	ldrh	r2, [r2, #0]
 8004af4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1dba      	adds	r2, r7, #6
 8004afa:	215e      	movs	r1, #94	; 0x5e
 8004afc:	8812      	ldrh	r2, [r2, #0]
 8004afe:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	015b      	lsls	r3, r3, #5
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d10d      	bne.n	8004b2e <UART_Start_Receive_IT+0x56>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <UART_Start_Receive_IT+0x4c>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2260      	movs	r2, #96	; 0x60
 8004b1e:	497b      	ldr	r1, [pc, #492]	; (8004d0c <UART_Start_Receive_IT+0x234>)
 8004b20:	5299      	strh	r1, [r3, r2]
 8004b22:	e02e      	b.n	8004b82 <UART_Start_Receive_IT+0xaa>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2260      	movs	r2, #96	; 0x60
 8004b28:	21ff      	movs	r1, #255	; 0xff
 8004b2a:	5299      	strh	r1, [r3, r2]
 8004b2c:	e029      	b.n	8004b82 <UART_Start_Receive_IT+0xaa>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <UART_Start_Receive_IT+0x7a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <UART_Start_Receive_IT+0x70>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2260      	movs	r2, #96	; 0x60
 8004b42:	21ff      	movs	r1, #255	; 0xff
 8004b44:	5299      	strh	r1, [r3, r2]
 8004b46:	e01c      	b.n	8004b82 <UART_Start_Receive_IT+0xaa>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2260      	movs	r2, #96	; 0x60
 8004b4c:	217f      	movs	r1, #127	; 0x7f
 8004b4e:	5299      	strh	r1, [r3, r2]
 8004b50:	e017      	b.n	8004b82 <UART_Start_Receive_IT+0xaa>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	055b      	lsls	r3, r3, #21
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d10d      	bne.n	8004b7a <UART_Start_Receive_IT+0xa2>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d104      	bne.n	8004b70 <UART_Start_Receive_IT+0x98>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2260      	movs	r2, #96	; 0x60
 8004b6a:	217f      	movs	r1, #127	; 0x7f
 8004b6c:	5299      	strh	r1, [r3, r2]
 8004b6e:	e008      	b.n	8004b82 <UART_Start_Receive_IT+0xaa>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2260      	movs	r2, #96	; 0x60
 8004b74:	213f      	movs	r1, #63	; 0x3f
 8004b76:	5299      	strh	r1, [r3, r2]
 8004b78:	e003      	b.n	8004b82 <UART_Start_Receive_IT+0xaa>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2260      	movs	r2, #96	; 0x60
 8004b7e:	2100      	movs	r1, #0
 8004b80:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2290      	movs	r2, #144	; 0x90
 8004b86:	2100      	movs	r1, #0
 8004b88:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	228c      	movs	r2, #140	; 0x8c
 8004b8e:	2122      	movs	r1, #34	; 0x22
 8004b90:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b92:	f3ef 8310 	mrs	r3, PRIMASK
 8004b96:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			; (mov r8, r8)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
 8004bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bba:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bbe:	f383 8810 	msr	PRIMASK, r3
}
 8004bc2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	059b      	lsls	r3, r3, #22
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d150      	bne.n	8004c72 <UART_Start_Receive_IT+0x19a>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2268      	movs	r2, #104	; 0x68
 8004bd4:	5a9b      	ldrh	r3, [r3, r2]
 8004bd6:	1dba      	adds	r2, r7, #6
 8004bd8:	8812      	ldrh	r2, [r2, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d349      	bcc.n	8004c72 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	015b      	lsls	r3, r3, #5
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d107      	bne.n	8004bfa <UART_Start_Receive_IT+0x122>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d103      	bne.n	8004bfa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4a46      	ldr	r2, [pc, #280]	; (8004d10 <UART_Start_Receive_IT+0x238>)
 8004bf6:	675a      	str	r2, [r3, #116]	; 0x74
 8004bf8:	e002      	b.n	8004c00 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a45      	ldr	r2, [pc, #276]	; (8004d14 <UART_Start_Receive_IT+0x23c>)
 8004bfe:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d019      	beq.n	8004c3c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c08:	f3ef 8310 	mrs	r3, PRIMASK
 8004c0c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c12:	2301      	movs	r3, #1
 8004c14:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	f383 8810 	msr	PRIMASK, r3
}
 8004c1c:	46c0      	nop			; (mov r8, r8)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2180      	movs	r1, #128	; 0x80
 8004c2a:	0049      	lsls	r1, r1, #1
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c36:	f383 8810 	msr	PRIMASK, r3
}
 8004c3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c40:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c44:	657b      	str	r3, [r7, #84]	; 0x54
 8004c46:	2301      	movs	r3, #1
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	f383 8810 	msr	PRIMASK, r3
}
 8004c50:	46c0      	nop			; (mov r8, r8)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2180      	movs	r1, #128	; 0x80
 8004c5e:	0549      	lsls	r1, r1, #21
 8004c60:	430a      	orrs	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	f383 8810 	msr	PRIMASK, r3
}
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	e047      	b.n	8004d02 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	2380      	movs	r3, #128	; 0x80
 8004c78:	015b      	lsls	r3, r3, #5
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d107      	bne.n	8004c8e <UART_Start_Receive_IT+0x1b6>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a23      	ldr	r2, [pc, #140]	; (8004d18 <UART_Start_Receive_IT+0x240>)
 8004c8a:	675a      	str	r2, [r3, #116]	; 0x74
 8004c8c:	e002      	b.n	8004c94 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a22      	ldr	r2, [pc, #136]	; (8004d1c <UART_Start_Receive_IT+0x244>)
 8004c92:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d019      	beq.n	8004cd0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ca2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	f383 8810 	msr	PRIMASK, r3
}
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2190      	movs	r1, #144	; 0x90
 8004cbe:	0049      	lsls	r1, r1, #1
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	f383 8810 	msr	PRIMASK, r3
}
 8004cce:	e018      	b.n	8004d02 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd4:	613b      	str	r3, [r7, #16]
  return(result);
 8004cd6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cd8:	653b      	str	r3, [r7, #80]	; 0x50
 8004cda:	2301      	movs	r3, #1
 8004cdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f383 8810 	msr	PRIMASK, r3
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2120      	movs	r1, #32
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cf8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	0018      	movs	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b018      	add	sp, #96	; 0x60
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	000001ff 	.word	0x000001ff
 8004d10:	08005569 	.word	0x08005569
 8004d14:	0800521d 	.word	0x0800521d
 8004d18:	08005049 	.word	0x08005049
 8004d1c:	08004e75 	.word	0x08004e75

08004d20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08e      	sub	sp, #56	; 0x38
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d28:	f3ef 8310 	mrs	r3, PRIMASK
 8004d2c:	617b      	str	r3, [r7, #20]
  return(result);
 8004d2e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
 8004d32:	2301      	movs	r3, #1
 8004d34:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4926      	ldr	r1, [pc, #152]	; (8004de4 <UART_EndRxTransfer+0xc4>)
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f383 8810 	msr	PRIMASK, r3
}
 8004d58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	623b      	str	r3, [r7, #32]
  return(result);
 8004d60:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d62:	633b      	str	r3, [r7, #48]	; 0x30
 8004d64:	2301      	movs	r3, #1
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	491b      	ldr	r1, [pc, #108]	; (8004de8 <UART_EndRxTransfer+0xc8>)
 8004d7c:	400a      	ands	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	f383 8810 	msr	PRIMASK, r3
}
 8004d8a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d118      	bne.n	8004dc6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d94:	f3ef 8310 	mrs	r3, PRIMASK
 8004d98:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9e:	2301      	movs	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f383 8810 	msr	PRIMASK, r3
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2110      	movs	r1, #16
 8004db6:	438a      	bics	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f383 8810 	msr	PRIMASK, r3
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	228c      	movs	r2, #140	; 0x8c
 8004dca:	2120      	movs	r1, #32
 8004dcc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	b00e      	add	sp, #56	; 0x38
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	46c0      	nop			; (mov r8, r8)
 8004de4:	fffffedf 	.word	0xfffffedf
 8004de8:	effffffe 	.word	0xeffffffe

08004dec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	225e      	movs	r2, #94	; 0x5e
 8004dfe:	2100      	movs	r1, #0
 8004e00:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2256      	movs	r2, #86	; 0x56
 8004e06:	2100      	movs	r1, #0
 8004e08:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff f92b 	bl	8004068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b004      	add	sp, #16
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b086      	sub	sp, #24
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e22:	f3ef 8310 	mrs	r3, PRIMASK
 8004e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e28:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f383 8810 	msr	PRIMASK, r3
}
 8004e36:	46c0      	nop			; (mov r8, r8)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2140      	movs	r1, #64	; 0x40
 8004e44:	438a      	bics	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f383 8810 	msr	PRIMASK, r3
}
 8004e52:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2288      	movs	r2, #136	; 0x88
 8004e58:	2120      	movs	r1, #32
 8004e5a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	0018      	movs	r0, r3
 8004e66:	f7ff f8f7 	bl	8004058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b006      	add	sp, #24
 8004e70:	bd80      	pop	{r7, pc}
	...

08004e74 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b094      	sub	sp, #80	; 0x50
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e7c:	204e      	movs	r0, #78	; 0x4e
 8004e7e:	183b      	adds	r3, r7, r0
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	2160      	movs	r1, #96	; 0x60
 8004e84:	5a52      	ldrh	r2, [r2, r1]
 8004e86:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	228c      	movs	r2, #140	; 0x8c
 8004e8c:	589b      	ldr	r3, [r3, r2]
 8004e8e:	2b22      	cmp	r3, #34	; 0x22
 8004e90:	d000      	beq.n	8004e94 <UART_RxISR_8BIT+0x20>
 8004e92:	e0c4      	b.n	800501e <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e9a:	214c      	movs	r1, #76	; 0x4c
 8004e9c:	187b      	adds	r3, r7, r1
 8004e9e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ea0:	187b      	adds	r3, r7, r1
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	183b      	adds	r3, r7, r0
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b2d9      	uxtb	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb0:	400a      	ands	r2, r1
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	225e      	movs	r2, #94	; 0x5e
 8004ec4:	5a9b      	ldrh	r3, [r3, r2]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b299      	uxth	r1, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	225e      	movs	r2, #94	; 0x5e
 8004ed0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	225e      	movs	r2, #94	; 0x5e
 8004ed6:	5a9b      	ldrh	r3, [r3, r2]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d000      	beq.n	8004ee0 <UART_RxISR_8BIT+0x6c>
 8004ede:	e0a6      	b.n	800502e <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ee8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eea:	2301      	movs	r3, #1
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef0:	f383 8810 	msr	PRIMASK, r3
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	494d      	ldr	r1, [pc, #308]	; (8005038 <UART_RxISR_8BIT+0x1c4>)
 8004f02:	400a      	ands	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	f383 8810 	msr	PRIMASK, r3
}
 8004f10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f12:	f3ef 8310 	mrs	r3, PRIMASK
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f22:	f383 8810 	msr	PRIMASK, r3
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2101      	movs	r1, #1
 8004f34:	438a      	bics	r2, r1
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	f383 8810 	msr	PRIMASK, r3
}
 8004f42:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	228c      	movs	r2, #140	; 0x8c
 8004f48:	2120      	movs	r1, #32
 8004f4a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a37      	ldr	r2, [pc, #220]	; (800503c <UART_RxISR_8BIT+0x1c8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d024      	beq.n	8004fac <UART_RxISR_8BIT+0x138>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a36      	ldr	r2, [pc, #216]	; (8005040 <UART_RxISR_8BIT+0x1cc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01f      	beq.n	8004fac <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	4013      	ands	r3, r2
 8004f78:	d018      	beq.n	8004fac <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f80:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40
 8004f84:	2301      	movs	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f383 8810 	msr	PRIMASK, r3
}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	492a      	ldr	r1, [pc, #168]	; (8005044 <UART_RxISR_8BIT+0x1d0>)
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	f383 8810 	msr	PRIMASK, r3
}
 8004faa:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d12f      	bne.n	8005014 <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fba:	f3ef 8310 	mrs	r3, PRIMASK
 8004fbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fc0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f383 8810 	msr	PRIMASK, r3
}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2110      	movs	r1, #16
 8004fdc:	438a      	bics	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fe2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f383 8810 	msr	PRIMASK, r3
}
 8004fea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	2210      	movs	r2, #16
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d103      	bne.n	8005002 <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2210      	movs	r2, #16
 8005000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	225c      	movs	r2, #92	; 0x5c
 8005006:	5a9a      	ldrh	r2, [r3, r2]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	0011      	movs	r1, r2
 800500c:	0018      	movs	r0, r3
 800500e:	f7ff f833 	bl	8004078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005012:	e00c      	b.n	800502e <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	0018      	movs	r0, r3
 8005018:	f7fd fd16 	bl	8002a48 <HAL_UART_RxCpltCallback>
}
 800501c:	e007      	b.n	800502e <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699a      	ldr	r2, [r3, #24]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2108      	movs	r1, #8
 800502a:	430a      	orrs	r2, r1
 800502c:	619a      	str	r2, [r3, #24]
}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	46bd      	mov	sp, r7
 8005032:	b014      	add	sp, #80	; 0x50
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	fffffedf 	.word	0xfffffedf
 800503c:	40008000 	.word	0x40008000
 8005040:	40008400 	.word	0x40008400
 8005044:	fbffffff 	.word	0xfbffffff

08005048 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b094      	sub	sp, #80	; 0x50
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005050:	204e      	movs	r0, #78	; 0x4e
 8005052:	183b      	adds	r3, r7, r0
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	2160      	movs	r1, #96	; 0x60
 8005058:	5a52      	ldrh	r2, [r2, r1]
 800505a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	228c      	movs	r2, #140	; 0x8c
 8005060:	589b      	ldr	r3, [r3, r2]
 8005062:	2b22      	cmp	r3, #34	; 0x22
 8005064:	d000      	beq.n	8005068 <UART_RxISR_16BIT+0x20>
 8005066:	e0c4      	b.n	80051f2 <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800506e:	214c      	movs	r1, #76	; 0x4c
 8005070:	187b      	adds	r3, r7, r1
 8005072:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005078:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800507a:	187b      	adds	r3, r7, r1
 800507c:	183a      	adds	r2, r7, r0
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	4013      	ands	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005088:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508e:	1c9a      	adds	r2, r3, #2
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	225e      	movs	r2, #94	; 0x5e
 8005098:	5a9b      	ldrh	r3, [r3, r2]
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b299      	uxth	r1, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	225e      	movs	r2, #94	; 0x5e
 80050a4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	225e      	movs	r2, #94	; 0x5e
 80050aa:	5a9b      	ldrh	r3, [r3, r2]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d000      	beq.n	80050b4 <UART_RxISR_16BIT+0x6c>
 80050b2:	e0a6      	b.n	8005202 <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b4:	f3ef 8310 	mrs	r3, PRIMASK
 80050b8:	623b      	str	r3, [r7, #32]
  return(result);
 80050ba:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050bc:	647b      	str	r3, [r7, #68]	; 0x44
 80050be:	2301      	movs	r3, #1
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	494d      	ldr	r1, [pc, #308]	; (800520c <UART_RxISR_16BIT+0x1c4>)
 80050d6:	400a      	ands	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e6:	f3ef 8310 	mrs	r3, PRIMASK
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80050ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ee:	643b      	str	r3, [r7, #64]	; 0x40
 80050f0:	2301      	movs	r3, #1
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2101      	movs	r1, #1
 8005108:	438a      	bics	r2, r1
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005112:	f383 8810 	msr	PRIMASK, r3
}
 8005116:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	228c      	movs	r2, #140	; 0x8c
 800511c:	2120      	movs	r1, #32
 800511e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a37      	ldr	r2, [pc, #220]	; (8005210 <UART_RxISR_16BIT+0x1c8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d024      	beq.n	8005180 <UART_RxISR_16BIT+0x138>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a36      	ldr	r2, [pc, #216]	; (8005214 <UART_RxISR_16BIT+0x1cc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d01f      	beq.n	8005180 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	2380      	movs	r3, #128	; 0x80
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	4013      	ands	r3, r2
 800514c:	d018      	beq.n	8005180 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800514e:	f3ef 8310 	mrs	r3, PRIMASK
 8005152:	617b      	str	r3, [r7, #20]
  return(result);
 8005154:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005158:	2301      	movs	r3, #1
 800515a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	f383 8810 	msr	PRIMASK, r3
}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	492a      	ldr	r1, [pc, #168]	; (8005218 <UART_RxISR_16BIT+0x1d0>)
 8005170:	400a      	ands	r2, r1
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005176:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	f383 8810 	msr	PRIMASK, r3
}
 800517e:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d12f      	bne.n	80051e8 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800518e:	f3ef 8310 	mrs	r3, PRIMASK
 8005192:	60bb      	str	r3, [r7, #8]
  return(result);
 8005194:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005196:	63bb      	str	r3, [r7, #56]	; 0x38
 8005198:	2301      	movs	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f383 8810 	msr	PRIMASK, r3
}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2110      	movs	r1, #16
 80051b0:	438a      	bics	r2, r1
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f383 8810 	msr	PRIMASK, r3
}
 80051be:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	2210      	movs	r2, #16
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d103      	bne.n	80051d6 <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2210      	movs	r2, #16
 80051d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	225c      	movs	r2, #92	; 0x5c
 80051da:	5a9a      	ldrh	r2, [r3, r2]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	0011      	movs	r1, r2
 80051e0:	0018      	movs	r0, r3
 80051e2:	f7fe ff49 	bl	8004078 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051e6:	e00c      	b.n	8005202 <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	0018      	movs	r0, r3
 80051ec:	f7fd fc2c 	bl	8002a48 <HAL_UART_RxCpltCallback>
}
 80051f0:	e007      	b.n	8005202 <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2108      	movs	r1, #8
 80051fe:	430a      	orrs	r2, r1
 8005200:	619a      	str	r2, [r3, #24]
}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	46bd      	mov	sp, r7
 8005206:	b014      	add	sp, #80	; 0x50
 8005208:	bd80      	pop	{r7, pc}
 800520a:	46c0      	nop			; (mov r8, r8)
 800520c:	fffffedf 	.word	0xfffffedf
 8005210:	40008000 	.word	0x40008000
 8005214:	40008400 	.word	0x40008400
 8005218:	fbffffff 	.word	0xfbffffff

0800521c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b0a0      	sub	sp, #128	; 0x80
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005224:	237a      	movs	r3, #122	; 0x7a
 8005226:	18fb      	adds	r3, r7, r3
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	2160      	movs	r1, #96	; 0x60
 800522c:	5a52      	ldrh	r2, [r2, r1]
 800522e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	69db      	ldr	r3, [r3, #28]
 8005236:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	228c      	movs	r2, #140	; 0x8c
 800524c:	589b      	ldr	r3, [r3, r2]
 800524e:	2b22      	cmp	r3, #34	; 0x22
 8005250:	d000      	beq.n	8005254 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005252:	e16f      	b.n	8005534 <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005254:	236e      	movs	r3, #110	; 0x6e
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	2168      	movs	r1, #104	; 0x68
 800525c:	5a52      	ldrh	r2, [r2, r1]
 800525e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005260:	e116      	b.n	8005490 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005268:	216c      	movs	r1, #108	; 0x6c
 800526a:	187b      	adds	r3, r7, r1
 800526c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800526e:	187b      	adds	r3, r7, r1
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b2da      	uxtb	r2, r3
 8005274:	237a      	movs	r3, #122	; 0x7a
 8005276:	18fb      	adds	r3, r7, r3
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b2d9      	uxtb	r1, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005280:	400a      	ands	r2, r1
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	225e      	movs	r2, #94	; 0x5e
 8005294:	5a9b      	ldrh	r3, [r3, r2]
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b299      	uxth	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	225e      	movs	r2, #94	; 0x5e
 80052a0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80052aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052ac:	2207      	movs	r2, #7
 80052ae:	4013      	ands	r3, r2
 80052b0:	d049      	beq.n	8005346 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052b4:	2201      	movs	r2, #1
 80052b6:	4013      	ands	r3, r2
 80052b8:	d010      	beq.n	80052dc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80052ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80052bc:	2380      	movs	r3, #128	; 0x80
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4013      	ands	r3, r2
 80052c2:	d00b      	beq.n	80052dc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2290      	movs	r2, #144	; 0x90
 80052d0:	589b      	ldr	r3, [r3, r2]
 80052d2:	2201      	movs	r2, #1
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2190      	movs	r1, #144	; 0x90
 80052da:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052de:	2202      	movs	r2, #2
 80052e0:	4013      	ands	r3, r2
 80052e2:	d00f      	beq.n	8005304 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80052e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052e6:	2201      	movs	r2, #1
 80052e8:	4013      	ands	r3, r2
 80052ea:	d00b      	beq.n	8005304 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2202      	movs	r2, #2
 80052f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2290      	movs	r2, #144	; 0x90
 80052f8:	589b      	ldr	r3, [r3, r2]
 80052fa:	2204      	movs	r2, #4
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2190      	movs	r1, #144	; 0x90
 8005302:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005306:	2204      	movs	r2, #4
 8005308:	4013      	ands	r3, r2
 800530a:	d00f      	beq.n	800532c <UART_RxISR_8BIT_FIFOEN+0x110>
 800530c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800530e:	2201      	movs	r2, #1
 8005310:	4013      	ands	r3, r2
 8005312:	d00b      	beq.n	800532c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2204      	movs	r2, #4
 800531a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2290      	movs	r2, #144	; 0x90
 8005320:	589b      	ldr	r3, [r3, r2]
 8005322:	2202      	movs	r2, #2
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2190      	movs	r1, #144	; 0x90
 800532a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2290      	movs	r2, #144	; 0x90
 8005330:	589b      	ldr	r3, [r3, r2]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	0018      	movs	r0, r3
 800533a:	f7fe fe95 	bl	8004068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2290      	movs	r2, #144	; 0x90
 8005342:	2100      	movs	r1, #0
 8005344:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	225e      	movs	r2, #94	; 0x5e
 800534a:	5a9b      	ldrh	r3, [r3, r2]
 800534c:	b29b      	uxth	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d000      	beq.n	8005354 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005352:	e09d      	b.n	8005490 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005354:	f3ef 8310 	mrs	r3, PRIMASK
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800535c:	66bb      	str	r3, [r7, #104]	; 0x68
 800535e:	2301      	movs	r3, #1
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	46c0      	nop			; (mov r8, r8)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4975      	ldr	r1, [pc, #468]	; (800554c <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005376:	400a      	ands	r2, r1
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800537c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005380:	f383 8810 	msr	PRIMASK, r3
}
 8005384:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005386:	f3ef 8310 	mrs	r3, PRIMASK
 800538a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800538c:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800538e:	667b      	str	r3, [r7, #100]	; 0x64
 8005390:	2301      	movs	r3, #1
 8005392:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005396:	f383 8810 	msr	PRIMASK, r3
}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	496a      	ldr	r1, [pc, #424]	; (8005550 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80053a8:	400a      	ands	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]
 80053ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b2:	f383 8810 	msr	PRIMASK, r3
}
 80053b6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	228c      	movs	r2, #140	; 0x8c
 80053bc:	2120      	movs	r1, #32
 80053be:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a60      	ldr	r2, [pc, #384]	; (8005554 <UART_RxISR_8BIT_FIFOEN+0x338>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d024      	beq.n	8005420 <UART_RxISR_8BIT_FIFOEN+0x204>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a5f      	ldr	r2, [pc, #380]	; (8005558 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d01f      	beq.n	8005420 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	041b      	lsls	r3, r3, #16
 80053ea:	4013      	ands	r3, r2
 80053ec:	d018      	beq.n	8005420 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ee:	f3ef 8310 	mrs	r3, PRIMASK
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80053f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053f6:	663b      	str	r3, [r7, #96]	; 0x60
 80053f8:	2301      	movs	r3, #1
 80053fa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	f383 8810 	msr	PRIMASK, r3
}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4953      	ldr	r1, [pc, #332]	; (800555c <UART_RxISR_8BIT_FIFOEN+0x340>)
 8005410:	400a      	ands	r2, r1
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d12f      	bne.n	8005488 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542e:	f3ef 8310 	mrs	r3, PRIMASK
 8005432:	623b      	str	r3, [r7, #32]
  return(result);
 8005434:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005438:	2301      	movs	r3, #1
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	f383 8810 	msr	PRIMASK, r3
}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2110      	movs	r1, #16
 8005450:	438a      	bics	r2, r1
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	f383 8810 	msr	PRIMASK, r3
}
 800545e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	2210      	movs	r2, #16
 8005468:	4013      	ands	r3, r2
 800546a:	2b10      	cmp	r3, #16
 800546c:	d103      	bne.n	8005476 <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2210      	movs	r2, #16
 8005474:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	225c      	movs	r2, #92	; 0x5c
 800547a:	5a9a      	ldrh	r2, [r3, r2]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	0011      	movs	r1, r2
 8005480:	0018      	movs	r0, r3
 8005482:	f7fe fdf9 	bl	8004078 <HAL_UARTEx_RxEventCallback>
 8005486:	e003      	b.n	8005490 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	0018      	movs	r0, r3
 800548c:	f7fd fadc 	bl	8002a48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005490:	236e      	movs	r3, #110	; 0x6e
 8005492:	18fb      	adds	r3, r7, r3
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <UART_RxISR_8BIT_FIFOEN+0x288>
 800549a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800549c:	2220      	movs	r2, #32
 800549e:	4013      	ands	r3, r2
 80054a0:	d000      	beq.n	80054a4 <UART_RxISR_8BIT_FIFOEN+0x288>
 80054a2:	e6de      	b.n	8005262 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80054a4:	205a      	movs	r0, #90	; 0x5a
 80054a6:	183b      	adds	r3, r7, r0
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	215e      	movs	r1, #94	; 0x5e
 80054ac:	5a52      	ldrh	r2, [r2, r1]
 80054ae:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80054b0:	0001      	movs	r1, r0
 80054b2:	187b      	adds	r3, r7, r1
 80054b4:	881b      	ldrh	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d044      	beq.n	8005544 <UART_RxISR_8BIT_FIFOEN+0x328>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2268      	movs	r2, #104	; 0x68
 80054be:	5a9b      	ldrh	r3, [r3, r2]
 80054c0:	187a      	adds	r2, r7, r1
 80054c2:	8812      	ldrh	r2, [r2, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d23d      	bcs.n	8005544 <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054c8:	f3ef 8310 	mrs	r3, PRIMASK
 80054cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80054ce:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054d0:	657b      	str	r3, [r7, #84]	; 0x54
 80054d2:	2301      	movs	r3, #1
 80054d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f383 8810 	msr	PRIMASK, r3
}
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	491d      	ldr	r1, [pc, #116]	; (8005560 <UART_RxISR_8BIT_FIFOEN+0x344>)
 80054ea:	400a      	ands	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
 80054ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f383 8810 	msr	PRIMASK, r3
}
 80054f8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a19      	ldr	r2, [pc, #100]	; (8005564 <UART_RxISR_8BIT_FIFOEN+0x348>)
 80054fe:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005500:	f3ef 8310 	mrs	r3, PRIMASK
 8005504:	617b      	str	r3, [r7, #20]
  return(result);
 8005506:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005508:	653b      	str	r3, [r7, #80]	; 0x50
 800550a:	2301      	movs	r3, #1
 800550c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	f383 8810 	msr	PRIMASK, r3
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2120      	movs	r1, #32
 8005522:	430a      	orrs	r2, r1
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005528:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	f383 8810 	msr	PRIMASK, r3
}
 8005530:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005532:	e007      	b.n	8005544 <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2108      	movs	r1, #8
 8005540:	430a      	orrs	r2, r1
 8005542:	619a      	str	r2, [r3, #24]
}
 8005544:	46c0      	nop			; (mov r8, r8)
 8005546:	46bd      	mov	sp, r7
 8005548:	b020      	add	sp, #128	; 0x80
 800554a:	bd80      	pop	{r7, pc}
 800554c:	fffffeff 	.word	0xfffffeff
 8005550:	effffffe 	.word	0xeffffffe
 8005554:	40008000 	.word	0x40008000
 8005558:	40008400 	.word	0x40008400
 800555c:	fbffffff 	.word	0xfbffffff
 8005560:	efffffff 	.word	0xefffffff
 8005564:	08004e75 	.word	0x08004e75

08005568 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b0a2      	sub	sp, #136	; 0x88
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005570:	2382      	movs	r3, #130	; 0x82
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	2160      	movs	r1, #96	; 0x60
 8005578:	5a52      	ldrh	r2, [r2, r1]
 800557a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	2284      	movs	r2, #132	; 0x84
 8005584:	18ba      	adds	r2, r7, r2
 8005586:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	228c      	movs	r2, #140	; 0x8c
 800559c:	589b      	ldr	r3, [r3, r2]
 800559e:	2b22      	cmp	r3, #34	; 0x22
 80055a0:	d000      	beq.n	80055a4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80055a2:	e179      	b.n	8005898 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80055a4:	2376      	movs	r3, #118	; 0x76
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	2168      	movs	r1, #104	; 0x68
 80055ac:	5a52      	ldrh	r2, [r2, r1]
 80055ae:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055b0:	e11e      	b.n	80057f0 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055b8:	2174      	movs	r1, #116	; 0x74
 80055ba:	187b      	adds	r3, r7, r1
 80055bc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80055c4:	187b      	adds	r3, r7, r1
 80055c6:	2282      	movs	r2, #130	; 0x82
 80055c8:	18ba      	adds	r2, r7, r2
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	8812      	ldrh	r2, [r2, #0]
 80055ce:	4013      	ands	r3, r2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055da:	1c9a      	adds	r2, r3, #2
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	225e      	movs	r2, #94	; 0x5e
 80055e4:	5a9b      	ldrh	r3, [r3, r2]
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	3b01      	subs	r3, #1
 80055ea:	b299      	uxth	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	225e      	movs	r2, #94	; 0x5e
 80055f0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69db      	ldr	r3, [r3, #28]
 80055f8:	2184      	movs	r1, #132	; 0x84
 80055fa:	187a      	adds	r2, r7, r1
 80055fc:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055fe:	187b      	adds	r3, r7, r1
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2207      	movs	r2, #7
 8005604:	4013      	ands	r3, r2
 8005606:	d04e      	beq.n	80056a6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005608:	187b      	adds	r3, r7, r1
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	4013      	ands	r3, r2
 8005610:	d010      	beq.n	8005634 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005612:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	4013      	ands	r3, r2
 800561a:	d00b      	beq.n	8005634 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2201      	movs	r2, #1
 8005622:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2290      	movs	r2, #144	; 0x90
 8005628:	589b      	ldr	r3, [r3, r2]
 800562a:	2201      	movs	r2, #1
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2190      	movs	r1, #144	; 0x90
 8005632:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005634:	2384      	movs	r3, #132	; 0x84
 8005636:	18fb      	adds	r3, r7, r3
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2202      	movs	r2, #2
 800563c:	4013      	ands	r3, r2
 800563e:	d00f      	beq.n	8005660 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005642:	2201      	movs	r2, #1
 8005644:	4013      	ands	r3, r2
 8005646:	d00b      	beq.n	8005660 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2202      	movs	r2, #2
 800564e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2290      	movs	r2, #144	; 0x90
 8005654:	589b      	ldr	r3, [r3, r2]
 8005656:	2204      	movs	r2, #4
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2190      	movs	r1, #144	; 0x90
 800565e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005660:	2384      	movs	r3, #132	; 0x84
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2204      	movs	r2, #4
 8005668:	4013      	ands	r3, r2
 800566a:	d00f      	beq.n	800568c <UART_RxISR_16BIT_FIFOEN+0x124>
 800566c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800566e:	2201      	movs	r2, #1
 8005670:	4013      	ands	r3, r2
 8005672:	d00b      	beq.n	800568c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2204      	movs	r2, #4
 800567a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2290      	movs	r2, #144	; 0x90
 8005680:	589b      	ldr	r3, [r3, r2]
 8005682:	2202      	movs	r2, #2
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2190      	movs	r1, #144	; 0x90
 800568a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2290      	movs	r2, #144	; 0x90
 8005690:	589b      	ldr	r3, [r3, r2]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d007      	beq.n	80056a6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0018      	movs	r0, r3
 800569a:	f7fe fce5 	bl	8004068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2290      	movs	r2, #144	; 0x90
 80056a2:	2100      	movs	r1, #0
 80056a4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	225e      	movs	r2, #94	; 0x5e
 80056aa:	5a9b      	ldrh	r3, [r3, r2]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d000      	beq.n	80056b4 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80056b2:	e09d      	b.n	80057f0 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b4:	f3ef 8310 	mrs	r3, PRIMASK
 80056b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80056ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056be:	2301      	movs	r3, #1
 80056c0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c4:	f383 8810 	msr	PRIMASK, r3
}
 80056c8:	46c0      	nop			; (mov r8, r8)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4976      	ldr	r1, [pc, #472]	; (80058b0 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80056d6:	400a      	ands	r2, r1
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e0:	f383 8810 	msr	PRIMASK, r3
}
 80056e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e6:	f3ef 8310 	mrs	r3, PRIMASK
 80056ea:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80056ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f0:	2301      	movs	r3, #1
 80056f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	496b      	ldr	r1, [pc, #428]	; (80058b4 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8005708:	400a      	ands	r2, r1
 800570a:	609a      	str	r2, [r3, #8]
 800570c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800570e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005712:	f383 8810 	msr	PRIMASK, r3
}
 8005716:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	228c      	movs	r2, #140	; 0x8c
 800571c:	2120      	movs	r1, #32
 800571e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a61      	ldr	r2, [pc, #388]	; (80058b8 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d024      	beq.n	8005780 <UART_RxISR_16BIT_FIFOEN+0x218>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a60      	ldr	r2, [pc, #384]	; (80058bc <UART_RxISR_16BIT_FIFOEN+0x354>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d01f      	beq.n	8005780 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	041b      	lsls	r3, r3, #16
 800574a:	4013      	ands	r3, r2
 800574c:	d018      	beq.n	8005780 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800574e:	f3ef 8310 	mrs	r3, PRIMASK
 8005752:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005756:	667b      	str	r3, [r7, #100]	; 0x64
 8005758:	2301      	movs	r3, #1
 800575a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575e:	f383 8810 	msr	PRIMASK, r3
}
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4954      	ldr	r1, [pc, #336]	; (80058c0 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8005770:	400a      	ands	r2, r1
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005776:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d12f      	bne.n	80057e8 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578e:	f3ef 8310 	mrs	r3, PRIMASK
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005796:	663b      	str	r3, [r7, #96]	; 0x60
 8005798:	2301      	movs	r3, #1
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	f383 8810 	msr	PRIMASK, r3
}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2110      	movs	r1, #16
 80057b0:	438a      	bics	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	2210      	movs	r2, #16
 80057c8:	4013      	ands	r3, r2
 80057ca:	2b10      	cmp	r3, #16
 80057cc:	d103      	bne.n	80057d6 <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2210      	movs	r2, #16
 80057d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	225c      	movs	r2, #92	; 0x5c
 80057da:	5a9a      	ldrh	r2, [r3, r2]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	0011      	movs	r1, r2
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7fe fc49 	bl	8004078 <HAL_UARTEx_RxEventCallback>
 80057e6:	e003      	b.n	80057f0 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	0018      	movs	r0, r3
 80057ec:	f7fd f92c 	bl	8002a48 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057f0:	2376      	movs	r3, #118	; 0x76
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d006      	beq.n	8005808 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80057fa:	2384      	movs	r3, #132	; 0x84
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2220      	movs	r2, #32
 8005802:	4013      	ands	r3, r2
 8005804:	d000      	beq.n	8005808 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8005806:	e6d4      	b.n	80055b2 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005808:	205e      	movs	r0, #94	; 0x5e
 800580a:	183b      	adds	r3, r7, r0
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	215e      	movs	r1, #94	; 0x5e
 8005810:	5a52      	ldrh	r2, [r2, r1]
 8005812:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005814:	0001      	movs	r1, r0
 8005816:	187b      	adds	r3, r7, r1
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d044      	beq.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0x340>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2268      	movs	r2, #104	; 0x68
 8005822:	5a9b      	ldrh	r3, [r3, r2]
 8005824:	187a      	adds	r2, r7, r1
 8005826:	8812      	ldrh	r2, [r2, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d23d      	bcs.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800582c:	f3ef 8310 	mrs	r3, PRIMASK
 8005830:	60fb      	str	r3, [r7, #12]
  return(result);
 8005832:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005834:	65bb      	str	r3, [r7, #88]	; 0x58
 8005836:	2301      	movs	r3, #1
 8005838:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f383 8810 	msr	PRIMASK, r3
}
 8005840:	46c0      	nop			; (mov r8, r8)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	491d      	ldr	r1, [pc, #116]	; (80058c4 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800584e:	400a      	ands	r2, r1
 8005850:	609a      	str	r2, [r3, #8]
 8005852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005854:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f383 8810 	msr	PRIMASK, r3
}
 800585c:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a19      	ldr	r2, [pc, #100]	; (80058c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005862:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005864:	f3ef 8310 	mrs	r3, PRIMASK
 8005868:	61bb      	str	r3, [r7, #24]
  return(result);
 800586a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800586c:	657b      	str	r3, [r7, #84]	; 0x54
 800586e:	2301      	movs	r3, #1
 8005870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f383 8810 	msr	PRIMASK, r3
}
 8005878:	46c0      	nop			; (mov r8, r8)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2120      	movs	r1, #32
 8005886:	430a      	orrs	r2, r1
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	f383 8810 	msr	PRIMASK, r3
}
 8005894:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005896:	e007      	b.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2108      	movs	r1, #8
 80058a4:	430a      	orrs	r2, r1
 80058a6:	619a      	str	r2, [r3, #24]
}
 80058a8:	46c0      	nop			; (mov r8, r8)
 80058aa:	46bd      	mov	sp, r7
 80058ac:	b022      	add	sp, #136	; 0x88
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	fffffeff 	.word	0xfffffeff
 80058b4:	effffffe 	.word	0xeffffffe
 80058b8:	40008000 	.word	0x40008000
 80058bc:	40008400 	.word	0x40008400
 80058c0:	fbffffff 	.word	0xfbffffff
 80058c4:	efffffff 	.word	0xefffffff
 80058c8:	08005049 	.word	0x08005049

080058cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80058e4:	46c0      	nop			; (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b002      	add	sp, #8
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058f4:	46c0      	nop			; (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b002      	add	sp, #8
 80058fa:	bd80      	pop	{r7, pc}

080058fc <siprintf>:
 80058fc:	b40e      	push	{r1, r2, r3}
 80058fe:	b500      	push	{lr}
 8005900:	490b      	ldr	r1, [pc, #44]	; (8005930 <siprintf+0x34>)
 8005902:	b09c      	sub	sp, #112	; 0x70
 8005904:	ab1d      	add	r3, sp, #116	; 0x74
 8005906:	9002      	str	r0, [sp, #8]
 8005908:	9006      	str	r0, [sp, #24]
 800590a:	9107      	str	r1, [sp, #28]
 800590c:	9104      	str	r1, [sp, #16]
 800590e:	4809      	ldr	r0, [pc, #36]	; (8005934 <siprintf+0x38>)
 8005910:	4909      	ldr	r1, [pc, #36]	; (8005938 <siprintf+0x3c>)
 8005912:	cb04      	ldmia	r3!, {r2}
 8005914:	9105      	str	r1, [sp, #20]
 8005916:	6800      	ldr	r0, [r0, #0]
 8005918:	a902      	add	r1, sp, #8
 800591a:	9301      	str	r3, [sp, #4]
 800591c:	f000 f9e4 	bl	8005ce8 <_svfiprintf_r>
 8005920:	2200      	movs	r2, #0
 8005922:	9b02      	ldr	r3, [sp, #8]
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	b01c      	add	sp, #112	; 0x70
 8005928:	bc08      	pop	{r3}
 800592a:	b003      	add	sp, #12
 800592c:	4718      	bx	r3
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	7fffffff 	.word	0x7fffffff
 8005934:	20000098 	.word	0x20000098
 8005938:	ffff0208 	.word	0xffff0208

0800593c <siscanf>:
 800593c:	b40e      	push	{r1, r2, r3}
 800593e:	b530      	push	{r4, r5, lr}
 8005940:	2381      	movs	r3, #129	; 0x81
 8005942:	b09c      	sub	sp, #112	; 0x70
 8005944:	466a      	mov	r2, sp
 8005946:	ac1f      	add	r4, sp, #124	; 0x7c
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	cc20      	ldmia	r4!, {r5}
 800594c:	8293      	strh	r3, [r2, #20]
 800594e:	9002      	str	r0, [sp, #8]
 8005950:	9006      	str	r0, [sp, #24]
 8005952:	f7fa fbd7 	bl	8000104 <strlen>
 8005956:	4b0b      	ldr	r3, [pc, #44]	; (8005984 <siscanf+0x48>)
 8005958:	466a      	mov	r2, sp
 800595a:	930b      	str	r3, [sp, #44]	; 0x2c
 800595c:	2300      	movs	r3, #0
 800595e:	9003      	str	r0, [sp, #12]
 8005960:	9007      	str	r0, [sp, #28]
 8005962:	4809      	ldr	r0, [pc, #36]	; (8005988 <siscanf+0x4c>)
 8005964:	930f      	str	r3, [sp, #60]	; 0x3c
 8005966:	9314      	str	r3, [sp, #80]	; 0x50
 8005968:	3b01      	subs	r3, #1
 800596a:	82d3      	strh	r3, [r2, #22]
 800596c:	a902      	add	r1, sp, #8
 800596e:	0023      	movs	r3, r4
 8005970:	002a      	movs	r2, r5
 8005972:	6800      	ldr	r0, [r0, #0]
 8005974:	9401      	str	r4, [sp, #4]
 8005976:	f000 fb13 	bl	8005fa0 <__ssvfiscanf_r>
 800597a:	b01c      	add	sp, #112	; 0x70
 800597c:	bc30      	pop	{r4, r5}
 800597e:	bc08      	pop	{r3}
 8005980:	b003      	add	sp, #12
 8005982:	4718      	bx	r3
 8005984:	0800598d 	.word	0x0800598d
 8005988:	20000098 	.word	0x20000098

0800598c <__seofread>:
 800598c:	2000      	movs	r0, #0
 800598e:	4770      	bx	lr

08005990 <memset>:
 8005990:	0003      	movs	r3, r0
 8005992:	1882      	adds	r2, r0, r2
 8005994:	4293      	cmp	r3, r2
 8005996:	d100      	bne.n	800599a <memset+0xa>
 8005998:	4770      	bx	lr
 800599a:	7019      	strb	r1, [r3, #0]
 800599c:	3301      	adds	r3, #1
 800599e:	e7f9      	b.n	8005994 <memset+0x4>

080059a0 <strcat>:
 80059a0:	0002      	movs	r2, r0
 80059a2:	b510      	push	{r4, lr}
 80059a4:	7813      	ldrb	r3, [r2, #0]
 80059a6:	0014      	movs	r4, r2
 80059a8:	3201      	adds	r2, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1fa      	bne.n	80059a4 <strcat+0x4>
 80059ae:	5cca      	ldrb	r2, [r1, r3]
 80059b0:	54e2      	strb	r2, [r4, r3]
 80059b2:	3301      	adds	r3, #1
 80059b4:	2a00      	cmp	r2, #0
 80059b6:	d1fa      	bne.n	80059ae <strcat+0xe>
 80059b8:	bd10      	pop	{r4, pc}
	...

080059bc <__errno>:
 80059bc:	4b01      	ldr	r3, [pc, #4]	; (80059c4 <__errno+0x8>)
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	4770      	bx	lr
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	20000098 	.word	0x20000098

080059c8 <__libc_init_array>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	2600      	movs	r6, #0
 80059cc:	4c0c      	ldr	r4, [pc, #48]	; (8005a00 <__libc_init_array+0x38>)
 80059ce:	4d0d      	ldr	r5, [pc, #52]	; (8005a04 <__libc_init_array+0x3c>)
 80059d0:	1b64      	subs	r4, r4, r5
 80059d2:	10a4      	asrs	r4, r4, #2
 80059d4:	42a6      	cmp	r6, r4
 80059d6:	d109      	bne.n	80059ec <__libc_init_array+0x24>
 80059d8:	2600      	movs	r6, #0
 80059da:	f002 f82b 	bl	8007a34 <_init>
 80059de:	4c0a      	ldr	r4, [pc, #40]	; (8005a08 <__libc_init_array+0x40>)
 80059e0:	4d0a      	ldr	r5, [pc, #40]	; (8005a0c <__libc_init_array+0x44>)
 80059e2:	1b64      	subs	r4, r4, r5
 80059e4:	10a4      	asrs	r4, r4, #2
 80059e6:	42a6      	cmp	r6, r4
 80059e8:	d105      	bne.n	80059f6 <__libc_init_array+0x2e>
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	00b3      	lsls	r3, r6, #2
 80059ee:	58eb      	ldr	r3, [r5, r3]
 80059f0:	4798      	blx	r3
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7ee      	b.n	80059d4 <__libc_init_array+0xc>
 80059f6:	00b3      	lsls	r3, r6, #2
 80059f8:	58eb      	ldr	r3, [r5, r3]
 80059fa:	4798      	blx	r3
 80059fc:	3601      	adds	r6, #1
 80059fe:	e7f2      	b.n	80059e6 <__libc_init_array+0x1e>
 8005a00:	08007cc8 	.word	0x08007cc8
 8005a04:	08007cc8 	.word	0x08007cc8
 8005a08:	08007ccc 	.word	0x08007ccc
 8005a0c:	08007cc8 	.word	0x08007cc8

08005a10 <__retarget_lock_acquire_recursive>:
 8005a10:	4770      	bx	lr

08005a12 <__retarget_lock_release_recursive>:
 8005a12:	4770      	bx	lr

08005a14 <memcpy>:
 8005a14:	2300      	movs	r3, #0
 8005a16:	b510      	push	{r4, lr}
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d100      	bne.n	8005a1e <memcpy+0xa>
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	5ccc      	ldrb	r4, [r1, r3]
 8005a20:	54c4      	strb	r4, [r0, r3]
 8005a22:	3301      	adds	r3, #1
 8005a24:	e7f8      	b.n	8005a18 <memcpy+0x4>
	...

08005a28 <_free_r>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	0005      	movs	r5, r0
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	d010      	beq.n	8005a52 <_free_r+0x2a>
 8005a30:	1f0c      	subs	r4, r1, #4
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da00      	bge.n	8005a3a <_free_r+0x12>
 8005a38:	18e4      	adds	r4, r4, r3
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	f000 f8e2 	bl	8005c04 <__malloc_lock>
 8005a40:	4a1d      	ldr	r2, [pc, #116]	; (8005ab8 <_free_r+0x90>)
 8005a42:	6813      	ldr	r3, [r2, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <_free_r+0x2c>
 8005a48:	6063      	str	r3, [r4, #4]
 8005a4a:	6014      	str	r4, [r2, #0]
 8005a4c:	0028      	movs	r0, r5
 8005a4e:	f000 f8e1 	bl	8005c14 <__malloc_unlock>
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d908      	bls.n	8005a6a <_free_r+0x42>
 8005a58:	6820      	ldr	r0, [r4, #0]
 8005a5a:	1821      	adds	r1, r4, r0
 8005a5c:	428b      	cmp	r3, r1
 8005a5e:	d1f3      	bne.n	8005a48 <_free_r+0x20>
 8005a60:	6819      	ldr	r1, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	1809      	adds	r1, r1, r0
 8005a66:	6021      	str	r1, [r4, #0]
 8005a68:	e7ee      	b.n	8005a48 <_free_r+0x20>
 8005a6a:	001a      	movs	r2, r3
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <_free_r+0x4e>
 8005a72:	42a3      	cmp	r3, r4
 8005a74:	d9f9      	bls.n	8005a6a <_free_r+0x42>
 8005a76:	6811      	ldr	r1, [r2, #0]
 8005a78:	1850      	adds	r0, r2, r1
 8005a7a:	42a0      	cmp	r0, r4
 8005a7c:	d10b      	bne.n	8005a96 <_free_r+0x6e>
 8005a7e:	6820      	ldr	r0, [r4, #0]
 8005a80:	1809      	adds	r1, r1, r0
 8005a82:	1850      	adds	r0, r2, r1
 8005a84:	6011      	str	r1, [r2, #0]
 8005a86:	4283      	cmp	r3, r0
 8005a88:	d1e0      	bne.n	8005a4c <_free_r+0x24>
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	1841      	adds	r1, r0, r1
 8005a90:	6011      	str	r1, [r2, #0]
 8005a92:	6053      	str	r3, [r2, #4]
 8005a94:	e7da      	b.n	8005a4c <_free_r+0x24>
 8005a96:	42a0      	cmp	r0, r4
 8005a98:	d902      	bls.n	8005aa0 <_free_r+0x78>
 8005a9a:	230c      	movs	r3, #12
 8005a9c:	602b      	str	r3, [r5, #0]
 8005a9e:	e7d5      	b.n	8005a4c <_free_r+0x24>
 8005aa0:	6820      	ldr	r0, [r4, #0]
 8005aa2:	1821      	adds	r1, r4, r0
 8005aa4:	428b      	cmp	r3, r1
 8005aa6:	d103      	bne.n	8005ab0 <_free_r+0x88>
 8005aa8:	6819      	ldr	r1, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	1809      	adds	r1, r1, r0
 8005aae:	6021      	str	r1, [r4, #0]
 8005ab0:	6063      	str	r3, [r4, #4]
 8005ab2:	6054      	str	r4, [r2, #4]
 8005ab4:	e7ca      	b.n	8005a4c <_free_r+0x24>
 8005ab6:	46c0      	nop			; (mov r8, r8)
 8005ab8:	20000588 	.word	0x20000588

08005abc <sbrk_aligned>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	4e0f      	ldr	r6, [pc, #60]	; (8005afc <sbrk_aligned+0x40>)
 8005ac0:	000d      	movs	r5, r1
 8005ac2:	6831      	ldr	r1, [r6, #0]
 8005ac4:	0004      	movs	r4, r0
 8005ac6:	2900      	cmp	r1, #0
 8005ac8:	d102      	bne.n	8005ad0 <sbrk_aligned+0x14>
 8005aca:	f000 ff43 	bl	8006954 <_sbrk_r>
 8005ace:	6030      	str	r0, [r6, #0]
 8005ad0:	0029      	movs	r1, r5
 8005ad2:	0020      	movs	r0, r4
 8005ad4:	f000 ff3e 	bl	8006954 <_sbrk_r>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d00a      	beq.n	8005af2 <sbrk_aligned+0x36>
 8005adc:	2303      	movs	r3, #3
 8005ade:	1cc5      	adds	r5, r0, #3
 8005ae0:	439d      	bics	r5, r3
 8005ae2:	42a8      	cmp	r0, r5
 8005ae4:	d007      	beq.n	8005af6 <sbrk_aligned+0x3a>
 8005ae6:	1a29      	subs	r1, r5, r0
 8005ae8:	0020      	movs	r0, r4
 8005aea:	f000 ff33 	bl	8006954 <_sbrk_r>
 8005aee:	3001      	adds	r0, #1
 8005af0:	d101      	bne.n	8005af6 <sbrk_aligned+0x3a>
 8005af2:	2501      	movs	r5, #1
 8005af4:	426d      	negs	r5, r5
 8005af6:	0028      	movs	r0, r5
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	2000058c 	.word	0x2000058c

08005b00 <_malloc_r>:
 8005b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b02:	2203      	movs	r2, #3
 8005b04:	1ccb      	adds	r3, r1, #3
 8005b06:	4393      	bics	r3, r2
 8005b08:	3308      	adds	r3, #8
 8005b0a:	0006      	movs	r6, r0
 8005b0c:	001f      	movs	r7, r3
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d238      	bcs.n	8005b84 <_malloc_r+0x84>
 8005b12:	270c      	movs	r7, #12
 8005b14:	42b9      	cmp	r1, r7
 8005b16:	d837      	bhi.n	8005b88 <_malloc_r+0x88>
 8005b18:	0030      	movs	r0, r6
 8005b1a:	f000 f873 	bl	8005c04 <__malloc_lock>
 8005b1e:	4b38      	ldr	r3, [pc, #224]	; (8005c00 <_malloc_r+0x100>)
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	001c      	movs	r4, r3
 8005b26:	2c00      	cmp	r4, #0
 8005b28:	d133      	bne.n	8005b92 <_malloc_r+0x92>
 8005b2a:	0039      	movs	r1, r7
 8005b2c:	0030      	movs	r0, r6
 8005b2e:	f7ff ffc5 	bl	8005abc <sbrk_aligned>
 8005b32:	0004      	movs	r4, r0
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d15e      	bne.n	8005bf6 <_malloc_r+0xf6>
 8005b38:	9b00      	ldr	r3, [sp, #0]
 8005b3a:	681c      	ldr	r4, [r3, #0]
 8005b3c:	0025      	movs	r5, r4
 8005b3e:	2d00      	cmp	r5, #0
 8005b40:	d14e      	bne.n	8005be0 <_malloc_r+0xe0>
 8005b42:	2c00      	cmp	r4, #0
 8005b44:	d051      	beq.n	8005bea <_malloc_r+0xea>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	0029      	movs	r1, r5
 8005b4a:	18e3      	adds	r3, r4, r3
 8005b4c:	0030      	movs	r0, r6
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	f000 ff00 	bl	8006954 <_sbrk_r>
 8005b54:	9b01      	ldr	r3, [sp, #4]
 8005b56:	4283      	cmp	r3, r0
 8005b58:	d147      	bne.n	8005bea <_malloc_r+0xea>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	0030      	movs	r0, r6
 8005b5e:	1aff      	subs	r7, r7, r3
 8005b60:	0039      	movs	r1, r7
 8005b62:	f7ff ffab 	bl	8005abc <sbrk_aligned>
 8005b66:	3001      	adds	r0, #1
 8005b68:	d03f      	beq.n	8005bea <_malloc_r+0xea>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	19db      	adds	r3, r3, r7
 8005b6e:	6023      	str	r3, [r4, #0]
 8005b70:	9b00      	ldr	r3, [sp, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d040      	beq.n	8005bfa <_malloc_r+0xfa>
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	42a2      	cmp	r2, r4
 8005b7c:	d133      	bne.n	8005be6 <_malloc_r+0xe6>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	605a      	str	r2, [r3, #4]
 8005b82:	e014      	b.n	8005bae <_malloc_r+0xae>
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	dac5      	bge.n	8005b14 <_malloc_r+0x14>
 8005b88:	230c      	movs	r3, #12
 8005b8a:	2500      	movs	r5, #0
 8005b8c:	6033      	str	r3, [r6, #0]
 8005b8e:	0028      	movs	r0, r5
 8005b90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b92:	6821      	ldr	r1, [r4, #0]
 8005b94:	1bc9      	subs	r1, r1, r7
 8005b96:	d420      	bmi.n	8005bda <_malloc_r+0xda>
 8005b98:	290b      	cmp	r1, #11
 8005b9a:	d918      	bls.n	8005bce <_malloc_r+0xce>
 8005b9c:	19e2      	adds	r2, r4, r7
 8005b9e:	6027      	str	r7, [r4, #0]
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d112      	bne.n	8005bca <_malloc_r+0xca>
 8005ba4:	9b00      	ldr	r3, [sp, #0]
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	6863      	ldr	r3, [r4, #4]
 8005baa:	6011      	str	r1, [r2, #0]
 8005bac:	6053      	str	r3, [r2, #4]
 8005bae:	0030      	movs	r0, r6
 8005bb0:	0025      	movs	r5, r4
 8005bb2:	f000 f82f 	bl	8005c14 <__malloc_unlock>
 8005bb6:	2207      	movs	r2, #7
 8005bb8:	350b      	adds	r5, #11
 8005bba:	1d23      	adds	r3, r4, #4
 8005bbc:	4395      	bics	r5, r2
 8005bbe:	1aea      	subs	r2, r5, r3
 8005bc0:	429d      	cmp	r5, r3
 8005bc2:	d0e4      	beq.n	8005b8e <_malloc_r+0x8e>
 8005bc4:	1b5b      	subs	r3, r3, r5
 8005bc6:	50a3      	str	r3, [r4, r2]
 8005bc8:	e7e1      	b.n	8005b8e <_malloc_r+0x8e>
 8005bca:	605a      	str	r2, [r3, #4]
 8005bcc:	e7ec      	b.n	8005ba8 <_malloc_r+0xa8>
 8005bce:	6862      	ldr	r2, [r4, #4]
 8005bd0:	42a3      	cmp	r3, r4
 8005bd2:	d1d5      	bne.n	8005b80 <_malloc_r+0x80>
 8005bd4:	9b00      	ldr	r3, [sp, #0]
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	e7e9      	b.n	8005bae <_malloc_r+0xae>
 8005bda:	0023      	movs	r3, r4
 8005bdc:	6864      	ldr	r4, [r4, #4]
 8005bde:	e7a2      	b.n	8005b26 <_malloc_r+0x26>
 8005be0:	002c      	movs	r4, r5
 8005be2:	686d      	ldr	r5, [r5, #4]
 8005be4:	e7ab      	b.n	8005b3e <_malloc_r+0x3e>
 8005be6:	0013      	movs	r3, r2
 8005be8:	e7c4      	b.n	8005b74 <_malloc_r+0x74>
 8005bea:	230c      	movs	r3, #12
 8005bec:	0030      	movs	r0, r6
 8005bee:	6033      	str	r3, [r6, #0]
 8005bf0:	f000 f810 	bl	8005c14 <__malloc_unlock>
 8005bf4:	e7cb      	b.n	8005b8e <_malloc_r+0x8e>
 8005bf6:	6027      	str	r7, [r4, #0]
 8005bf8:	e7d9      	b.n	8005bae <_malloc_r+0xae>
 8005bfa:	605b      	str	r3, [r3, #4]
 8005bfc:	deff      	udf	#255	; 0xff
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	20000588 	.word	0x20000588

08005c04 <__malloc_lock>:
 8005c04:	b510      	push	{r4, lr}
 8005c06:	4802      	ldr	r0, [pc, #8]	; (8005c10 <__malloc_lock+0xc>)
 8005c08:	f7ff ff02 	bl	8005a10 <__retarget_lock_acquire_recursive>
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	20000584 	.word	0x20000584

08005c14 <__malloc_unlock>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	4802      	ldr	r0, [pc, #8]	; (8005c20 <__malloc_unlock+0xc>)
 8005c18:	f7ff fefb 	bl	8005a12 <__retarget_lock_release_recursive>
 8005c1c:	bd10      	pop	{r4, pc}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	20000584 	.word	0x20000584

08005c24 <__ssputs_r>:
 8005c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c26:	b085      	sub	sp, #20
 8005c28:	9301      	str	r3, [sp, #4]
 8005c2a:	9203      	str	r2, [sp, #12]
 8005c2c:	688e      	ldr	r6, [r1, #8]
 8005c2e:	9a01      	ldr	r2, [sp, #4]
 8005c30:	0007      	movs	r7, r0
 8005c32:	000c      	movs	r4, r1
 8005c34:	680b      	ldr	r3, [r1, #0]
 8005c36:	4296      	cmp	r6, r2
 8005c38:	d831      	bhi.n	8005c9e <__ssputs_r+0x7a>
 8005c3a:	898a      	ldrh	r2, [r1, #12]
 8005c3c:	2190      	movs	r1, #144	; 0x90
 8005c3e:	00c9      	lsls	r1, r1, #3
 8005c40:	420a      	tst	r2, r1
 8005c42:	d029      	beq.n	8005c98 <__ssputs_r+0x74>
 8005c44:	2003      	movs	r0, #3
 8005c46:	6921      	ldr	r1, [r4, #16]
 8005c48:	1a5b      	subs	r3, r3, r1
 8005c4a:	9302      	str	r3, [sp, #8]
 8005c4c:	6963      	ldr	r3, [r4, #20]
 8005c4e:	4343      	muls	r3, r0
 8005c50:	0fdd      	lsrs	r5, r3, #31
 8005c52:	18ed      	adds	r5, r5, r3
 8005c54:	9b01      	ldr	r3, [sp, #4]
 8005c56:	9802      	ldr	r0, [sp, #8]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	181b      	adds	r3, r3, r0
 8005c5c:	106d      	asrs	r5, r5, #1
 8005c5e:	42ab      	cmp	r3, r5
 8005c60:	d900      	bls.n	8005c64 <__ssputs_r+0x40>
 8005c62:	001d      	movs	r5, r3
 8005c64:	0552      	lsls	r2, r2, #21
 8005c66:	d529      	bpl.n	8005cbc <__ssputs_r+0x98>
 8005c68:	0029      	movs	r1, r5
 8005c6a:	0038      	movs	r0, r7
 8005c6c:	f7ff ff48 	bl	8005b00 <_malloc_r>
 8005c70:	1e06      	subs	r6, r0, #0
 8005c72:	d02d      	beq.n	8005cd0 <__ssputs_r+0xac>
 8005c74:	9a02      	ldr	r2, [sp, #8]
 8005c76:	6921      	ldr	r1, [r4, #16]
 8005c78:	f7ff fecc 	bl	8005a14 <memcpy>
 8005c7c:	89a2      	ldrh	r2, [r4, #12]
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <__ssputs_r+0xc0>)
 8005c80:	401a      	ands	r2, r3
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	4313      	orrs	r3, r2
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	9b02      	ldr	r3, [sp, #8]
 8005c8a:	6126      	str	r6, [r4, #16]
 8005c8c:	18f6      	adds	r6, r6, r3
 8005c8e:	6026      	str	r6, [r4, #0]
 8005c90:	6165      	str	r5, [r4, #20]
 8005c92:	9e01      	ldr	r6, [sp, #4]
 8005c94:	1aed      	subs	r5, r5, r3
 8005c96:	60a5      	str	r5, [r4, #8]
 8005c98:	9b01      	ldr	r3, [sp, #4]
 8005c9a:	429e      	cmp	r6, r3
 8005c9c:	d900      	bls.n	8005ca0 <__ssputs_r+0x7c>
 8005c9e:	9e01      	ldr	r6, [sp, #4]
 8005ca0:	0032      	movs	r2, r6
 8005ca2:	9903      	ldr	r1, [sp, #12]
 8005ca4:	6820      	ldr	r0, [r4, #0]
 8005ca6:	f000 fe41 	bl	800692c <memmove>
 8005caa:	2000      	movs	r0, #0
 8005cac:	68a3      	ldr	r3, [r4, #8]
 8005cae:	1b9b      	subs	r3, r3, r6
 8005cb0:	60a3      	str	r3, [r4, #8]
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	199b      	adds	r3, r3, r6
 8005cb6:	6023      	str	r3, [r4, #0]
 8005cb8:	b005      	add	sp, #20
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cbc:	002a      	movs	r2, r5
 8005cbe:	0038      	movs	r0, r7
 8005cc0:	f000 fe65 	bl	800698e <_realloc_r>
 8005cc4:	1e06      	subs	r6, r0, #0
 8005cc6:	d1df      	bne.n	8005c88 <__ssputs_r+0x64>
 8005cc8:	0038      	movs	r0, r7
 8005cca:	6921      	ldr	r1, [r4, #16]
 8005ccc:	f7ff feac 	bl	8005a28 <_free_r>
 8005cd0:	230c      	movs	r3, #12
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	603b      	str	r3, [r7, #0]
 8005cd6:	89a2      	ldrh	r2, [r4, #12]
 8005cd8:	3334      	adds	r3, #52	; 0x34
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	4240      	negs	r0, r0
 8005ce0:	e7ea      	b.n	8005cb8 <__ssputs_r+0x94>
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	fffffb7f 	.word	0xfffffb7f

08005ce8 <_svfiprintf_r>:
 8005ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cea:	b0a1      	sub	sp, #132	; 0x84
 8005cec:	9003      	str	r0, [sp, #12]
 8005cee:	001d      	movs	r5, r3
 8005cf0:	898b      	ldrh	r3, [r1, #12]
 8005cf2:	000f      	movs	r7, r1
 8005cf4:	0016      	movs	r6, r2
 8005cf6:	061b      	lsls	r3, r3, #24
 8005cf8:	d511      	bpl.n	8005d1e <_svfiprintf_r+0x36>
 8005cfa:	690b      	ldr	r3, [r1, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10e      	bne.n	8005d1e <_svfiprintf_r+0x36>
 8005d00:	2140      	movs	r1, #64	; 0x40
 8005d02:	f7ff fefd 	bl	8005b00 <_malloc_r>
 8005d06:	6038      	str	r0, [r7, #0]
 8005d08:	6138      	str	r0, [r7, #16]
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	d105      	bne.n	8005d1a <_svfiprintf_r+0x32>
 8005d0e:	230c      	movs	r3, #12
 8005d10:	9a03      	ldr	r2, [sp, #12]
 8005d12:	3801      	subs	r0, #1
 8005d14:	6013      	str	r3, [r2, #0]
 8005d16:	b021      	add	sp, #132	; 0x84
 8005d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d1a:	2340      	movs	r3, #64	; 0x40
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	ac08      	add	r4, sp, #32
 8005d22:	6163      	str	r3, [r4, #20]
 8005d24:	3320      	adds	r3, #32
 8005d26:	7663      	strb	r3, [r4, #25]
 8005d28:	3310      	adds	r3, #16
 8005d2a:	76a3      	strb	r3, [r4, #26]
 8005d2c:	9507      	str	r5, [sp, #28]
 8005d2e:	0035      	movs	r5, r6
 8005d30:	782b      	ldrb	r3, [r5, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <_svfiprintf_r+0x52>
 8005d36:	2b25      	cmp	r3, #37	; 0x25
 8005d38:	d148      	bne.n	8005dcc <_svfiprintf_r+0xe4>
 8005d3a:	1bab      	subs	r3, r5, r6
 8005d3c:	9305      	str	r3, [sp, #20]
 8005d3e:	42b5      	cmp	r5, r6
 8005d40:	d00b      	beq.n	8005d5a <_svfiprintf_r+0x72>
 8005d42:	0032      	movs	r2, r6
 8005d44:	0039      	movs	r1, r7
 8005d46:	9803      	ldr	r0, [sp, #12]
 8005d48:	f7ff ff6c 	bl	8005c24 <__ssputs_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d100      	bne.n	8005d52 <_svfiprintf_r+0x6a>
 8005d50:	e0af      	b.n	8005eb2 <_svfiprintf_r+0x1ca>
 8005d52:	6963      	ldr	r3, [r4, #20]
 8005d54:	9a05      	ldr	r2, [sp, #20]
 8005d56:	189b      	adds	r3, r3, r2
 8005d58:	6163      	str	r3, [r4, #20]
 8005d5a:	782b      	ldrb	r3, [r5, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d100      	bne.n	8005d62 <_svfiprintf_r+0x7a>
 8005d60:	e0a7      	b.n	8005eb2 <_svfiprintf_r+0x1ca>
 8005d62:	2201      	movs	r2, #1
 8005d64:	2300      	movs	r3, #0
 8005d66:	4252      	negs	r2, r2
 8005d68:	6062      	str	r2, [r4, #4]
 8005d6a:	a904      	add	r1, sp, #16
 8005d6c:	3254      	adds	r2, #84	; 0x54
 8005d6e:	1852      	adds	r2, r2, r1
 8005d70:	1c6e      	adds	r6, r5, #1
 8005d72:	6023      	str	r3, [r4, #0]
 8005d74:	60e3      	str	r3, [r4, #12]
 8005d76:	60a3      	str	r3, [r4, #8]
 8005d78:	7013      	strb	r3, [r2, #0]
 8005d7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d7c:	4b55      	ldr	r3, [pc, #340]	; (8005ed4 <_svfiprintf_r+0x1ec>)
 8005d7e:	2205      	movs	r2, #5
 8005d80:	0018      	movs	r0, r3
 8005d82:	7831      	ldrb	r1, [r6, #0]
 8005d84:	9305      	str	r3, [sp, #20]
 8005d86:	f000 fdf7 	bl	8006978 <memchr>
 8005d8a:	1c75      	adds	r5, r6, #1
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d11f      	bne.n	8005dd0 <_svfiprintf_r+0xe8>
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	06d3      	lsls	r3, r2, #27
 8005d94:	d504      	bpl.n	8005da0 <_svfiprintf_r+0xb8>
 8005d96:	2353      	movs	r3, #83	; 0x53
 8005d98:	a904      	add	r1, sp, #16
 8005d9a:	185b      	adds	r3, r3, r1
 8005d9c:	2120      	movs	r1, #32
 8005d9e:	7019      	strb	r1, [r3, #0]
 8005da0:	0713      	lsls	r3, r2, #28
 8005da2:	d504      	bpl.n	8005dae <_svfiprintf_r+0xc6>
 8005da4:	2353      	movs	r3, #83	; 0x53
 8005da6:	a904      	add	r1, sp, #16
 8005da8:	185b      	adds	r3, r3, r1
 8005daa:	212b      	movs	r1, #43	; 0x2b
 8005dac:	7019      	strb	r1, [r3, #0]
 8005dae:	7833      	ldrb	r3, [r6, #0]
 8005db0:	2b2a      	cmp	r3, #42	; 0x2a
 8005db2:	d016      	beq.n	8005de2 <_svfiprintf_r+0xfa>
 8005db4:	0035      	movs	r5, r6
 8005db6:	2100      	movs	r1, #0
 8005db8:	200a      	movs	r0, #10
 8005dba:	68e3      	ldr	r3, [r4, #12]
 8005dbc:	782a      	ldrb	r2, [r5, #0]
 8005dbe:	1c6e      	adds	r6, r5, #1
 8005dc0:	3a30      	subs	r2, #48	; 0x30
 8005dc2:	2a09      	cmp	r2, #9
 8005dc4:	d94e      	bls.n	8005e64 <_svfiprintf_r+0x17c>
 8005dc6:	2900      	cmp	r1, #0
 8005dc8:	d111      	bne.n	8005dee <_svfiprintf_r+0x106>
 8005dca:	e017      	b.n	8005dfc <_svfiprintf_r+0x114>
 8005dcc:	3501      	adds	r5, #1
 8005dce:	e7af      	b.n	8005d30 <_svfiprintf_r+0x48>
 8005dd0:	9b05      	ldr	r3, [sp, #20]
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	1ac0      	subs	r0, r0, r3
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	4083      	lsls	r3, r0
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	002e      	movs	r6, r5
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	e7cc      	b.n	8005d7c <_svfiprintf_r+0x94>
 8005de2:	9b07      	ldr	r3, [sp, #28]
 8005de4:	1d19      	adds	r1, r3, #4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	9107      	str	r1, [sp, #28]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	db01      	blt.n	8005df2 <_svfiprintf_r+0x10a>
 8005dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8005df0:	e004      	b.n	8005dfc <_svfiprintf_r+0x114>
 8005df2:	425b      	negs	r3, r3
 8005df4:	60e3      	str	r3, [r4, #12]
 8005df6:	2302      	movs	r3, #2
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	6023      	str	r3, [r4, #0]
 8005dfc:	782b      	ldrb	r3, [r5, #0]
 8005dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8005e00:	d10a      	bne.n	8005e18 <_svfiprintf_r+0x130>
 8005e02:	786b      	ldrb	r3, [r5, #1]
 8005e04:	2b2a      	cmp	r3, #42	; 0x2a
 8005e06:	d135      	bne.n	8005e74 <_svfiprintf_r+0x18c>
 8005e08:	9b07      	ldr	r3, [sp, #28]
 8005e0a:	3502      	adds	r5, #2
 8005e0c:	1d1a      	adds	r2, r3, #4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	9207      	str	r2, [sp, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	db2b      	blt.n	8005e6e <_svfiprintf_r+0x186>
 8005e16:	9309      	str	r3, [sp, #36]	; 0x24
 8005e18:	4e2f      	ldr	r6, [pc, #188]	; (8005ed8 <_svfiprintf_r+0x1f0>)
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	0030      	movs	r0, r6
 8005e1e:	7829      	ldrb	r1, [r5, #0]
 8005e20:	f000 fdaa 	bl	8006978 <memchr>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d006      	beq.n	8005e36 <_svfiprintf_r+0x14e>
 8005e28:	2340      	movs	r3, #64	; 0x40
 8005e2a:	1b80      	subs	r0, r0, r6
 8005e2c:	4083      	lsls	r3, r0
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	3501      	adds	r5, #1
 8005e32:	4313      	orrs	r3, r2
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	7829      	ldrb	r1, [r5, #0]
 8005e38:	2206      	movs	r2, #6
 8005e3a:	4828      	ldr	r0, [pc, #160]	; (8005edc <_svfiprintf_r+0x1f4>)
 8005e3c:	1c6e      	adds	r6, r5, #1
 8005e3e:	7621      	strb	r1, [r4, #24]
 8005e40:	f000 fd9a 	bl	8006978 <memchr>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d03c      	beq.n	8005ec2 <_svfiprintf_r+0x1da>
 8005e48:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <_svfiprintf_r+0x1f8>)
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d125      	bne.n	8005e9a <_svfiprintf_r+0x1b2>
 8005e4e:	2207      	movs	r2, #7
 8005e50:	9b07      	ldr	r3, [sp, #28]
 8005e52:	3307      	adds	r3, #7
 8005e54:	4393      	bics	r3, r2
 8005e56:	3308      	adds	r3, #8
 8005e58:	9307      	str	r3, [sp, #28]
 8005e5a:	6963      	ldr	r3, [r4, #20]
 8005e5c:	9a04      	ldr	r2, [sp, #16]
 8005e5e:	189b      	adds	r3, r3, r2
 8005e60:	6163      	str	r3, [r4, #20]
 8005e62:	e764      	b.n	8005d2e <_svfiprintf_r+0x46>
 8005e64:	4343      	muls	r3, r0
 8005e66:	0035      	movs	r5, r6
 8005e68:	2101      	movs	r1, #1
 8005e6a:	189b      	adds	r3, r3, r2
 8005e6c:	e7a6      	b.n	8005dbc <_svfiprintf_r+0xd4>
 8005e6e:	2301      	movs	r3, #1
 8005e70:	425b      	negs	r3, r3
 8005e72:	e7d0      	b.n	8005e16 <_svfiprintf_r+0x12e>
 8005e74:	2300      	movs	r3, #0
 8005e76:	200a      	movs	r0, #10
 8005e78:	001a      	movs	r2, r3
 8005e7a:	3501      	adds	r5, #1
 8005e7c:	6063      	str	r3, [r4, #4]
 8005e7e:	7829      	ldrb	r1, [r5, #0]
 8005e80:	1c6e      	adds	r6, r5, #1
 8005e82:	3930      	subs	r1, #48	; 0x30
 8005e84:	2909      	cmp	r1, #9
 8005e86:	d903      	bls.n	8005e90 <_svfiprintf_r+0x1a8>
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0c5      	beq.n	8005e18 <_svfiprintf_r+0x130>
 8005e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e8e:	e7c3      	b.n	8005e18 <_svfiprintf_r+0x130>
 8005e90:	4342      	muls	r2, r0
 8005e92:	0035      	movs	r5, r6
 8005e94:	2301      	movs	r3, #1
 8005e96:	1852      	adds	r2, r2, r1
 8005e98:	e7f1      	b.n	8005e7e <_svfiprintf_r+0x196>
 8005e9a:	aa07      	add	r2, sp, #28
 8005e9c:	9200      	str	r2, [sp, #0]
 8005e9e:	0021      	movs	r1, r4
 8005ea0:	003a      	movs	r2, r7
 8005ea2:	4b10      	ldr	r3, [pc, #64]	; (8005ee4 <_svfiprintf_r+0x1fc>)
 8005ea4:	9803      	ldr	r0, [sp, #12]
 8005ea6:	e000      	b.n	8005eaa <_svfiprintf_r+0x1c2>
 8005ea8:	bf00      	nop
 8005eaa:	9004      	str	r0, [sp, #16]
 8005eac:	9b04      	ldr	r3, [sp, #16]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	d1d3      	bne.n	8005e5a <_svfiprintf_r+0x172>
 8005eb2:	89bb      	ldrh	r3, [r7, #12]
 8005eb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005eb6:	065b      	lsls	r3, r3, #25
 8005eb8:	d400      	bmi.n	8005ebc <_svfiprintf_r+0x1d4>
 8005eba:	e72c      	b.n	8005d16 <_svfiprintf_r+0x2e>
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	4240      	negs	r0, r0
 8005ec0:	e729      	b.n	8005d16 <_svfiprintf_r+0x2e>
 8005ec2:	aa07      	add	r2, sp, #28
 8005ec4:	9200      	str	r2, [sp, #0]
 8005ec6:	0021      	movs	r1, r4
 8005ec8:	003a      	movs	r2, r7
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <_svfiprintf_r+0x1fc>)
 8005ecc:	9803      	ldr	r0, [sp, #12]
 8005ece:	f000 fa41 	bl	8006354 <_printf_i>
 8005ed2:	e7ea      	b.n	8005eaa <_svfiprintf_r+0x1c2>
 8005ed4:	08007b40 	.word	0x08007b40
 8005ed8:	08007b46 	.word	0x08007b46
 8005edc:	08007b4a 	.word	0x08007b4a
 8005ee0:	00000000 	.word	0x00000000
 8005ee4:	08005c25 	.word	0x08005c25

08005ee8 <_sungetc_r>:
 8005ee8:	b570      	push	{r4, r5, r6, lr}
 8005eea:	0014      	movs	r4, r2
 8005eec:	1c4b      	adds	r3, r1, #1
 8005eee:	d103      	bne.n	8005ef8 <_sungetc_r+0x10>
 8005ef0:	2501      	movs	r5, #1
 8005ef2:	426d      	negs	r5, r5
 8005ef4:	0028      	movs	r0, r5
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	8993      	ldrh	r3, [r2, #12]
 8005efa:	2220      	movs	r2, #32
 8005efc:	4393      	bics	r3, r2
 8005efe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005f00:	81a3      	strh	r3, [r4, #12]
 8005f02:	b2ce      	uxtb	r6, r1
 8005f04:	6863      	ldr	r3, [r4, #4]
 8005f06:	b2cd      	uxtb	r5, r1
 8005f08:	2a00      	cmp	r2, #0
 8005f0a:	d010      	beq.n	8005f2e <_sungetc_r+0x46>
 8005f0c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	dd07      	ble.n	8005f22 <_sungetc_r+0x3a>
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	701e      	strb	r6, [r3, #0]
 8005f1a:	6863      	ldr	r3, [r4, #4]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	6063      	str	r3, [r4, #4]
 8005f20:	e7e8      	b.n	8005ef4 <_sungetc_r+0xc>
 8005f22:	0021      	movs	r1, r4
 8005f24:	f000 fcc4 	bl	80068b0 <__submore>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	d0f2      	beq.n	8005f12 <_sungetc_r+0x2a>
 8005f2c:	e7e0      	b.n	8005ef0 <_sungetc_r+0x8>
 8005f2e:	6921      	ldr	r1, [r4, #16]
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	2900      	cmp	r1, #0
 8005f34:	d007      	beq.n	8005f46 <_sungetc_r+0x5e>
 8005f36:	4291      	cmp	r1, r2
 8005f38:	d205      	bcs.n	8005f46 <_sungetc_r+0x5e>
 8005f3a:	1e51      	subs	r1, r2, #1
 8005f3c:	7808      	ldrb	r0, [r1, #0]
 8005f3e:	42a8      	cmp	r0, r5
 8005f40:	d101      	bne.n	8005f46 <_sungetc_r+0x5e>
 8005f42:	6021      	str	r1, [r4, #0]
 8005f44:	e7ea      	b.n	8005f1c <_sungetc_r+0x34>
 8005f46:	6423      	str	r3, [r4, #64]	; 0x40
 8005f48:	0023      	movs	r3, r4
 8005f4a:	3344      	adds	r3, #68	; 0x44
 8005f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005f4e:	2303      	movs	r3, #3
 8005f50:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f52:	0023      	movs	r3, r4
 8005f54:	3346      	adds	r3, #70	; 0x46
 8005f56:	63e2      	str	r2, [r4, #60]	; 0x3c
 8005f58:	701e      	strb	r6, [r3, #0]
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e7de      	b.n	8005f1e <_sungetc_r+0x36>

08005f60 <__ssrefill_r>:
 8005f60:	b510      	push	{r4, lr}
 8005f62:	000c      	movs	r4, r1
 8005f64:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f66:	2900      	cmp	r1, #0
 8005f68:	d00e      	beq.n	8005f88 <__ssrefill_r+0x28>
 8005f6a:	0023      	movs	r3, r4
 8005f6c:	3344      	adds	r3, #68	; 0x44
 8005f6e:	4299      	cmp	r1, r3
 8005f70:	d001      	beq.n	8005f76 <__ssrefill_r+0x16>
 8005f72:	f7ff fd59 	bl	8005a28 <_free_r>
 8005f76:	2000      	movs	r0, #0
 8005f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f7a:	6360      	str	r0, [r4, #52]	; 0x34
 8005f7c:	6063      	str	r3, [r4, #4]
 8005f7e:	4283      	cmp	r3, r0
 8005f80:	d002      	beq.n	8005f88 <__ssrefill_r+0x28>
 8005f82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005f84:	6023      	str	r3, [r4, #0]
 8005f86:	bd10      	pop	{r4, pc}
 8005f88:	6923      	ldr	r3, [r4, #16]
 8005f8a:	2001      	movs	r0, #1
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	89a2      	ldrh	r2, [r4, #12]
 8005f92:	6063      	str	r3, [r4, #4]
 8005f94:	3320      	adds	r3, #32
 8005f96:	4313      	orrs	r3, r2
 8005f98:	81a3      	strh	r3, [r4, #12]
 8005f9a:	4240      	negs	r0, r0
 8005f9c:	e7f3      	b.n	8005f86 <__ssrefill_r+0x26>
	...

08005fa0 <__ssvfiscanf_r>:
 8005fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa2:	4cae      	ldr	r4, [pc, #696]	; (800625c <__ssvfiscanf_r+0x2bc>)
 8005fa4:	0006      	movs	r6, r0
 8005fa6:	44a5      	add	sp, r4
 8005fa8:	000c      	movs	r4, r1
 8005faa:	2100      	movs	r1, #0
 8005fac:	20be      	movs	r0, #190	; 0xbe
 8005fae:	9146      	str	r1, [sp, #280]	; 0x118
 8005fb0:	9147      	str	r1, [sp, #284]	; 0x11c
 8005fb2:	a903      	add	r1, sp, #12
 8005fb4:	9148      	str	r1, [sp, #288]	; 0x120
 8005fb6:	49aa      	ldr	r1, [pc, #680]	; (8006260 <__ssvfiscanf_r+0x2c0>)
 8005fb8:	0040      	lsls	r0, r0, #1
 8005fba:	ad43      	add	r5, sp, #268	; 0x10c
 8005fbc:	5029      	str	r1, [r5, r0]
 8005fbe:	25c0      	movs	r5, #192	; 0xc0
 8005fc0:	49a8      	ldr	r1, [pc, #672]	; (8006264 <__ssvfiscanf_r+0x2c4>)
 8005fc2:	006d      	lsls	r5, r5, #1
 8005fc4:	a843      	add	r0, sp, #268	; 0x10c
 8005fc6:	5141      	str	r1, [r0, r5]
 8005fc8:	9302      	str	r3, [sp, #8]
 8005fca:	7815      	ldrb	r5, [r2, #0]
 8005fcc:	2d00      	cmp	r5, #0
 8005fce:	d100      	bne.n	8005fd2 <__ssvfiscanf_r+0x32>
 8005fd0:	e141      	b.n	8006256 <__ssvfiscanf_r+0x2b6>
 8005fd2:	4ba5      	ldr	r3, [pc, #660]	; (8006268 <__ssvfiscanf_r+0x2c8>)
 8005fd4:	2008      	movs	r0, #8
 8005fd6:	5d59      	ldrb	r1, [r3, r5]
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	2308      	movs	r3, #8
 8005fdc:	1c57      	adds	r7, r2, #1
 8005fde:	400b      	ands	r3, r1
 8005fe0:	4201      	tst	r1, r0
 8005fe2:	d01e      	beq.n	8006022 <__ssvfiscanf_r+0x82>
 8005fe4:	6863      	ldr	r3, [r4, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	dd11      	ble.n	800600e <__ssvfiscanf_r+0x6e>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	9900      	ldr	r1, [sp, #0]
 8005fee:	781a      	ldrb	r2, [r3, #0]
 8005ff0:	5c8a      	ldrb	r2, [r1, r2]
 8005ff2:	2108      	movs	r1, #8
 8005ff4:	420a      	tst	r2, r1
 8005ff6:	d101      	bne.n	8005ffc <__ssvfiscanf_r+0x5c>
 8005ff8:	003a      	movs	r2, r7
 8005ffa:	e7e6      	b.n	8005fca <__ssvfiscanf_r+0x2a>
 8005ffc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005ffe:	3301      	adds	r3, #1
 8006000:	3201      	adds	r2, #1
 8006002:	9247      	str	r2, [sp, #284]	; 0x11c
 8006004:	6862      	ldr	r2, [r4, #4]
 8006006:	6023      	str	r3, [r4, #0]
 8006008:	3a01      	subs	r2, #1
 800600a:	6062      	str	r2, [r4, #4]
 800600c:	e7ea      	b.n	8005fe4 <__ssvfiscanf_r+0x44>
 800600e:	22c0      	movs	r2, #192	; 0xc0
 8006010:	ab43      	add	r3, sp, #268	; 0x10c
 8006012:	0052      	lsls	r2, r2, #1
 8006014:	0021      	movs	r1, r4
 8006016:	0030      	movs	r0, r6
 8006018:	589b      	ldr	r3, [r3, r2]
 800601a:	4798      	blx	r3
 800601c:	2800      	cmp	r0, #0
 800601e:	d0e4      	beq.n	8005fea <__ssvfiscanf_r+0x4a>
 8006020:	e7ea      	b.n	8005ff8 <__ssvfiscanf_r+0x58>
 8006022:	2d25      	cmp	r5, #37	; 0x25
 8006024:	d162      	bne.n	80060ec <__ssvfiscanf_r+0x14c>
 8006026:	9345      	str	r3, [sp, #276]	; 0x114
 8006028:	9343      	str	r3, [sp, #268]	; 0x10c
 800602a:	7853      	ldrb	r3, [r2, #1]
 800602c:	2b2a      	cmp	r3, #42	; 0x2a
 800602e:	d102      	bne.n	8006036 <__ssvfiscanf_r+0x96>
 8006030:	3b1a      	subs	r3, #26
 8006032:	9343      	str	r3, [sp, #268]	; 0x10c
 8006034:	1c97      	adds	r7, r2, #2
 8006036:	003d      	movs	r5, r7
 8006038:	220a      	movs	r2, #10
 800603a:	7829      	ldrb	r1, [r5, #0]
 800603c:	1c6b      	adds	r3, r5, #1
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	000b      	movs	r3, r1
 8006042:	3b30      	subs	r3, #48	; 0x30
 8006044:	2b09      	cmp	r3, #9
 8006046:	d91e      	bls.n	8006086 <__ssvfiscanf_r+0xe6>
 8006048:	4f88      	ldr	r7, [pc, #544]	; (800626c <__ssvfiscanf_r+0x2cc>)
 800604a:	2203      	movs	r2, #3
 800604c:	0038      	movs	r0, r7
 800604e:	f000 fc93 	bl	8006978 <memchr>
 8006052:	2800      	cmp	r0, #0
 8006054:	d006      	beq.n	8006064 <__ssvfiscanf_r+0xc4>
 8006056:	2301      	movs	r3, #1
 8006058:	1bc0      	subs	r0, r0, r7
 800605a:	4083      	lsls	r3, r0
 800605c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800605e:	9d01      	ldr	r5, [sp, #4]
 8006060:	4313      	orrs	r3, r2
 8006062:	9343      	str	r3, [sp, #268]	; 0x10c
 8006064:	1c6f      	adds	r7, r5, #1
 8006066:	782d      	ldrb	r5, [r5, #0]
 8006068:	2d78      	cmp	r5, #120	; 0x78
 800606a:	d807      	bhi.n	800607c <__ssvfiscanf_r+0xdc>
 800606c:	2d57      	cmp	r5, #87	; 0x57
 800606e:	d811      	bhi.n	8006094 <__ssvfiscanf_r+0xf4>
 8006070:	2d25      	cmp	r5, #37	; 0x25
 8006072:	d03b      	beq.n	80060ec <__ssvfiscanf_r+0x14c>
 8006074:	d835      	bhi.n	80060e2 <__ssvfiscanf_r+0x142>
 8006076:	2d00      	cmp	r5, #0
 8006078:	d100      	bne.n	800607c <__ssvfiscanf_r+0xdc>
 800607a:	e0e9      	b.n	8006250 <__ssvfiscanf_r+0x2b0>
 800607c:	2303      	movs	r3, #3
 800607e:	9349      	str	r3, [sp, #292]	; 0x124
 8006080:	3307      	adds	r3, #7
 8006082:	9344      	str	r3, [sp, #272]	; 0x110
 8006084:	e06d      	b.n	8006162 <__ssvfiscanf_r+0x1c2>
 8006086:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006088:	9d01      	ldr	r5, [sp, #4]
 800608a:	4353      	muls	r3, r2
 800608c:	3b30      	subs	r3, #48	; 0x30
 800608e:	185b      	adds	r3, r3, r1
 8006090:	9345      	str	r3, [sp, #276]	; 0x114
 8006092:	e7d2      	b.n	800603a <__ssvfiscanf_r+0x9a>
 8006094:	0028      	movs	r0, r5
 8006096:	3858      	subs	r0, #88	; 0x58
 8006098:	2820      	cmp	r0, #32
 800609a:	d8ef      	bhi.n	800607c <__ssvfiscanf_r+0xdc>
 800609c:	f7fa f83a 	bl	8000114 <__gnu_thumb1_case_shi>
 80060a0:	ffee004d 	.word	0xffee004d
 80060a4:	007fffee 	.word	0x007fffee
 80060a8:	ffeeffee 	.word	0xffeeffee
 80060ac:	ffeeffee 	.word	0xffeeffee
 80060b0:	ffeeffee 	.word	0xffeeffee
 80060b4:	008affee 	.word	0x008affee
 80060b8:	0024007d 	.word	0x0024007d
 80060bc:	00240024 	.word	0x00240024
 80060c0:	0059ffee 	.word	0x0059ffee
 80060c4:	ffeeffee 	.word	0xffeeffee
 80060c8:	ffeeffee 	.word	0xffeeffee
 80060cc:	005d0092 	.word	0x005d0092
 80060d0:	ffee0049 	.word	0xffee0049
 80060d4:	0090ffee 	.word	0x0090ffee
 80060d8:	007dffee 	.word	0x007dffee
 80060dc:	ffeeffee 	.word	0xffeeffee
 80060e0:	004d      	.short	0x004d
 80060e2:	3d45      	subs	r5, #69	; 0x45
 80060e4:	2d02      	cmp	r5, #2
 80060e6:	d8c9      	bhi.n	800607c <__ssvfiscanf_r+0xdc>
 80060e8:	2305      	movs	r3, #5
 80060ea:	e039      	b.n	8006160 <__ssvfiscanf_r+0x1c0>
 80060ec:	6863      	ldr	r3, [r4, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	dd0d      	ble.n	800610e <__ssvfiscanf_r+0x16e>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	781a      	ldrb	r2, [r3, #0]
 80060f6:	42aa      	cmp	r2, r5
 80060f8:	d000      	beq.n	80060fc <__ssvfiscanf_r+0x15c>
 80060fa:	e0ac      	b.n	8006256 <__ssvfiscanf_r+0x2b6>
 80060fc:	3301      	adds	r3, #1
 80060fe:	6862      	ldr	r2, [r4, #4]
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006104:	3a01      	subs	r2, #1
 8006106:	3301      	adds	r3, #1
 8006108:	6062      	str	r2, [r4, #4]
 800610a:	9347      	str	r3, [sp, #284]	; 0x11c
 800610c:	e774      	b.n	8005ff8 <__ssvfiscanf_r+0x58>
 800610e:	22c0      	movs	r2, #192	; 0xc0
 8006110:	ab43      	add	r3, sp, #268	; 0x10c
 8006112:	0052      	lsls	r2, r2, #1
 8006114:	0021      	movs	r1, r4
 8006116:	0030      	movs	r0, r6
 8006118:	589b      	ldr	r3, [r3, r2]
 800611a:	4798      	blx	r3
 800611c:	2800      	cmp	r0, #0
 800611e:	d0e8      	beq.n	80060f2 <__ssvfiscanf_r+0x152>
 8006120:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006122:	2800      	cmp	r0, #0
 8006124:	d000      	beq.n	8006128 <__ssvfiscanf_r+0x188>
 8006126:	e08f      	b.n	8006248 <__ssvfiscanf_r+0x2a8>
 8006128:	3801      	subs	r0, #1
 800612a:	23a5      	movs	r3, #165	; 0xa5
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	449d      	add	sp, r3
 8006130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006132:	2320      	movs	r3, #32
 8006134:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006136:	4313      	orrs	r3, r2
 8006138:	9343      	str	r3, [sp, #268]	; 0x10c
 800613a:	2380      	movs	r3, #128	; 0x80
 800613c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	4313      	orrs	r3, r2
 8006142:	9343      	str	r3, [sp, #268]	; 0x10c
 8006144:	2310      	movs	r3, #16
 8006146:	9344      	str	r3, [sp, #272]	; 0x110
 8006148:	236e      	movs	r3, #110	; 0x6e
 800614a:	42ab      	cmp	r3, r5
 800614c:	419b      	sbcs	r3, r3
 800614e:	425b      	negs	r3, r3
 8006150:	e001      	b.n	8006156 <__ssvfiscanf_r+0x1b6>
 8006152:	2300      	movs	r3, #0
 8006154:	9344      	str	r3, [sp, #272]	; 0x110
 8006156:	3303      	adds	r3, #3
 8006158:	e002      	b.n	8006160 <__ssvfiscanf_r+0x1c0>
 800615a:	2308      	movs	r3, #8
 800615c:	9344      	str	r3, [sp, #272]	; 0x110
 800615e:	3b04      	subs	r3, #4
 8006160:	9349      	str	r3, [sp, #292]	; 0x124
 8006162:	6863      	ldr	r3, [r4, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	dd3c      	ble.n	80061e2 <__ssvfiscanf_r+0x242>
 8006168:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800616a:	065b      	lsls	r3, r3, #25
 800616c:	d406      	bmi.n	800617c <__ssvfiscanf_r+0x1dc>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	9900      	ldr	r1, [sp, #0]
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	5c8a      	ldrb	r2, [r1, r2]
 8006176:	2108      	movs	r1, #8
 8006178:	420a      	tst	r2, r1
 800617a:	d13c      	bne.n	80061f6 <__ssvfiscanf_r+0x256>
 800617c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800617e:	2b02      	cmp	r3, #2
 8006180:	dc4e      	bgt.n	8006220 <__ssvfiscanf_r+0x280>
 8006182:	0022      	movs	r2, r4
 8006184:	0030      	movs	r0, r6
 8006186:	ab02      	add	r3, sp, #8
 8006188:	a943      	add	r1, sp, #268	; 0x10c
 800618a:	f000 f9f3 	bl	8006574 <_scanf_chars>
 800618e:	2801      	cmp	r0, #1
 8006190:	d061      	beq.n	8006256 <__ssvfiscanf_r+0x2b6>
 8006192:	2802      	cmp	r0, #2
 8006194:	d000      	beq.n	8006198 <__ssvfiscanf_r+0x1f8>
 8006196:	e72f      	b.n	8005ff8 <__ssvfiscanf_r+0x58>
 8006198:	e7c2      	b.n	8006120 <__ssvfiscanf_r+0x180>
 800619a:	230a      	movs	r3, #10
 800619c:	e7d3      	b.n	8006146 <__ssvfiscanf_r+0x1a6>
 800619e:	0039      	movs	r1, r7
 80061a0:	a803      	add	r0, sp, #12
 80061a2:	f000 fb49 	bl	8006838 <__sccl>
 80061a6:	2340      	movs	r3, #64	; 0x40
 80061a8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80061aa:	0007      	movs	r7, r0
 80061ac:	4313      	orrs	r3, r2
 80061ae:	9343      	str	r3, [sp, #268]	; 0x10c
 80061b0:	2301      	movs	r3, #1
 80061b2:	e7d5      	b.n	8006160 <__ssvfiscanf_r+0x1c0>
 80061b4:	2340      	movs	r3, #64	; 0x40
 80061b6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80061b8:	4313      	orrs	r3, r2
 80061ba:	9343      	str	r3, [sp, #268]	; 0x10c
 80061bc:	2300      	movs	r3, #0
 80061be:	e7cf      	b.n	8006160 <__ssvfiscanf_r+0x1c0>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e7cd      	b.n	8006160 <__ssvfiscanf_r+0x1c0>
 80061c4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80061c6:	06d3      	lsls	r3, r2, #27
 80061c8:	d500      	bpl.n	80061cc <__ssvfiscanf_r+0x22c>
 80061ca:	e715      	b.n	8005ff8 <__ssvfiscanf_r+0x58>
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80061d0:	1d18      	adds	r0, r3, #4
 80061d2:	9002      	str	r0, [sp, #8]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	07d5      	lsls	r5, r2, #31
 80061d8:	d501      	bpl.n	80061de <__ssvfiscanf_r+0x23e>
 80061da:	8019      	strh	r1, [r3, #0]
 80061dc:	e70c      	b.n	8005ff8 <__ssvfiscanf_r+0x58>
 80061de:	6019      	str	r1, [r3, #0]
 80061e0:	e70a      	b.n	8005ff8 <__ssvfiscanf_r+0x58>
 80061e2:	22c0      	movs	r2, #192	; 0xc0
 80061e4:	ab43      	add	r3, sp, #268	; 0x10c
 80061e6:	0052      	lsls	r2, r2, #1
 80061e8:	0021      	movs	r1, r4
 80061ea:	0030      	movs	r0, r6
 80061ec:	589b      	ldr	r3, [r3, r2]
 80061ee:	4798      	blx	r3
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d0b9      	beq.n	8006168 <__ssvfiscanf_r+0x1c8>
 80061f4:	e794      	b.n	8006120 <__ssvfiscanf_r+0x180>
 80061f6:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80061f8:	3201      	adds	r2, #1
 80061fa:	9247      	str	r2, [sp, #284]	; 0x11c
 80061fc:	6862      	ldr	r2, [r4, #4]
 80061fe:	3a01      	subs	r2, #1
 8006200:	6062      	str	r2, [r4, #4]
 8006202:	2a00      	cmp	r2, #0
 8006204:	dd02      	ble.n	800620c <__ssvfiscanf_r+0x26c>
 8006206:	3301      	adds	r3, #1
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	e7b0      	b.n	800616e <__ssvfiscanf_r+0x1ce>
 800620c:	22c0      	movs	r2, #192	; 0xc0
 800620e:	ab43      	add	r3, sp, #268	; 0x10c
 8006210:	0052      	lsls	r2, r2, #1
 8006212:	0021      	movs	r1, r4
 8006214:	0030      	movs	r0, r6
 8006216:	589b      	ldr	r3, [r3, r2]
 8006218:	4798      	blx	r3
 800621a:	2800      	cmp	r0, #0
 800621c:	d0a7      	beq.n	800616e <__ssvfiscanf_r+0x1ce>
 800621e:	e77f      	b.n	8006120 <__ssvfiscanf_r+0x180>
 8006220:	2b04      	cmp	r3, #4
 8006222:	dc06      	bgt.n	8006232 <__ssvfiscanf_r+0x292>
 8006224:	0022      	movs	r2, r4
 8006226:	0030      	movs	r0, r6
 8006228:	ab02      	add	r3, sp, #8
 800622a:	a943      	add	r1, sp, #268	; 0x10c
 800622c:	f000 fa00 	bl	8006630 <_scanf_i>
 8006230:	e7ad      	b.n	800618e <__ssvfiscanf_r+0x1ee>
 8006232:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <__ssvfiscanf_r+0x2d0>)
 8006234:	2b00      	cmp	r3, #0
 8006236:	d100      	bne.n	800623a <__ssvfiscanf_r+0x29a>
 8006238:	e6de      	b.n	8005ff8 <__ssvfiscanf_r+0x58>
 800623a:	0022      	movs	r2, r4
 800623c:	0030      	movs	r0, r6
 800623e:	ab02      	add	r3, sp, #8
 8006240:	a943      	add	r1, sp, #268	; 0x10c
 8006242:	e000      	b.n	8006246 <__ssvfiscanf_r+0x2a6>
 8006244:	bf00      	nop
 8006246:	e7a2      	b.n	800618e <__ssvfiscanf_r+0x1ee>
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	065b      	lsls	r3, r3, #25
 800624c:	d400      	bmi.n	8006250 <__ssvfiscanf_r+0x2b0>
 800624e:	e76c      	b.n	800612a <__ssvfiscanf_r+0x18a>
 8006250:	2001      	movs	r0, #1
 8006252:	4240      	negs	r0, r0
 8006254:	e769      	b.n	800612a <__ssvfiscanf_r+0x18a>
 8006256:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006258:	e767      	b.n	800612a <__ssvfiscanf_r+0x18a>
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	fffffd6c 	.word	0xfffffd6c
 8006260:	08005ee9 	.word	0x08005ee9
 8006264:	08005f61 	.word	0x08005f61
 8006268:	08007b8f 	.word	0x08007b8f
 800626c:	08007b46 	.word	0x08007b46
 8006270:	00000000 	.word	0x00000000

08006274 <_printf_common>:
 8006274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006276:	0016      	movs	r6, r2
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	688a      	ldr	r2, [r1, #8]
 800627c:	690b      	ldr	r3, [r1, #16]
 800627e:	000c      	movs	r4, r1
 8006280:	9000      	str	r0, [sp, #0]
 8006282:	4293      	cmp	r3, r2
 8006284:	da00      	bge.n	8006288 <_printf_common+0x14>
 8006286:	0013      	movs	r3, r2
 8006288:	0022      	movs	r2, r4
 800628a:	6033      	str	r3, [r6, #0]
 800628c:	3243      	adds	r2, #67	; 0x43
 800628e:	7812      	ldrb	r2, [r2, #0]
 8006290:	2a00      	cmp	r2, #0
 8006292:	d001      	beq.n	8006298 <_printf_common+0x24>
 8006294:	3301      	adds	r3, #1
 8006296:	6033      	str	r3, [r6, #0]
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	069b      	lsls	r3, r3, #26
 800629c:	d502      	bpl.n	80062a4 <_printf_common+0x30>
 800629e:	6833      	ldr	r3, [r6, #0]
 80062a0:	3302      	adds	r3, #2
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	2306      	movs	r3, #6
 80062a8:	0015      	movs	r5, r2
 80062aa:	401d      	ands	r5, r3
 80062ac:	421a      	tst	r2, r3
 80062ae:	d027      	beq.n	8006300 <_printf_common+0x8c>
 80062b0:	0023      	movs	r3, r4
 80062b2:	3343      	adds	r3, #67	; 0x43
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	1e5a      	subs	r2, r3, #1
 80062b8:	4193      	sbcs	r3, r2
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	0692      	lsls	r2, r2, #26
 80062be:	d430      	bmi.n	8006322 <_printf_common+0xae>
 80062c0:	0022      	movs	r2, r4
 80062c2:	9901      	ldr	r1, [sp, #4]
 80062c4:	9800      	ldr	r0, [sp, #0]
 80062c6:	9d08      	ldr	r5, [sp, #32]
 80062c8:	3243      	adds	r2, #67	; 0x43
 80062ca:	47a8      	blx	r5
 80062cc:	3001      	adds	r0, #1
 80062ce:	d025      	beq.n	800631c <_printf_common+0xa8>
 80062d0:	2206      	movs	r2, #6
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	2500      	movs	r5, #0
 80062d6:	4013      	ands	r3, r2
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d105      	bne.n	80062e8 <_printf_common+0x74>
 80062dc:	6833      	ldr	r3, [r6, #0]
 80062de:	68e5      	ldr	r5, [r4, #12]
 80062e0:	1aed      	subs	r5, r5, r3
 80062e2:	43eb      	mvns	r3, r5
 80062e4:	17db      	asrs	r3, r3, #31
 80062e6:	401d      	ands	r5, r3
 80062e8:	68a3      	ldr	r3, [r4, #8]
 80062ea:	6922      	ldr	r2, [r4, #16]
 80062ec:	4293      	cmp	r3, r2
 80062ee:	dd01      	ble.n	80062f4 <_printf_common+0x80>
 80062f0:	1a9b      	subs	r3, r3, r2
 80062f2:	18ed      	adds	r5, r5, r3
 80062f4:	2600      	movs	r6, #0
 80062f6:	42b5      	cmp	r5, r6
 80062f8:	d120      	bne.n	800633c <_printf_common+0xc8>
 80062fa:	2000      	movs	r0, #0
 80062fc:	e010      	b.n	8006320 <_printf_common+0xac>
 80062fe:	3501      	adds	r5, #1
 8006300:	68e3      	ldr	r3, [r4, #12]
 8006302:	6832      	ldr	r2, [r6, #0]
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	42ab      	cmp	r3, r5
 8006308:	ddd2      	ble.n	80062b0 <_printf_common+0x3c>
 800630a:	0022      	movs	r2, r4
 800630c:	2301      	movs	r3, #1
 800630e:	9901      	ldr	r1, [sp, #4]
 8006310:	9800      	ldr	r0, [sp, #0]
 8006312:	9f08      	ldr	r7, [sp, #32]
 8006314:	3219      	adds	r2, #25
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	d1f0      	bne.n	80062fe <_printf_common+0x8a>
 800631c:	2001      	movs	r0, #1
 800631e:	4240      	negs	r0, r0
 8006320:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006322:	2030      	movs	r0, #48	; 0x30
 8006324:	18e1      	adds	r1, r4, r3
 8006326:	3143      	adds	r1, #67	; 0x43
 8006328:	7008      	strb	r0, [r1, #0]
 800632a:	0021      	movs	r1, r4
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	3145      	adds	r1, #69	; 0x45
 8006330:	7809      	ldrb	r1, [r1, #0]
 8006332:	18a2      	adds	r2, r4, r2
 8006334:	3243      	adds	r2, #67	; 0x43
 8006336:	3302      	adds	r3, #2
 8006338:	7011      	strb	r1, [r2, #0]
 800633a:	e7c1      	b.n	80062c0 <_printf_common+0x4c>
 800633c:	0022      	movs	r2, r4
 800633e:	2301      	movs	r3, #1
 8006340:	9901      	ldr	r1, [sp, #4]
 8006342:	9800      	ldr	r0, [sp, #0]
 8006344:	9f08      	ldr	r7, [sp, #32]
 8006346:	321a      	adds	r2, #26
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	d0e6      	beq.n	800631c <_printf_common+0xa8>
 800634e:	3601      	adds	r6, #1
 8006350:	e7d1      	b.n	80062f6 <_printf_common+0x82>
	...

08006354 <_printf_i>:
 8006354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006356:	b08b      	sub	sp, #44	; 0x2c
 8006358:	9206      	str	r2, [sp, #24]
 800635a:	000a      	movs	r2, r1
 800635c:	3243      	adds	r2, #67	; 0x43
 800635e:	9307      	str	r3, [sp, #28]
 8006360:	9005      	str	r0, [sp, #20]
 8006362:	9204      	str	r2, [sp, #16]
 8006364:	7e0a      	ldrb	r2, [r1, #24]
 8006366:	000c      	movs	r4, r1
 8006368:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800636a:	2a78      	cmp	r2, #120	; 0x78
 800636c:	d809      	bhi.n	8006382 <_printf_i+0x2e>
 800636e:	2a62      	cmp	r2, #98	; 0x62
 8006370:	d80b      	bhi.n	800638a <_printf_i+0x36>
 8006372:	2a00      	cmp	r2, #0
 8006374:	d100      	bne.n	8006378 <_printf_i+0x24>
 8006376:	e0be      	b.n	80064f6 <_printf_i+0x1a2>
 8006378:	497c      	ldr	r1, [pc, #496]	; (800656c <_printf_i+0x218>)
 800637a:	9103      	str	r1, [sp, #12]
 800637c:	2a58      	cmp	r2, #88	; 0x58
 800637e:	d100      	bne.n	8006382 <_printf_i+0x2e>
 8006380:	e093      	b.n	80064aa <_printf_i+0x156>
 8006382:	0026      	movs	r6, r4
 8006384:	3642      	adds	r6, #66	; 0x42
 8006386:	7032      	strb	r2, [r6, #0]
 8006388:	e022      	b.n	80063d0 <_printf_i+0x7c>
 800638a:	0010      	movs	r0, r2
 800638c:	3863      	subs	r0, #99	; 0x63
 800638e:	2815      	cmp	r0, #21
 8006390:	d8f7      	bhi.n	8006382 <_printf_i+0x2e>
 8006392:	f7f9 febf 	bl	8000114 <__gnu_thumb1_case_shi>
 8006396:	0016      	.short	0x0016
 8006398:	fff6001f 	.word	0xfff6001f
 800639c:	fff6fff6 	.word	0xfff6fff6
 80063a0:	001ffff6 	.word	0x001ffff6
 80063a4:	fff6fff6 	.word	0xfff6fff6
 80063a8:	fff6fff6 	.word	0xfff6fff6
 80063ac:	003600a3 	.word	0x003600a3
 80063b0:	fff60083 	.word	0xfff60083
 80063b4:	00b4fff6 	.word	0x00b4fff6
 80063b8:	0036fff6 	.word	0x0036fff6
 80063bc:	fff6fff6 	.word	0xfff6fff6
 80063c0:	0087      	.short	0x0087
 80063c2:	0026      	movs	r6, r4
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	3642      	adds	r6, #66	; 0x42
 80063c8:	1d11      	adds	r1, r2, #4
 80063ca:	6019      	str	r1, [r3, #0]
 80063cc:	6813      	ldr	r3, [r2, #0]
 80063ce:	7033      	strb	r3, [r6, #0]
 80063d0:	2301      	movs	r3, #1
 80063d2:	e0a2      	b.n	800651a <_printf_i+0x1c6>
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	6809      	ldr	r1, [r1, #0]
 80063d8:	1d02      	adds	r2, r0, #4
 80063da:	060d      	lsls	r5, r1, #24
 80063dc:	d50b      	bpl.n	80063f6 <_printf_i+0xa2>
 80063de:	6805      	ldr	r5, [r0, #0]
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	2d00      	cmp	r5, #0
 80063e4:	da03      	bge.n	80063ee <_printf_i+0x9a>
 80063e6:	232d      	movs	r3, #45	; 0x2d
 80063e8:	9a04      	ldr	r2, [sp, #16]
 80063ea:	426d      	negs	r5, r5
 80063ec:	7013      	strb	r3, [r2, #0]
 80063ee:	4b5f      	ldr	r3, [pc, #380]	; (800656c <_printf_i+0x218>)
 80063f0:	270a      	movs	r7, #10
 80063f2:	9303      	str	r3, [sp, #12]
 80063f4:	e01b      	b.n	800642e <_printf_i+0xda>
 80063f6:	6805      	ldr	r5, [r0, #0]
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	0649      	lsls	r1, r1, #25
 80063fc:	d5f1      	bpl.n	80063e2 <_printf_i+0x8e>
 80063fe:	b22d      	sxth	r5, r5
 8006400:	e7ef      	b.n	80063e2 <_printf_i+0x8e>
 8006402:	680d      	ldr	r5, [r1, #0]
 8006404:	6819      	ldr	r1, [r3, #0]
 8006406:	1d08      	adds	r0, r1, #4
 8006408:	6018      	str	r0, [r3, #0]
 800640a:	062e      	lsls	r6, r5, #24
 800640c:	d501      	bpl.n	8006412 <_printf_i+0xbe>
 800640e:	680d      	ldr	r5, [r1, #0]
 8006410:	e003      	b.n	800641a <_printf_i+0xc6>
 8006412:	066d      	lsls	r5, r5, #25
 8006414:	d5fb      	bpl.n	800640e <_printf_i+0xba>
 8006416:	680d      	ldr	r5, [r1, #0]
 8006418:	b2ad      	uxth	r5, r5
 800641a:	4b54      	ldr	r3, [pc, #336]	; (800656c <_printf_i+0x218>)
 800641c:	2708      	movs	r7, #8
 800641e:	9303      	str	r3, [sp, #12]
 8006420:	2a6f      	cmp	r2, #111	; 0x6f
 8006422:	d000      	beq.n	8006426 <_printf_i+0xd2>
 8006424:	3702      	adds	r7, #2
 8006426:	0023      	movs	r3, r4
 8006428:	2200      	movs	r2, #0
 800642a:	3343      	adds	r3, #67	; 0x43
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	6863      	ldr	r3, [r4, #4]
 8006430:	60a3      	str	r3, [r4, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	db03      	blt.n	800643e <_printf_i+0xea>
 8006436:	2104      	movs	r1, #4
 8006438:	6822      	ldr	r2, [r4, #0]
 800643a:	438a      	bics	r2, r1
 800643c:	6022      	str	r2, [r4, #0]
 800643e:	2d00      	cmp	r5, #0
 8006440:	d102      	bne.n	8006448 <_printf_i+0xf4>
 8006442:	9e04      	ldr	r6, [sp, #16]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00c      	beq.n	8006462 <_printf_i+0x10e>
 8006448:	9e04      	ldr	r6, [sp, #16]
 800644a:	0028      	movs	r0, r5
 800644c:	0039      	movs	r1, r7
 800644e:	f7f9 fef1 	bl	8000234 <__aeabi_uidivmod>
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	3e01      	subs	r6, #1
 8006456:	5c5b      	ldrb	r3, [r3, r1]
 8006458:	7033      	strb	r3, [r6, #0]
 800645a:	002b      	movs	r3, r5
 800645c:	0005      	movs	r5, r0
 800645e:	429f      	cmp	r7, r3
 8006460:	d9f3      	bls.n	800644a <_printf_i+0xf6>
 8006462:	2f08      	cmp	r7, #8
 8006464:	d109      	bne.n	800647a <_printf_i+0x126>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	07db      	lsls	r3, r3, #31
 800646a:	d506      	bpl.n	800647a <_printf_i+0x126>
 800646c:	6862      	ldr	r2, [r4, #4]
 800646e:	6923      	ldr	r3, [r4, #16]
 8006470:	429a      	cmp	r2, r3
 8006472:	dc02      	bgt.n	800647a <_printf_i+0x126>
 8006474:	2330      	movs	r3, #48	; 0x30
 8006476:	3e01      	subs	r6, #1
 8006478:	7033      	strb	r3, [r6, #0]
 800647a:	9b04      	ldr	r3, [sp, #16]
 800647c:	1b9b      	subs	r3, r3, r6
 800647e:	6123      	str	r3, [r4, #16]
 8006480:	9b07      	ldr	r3, [sp, #28]
 8006482:	0021      	movs	r1, r4
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	9805      	ldr	r0, [sp, #20]
 8006488:	9b06      	ldr	r3, [sp, #24]
 800648a:	aa09      	add	r2, sp, #36	; 0x24
 800648c:	f7ff fef2 	bl	8006274 <_printf_common>
 8006490:	3001      	adds	r0, #1
 8006492:	d147      	bne.n	8006524 <_printf_i+0x1d0>
 8006494:	2001      	movs	r0, #1
 8006496:	4240      	negs	r0, r0
 8006498:	b00b      	add	sp, #44	; 0x2c
 800649a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800649c:	2220      	movs	r2, #32
 800649e:	6809      	ldr	r1, [r1, #0]
 80064a0:	430a      	orrs	r2, r1
 80064a2:	6022      	str	r2, [r4, #0]
 80064a4:	2278      	movs	r2, #120	; 0x78
 80064a6:	4932      	ldr	r1, [pc, #200]	; (8006570 <_printf_i+0x21c>)
 80064a8:	9103      	str	r1, [sp, #12]
 80064aa:	0021      	movs	r1, r4
 80064ac:	3145      	adds	r1, #69	; 0x45
 80064ae:	700a      	strb	r2, [r1, #0]
 80064b0:	6819      	ldr	r1, [r3, #0]
 80064b2:	6822      	ldr	r2, [r4, #0]
 80064b4:	c920      	ldmia	r1!, {r5}
 80064b6:	0610      	lsls	r0, r2, #24
 80064b8:	d402      	bmi.n	80064c0 <_printf_i+0x16c>
 80064ba:	0650      	lsls	r0, r2, #25
 80064bc:	d500      	bpl.n	80064c0 <_printf_i+0x16c>
 80064be:	b2ad      	uxth	r5, r5
 80064c0:	6019      	str	r1, [r3, #0]
 80064c2:	07d3      	lsls	r3, r2, #31
 80064c4:	d502      	bpl.n	80064cc <_printf_i+0x178>
 80064c6:	2320      	movs	r3, #32
 80064c8:	4313      	orrs	r3, r2
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	2710      	movs	r7, #16
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	d1a9      	bne.n	8006426 <_printf_i+0xd2>
 80064d2:	2220      	movs	r2, #32
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	4393      	bics	r3, r2
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	e7a4      	b.n	8006426 <_printf_i+0xd2>
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	680d      	ldr	r5, [r1, #0]
 80064e0:	1d10      	adds	r0, r2, #4
 80064e2:	6949      	ldr	r1, [r1, #20]
 80064e4:	6018      	str	r0, [r3, #0]
 80064e6:	6813      	ldr	r3, [r2, #0]
 80064e8:	062e      	lsls	r6, r5, #24
 80064ea:	d501      	bpl.n	80064f0 <_printf_i+0x19c>
 80064ec:	6019      	str	r1, [r3, #0]
 80064ee:	e002      	b.n	80064f6 <_printf_i+0x1a2>
 80064f0:	066d      	lsls	r5, r5, #25
 80064f2:	d5fb      	bpl.n	80064ec <_printf_i+0x198>
 80064f4:	8019      	strh	r1, [r3, #0]
 80064f6:	2300      	movs	r3, #0
 80064f8:	9e04      	ldr	r6, [sp, #16]
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	e7c0      	b.n	8006480 <_printf_i+0x12c>
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	1d11      	adds	r1, r2, #4
 8006502:	6019      	str	r1, [r3, #0]
 8006504:	6816      	ldr	r6, [r2, #0]
 8006506:	2100      	movs	r1, #0
 8006508:	0030      	movs	r0, r6
 800650a:	6862      	ldr	r2, [r4, #4]
 800650c:	f000 fa34 	bl	8006978 <memchr>
 8006510:	2800      	cmp	r0, #0
 8006512:	d001      	beq.n	8006518 <_printf_i+0x1c4>
 8006514:	1b80      	subs	r0, r0, r6
 8006516:	6060      	str	r0, [r4, #4]
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	6123      	str	r3, [r4, #16]
 800651c:	2300      	movs	r3, #0
 800651e:	9a04      	ldr	r2, [sp, #16]
 8006520:	7013      	strb	r3, [r2, #0]
 8006522:	e7ad      	b.n	8006480 <_printf_i+0x12c>
 8006524:	0032      	movs	r2, r6
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	9906      	ldr	r1, [sp, #24]
 800652a:	9805      	ldr	r0, [sp, #20]
 800652c:	9d07      	ldr	r5, [sp, #28]
 800652e:	47a8      	blx	r5
 8006530:	3001      	adds	r0, #1
 8006532:	d0af      	beq.n	8006494 <_printf_i+0x140>
 8006534:	6823      	ldr	r3, [r4, #0]
 8006536:	079b      	lsls	r3, r3, #30
 8006538:	d415      	bmi.n	8006566 <_printf_i+0x212>
 800653a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800653c:	68e0      	ldr	r0, [r4, #12]
 800653e:	4298      	cmp	r0, r3
 8006540:	daaa      	bge.n	8006498 <_printf_i+0x144>
 8006542:	0018      	movs	r0, r3
 8006544:	e7a8      	b.n	8006498 <_printf_i+0x144>
 8006546:	0022      	movs	r2, r4
 8006548:	2301      	movs	r3, #1
 800654a:	9906      	ldr	r1, [sp, #24]
 800654c:	9805      	ldr	r0, [sp, #20]
 800654e:	9e07      	ldr	r6, [sp, #28]
 8006550:	3219      	adds	r2, #25
 8006552:	47b0      	blx	r6
 8006554:	3001      	adds	r0, #1
 8006556:	d09d      	beq.n	8006494 <_printf_i+0x140>
 8006558:	3501      	adds	r5, #1
 800655a:	68e3      	ldr	r3, [r4, #12]
 800655c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800655e:	1a9b      	subs	r3, r3, r2
 8006560:	42ab      	cmp	r3, r5
 8006562:	dcf0      	bgt.n	8006546 <_printf_i+0x1f2>
 8006564:	e7e9      	b.n	800653a <_printf_i+0x1e6>
 8006566:	2500      	movs	r5, #0
 8006568:	e7f7      	b.n	800655a <_printf_i+0x206>
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	08007b51 	.word	0x08007b51
 8006570:	08007b62 	.word	0x08007b62

08006574 <_scanf_chars>:
 8006574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006576:	0015      	movs	r5, r2
 8006578:	688a      	ldr	r2, [r1, #8]
 800657a:	000c      	movs	r4, r1
 800657c:	9001      	str	r0, [sp, #4]
 800657e:	2a00      	cmp	r2, #0
 8006580:	d105      	bne.n	800658e <_scanf_chars+0x1a>
 8006582:	6989      	ldr	r1, [r1, #24]
 8006584:	3201      	adds	r2, #1
 8006586:	2900      	cmp	r1, #0
 8006588:	d000      	beq.n	800658c <_scanf_chars+0x18>
 800658a:	3a02      	subs	r2, #2
 800658c:	60a2      	str	r2, [r4, #8]
 800658e:	6822      	ldr	r2, [r4, #0]
 8006590:	06d2      	lsls	r2, r2, #27
 8006592:	d403      	bmi.n	800659c <_scanf_chars+0x28>
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	1d11      	adds	r1, r2, #4
 8006598:	6019      	str	r1, [r3, #0]
 800659a:	6817      	ldr	r7, [r2, #0]
 800659c:	2600      	movs	r6, #0
 800659e:	69a0      	ldr	r0, [r4, #24]
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d013      	beq.n	80065cc <_scanf_chars+0x58>
 80065a4:	2801      	cmp	r0, #1
 80065a6:	d108      	bne.n	80065ba <_scanf_chars+0x46>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6962      	ldr	r2, [r4, #20]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	5cd3      	ldrb	r3, [r2, r3]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10b      	bne.n	80065cc <_scanf_chars+0x58>
 80065b4:	2e00      	cmp	r6, #0
 80065b6:	d038      	beq.n	800662a <_scanf_chars+0xb6>
 80065b8:	e026      	b.n	8006608 <_scanf_chars+0x94>
 80065ba:	2802      	cmp	r0, #2
 80065bc:	d124      	bne.n	8006608 <_scanf_chars+0x94>
 80065be:	682b      	ldr	r3, [r5, #0]
 80065c0:	4a1a      	ldr	r2, [pc, #104]	; (800662c <_scanf_chars+0xb8>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	5cd3      	ldrb	r3, [r2, r3]
 80065c6:	2208      	movs	r2, #8
 80065c8:	4213      	tst	r3, r2
 80065ca:	d11d      	bne.n	8006608 <_scanf_chars+0x94>
 80065cc:	2210      	movs	r2, #16
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	3601      	adds	r6, #1
 80065d2:	4213      	tst	r3, r2
 80065d4:	d103      	bne.n	80065de <_scanf_chars+0x6a>
 80065d6:	682b      	ldr	r3, [r5, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	703b      	strb	r3, [r7, #0]
 80065dc:	3701      	adds	r7, #1
 80065de:	682a      	ldr	r2, [r5, #0]
 80065e0:	686b      	ldr	r3, [r5, #4]
 80065e2:	3201      	adds	r2, #1
 80065e4:	602a      	str	r2, [r5, #0]
 80065e6:	68a2      	ldr	r2, [r4, #8]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	3a01      	subs	r2, #1
 80065ec:	606b      	str	r3, [r5, #4]
 80065ee:	60a2      	str	r2, [r4, #8]
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	d009      	beq.n	8006608 <_scanf_chars+0x94>
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	dcd2      	bgt.n	800659e <_scanf_chars+0x2a>
 80065f8:	23c0      	movs	r3, #192	; 0xc0
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	0029      	movs	r1, r5
 80065fe:	58e3      	ldr	r3, [r4, r3]
 8006600:	9801      	ldr	r0, [sp, #4]
 8006602:	4798      	blx	r3
 8006604:	2800      	cmp	r0, #0
 8006606:	d0ca      	beq.n	800659e <_scanf_chars+0x2a>
 8006608:	6822      	ldr	r2, [r4, #0]
 800660a:	2310      	movs	r3, #16
 800660c:	0011      	movs	r1, r2
 800660e:	4019      	ands	r1, r3
 8006610:	421a      	tst	r2, r3
 8006612:	d106      	bne.n	8006622 <_scanf_chars+0xae>
 8006614:	68e3      	ldr	r3, [r4, #12]
 8006616:	3301      	adds	r3, #1
 8006618:	60e3      	str	r3, [r4, #12]
 800661a:	69a3      	ldr	r3, [r4, #24]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d000      	beq.n	8006622 <_scanf_chars+0xae>
 8006620:	7039      	strb	r1, [r7, #0]
 8006622:	2000      	movs	r0, #0
 8006624:	6923      	ldr	r3, [r4, #16]
 8006626:	199b      	adds	r3, r3, r6
 8006628:	6123      	str	r3, [r4, #16]
 800662a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800662c:	08007b8f 	.word	0x08007b8f

08006630 <_scanf_i>:
 8006630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006632:	b08b      	sub	sp, #44	; 0x2c
 8006634:	9301      	str	r3, [sp, #4]
 8006636:	4b7a      	ldr	r3, [pc, #488]	; (8006820 <_scanf_i+0x1f0>)
 8006638:	0016      	movs	r6, r2
 800663a:	9004      	str	r0, [sp, #16]
 800663c:	aa07      	add	r2, sp, #28
 800663e:	cba1      	ldmia	r3!, {r0, r5, r7}
 8006640:	c2a1      	stmia	r2!, {r0, r5, r7}
 8006642:	4a78      	ldr	r2, [pc, #480]	; (8006824 <_scanf_i+0x1f4>)
 8006644:	698b      	ldr	r3, [r1, #24]
 8006646:	000c      	movs	r4, r1
 8006648:	9205      	str	r2, [sp, #20]
 800664a:	2b03      	cmp	r3, #3
 800664c:	d001      	beq.n	8006652 <_scanf_i+0x22>
 800664e:	4b76      	ldr	r3, [pc, #472]	; (8006828 <_scanf_i+0x1f8>)
 8006650:	9305      	str	r3, [sp, #20]
 8006652:	22ae      	movs	r2, #174	; 0xae
 8006654:	2000      	movs	r0, #0
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	0052      	lsls	r2, r2, #1
 800665a:	1e59      	subs	r1, r3, #1
 800665c:	9003      	str	r0, [sp, #12]
 800665e:	4291      	cmp	r1, r2
 8006660:	d905      	bls.n	800666e <_scanf_i+0x3e>
 8006662:	3b5e      	subs	r3, #94	; 0x5e
 8006664:	3bff      	subs	r3, #255	; 0xff
 8006666:	9303      	str	r3, [sp, #12]
 8006668:	235e      	movs	r3, #94	; 0x5e
 800666a:	33ff      	adds	r3, #255	; 0xff
 800666c:	60a3      	str	r3, [r4, #8]
 800666e:	0023      	movs	r3, r4
 8006670:	331c      	adds	r3, #28
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	23d0      	movs	r3, #208	; 0xd0
 8006676:	2700      	movs	r7, #0
 8006678:	6822      	ldr	r2, [r4, #0]
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	4313      	orrs	r3, r2
 800667e:	6023      	str	r3, [r4, #0]
 8006680:	9b00      	ldr	r3, [sp, #0]
 8006682:	9302      	str	r3, [sp, #8]
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	a807      	add	r0, sp, #28
 8006688:	7819      	ldrb	r1, [r3, #0]
 800668a:	00bb      	lsls	r3, r7, #2
 800668c:	2202      	movs	r2, #2
 800668e:	5818      	ldr	r0, [r3, r0]
 8006690:	f000 f972 	bl	8006978 <memchr>
 8006694:	2800      	cmp	r0, #0
 8006696:	d02a      	beq.n	80066ee <_scanf_i+0xbe>
 8006698:	2f01      	cmp	r7, #1
 800669a:	d161      	bne.n	8006760 <_scanf_i+0x130>
 800669c:	6863      	ldr	r3, [r4, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d106      	bne.n	80066b0 <_scanf_i+0x80>
 80066a2:	3308      	adds	r3, #8
 80066a4:	6822      	ldr	r2, [r4, #0]
 80066a6:	6063      	str	r3, [r4, #4]
 80066a8:	33f9      	adds	r3, #249	; 0xf9
 80066aa:	33ff      	adds	r3, #255	; 0xff
 80066ac:	4313      	orrs	r3, r2
 80066ae:	6023      	str	r3, [r4, #0]
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	4a5e      	ldr	r2, [pc, #376]	; (800682c <_scanf_i+0x1fc>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	6023      	str	r3, [r4, #0]
 80066b8:	68a3      	ldr	r3, [r4, #8]
 80066ba:	1e5a      	subs	r2, r3, #1
 80066bc:	60a2      	str	r2, [r4, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d015      	beq.n	80066ee <_scanf_i+0xbe>
 80066c2:	6833      	ldr	r3, [r6, #0]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	6032      	str	r2, [r6, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	9a02      	ldr	r2, [sp, #8]
 80066cc:	7013      	strb	r3, [r2, #0]
 80066ce:	6873      	ldr	r3, [r6, #4]
 80066d0:	1c55      	adds	r5, r2, #1
 80066d2:	3b01      	subs	r3, #1
 80066d4:	6073      	str	r3, [r6, #4]
 80066d6:	9502      	str	r5, [sp, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dc08      	bgt.n	80066ee <_scanf_i+0xbe>
 80066dc:	23c0      	movs	r3, #192	; 0xc0
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	0031      	movs	r1, r6
 80066e2:	58e3      	ldr	r3, [r4, r3]
 80066e4:	9804      	ldr	r0, [sp, #16]
 80066e6:	4798      	blx	r3
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d000      	beq.n	80066ee <_scanf_i+0xbe>
 80066ec:	e080      	b.n	80067f0 <_scanf_i+0x1c0>
 80066ee:	3701      	adds	r7, #1
 80066f0:	2f03      	cmp	r7, #3
 80066f2:	d1c7      	bne.n	8006684 <_scanf_i+0x54>
 80066f4:	6863      	ldr	r3, [r4, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <_scanf_i+0xce>
 80066fa:	330a      	adds	r3, #10
 80066fc:	6063      	str	r3, [r4, #4]
 80066fe:	2110      	movs	r1, #16
 8006700:	2700      	movs	r7, #0
 8006702:	6863      	ldr	r3, [r4, #4]
 8006704:	6960      	ldr	r0, [r4, #20]
 8006706:	1ac9      	subs	r1, r1, r3
 8006708:	4b49      	ldr	r3, [pc, #292]	; (8006830 <_scanf_i+0x200>)
 800670a:	18c9      	adds	r1, r1, r3
 800670c:	f000 f894 	bl	8006838 <__sccl>
 8006710:	9d02      	ldr	r5, [sp, #8]
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	6820      	ldr	r0, [r4, #0]
 8006716:	9302      	str	r3, [sp, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d040      	beq.n	800679e <_scanf_i+0x16e>
 800671c:	6831      	ldr	r1, [r6, #0]
 800671e:	6963      	ldr	r3, [r4, #20]
 8006720:	780a      	ldrb	r2, [r1, #0]
 8006722:	5c9b      	ldrb	r3, [r3, r2]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d03a      	beq.n	800679e <_scanf_i+0x16e>
 8006728:	2a30      	cmp	r2, #48	; 0x30
 800672a:	d129      	bne.n	8006780 <_scanf_i+0x150>
 800672c:	2380      	movs	r3, #128	; 0x80
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4218      	tst	r0, r3
 8006732:	d025      	beq.n	8006780 <_scanf_i+0x150>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	3701      	adds	r7, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <_scanf_i+0x118>
 800673c:	001a      	movs	r2, r3
 800673e:	9b02      	ldr	r3, [sp, #8]
 8006740:	3a01      	subs	r2, #1
 8006742:	3301      	adds	r3, #1
 8006744:	9203      	str	r2, [sp, #12]
 8006746:	60a3      	str	r3, [r4, #8]
 8006748:	6873      	ldr	r3, [r6, #4]
 800674a:	3b01      	subs	r3, #1
 800674c:	6073      	str	r3, [r6, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	dd1d      	ble.n	800678e <_scanf_i+0x15e>
 8006752:	6833      	ldr	r3, [r6, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	6033      	str	r3, [r6, #0]
 8006758:	68a3      	ldr	r3, [r4, #8]
 800675a:	3b01      	subs	r3, #1
 800675c:	60a3      	str	r3, [r4, #8]
 800675e:	e7d8      	b.n	8006712 <_scanf_i+0xe2>
 8006760:	2f02      	cmp	r7, #2
 8006762:	d1a9      	bne.n	80066b8 <_scanf_i+0x88>
 8006764:	21c0      	movs	r1, #192	; 0xc0
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	00c9      	lsls	r1, r1, #3
 800676c:	4011      	ands	r1, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4299      	cmp	r1, r3
 8006772:	d1bf      	bne.n	80066f4 <_scanf_i+0xc4>
 8006774:	3bf1      	subs	r3, #241	; 0xf1
 8006776:	3bff      	subs	r3, #255	; 0xff
 8006778:	6063      	str	r3, [r4, #4]
 800677a:	33f0      	adds	r3, #240	; 0xf0
 800677c:	4313      	orrs	r3, r2
 800677e:	e79a      	b.n	80066b6 <_scanf_i+0x86>
 8006780:	4b2c      	ldr	r3, [pc, #176]	; (8006834 <_scanf_i+0x204>)
 8006782:	4003      	ands	r3, r0
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	780b      	ldrb	r3, [r1, #0]
 8006788:	702b      	strb	r3, [r5, #0]
 800678a:	3501      	adds	r5, #1
 800678c:	e7dc      	b.n	8006748 <_scanf_i+0x118>
 800678e:	23c0      	movs	r3, #192	; 0xc0
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	0031      	movs	r1, r6
 8006794:	58e3      	ldr	r3, [r4, r3]
 8006796:	9804      	ldr	r0, [sp, #16]
 8006798:	4798      	blx	r3
 800679a:	2800      	cmp	r0, #0
 800679c:	d0dc      	beq.n	8006758 <_scanf_i+0x128>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	05db      	lsls	r3, r3, #23
 80067a2:	d50e      	bpl.n	80067c2 <_scanf_i+0x192>
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	429d      	cmp	r5, r3
 80067a8:	d907      	bls.n	80067ba <_scanf_i+0x18a>
 80067aa:	23be      	movs	r3, #190	; 0xbe
 80067ac:	3d01      	subs	r5, #1
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	0032      	movs	r2, r6
 80067b2:	7829      	ldrb	r1, [r5, #0]
 80067b4:	58e3      	ldr	r3, [r4, r3]
 80067b6:	9804      	ldr	r0, [sp, #16]
 80067b8:	4798      	blx	r3
 80067ba:	9b00      	ldr	r3, [sp, #0]
 80067bc:	2001      	movs	r0, #1
 80067be:	429d      	cmp	r5, r3
 80067c0:	d029      	beq.n	8006816 <_scanf_i+0x1e6>
 80067c2:	6821      	ldr	r1, [r4, #0]
 80067c4:	2310      	movs	r3, #16
 80067c6:	000a      	movs	r2, r1
 80067c8:	401a      	ands	r2, r3
 80067ca:	4219      	tst	r1, r3
 80067cc:	d11c      	bne.n	8006808 <_scanf_i+0x1d8>
 80067ce:	702a      	strb	r2, [r5, #0]
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	9900      	ldr	r1, [sp, #0]
 80067d4:	9804      	ldr	r0, [sp, #16]
 80067d6:	9e05      	ldr	r6, [sp, #20]
 80067d8:	47b0      	blx	r6
 80067da:	9b01      	ldr	r3, [sp, #4]
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	0691      	lsls	r1, r2, #26
 80067e2:	d507      	bpl.n	80067f4 <_scanf_i+0x1c4>
 80067e4:	9901      	ldr	r1, [sp, #4]
 80067e6:	1d1a      	adds	r2, r3, #4
 80067e8:	600a      	str	r2, [r1, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6018      	str	r0, [r3, #0]
 80067ee:	e008      	b.n	8006802 <_scanf_i+0x1d2>
 80067f0:	2700      	movs	r7, #0
 80067f2:	e7d4      	b.n	800679e <_scanf_i+0x16e>
 80067f4:	1d19      	adds	r1, r3, #4
 80067f6:	07d6      	lsls	r6, r2, #31
 80067f8:	d50f      	bpl.n	800681a <_scanf_i+0x1ea>
 80067fa:	9a01      	ldr	r2, [sp, #4]
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	8018      	strh	r0, [r3, #0]
 8006802:	68e3      	ldr	r3, [r4, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60e3      	str	r3, [r4, #12]
 8006808:	2000      	movs	r0, #0
 800680a:	9b00      	ldr	r3, [sp, #0]
 800680c:	1aed      	subs	r5, r5, r3
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	19ed      	adds	r5, r5, r7
 8006812:	195b      	adds	r3, r3, r5
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	b00b      	add	sp, #44	; 0x2c
 8006818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681a:	9a01      	ldr	r2, [sp, #4]
 800681c:	6011      	str	r1, [r2, #0]
 800681e:	e7e4      	b.n	80067ea <_scanf_i+0x1ba>
 8006820:	08007abc 	.word	0x08007abc
 8006824:	08006af9 	.word	0x08006af9
 8006828:	08006c05 	.word	0x08006c05
 800682c:	fffffaff 	.word	0xfffffaff
 8006830:	08007b73 	.word	0x08007b73
 8006834:	fffff6ff 	.word	0xfffff6ff

08006838 <__sccl>:
 8006838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800683a:	780b      	ldrb	r3, [r1, #0]
 800683c:	0004      	movs	r4, r0
 800683e:	2b5e      	cmp	r3, #94	; 0x5e
 8006840:	d019      	beq.n	8006876 <__sccl+0x3e>
 8006842:	2200      	movs	r2, #0
 8006844:	1c4d      	adds	r5, r1, #1
 8006846:	0021      	movs	r1, r4
 8006848:	1c60      	adds	r0, r4, #1
 800684a:	30ff      	adds	r0, #255	; 0xff
 800684c:	700a      	strb	r2, [r1, #0]
 800684e:	3101      	adds	r1, #1
 8006850:	4281      	cmp	r1, r0
 8006852:	d1fb      	bne.n	800684c <__sccl+0x14>
 8006854:	1e68      	subs	r0, r5, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <__sccl+0x3c>
 800685a:	2101      	movs	r1, #1
 800685c:	262d      	movs	r6, #45	; 0x2d
 800685e:	404a      	eors	r2, r1
 8006860:	0028      	movs	r0, r5
 8006862:	54e2      	strb	r2, [r4, r3]
 8006864:	7801      	ldrb	r1, [r0, #0]
 8006866:	1c45      	adds	r5, r0, #1
 8006868:	292d      	cmp	r1, #45	; 0x2d
 800686a:	d00c      	beq.n	8006886 <__sccl+0x4e>
 800686c:	295d      	cmp	r1, #93	; 0x5d
 800686e:	d01d      	beq.n	80068ac <__sccl+0x74>
 8006870:	2900      	cmp	r1, #0
 8006872:	d104      	bne.n	800687e <__sccl+0x46>
 8006874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006876:	2201      	movs	r2, #1
 8006878:	784b      	ldrb	r3, [r1, #1]
 800687a:	1c8d      	adds	r5, r1, #2
 800687c:	e7e3      	b.n	8006846 <__sccl+0xe>
 800687e:	000b      	movs	r3, r1
 8006880:	e7ee      	b.n	8006860 <__sccl+0x28>
 8006882:	0033      	movs	r3, r6
 8006884:	e7ec      	b.n	8006860 <__sccl+0x28>
 8006886:	7841      	ldrb	r1, [r0, #1]
 8006888:	295d      	cmp	r1, #93	; 0x5d
 800688a:	d0fa      	beq.n	8006882 <__sccl+0x4a>
 800688c:	428b      	cmp	r3, r1
 800688e:	dcf8      	bgt.n	8006882 <__sccl+0x4a>
 8006890:	001d      	movs	r5, r3
 8006892:	3002      	adds	r0, #2
 8006894:	3501      	adds	r5, #1
 8006896:	5562      	strb	r2, [r4, r5]
 8006898:	42a9      	cmp	r1, r5
 800689a:	dcfb      	bgt.n	8006894 <__sccl+0x5c>
 800689c:	2500      	movs	r5, #0
 800689e:	1c5f      	adds	r7, r3, #1
 80068a0:	428b      	cmp	r3, r1
 80068a2:	da01      	bge.n	80068a8 <__sccl+0x70>
 80068a4:	1acd      	subs	r5, r1, r3
 80068a6:	3d01      	subs	r5, #1
 80068a8:	197b      	adds	r3, r7, r5
 80068aa:	e7db      	b.n	8006864 <__sccl+0x2c>
 80068ac:	0028      	movs	r0, r5
 80068ae:	e7e1      	b.n	8006874 <__sccl+0x3c>

080068b0 <__submore>:
 80068b0:	000b      	movs	r3, r1
 80068b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068b4:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80068b6:	3344      	adds	r3, #68	; 0x44
 80068b8:	000c      	movs	r4, r1
 80068ba:	429d      	cmp	r5, r3
 80068bc:	d11c      	bne.n	80068f8 <__submore+0x48>
 80068be:	2680      	movs	r6, #128	; 0x80
 80068c0:	00f6      	lsls	r6, r6, #3
 80068c2:	0031      	movs	r1, r6
 80068c4:	f7ff f91c 	bl	8005b00 <_malloc_r>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d102      	bne.n	80068d2 <__submore+0x22>
 80068cc:	2001      	movs	r0, #1
 80068ce:	4240      	negs	r0, r0
 80068d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068d2:	0023      	movs	r3, r4
 80068d4:	6360      	str	r0, [r4, #52]	; 0x34
 80068d6:	63a6      	str	r6, [r4, #56]	; 0x38
 80068d8:	3346      	adds	r3, #70	; 0x46
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	4b10      	ldr	r3, [pc, #64]	; (8006920 <__submore+0x70>)
 80068de:	54c2      	strb	r2, [r0, r3]
 80068e0:	0023      	movs	r3, r4
 80068e2:	3345      	adds	r3, #69	; 0x45
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <__submore+0x74>)
 80068e8:	54c2      	strb	r2, [r0, r3]
 80068ea:	782a      	ldrb	r2, [r5, #0]
 80068ec:	4b0e      	ldr	r3, [pc, #56]	; (8006928 <__submore+0x78>)
 80068ee:	54c2      	strb	r2, [r0, r3]
 80068f0:	18c0      	adds	r0, r0, r3
 80068f2:	6020      	str	r0, [r4, #0]
 80068f4:	2000      	movs	r0, #0
 80068f6:	e7eb      	b.n	80068d0 <__submore+0x20>
 80068f8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80068fa:	0029      	movs	r1, r5
 80068fc:	0073      	lsls	r3, r6, #1
 80068fe:	001a      	movs	r2, r3
 8006900:	9301      	str	r3, [sp, #4]
 8006902:	f000 f844 	bl	800698e <_realloc_r>
 8006906:	1e05      	subs	r5, r0, #0
 8006908:	d0e0      	beq.n	80068cc <__submore+0x1c>
 800690a:	1987      	adds	r7, r0, r6
 800690c:	0001      	movs	r1, r0
 800690e:	0032      	movs	r2, r6
 8006910:	0038      	movs	r0, r7
 8006912:	f7ff f87f 	bl	8005a14 <memcpy>
 8006916:	9b01      	ldr	r3, [sp, #4]
 8006918:	6027      	str	r7, [r4, #0]
 800691a:	6365      	str	r5, [r4, #52]	; 0x34
 800691c:	63a3      	str	r3, [r4, #56]	; 0x38
 800691e:	e7e9      	b.n	80068f4 <__submore+0x44>
 8006920:	000003ff 	.word	0x000003ff
 8006924:	000003fe 	.word	0x000003fe
 8006928:	000003fd 	.word	0x000003fd

0800692c <memmove>:
 800692c:	b510      	push	{r4, lr}
 800692e:	4288      	cmp	r0, r1
 8006930:	d902      	bls.n	8006938 <memmove+0xc>
 8006932:	188b      	adds	r3, r1, r2
 8006934:	4298      	cmp	r0, r3
 8006936:	d303      	bcc.n	8006940 <memmove+0x14>
 8006938:	2300      	movs	r3, #0
 800693a:	e007      	b.n	800694c <memmove+0x20>
 800693c:	5c8b      	ldrb	r3, [r1, r2]
 800693e:	5483      	strb	r3, [r0, r2]
 8006940:	3a01      	subs	r2, #1
 8006942:	d2fb      	bcs.n	800693c <memmove+0x10>
 8006944:	bd10      	pop	{r4, pc}
 8006946:	5ccc      	ldrb	r4, [r1, r3]
 8006948:	54c4      	strb	r4, [r0, r3]
 800694a:	3301      	adds	r3, #1
 800694c:	429a      	cmp	r2, r3
 800694e:	d1fa      	bne.n	8006946 <memmove+0x1a>
 8006950:	e7f8      	b.n	8006944 <memmove+0x18>
	...

08006954 <_sbrk_r>:
 8006954:	2300      	movs	r3, #0
 8006956:	b570      	push	{r4, r5, r6, lr}
 8006958:	4d06      	ldr	r5, [pc, #24]	; (8006974 <_sbrk_r+0x20>)
 800695a:	0004      	movs	r4, r0
 800695c:	0008      	movs	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fc fa3c 	bl	8002ddc <_sbrk>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d103      	bne.n	8006970 <_sbrk_r+0x1c>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d000      	beq.n	8006970 <_sbrk_r+0x1c>
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	bd70      	pop	{r4, r5, r6, pc}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	20000580 	.word	0x20000580

08006978 <memchr>:
 8006978:	b2c9      	uxtb	r1, r1
 800697a:	1882      	adds	r2, r0, r2
 800697c:	4290      	cmp	r0, r2
 800697e:	d101      	bne.n	8006984 <memchr+0xc>
 8006980:	2000      	movs	r0, #0
 8006982:	4770      	bx	lr
 8006984:	7803      	ldrb	r3, [r0, #0]
 8006986:	428b      	cmp	r3, r1
 8006988:	d0fb      	beq.n	8006982 <memchr+0xa>
 800698a:	3001      	adds	r0, #1
 800698c:	e7f6      	b.n	800697c <memchr+0x4>

0800698e <_realloc_r>:
 800698e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006990:	0007      	movs	r7, r0
 8006992:	000e      	movs	r6, r1
 8006994:	0014      	movs	r4, r2
 8006996:	2900      	cmp	r1, #0
 8006998:	d105      	bne.n	80069a6 <_realloc_r+0x18>
 800699a:	0011      	movs	r1, r2
 800699c:	f7ff f8b0 	bl	8005b00 <_malloc_r>
 80069a0:	0005      	movs	r5, r0
 80069a2:	0028      	movs	r0, r5
 80069a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	d103      	bne.n	80069b2 <_realloc_r+0x24>
 80069aa:	f7ff f83d 	bl	8005a28 <_free_r>
 80069ae:	0025      	movs	r5, r4
 80069b0:	e7f7      	b.n	80069a2 <_realloc_r+0x14>
 80069b2:	f000 f92b 	bl	8006c0c <_malloc_usable_size_r>
 80069b6:	9001      	str	r0, [sp, #4]
 80069b8:	4284      	cmp	r4, r0
 80069ba:	d803      	bhi.n	80069c4 <_realloc_r+0x36>
 80069bc:	0035      	movs	r5, r6
 80069be:	0843      	lsrs	r3, r0, #1
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	d3ee      	bcc.n	80069a2 <_realloc_r+0x14>
 80069c4:	0021      	movs	r1, r4
 80069c6:	0038      	movs	r0, r7
 80069c8:	f7ff f89a 	bl	8005b00 <_malloc_r>
 80069cc:	1e05      	subs	r5, r0, #0
 80069ce:	d0e8      	beq.n	80069a2 <_realloc_r+0x14>
 80069d0:	9b01      	ldr	r3, [sp, #4]
 80069d2:	0022      	movs	r2, r4
 80069d4:	429c      	cmp	r4, r3
 80069d6:	d900      	bls.n	80069da <_realloc_r+0x4c>
 80069d8:	001a      	movs	r2, r3
 80069da:	0031      	movs	r1, r6
 80069dc:	0028      	movs	r0, r5
 80069de:	f7ff f819 	bl	8005a14 <memcpy>
 80069e2:	0031      	movs	r1, r6
 80069e4:	0038      	movs	r0, r7
 80069e6:	f7ff f81f 	bl	8005a28 <_free_r>
 80069ea:	e7da      	b.n	80069a2 <_realloc_r+0x14>

080069ec <_strtol_l.constprop.0>:
 80069ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ee:	b087      	sub	sp, #28
 80069f0:	001e      	movs	r6, r3
 80069f2:	9005      	str	r0, [sp, #20]
 80069f4:	9101      	str	r1, [sp, #4]
 80069f6:	9202      	str	r2, [sp, #8]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d048      	beq.n	8006a8e <_strtol_l.constprop.0+0xa2>
 80069fc:	000b      	movs	r3, r1
 80069fe:	2e24      	cmp	r6, #36	; 0x24
 8006a00:	d845      	bhi.n	8006a8e <_strtol_l.constprop.0+0xa2>
 8006a02:	4a3b      	ldr	r2, [pc, #236]	; (8006af0 <_strtol_l.constprop.0+0x104>)
 8006a04:	2108      	movs	r1, #8
 8006a06:	4694      	mov	ip, r2
 8006a08:	001a      	movs	r2, r3
 8006a0a:	4660      	mov	r0, ip
 8006a0c:	7814      	ldrb	r4, [r2, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	5d00      	ldrb	r0, [r0, r4]
 8006a12:	001d      	movs	r5, r3
 8006a14:	0007      	movs	r7, r0
 8006a16:	400f      	ands	r7, r1
 8006a18:	4208      	tst	r0, r1
 8006a1a:	d1f5      	bne.n	8006a08 <_strtol_l.constprop.0+0x1c>
 8006a1c:	2c2d      	cmp	r4, #45	; 0x2d
 8006a1e:	d13d      	bne.n	8006a9c <_strtol_l.constprop.0+0xb0>
 8006a20:	2701      	movs	r7, #1
 8006a22:	781c      	ldrb	r4, [r3, #0]
 8006a24:	1c95      	adds	r5, r2, #2
 8006a26:	2e00      	cmp	r6, #0
 8006a28:	d05e      	beq.n	8006ae8 <_strtol_l.constprop.0+0xfc>
 8006a2a:	2e10      	cmp	r6, #16
 8006a2c:	d109      	bne.n	8006a42 <_strtol_l.constprop.0+0x56>
 8006a2e:	2c30      	cmp	r4, #48	; 0x30
 8006a30:	d107      	bne.n	8006a42 <_strtol_l.constprop.0+0x56>
 8006a32:	2220      	movs	r2, #32
 8006a34:	782b      	ldrb	r3, [r5, #0]
 8006a36:	4393      	bics	r3, r2
 8006a38:	2b58      	cmp	r3, #88	; 0x58
 8006a3a:	d150      	bne.n	8006ade <_strtol_l.constprop.0+0xf2>
 8006a3c:	2610      	movs	r6, #16
 8006a3e:	786c      	ldrb	r4, [r5, #1]
 8006a40:	3502      	adds	r5, #2
 8006a42:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <_strtol_l.constprop.0+0x108>)
 8006a44:	0031      	movs	r1, r6
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	0018      	movs	r0, r3
 8006a4a:	9303      	str	r3, [sp, #12]
 8006a4c:	f7f9 fbf2 	bl	8000234 <__aeabi_uidivmod>
 8006a50:	2200      	movs	r2, #0
 8006a52:	9104      	str	r1, [sp, #16]
 8006a54:	2101      	movs	r1, #1
 8006a56:	4684      	mov	ip, r0
 8006a58:	0010      	movs	r0, r2
 8006a5a:	4249      	negs	r1, r1
 8006a5c:	0023      	movs	r3, r4
 8006a5e:	3b30      	subs	r3, #48	; 0x30
 8006a60:	2b09      	cmp	r3, #9
 8006a62:	d903      	bls.n	8006a6c <_strtol_l.constprop.0+0x80>
 8006a64:	3b11      	subs	r3, #17
 8006a66:	2b19      	cmp	r3, #25
 8006a68:	d81d      	bhi.n	8006aa6 <_strtol_l.constprop.0+0xba>
 8006a6a:	330a      	adds	r3, #10
 8006a6c:	429e      	cmp	r6, r3
 8006a6e:	dd1e      	ble.n	8006aae <_strtol_l.constprop.0+0xc2>
 8006a70:	1c54      	adds	r4, r2, #1
 8006a72:	d009      	beq.n	8006a88 <_strtol_l.constprop.0+0x9c>
 8006a74:	000a      	movs	r2, r1
 8006a76:	4584      	cmp	ip, r0
 8006a78:	d306      	bcc.n	8006a88 <_strtol_l.constprop.0+0x9c>
 8006a7a:	d102      	bne.n	8006a82 <_strtol_l.constprop.0+0x96>
 8006a7c:	9c04      	ldr	r4, [sp, #16]
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	db02      	blt.n	8006a88 <_strtol_l.constprop.0+0x9c>
 8006a82:	2201      	movs	r2, #1
 8006a84:	4370      	muls	r0, r6
 8006a86:	1818      	adds	r0, r3, r0
 8006a88:	782c      	ldrb	r4, [r5, #0]
 8006a8a:	3501      	adds	r5, #1
 8006a8c:	e7e6      	b.n	8006a5c <_strtol_l.constprop.0+0x70>
 8006a8e:	f7fe ff95 	bl	80059bc <__errno>
 8006a92:	2316      	movs	r3, #22
 8006a94:	6003      	str	r3, [r0, #0]
 8006a96:	2000      	movs	r0, #0
 8006a98:	b007      	add	sp, #28
 8006a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9c:	2c2b      	cmp	r4, #43	; 0x2b
 8006a9e:	d1c2      	bne.n	8006a26 <_strtol_l.constprop.0+0x3a>
 8006aa0:	781c      	ldrb	r4, [r3, #0]
 8006aa2:	1c95      	adds	r5, r2, #2
 8006aa4:	e7bf      	b.n	8006a26 <_strtol_l.constprop.0+0x3a>
 8006aa6:	0023      	movs	r3, r4
 8006aa8:	3b61      	subs	r3, #97	; 0x61
 8006aaa:	2b19      	cmp	r3, #25
 8006aac:	d9dd      	bls.n	8006a6a <_strtol_l.constprop.0+0x7e>
 8006aae:	1c53      	adds	r3, r2, #1
 8006ab0:	d109      	bne.n	8006ac6 <_strtol_l.constprop.0+0xda>
 8006ab2:	2322      	movs	r3, #34	; 0x22
 8006ab4:	9a05      	ldr	r2, [sp, #20]
 8006ab6:	9803      	ldr	r0, [sp, #12]
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	9b02      	ldr	r3, [sp, #8]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0eb      	beq.n	8006a98 <_strtol_l.constprop.0+0xac>
 8006ac0:	1e6b      	subs	r3, r5, #1
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	e007      	b.n	8006ad6 <_strtol_l.constprop.0+0xea>
 8006ac6:	2f00      	cmp	r7, #0
 8006ac8:	d000      	beq.n	8006acc <_strtol_l.constprop.0+0xe0>
 8006aca:	4240      	negs	r0, r0
 8006acc:	9b02      	ldr	r3, [sp, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d0e2      	beq.n	8006a98 <_strtol_l.constprop.0+0xac>
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	d1f4      	bne.n	8006ac0 <_strtol_l.constprop.0+0xd4>
 8006ad6:	9b02      	ldr	r3, [sp, #8]
 8006ad8:	9a01      	ldr	r2, [sp, #4]
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	e7dc      	b.n	8006a98 <_strtol_l.constprop.0+0xac>
 8006ade:	2430      	movs	r4, #48	; 0x30
 8006ae0:	2e00      	cmp	r6, #0
 8006ae2:	d1ae      	bne.n	8006a42 <_strtol_l.constprop.0+0x56>
 8006ae4:	3608      	adds	r6, #8
 8006ae6:	e7ac      	b.n	8006a42 <_strtol_l.constprop.0+0x56>
 8006ae8:	2c30      	cmp	r4, #48	; 0x30
 8006aea:	d0a2      	beq.n	8006a32 <_strtol_l.constprop.0+0x46>
 8006aec:	260a      	movs	r6, #10
 8006aee:	e7a8      	b.n	8006a42 <_strtol_l.constprop.0+0x56>
 8006af0:	08007b8f 	.word	0x08007b8f
 8006af4:	7fffffff 	.word	0x7fffffff

08006af8 <_strtol_r>:
 8006af8:	b510      	push	{r4, lr}
 8006afa:	f7ff ff77 	bl	80069ec <_strtol_l.constprop.0>
 8006afe:	bd10      	pop	{r4, pc}

08006b00 <_strtoul_l.constprop.0>:
 8006b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b02:	b087      	sub	sp, #28
 8006b04:	9202      	str	r2, [sp, #8]
 8006b06:	4a3e      	ldr	r2, [pc, #248]	; (8006c00 <_strtoul_l.constprop.0+0x100>)
 8006b08:	001e      	movs	r6, r3
 8006b0a:	9101      	str	r1, [sp, #4]
 8006b0c:	000b      	movs	r3, r1
 8006b0e:	4694      	mov	ip, r2
 8006b10:	2108      	movs	r1, #8
 8006b12:	9005      	str	r0, [sp, #20]
 8006b14:	001a      	movs	r2, r3
 8006b16:	4660      	mov	r0, ip
 8006b18:	7814      	ldrb	r4, [r2, #0]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	5d00      	ldrb	r0, [r0, r4]
 8006b1e:	001d      	movs	r5, r3
 8006b20:	0007      	movs	r7, r0
 8006b22:	400f      	ands	r7, r1
 8006b24:	4208      	tst	r0, r1
 8006b26:	d1f5      	bne.n	8006b14 <_strtoul_l.constprop.0+0x14>
 8006b28:	2c2d      	cmp	r4, #45	; 0x2d
 8006b2a:	d13d      	bne.n	8006ba8 <_strtoul_l.constprop.0+0xa8>
 8006b2c:	2701      	movs	r7, #1
 8006b2e:	781c      	ldrb	r4, [r3, #0]
 8006b30:	1c95      	adds	r5, r2, #2
 8006b32:	2e00      	cmp	r6, #0
 8006b34:	d05f      	beq.n	8006bf6 <_strtoul_l.constprop.0+0xf6>
 8006b36:	2e10      	cmp	r6, #16
 8006b38:	d109      	bne.n	8006b4e <_strtoul_l.constprop.0+0x4e>
 8006b3a:	2c30      	cmp	r4, #48	; 0x30
 8006b3c:	d107      	bne.n	8006b4e <_strtoul_l.constprop.0+0x4e>
 8006b3e:	2220      	movs	r2, #32
 8006b40:	782b      	ldrb	r3, [r5, #0]
 8006b42:	4393      	bics	r3, r2
 8006b44:	2b58      	cmp	r3, #88	; 0x58
 8006b46:	d151      	bne.n	8006bec <_strtoul_l.constprop.0+0xec>
 8006b48:	2610      	movs	r6, #16
 8006b4a:	786c      	ldrb	r4, [r5, #1]
 8006b4c:	3502      	adds	r5, #2
 8006b4e:	2001      	movs	r0, #1
 8006b50:	0031      	movs	r1, r6
 8006b52:	4240      	negs	r0, r0
 8006b54:	f7f9 fae8 	bl	8000128 <__udivsi3>
 8006b58:	9003      	str	r0, [sp, #12]
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	0031      	movs	r1, r6
 8006b5e:	4240      	negs	r0, r0
 8006b60:	f7f9 fb68 	bl	8000234 <__aeabi_uidivmod>
 8006b64:	2300      	movs	r3, #0
 8006b66:	2201      	movs	r2, #1
 8006b68:	9104      	str	r1, [sp, #16]
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	4694      	mov	ip, r2
 8006b70:	4249      	negs	r1, r1
 8006b72:	0022      	movs	r2, r4
 8006b74:	3a30      	subs	r2, #48	; 0x30
 8006b76:	2a09      	cmp	r2, #9
 8006b78:	d903      	bls.n	8006b82 <_strtoul_l.constprop.0+0x82>
 8006b7a:	3a11      	subs	r2, #17
 8006b7c:	2a19      	cmp	r2, #25
 8006b7e:	d818      	bhi.n	8006bb2 <_strtoul_l.constprop.0+0xb2>
 8006b80:	320a      	adds	r2, #10
 8006b82:	4296      	cmp	r6, r2
 8006b84:	dd19      	ble.n	8006bba <_strtoul_l.constprop.0+0xba>
 8006b86:	1c5c      	adds	r4, r3, #1
 8006b88:	d00b      	beq.n	8006ba2 <_strtoul_l.constprop.0+0xa2>
 8006b8a:	9c03      	ldr	r4, [sp, #12]
 8006b8c:	000b      	movs	r3, r1
 8006b8e:	4284      	cmp	r4, r0
 8006b90:	d307      	bcc.n	8006ba2 <_strtoul_l.constprop.0+0xa2>
 8006b92:	d103      	bne.n	8006b9c <_strtoul_l.constprop.0+0x9c>
 8006b94:	9c04      	ldr	r4, [sp, #16]
 8006b96:	000b      	movs	r3, r1
 8006b98:	4294      	cmp	r4, r2
 8006b9a:	db02      	blt.n	8006ba2 <_strtoul_l.constprop.0+0xa2>
 8006b9c:	4663      	mov	r3, ip
 8006b9e:	4370      	muls	r0, r6
 8006ba0:	1810      	adds	r0, r2, r0
 8006ba2:	782c      	ldrb	r4, [r5, #0]
 8006ba4:	3501      	adds	r5, #1
 8006ba6:	e7e4      	b.n	8006b72 <_strtoul_l.constprop.0+0x72>
 8006ba8:	2c2b      	cmp	r4, #43	; 0x2b
 8006baa:	d1c2      	bne.n	8006b32 <_strtoul_l.constprop.0+0x32>
 8006bac:	781c      	ldrb	r4, [r3, #0]
 8006bae:	1c95      	adds	r5, r2, #2
 8006bb0:	e7bf      	b.n	8006b32 <_strtoul_l.constprop.0+0x32>
 8006bb2:	0022      	movs	r2, r4
 8006bb4:	3a61      	subs	r2, #97	; 0x61
 8006bb6:	2a19      	cmp	r2, #25
 8006bb8:	d9e2      	bls.n	8006b80 <_strtoul_l.constprop.0+0x80>
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	d108      	bne.n	8006bd0 <_strtoul_l.constprop.0+0xd0>
 8006bbe:	2222      	movs	r2, #34	; 0x22
 8006bc0:	9905      	ldr	r1, [sp, #20]
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	600a      	str	r2, [r1, #0]
 8006bc6:	9a02      	ldr	r2, [sp, #8]
 8006bc8:	2a00      	cmp	r2, #0
 8006bca:	d109      	bne.n	8006be0 <_strtoul_l.constprop.0+0xe0>
 8006bcc:	b007      	add	sp, #28
 8006bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd0:	2f00      	cmp	r7, #0
 8006bd2:	d000      	beq.n	8006bd6 <_strtoul_l.constprop.0+0xd6>
 8006bd4:	4240      	negs	r0, r0
 8006bd6:	9a02      	ldr	r2, [sp, #8]
 8006bd8:	2a00      	cmp	r2, #0
 8006bda:	d0f7      	beq.n	8006bcc <_strtoul_l.constprop.0+0xcc>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <_strtoul_l.constprop.0+0xe4>
 8006be0:	1e6b      	subs	r3, r5, #1
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	9b02      	ldr	r3, [sp, #8]
 8006be6:	9a01      	ldr	r2, [sp, #4]
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	e7ef      	b.n	8006bcc <_strtoul_l.constprop.0+0xcc>
 8006bec:	2430      	movs	r4, #48	; 0x30
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	d1ad      	bne.n	8006b4e <_strtoul_l.constprop.0+0x4e>
 8006bf2:	3608      	adds	r6, #8
 8006bf4:	e7ab      	b.n	8006b4e <_strtoul_l.constprop.0+0x4e>
 8006bf6:	2c30      	cmp	r4, #48	; 0x30
 8006bf8:	d0a1      	beq.n	8006b3e <_strtoul_l.constprop.0+0x3e>
 8006bfa:	260a      	movs	r6, #10
 8006bfc:	e7a7      	b.n	8006b4e <_strtoul_l.constprop.0+0x4e>
 8006bfe:	46c0      	nop			; (mov r8, r8)
 8006c00:	08007b8f 	.word	0x08007b8f

08006c04 <_strtoul_r>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	f7ff ff7b 	bl	8006b00 <_strtoul_l.constprop.0>
 8006c0a:	bd10      	pop	{r4, pc}

08006c0c <_malloc_usable_size_r>:
 8006c0c:	1f0b      	subs	r3, r1, #4
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	1f18      	subs	r0, r3, #4
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da01      	bge.n	8006c1a <_malloc_usable_size_r+0xe>
 8006c16:	580b      	ldr	r3, [r1, r0]
 8006c18:	18c0      	adds	r0, r0, r3
 8006c1a:	4770      	bx	lr

08006c1c <pow>:
 8006c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c1e:	0014      	movs	r4, r2
 8006c20:	001d      	movs	r5, r3
 8006c22:	9000      	str	r0, [sp, #0]
 8006c24:	9101      	str	r1, [sp, #4]
 8006c26:	f000 f86f 	bl	8006d08 <__ieee754_pow>
 8006c2a:	0022      	movs	r2, r4
 8006c2c:	0006      	movs	r6, r0
 8006c2e:	000f      	movs	r7, r1
 8006c30:	002b      	movs	r3, r5
 8006c32:	0020      	movs	r0, r4
 8006c34:	0029      	movs	r1, r5
 8006c36:	f7fb fb07 	bl	8002248 <__aeabi_dcmpun>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d13f      	bne.n	8006cbe <pow+0xa2>
 8006c3e:	9800      	ldr	r0, [sp, #0]
 8006c40:	9901      	ldr	r1, [sp, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	2300      	movs	r3, #0
 8006c46:	f7f9 fbf5 	bl	8000434 <__aeabi_dcmpeq>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d019      	beq.n	8006c82 <pow+0x66>
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2300      	movs	r3, #0
 8006c52:	0020      	movs	r0, r4
 8006c54:	0029      	movs	r1, r5
 8006c56:	f7f9 fbed 	bl	8000434 <__aeabi_dcmpeq>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d146      	bne.n	8006cec <pow+0xd0>
 8006c5e:	0020      	movs	r0, r4
 8006c60:	0029      	movs	r1, r5
 8006c62:	f000 f849 	bl	8006cf8 <finite>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d029      	beq.n	8006cbe <pow+0xa2>
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	0020      	movs	r0, r4
 8006c70:	0029      	movs	r1, r5
 8006c72:	f7f9 fbe5 	bl	8000440 <__aeabi_dcmplt>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d021      	beq.n	8006cbe <pow+0xa2>
 8006c7a:	f7fe fe9f 	bl	80059bc <__errno>
 8006c7e:	2322      	movs	r3, #34	; 0x22
 8006c80:	e01c      	b.n	8006cbc <pow+0xa0>
 8006c82:	0030      	movs	r0, r6
 8006c84:	0039      	movs	r1, r7
 8006c86:	f000 f837 	bl	8006cf8 <finite>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d11b      	bne.n	8006cc6 <pow+0xaa>
 8006c8e:	9800      	ldr	r0, [sp, #0]
 8006c90:	9901      	ldr	r1, [sp, #4]
 8006c92:	f000 f831 	bl	8006cf8 <finite>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d015      	beq.n	8006cc6 <pow+0xaa>
 8006c9a:	0020      	movs	r0, r4
 8006c9c:	0029      	movs	r1, r5
 8006c9e:	f000 f82b 	bl	8006cf8 <finite>
 8006ca2:	2800      	cmp	r0, #0
 8006ca4:	d00f      	beq.n	8006cc6 <pow+0xaa>
 8006ca6:	0032      	movs	r2, r6
 8006ca8:	003b      	movs	r3, r7
 8006caa:	0030      	movs	r0, r6
 8006cac:	0039      	movs	r1, r7
 8006cae:	f7fb facb 	bl	8002248 <__aeabi_dcmpun>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d0e1      	beq.n	8006c7a <pow+0x5e>
 8006cb6:	f7fe fe81 	bl	80059bc <__errno>
 8006cba:	2321      	movs	r3, #33	; 0x21
 8006cbc:	6003      	str	r3, [r0, #0]
 8006cbe:	0030      	movs	r0, r6
 8006cc0:	0039      	movs	r1, r7
 8006cc2:	b003      	add	sp, #12
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2300      	movs	r3, #0
 8006cca:	0030      	movs	r0, r6
 8006ccc:	0039      	movs	r1, r7
 8006cce:	f7f9 fbb1 	bl	8000434 <__aeabi_dcmpeq>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d0f3      	beq.n	8006cbe <pow+0xa2>
 8006cd6:	9800      	ldr	r0, [sp, #0]
 8006cd8:	9901      	ldr	r1, [sp, #4]
 8006cda:	f000 f80d 	bl	8006cf8 <finite>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d0ed      	beq.n	8006cbe <pow+0xa2>
 8006ce2:	0020      	movs	r0, r4
 8006ce4:	0029      	movs	r1, r5
 8006ce6:	f000 f807 	bl	8006cf8 <finite>
 8006cea:	e7c4      	b.n	8006c76 <pow+0x5a>
 8006cec:	2600      	movs	r6, #0
 8006cee:	4f01      	ldr	r7, [pc, #4]	; (8006cf4 <pow+0xd8>)
 8006cf0:	e7e5      	b.n	8006cbe <pow+0xa2>
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	3ff00000 	.word	0x3ff00000

08006cf8 <finite>:
 8006cf8:	4b02      	ldr	r3, [pc, #8]	; (8006d04 <finite+0xc>)
 8006cfa:	0048      	lsls	r0, r1, #1
 8006cfc:	0840      	lsrs	r0, r0, #1
 8006cfe:	18c0      	adds	r0, r0, r3
 8006d00:	0fc0      	lsrs	r0, r0, #31
 8006d02:	4770      	bx	lr
 8006d04:	80100000 	.word	0x80100000

08006d08 <__ieee754_pow>:
 8006d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0a:	b095      	sub	sp, #84	; 0x54
 8006d0c:	9202      	str	r2, [sp, #8]
 8006d0e:	9303      	str	r3, [sp, #12]
 8006d10:	9b03      	ldr	r3, [sp, #12]
 8006d12:	9a03      	ldr	r2, [sp, #12]
 8006d14:	9304      	str	r3, [sp, #16]
 8006d16:	9b02      	ldr	r3, [sp, #8]
 8006d18:	0056      	lsls	r6, r2, #1
 8006d1a:	001a      	movs	r2, r3
 8006d1c:	0876      	lsrs	r6, r6, #1
 8006d1e:	0007      	movs	r7, r0
 8006d20:	000d      	movs	r5, r1
 8006d22:	4332      	orrs	r2, r6
 8006d24:	d119      	bne.n	8006d5a <__ieee754_pow+0x52>
 8006d26:	2180      	movs	r1, #128	; 0x80
 8006d28:	0309      	lsls	r1, r1, #12
 8006d2a:	4069      	eors	r1, r5
 8006d2c:	0002      	movs	r2, r0
 8006d2e:	000b      	movs	r3, r1
 8006d30:	1892      	adds	r2, r2, r2
 8006d32:	415b      	adcs	r3, r3
 8006d34:	4989      	ldr	r1, [pc, #548]	; (8006f5c <__ieee754_pow+0x254>)
 8006d36:	428b      	cmp	r3, r1
 8006d38:	d806      	bhi.n	8006d48 <__ieee754_pow+0x40>
 8006d3a:	d001      	beq.n	8006d40 <__ieee754_pow+0x38>
 8006d3c:	f000 fcb6 	bl	80076ac <__ieee754_pow+0x9a4>
 8006d40:	2a00      	cmp	r2, #0
 8006d42:	d101      	bne.n	8006d48 <__ieee754_pow+0x40>
 8006d44:	f000 fcb2 	bl	80076ac <__ieee754_pow+0x9a4>
 8006d48:	9a02      	ldr	r2, [sp, #8]
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	0038      	movs	r0, r7
 8006d4e:	0029      	movs	r1, r5
 8006d50:	f7f9 fcdc 	bl	800070c <__aeabi_dadd>
 8006d54:	9000      	str	r0, [sp, #0]
 8006d56:	9101      	str	r1, [sp, #4]
 8006d58:	e0ad      	b.n	8006eb6 <__ieee754_pow+0x1ae>
 8006d5a:	4a81      	ldr	r2, [pc, #516]	; (8006f60 <__ieee754_pow+0x258>)
 8006d5c:	004c      	lsls	r4, r1, #1
 8006d5e:	9108      	str	r1, [sp, #32]
 8006d60:	9000      	str	r0, [sp, #0]
 8006d62:	0864      	lsrs	r4, r4, #1
 8006d64:	4294      	cmp	r4, r2
 8006d66:	dc08      	bgt.n	8006d7a <__ieee754_pow+0x72>
 8006d68:	d101      	bne.n	8006d6e <__ieee754_pow+0x66>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d1ec      	bne.n	8006d48 <__ieee754_pow+0x40>
 8006d6e:	4a7c      	ldr	r2, [pc, #496]	; (8006f60 <__ieee754_pow+0x258>)
 8006d70:	4296      	cmp	r6, r2
 8006d72:	dc02      	bgt.n	8006d7a <__ieee754_pow+0x72>
 8006d74:	d10c      	bne.n	8006d90 <__ieee754_pow+0x88>
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <__ieee754_pow+0x88>
 8006d7a:	4b7a      	ldr	r3, [pc, #488]	; (8006f64 <__ieee754_pow+0x25c>)
 8006d7c:	18eb      	adds	r3, r5, r3
 8006d7e:	433b      	orrs	r3, r7
 8006d80:	d1e2      	bne.n	8006d48 <__ieee754_pow+0x40>
 8006d82:	2180      	movs	r1, #128	; 0x80
 8006d84:	9803      	ldr	r0, [sp, #12]
 8006d86:	0309      	lsls	r1, r1, #12
 8006d88:	4048      	eors	r0, r1
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	9a02      	ldr	r2, [sp, #8]
 8006d8e:	e7cf      	b.n	8006d30 <__ieee754_pow+0x28>
 8006d90:	2200      	movs	r2, #0
 8006d92:	9206      	str	r2, [sp, #24]
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	da69      	bge.n	8006e6c <__ieee754_pow+0x164>
 8006d98:	4a73      	ldr	r2, [pc, #460]	; (8006f68 <__ieee754_pow+0x260>)
 8006d9a:	4296      	cmp	r6, r2
 8006d9c:	dc64      	bgt.n	8006e68 <__ieee754_pow+0x160>
 8006d9e:	4a73      	ldr	r2, [pc, #460]	; (8006f6c <__ieee754_pow+0x264>)
 8006da0:	4296      	cmp	r6, r2
 8006da2:	dd11      	ble.n	8006dc8 <__ieee754_pow+0xc0>
 8006da4:	4972      	ldr	r1, [pc, #456]	; (8006f70 <__ieee754_pow+0x268>)
 8006da6:	1532      	asrs	r2, r6, #20
 8006da8:	1852      	adds	r2, r2, r1
 8006daa:	2a14      	cmp	r2, #20
 8006dac:	dd3c      	ble.n	8006e28 <__ieee754_pow+0x120>
 8006dae:	2134      	movs	r1, #52	; 0x34
 8006db0:	1a89      	subs	r1, r1, r2
 8006db2:	9a02      	ldr	r2, [sp, #8]
 8006db4:	40ca      	lsrs	r2, r1
 8006db6:	0010      	movs	r0, r2
 8006db8:	4088      	lsls	r0, r1
 8006dba:	4298      	cmp	r0, r3
 8006dbc:	d104      	bne.n	8006dc8 <__ieee754_pow+0xc0>
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	400a      	ands	r2, r1
 8006dc2:	1849      	adds	r1, r1, r1
 8006dc4:	1a8a      	subs	r2, r1, r2
 8006dc6:	9206      	str	r2, [sp, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d03c      	beq.n	8006e46 <__ieee754_pow+0x13e>
 8006dcc:	0038      	movs	r0, r7
 8006dce:	0029      	movs	r1, r5
 8006dd0:	f000 fca4 	bl	800771c <fabs>
 8006dd4:	9000      	str	r0, [sp, #0]
 8006dd6:	9101      	str	r1, [sp, #4]
 8006dd8:	2f00      	cmp	r7, #0
 8006dda:	d000      	beq.n	8006dde <__ieee754_pow+0xd6>
 8006ddc:	e094      	b.n	8006f08 <__ieee754_pow+0x200>
 8006dde:	2c00      	cmp	r4, #0
 8006de0:	d005      	beq.n	8006dee <__ieee754_pow+0xe6>
 8006de2:	4a64      	ldr	r2, [pc, #400]	; (8006f74 <__ieee754_pow+0x26c>)
 8006de4:	00ab      	lsls	r3, r5, #2
 8006de6:	089b      	lsrs	r3, r3, #2
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d000      	beq.n	8006dee <__ieee754_pow+0xe6>
 8006dec:	e08c      	b.n	8006f08 <__ieee754_pow+0x200>
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	da07      	bge.n	8006e04 <__ieee754_pow+0xfc>
 8006df4:	9a00      	ldr	r2, [sp, #0]
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	2000      	movs	r0, #0
 8006dfa:	495e      	ldr	r1, [pc, #376]	; (8006f74 <__ieee754_pow+0x26c>)
 8006dfc:	f7f9 ffe6 	bl	8000dcc <__aeabi_ddiv>
 8006e00:	9000      	str	r0, [sp, #0]
 8006e02:	9101      	str	r1, [sp, #4]
 8006e04:	9b08      	ldr	r3, [sp, #32]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da55      	bge.n	8006eb6 <__ieee754_pow+0x1ae>
 8006e0a:	4b56      	ldr	r3, [pc, #344]	; (8006f64 <__ieee754_pow+0x25c>)
 8006e0c:	18e4      	adds	r4, r4, r3
 8006e0e:	9b06      	ldr	r3, [sp, #24]
 8006e10:	431c      	orrs	r4, r3
 8006e12:	d000      	beq.n	8006e16 <__ieee754_pow+0x10e>
 8006e14:	e06c      	b.n	8006ef0 <__ieee754_pow+0x1e8>
 8006e16:	9a00      	ldr	r2, [sp, #0]
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	0010      	movs	r0, r2
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	f7fa fe91 	bl	8001b44 <__aeabi_dsub>
 8006e22:	0002      	movs	r2, r0
 8006e24:	000b      	movs	r3, r1
 8006e26:	e01c      	b.n	8006e62 <__ieee754_pow+0x15a>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1cf      	bne.n	8006dcc <__ieee754_pow+0xc4>
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	1a9a      	subs	r2, r3, r2
 8006e30:	0033      	movs	r3, r6
 8006e32:	4113      	asrs	r3, r2
 8006e34:	0019      	movs	r1, r3
 8006e36:	4091      	lsls	r1, r2
 8006e38:	42b1      	cmp	r1, r6
 8006e3a:	d104      	bne.n	8006e46 <__ieee754_pow+0x13e>
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	4013      	ands	r3, r2
 8006e40:	1892      	adds	r2, r2, r2
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	9306      	str	r3, [sp, #24]
 8006e46:	4b4b      	ldr	r3, [pc, #300]	; (8006f74 <__ieee754_pow+0x26c>)
 8006e48:	429e      	cmp	r6, r3
 8006e4a:	d138      	bne.n	8006ebe <__ieee754_pow+0x1b6>
 8006e4c:	0038      	movs	r0, r7
 8006e4e:	0029      	movs	r1, r5
 8006e50:	9b04      	ldr	r3, [sp, #16]
 8006e52:	9000      	str	r0, [sp, #0]
 8006e54:	9101      	str	r1, [sp, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da2d      	bge.n	8006eb6 <__ieee754_pow+0x1ae>
 8006e5a:	003a      	movs	r2, r7
 8006e5c:	002b      	movs	r3, r5
 8006e5e:	2000      	movs	r0, #0
 8006e60:	4944      	ldr	r1, [pc, #272]	; (8006f74 <__ieee754_pow+0x26c>)
 8006e62:	f7f9 ffb3 	bl	8000dcc <__aeabi_ddiv>
 8006e66:	e775      	b.n	8006d54 <__ieee754_pow+0x4c>
 8006e68:	2202      	movs	r2, #2
 8006e6a:	9206      	str	r2, [sp, #24]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1ad      	bne.n	8006dcc <__ieee754_pow+0xc4>
 8006e70:	4b3b      	ldr	r3, [pc, #236]	; (8006f60 <__ieee754_pow+0x258>)
 8006e72:	429e      	cmp	r6, r3
 8006e74:	d1e7      	bne.n	8006e46 <__ieee754_pow+0x13e>
 8006e76:	4b3b      	ldr	r3, [pc, #236]	; (8006f64 <__ieee754_pow+0x25c>)
 8006e78:	18e3      	adds	r3, r4, r3
 8006e7a:	433b      	orrs	r3, r7
 8006e7c:	d101      	bne.n	8006e82 <__ieee754_pow+0x17a>
 8006e7e:	f000 fc15 	bl	80076ac <__ieee754_pow+0x9a4>
 8006e82:	4b3a      	ldr	r3, [pc, #232]	; (8006f6c <__ieee754_pow+0x264>)
 8006e84:	429c      	cmp	r4, r3
 8006e86:	dd09      	ble.n	8006e9c <__ieee754_pow+0x194>
 8006e88:	9b04      	ldr	r3, [sp, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	da01      	bge.n	8006e92 <__ieee754_pow+0x18a>
 8006e8e:	f000 fc11 	bl	80076b4 <__ieee754_pow+0x9ac>
 8006e92:	9b02      	ldr	r3, [sp, #8]
 8006e94:	9c03      	ldr	r4, [sp, #12]
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	9401      	str	r4, [sp, #4]
 8006e9a:	e00c      	b.n	8006eb6 <__ieee754_pow+0x1ae>
 8006e9c:	9b04      	ldr	r3, [sp, #16]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	db01      	blt.n	8006ea6 <__ieee754_pow+0x19e>
 8006ea2:	f000 fc07 	bl	80076b4 <__ieee754_pow+0x9ac>
 8006ea6:	2280      	movs	r2, #128	; 0x80
 8006ea8:	0612      	lsls	r2, r2, #24
 8006eaa:	4694      	mov	ip, r2
 8006eac:	9b02      	ldr	r3, [sp, #8]
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	9b03      	ldr	r3, [sp, #12]
 8006eb2:	4463      	add	r3, ip
 8006eb4:	9301      	str	r3, [sp, #4]
 8006eb6:	9800      	ldr	r0, [sp, #0]
 8006eb8:	9901      	ldr	r1, [sp, #4]
 8006eba:	b015      	add	sp, #84	; 0x54
 8006ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ebe:	2380      	movs	r3, #128	; 0x80
 8006ec0:	9a04      	ldr	r2, [sp, #16]
 8006ec2:	05db      	lsls	r3, r3, #23
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d106      	bne.n	8006ed6 <__ieee754_pow+0x1ce>
 8006ec8:	003a      	movs	r2, r7
 8006eca:	002b      	movs	r3, r5
 8006ecc:	0038      	movs	r0, r7
 8006ece:	0029      	movs	r1, r5
 8006ed0:	f7fa fb76 	bl	80015c0 <__aeabi_dmul>
 8006ed4:	e73e      	b.n	8006d54 <__ieee754_pow+0x4c>
 8006ed6:	4b28      	ldr	r3, [pc, #160]	; (8006f78 <__ieee754_pow+0x270>)
 8006ed8:	9a04      	ldr	r2, [sp, #16]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d000      	beq.n	8006ee0 <__ieee754_pow+0x1d8>
 8006ede:	e775      	b.n	8006dcc <__ieee754_pow+0xc4>
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	da00      	bge.n	8006ee6 <__ieee754_pow+0x1de>
 8006ee4:	e772      	b.n	8006dcc <__ieee754_pow+0xc4>
 8006ee6:	0038      	movs	r0, r7
 8006ee8:	0029      	movs	r1, r5
 8006eea:	f000 fcb7 	bl	800785c <__ieee754_sqrt>
 8006eee:	e731      	b.n	8006d54 <__ieee754_pow+0x4c>
 8006ef0:	9b06      	ldr	r3, [sp, #24]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d1df      	bne.n	8006eb6 <__ieee754_pow+0x1ae>
 8006ef6:	9800      	ldr	r0, [sp, #0]
 8006ef8:	2180      	movs	r1, #128	; 0x80
 8006efa:	0002      	movs	r2, r0
 8006efc:	9801      	ldr	r0, [sp, #4]
 8006efe:	0609      	lsls	r1, r1, #24
 8006f00:	1843      	adds	r3, r0, r1
 8006f02:	9200      	str	r2, [sp, #0]
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	e7d6      	b.n	8006eb6 <__ieee754_pow+0x1ae>
 8006f08:	0feb      	lsrs	r3, r5, #31
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	930e      	str	r3, [sp, #56]	; 0x38
 8006f0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f10:	9b06      	ldr	r3, [sp, #24]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	d104      	bne.n	8006f20 <__ieee754_pow+0x218>
 8006f16:	003a      	movs	r2, r7
 8006f18:	002b      	movs	r3, r5
 8006f1a:	0038      	movs	r0, r7
 8006f1c:	0029      	movs	r1, r5
 8006f1e:	e77e      	b.n	8006e1e <__ieee754_pow+0x116>
 8006f20:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <__ieee754_pow+0x274>)
 8006f22:	429e      	cmp	r6, r3
 8006f24:	dc00      	bgt.n	8006f28 <__ieee754_pow+0x220>
 8006f26:	e0f1      	b.n	800710c <__ieee754_pow+0x404>
 8006f28:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <__ieee754_pow+0x278>)
 8006f2a:	429e      	cmp	r6, r3
 8006f2c:	dd09      	ble.n	8006f42 <__ieee754_pow+0x23a>
 8006f2e:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <__ieee754_pow+0x264>)
 8006f30:	429c      	cmp	r4, r3
 8006f32:	dc0c      	bgt.n	8006f4e <__ieee754_pow+0x246>
 8006f34:	9b04      	ldr	r3, [sp, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da0c      	bge.n	8006f54 <__ieee754_pow+0x24c>
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	f000 fc86 	bl	800784c <__math_oflow>
 8006f40:	e708      	b.n	8006d54 <__ieee754_pow+0x4c>
 8006f42:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <__ieee754_pow+0x27c>)
 8006f44:	429c      	cmp	r4, r3
 8006f46:	ddf5      	ble.n	8006f34 <__ieee754_pow+0x22c>
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <__ieee754_pow+0x26c>)
 8006f4a:	429c      	cmp	r4, r3
 8006f4c:	dd1c      	ble.n	8006f88 <__ieee754_pow+0x280>
 8006f4e:	9b04      	ldr	r3, [sp, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	dcf2      	bgt.n	8006f3a <__ieee754_pow+0x232>
 8006f54:	2000      	movs	r0, #0
 8006f56:	f000 fc72 	bl	800783e <__math_uflow>
 8006f5a:	e6fb      	b.n	8006d54 <__ieee754_pow+0x4c>
 8006f5c:	fff00000 	.word	0xfff00000
 8006f60:	7ff00000 	.word	0x7ff00000
 8006f64:	c0100000 	.word	0xc0100000
 8006f68:	433fffff 	.word	0x433fffff
 8006f6c:	3fefffff 	.word	0x3fefffff
 8006f70:	fffffc01 	.word	0xfffffc01
 8006f74:	3ff00000 	.word	0x3ff00000
 8006f78:	3fe00000 	.word	0x3fe00000
 8006f7c:	41e00000 	.word	0x41e00000
 8006f80:	43f00000 	.word	0x43f00000
 8006f84:	3feffffe 	.word	0x3feffffe
 8006f88:	2200      	movs	r2, #0
 8006f8a:	9800      	ldr	r0, [sp, #0]
 8006f8c:	9901      	ldr	r1, [sp, #4]
 8006f8e:	4b53      	ldr	r3, [pc, #332]	; (80070dc <__ieee754_pow+0x3d4>)
 8006f90:	f7fa fdd8 	bl	8001b44 <__aeabi_dsub>
 8006f94:	22c0      	movs	r2, #192	; 0xc0
 8006f96:	4b52      	ldr	r3, [pc, #328]	; (80070e0 <__ieee754_pow+0x3d8>)
 8006f98:	05d2      	lsls	r2, r2, #23
 8006f9a:	0004      	movs	r4, r0
 8006f9c:	000d      	movs	r5, r1
 8006f9e:	f7fa fb0f 	bl	80015c0 <__aeabi_dmul>
 8006fa2:	4a50      	ldr	r2, [pc, #320]	; (80070e4 <__ieee754_pow+0x3dc>)
 8006fa4:	0006      	movs	r6, r0
 8006fa6:	000f      	movs	r7, r1
 8006fa8:	0020      	movs	r0, r4
 8006faa:	0029      	movs	r1, r5
 8006fac:	4b4e      	ldr	r3, [pc, #312]	; (80070e8 <__ieee754_pow+0x3e0>)
 8006fae:	f7fa fb07 	bl	80015c0 <__aeabi_dmul>
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	9000      	str	r0, [sp, #0]
 8006fb6:	9101      	str	r1, [sp, #4]
 8006fb8:	4b4c      	ldr	r3, [pc, #304]	; (80070ec <__ieee754_pow+0x3e4>)
 8006fba:	0020      	movs	r0, r4
 8006fbc:	0029      	movs	r1, r5
 8006fbe:	f7fa faff 	bl	80015c0 <__aeabi_dmul>
 8006fc2:	0002      	movs	r2, r0
 8006fc4:	000b      	movs	r3, r1
 8006fc6:	484a      	ldr	r0, [pc, #296]	; (80070f0 <__ieee754_pow+0x3e8>)
 8006fc8:	494a      	ldr	r1, [pc, #296]	; (80070f4 <__ieee754_pow+0x3ec>)
 8006fca:	f7fa fdbb 	bl	8001b44 <__aeabi_dsub>
 8006fce:	0022      	movs	r2, r4
 8006fd0:	002b      	movs	r3, r5
 8006fd2:	f7fa faf5 	bl	80015c0 <__aeabi_dmul>
 8006fd6:	0002      	movs	r2, r0
 8006fd8:	000b      	movs	r3, r1
 8006fda:	2000      	movs	r0, #0
 8006fdc:	4946      	ldr	r1, [pc, #280]	; (80070f8 <__ieee754_pow+0x3f0>)
 8006fde:	f7fa fdb1 	bl	8001b44 <__aeabi_dsub>
 8006fe2:	0022      	movs	r2, r4
 8006fe4:	002b      	movs	r3, r5
 8006fe6:	9004      	str	r0, [sp, #16]
 8006fe8:	9105      	str	r1, [sp, #20]
 8006fea:	0020      	movs	r0, r4
 8006fec:	0029      	movs	r1, r5
 8006fee:	f7fa fae7 	bl	80015c0 <__aeabi_dmul>
 8006ff2:	0002      	movs	r2, r0
 8006ff4:	000b      	movs	r3, r1
 8006ff6:	9804      	ldr	r0, [sp, #16]
 8006ff8:	9905      	ldr	r1, [sp, #20]
 8006ffa:	f7fa fae1 	bl	80015c0 <__aeabi_dmul>
 8006ffe:	4a3f      	ldr	r2, [pc, #252]	; (80070fc <__ieee754_pow+0x3f4>)
 8007000:	4b37      	ldr	r3, [pc, #220]	; (80070e0 <__ieee754_pow+0x3d8>)
 8007002:	f7fa fadd 	bl	80015c0 <__aeabi_dmul>
 8007006:	0002      	movs	r2, r0
 8007008:	000b      	movs	r3, r1
 800700a:	9800      	ldr	r0, [sp, #0]
 800700c:	9901      	ldr	r1, [sp, #4]
 800700e:	f7fa fd99 	bl	8001b44 <__aeabi_dsub>
 8007012:	0002      	movs	r2, r0
 8007014:	000b      	movs	r3, r1
 8007016:	0004      	movs	r4, r0
 8007018:	000d      	movs	r5, r1
 800701a:	0030      	movs	r0, r6
 800701c:	0039      	movs	r1, r7
 800701e:	f7f9 fb75 	bl	800070c <__aeabi_dadd>
 8007022:	2000      	movs	r0, #0
 8007024:	0032      	movs	r2, r6
 8007026:	003b      	movs	r3, r7
 8007028:	9004      	str	r0, [sp, #16]
 800702a:	9105      	str	r1, [sp, #20]
 800702c:	f7fa fd8a 	bl	8001b44 <__aeabi_dsub>
 8007030:	0002      	movs	r2, r0
 8007032:	000b      	movs	r3, r1
 8007034:	0020      	movs	r0, r4
 8007036:	0029      	movs	r1, r5
 8007038:	f7fa fd84 	bl	8001b44 <__aeabi_dsub>
 800703c:	9b06      	ldr	r3, [sp, #24]
 800703e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007040:	3b01      	subs	r3, #1
 8007042:	0006      	movs	r6, r0
 8007044:	000f      	movs	r7, r1
 8007046:	4313      	orrs	r3, r2
 8007048:	d000      	beq.n	800704c <__ieee754_pow+0x344>
 800704a:	e1dc      	b.n	8007406 <__ieee754_pow+0x6fe>
 800704c:	2300      	movs	r3, #0
 800704e:	4c2c      	ldr	r4, [pc, #176]	; (8007100 <__ieee754_pow+0x3f8>)
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	9401      	str	r4, [sp, #4]
 8007054:	9c02      	ldr	r4, [sp, #8]
 8007056:	9d03      	ldr	r5, [sp, #12]
 8007058:	9802      	ldr	r0, [sp, #8]
 800705a:	9903      	ldr	r1, [sp, #12]
 800705c:	2400      	movs	r4, #0
 800705e:	002b      	movs	r3, r5
 8007060:	0022      	movs	r2, r4
 8007062:	f7fa fd6f 	bl	8001b44 <__aeabi_dsub>
 8007066:	9a04      	ldr	r2, [sp, #16]
 8007068:	9b05      	ldr	r3, [sp, #20]
 800706a:	f7fa faa9 	bl	80015c0 <__aeabi_dmul>
 800706e:	9a02      	ldr	r2, [sp, #8]
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	9006      	str	r0, [sp, #24]
 8007074:	9107      	str	r1, [sp, #28]
 8007076:	0030      	movs	r0, r6
 8007078:	0039      	movs	r1, r7
 800707a:	f7fa faa1 	bl	80015c0 <__aeabi_dmul>
 800707e:	0002      	movs	r2, r0
 8007080:	000b      	movs	r3, r1
 8007082:	9806      	ldr	r0, [sp, #24]
 8007084:	9907      	ldr	r1, [sp, #28]
 8007086:	f7f9 fb41 	bl	800070c <__aeabi_dadd>
 800708a:	0022      	movs	r2, r4
 800708c:	002b      	movs	r3, r5
 800708e:	0006      	movs	r6, r0
 8007090:	000f      	movs	r7, r1
 8007092:	9804      	ldr	r0, [sp, #16]
 8007094:	9905      	ldr	r1, [sp, #20]
 8007096:	f7fa fa93 	bl	80015c0 <__aeabi_dmul>
 800709a:	0003      	movs	r3, r0
 800709c:	000c      	movs	r4, r1
 800709e:	9004      	str	r0, [sp, #16]
 80070a0:	9105      	str	r1, [sp, #20]
 80070a2:	9306      	str	r3, [sp, #24]
 80070a4:	9407      	str	r4, [sp, #28]
 80070a6:	0002      	movs	r2, r0
 80070a8:	000b      	movs	r3, r1
 80070aa:	0030      	movs	r0, r6
 80070ac:	0039      	movs	r1, r7
 80070ae:	f7f9 fb2d 	bl	800070c <__aeabi_dadd>
 80070b2:	4b14      	ldr	r3, [pc, #80]	; (8007104 <__ieee754_pow+0x3fc>)
 80070b4:	0005      	movs	r5, r0
 80070b6:	000c      	movs	r4, r1
 80070b8:	9108      	str	r1, [sp, #32]
 80070ba:	4299      	cmp	r1, r3
 80070bc:	dc00      	bgt.n	80070c0 <__ieee754_pow+0x3b8>
 80070be:	e2d4      	b.n	800766a <__ieee754_pow+0x962>
 80070c0:	4b11      	ldr	r3, [pc, #68]	; (8007108 <__ieee754_pow+0x400>)
 80070c2:	18cb      	adds	r3, r1, r3
 80070c4:	4303      	orrs	r3, r0
 80070c6:	d100      	bne.n	80070ca <__ieee754_pow+0x3c2>
 80070c8:	e1d6      	b.n	8007478 <__ieee754_pow+0x770>
 80070ca:	9800      	ldr	r0, [sp, #0]
 80070cc:	9901      	ldr	r1, [sp, #4]
 80070ce:	2300      	movs	r3, #0
 80070d0:	2200      	movs	r2, #0
 80070d2:	f7f9 f9b5 	bl	8000440 <__aeabi_dcmplt>
 80070d6:	1e43      	subs	r3, r0, #1
 80070d8:	4198      	sbcs	r0, r3
 80070da:	e72f      	b.n	8006f3c <__ieee754_pow+0x234>
 80070dc:	3ff00000 	.word	0x3ff00000
 80070e0:	3ff71547 	.word	0x3ff71547
 80070e4:	f85ddf44 	.word	0xf85ddf44
 80070e8:	3e54ae0b 	.word	0x3e54ae0b
 80070ec:	3fd00000 	.word	0x3fd00000
 80070f0:	55555555 	.word	0x55555555
 80070f4:	3fd55555 	.word	0x3fd55555
 80070f8:	3fe00000 	.word	0x3fe00000
 80070fc:	652b82fe 	.word	0x652b82fe
 8007100:	bff00000 	.word	0xbff00000
 8007104:	408fffff 	.word	0x408fffff
 8007108:	bf700000 	.word	0xbf700000
 800710c:	4bbf      	ldr	r3, [pc, #764]	; (800740c <__ieee754_pow+0x704>)
 800710e:	2200      	movs	r2, #0
 8007110:	422b      	tst	r3, r5
 8007112:	d10a      	bne.n	800712a <__ieee754_pow+0x422>
 8007114:	9800      	ldr	r0, [sp, #0]
 8007116:	9901      	ldr	r1, [sp, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	4bbd      	ldr	r3, [pc, #756]	; (8007410 <__ieee754_pow+0x708>)
 800711c:	f7fa fa50 	bl	80015c0 <__aeabi_dmul>
 8007120:	2235      	movs	r2, #53	; 0x35
 8007122:	9000      	str	r0, [sp, #0]
 8007124:	9101      	str	r1, [sp, #4]
 8007126:	9c01      	ldr	r4, [sp, #4]
 8007128:	4252      	negs	r2, r2
 800712a:	49ba      	ldr	r1, [pc, #744]	; (8007414 <__ieee754_pow+0x70c>)
 800712c:	1523      	asrs	r3, r4, #20
 800712e:	185b      	adds	r3, r3, r1
 8007130:	189b      	adds	r3, r3, r2
 8007132:	0324      	lsls	r4, r4, #12
 8007134:	4db8      	ldr	r5, [pc, #736]	; (8007418 <__ieee754_pow+0x710>)
 8007136:	930d      	str	r3, [sp, #52]	; 0x34
 8007138:	4bb8      	ldr	r3, [pc, #736]	; (800741c <__ieee754_pow+0x714>)
 800713a:	0b22      	lsrs	r2, r4, #12
 800713c:	4315      	orrs	r5, r2
 800713e:	2400      	movs	r4, #0
 8007140:	429a      	cmp	r2, r3
 8007142:	dd09      	ble.n	8007158 <__ieee754_pow+0x450>
 8007144:	4bb6      	ldr	r3, [pc, #728]	; (8007420 <__ieee754_pow+0x718>)
 8007146:	3401      	adds	r4, #1
 8007148:	429a      	cmp	r2, r3
 800714a:	dd05      	ble.n	8007158 <__ieee754_pow+0x450>
 800714c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800714e:	191b      	adds	r3, r3, r4
 8007150:	2400      	movs	r4, #0
 8007152:	930d      	str	r3, [sp, #52]	; 0x34
 8007154:	4bb3      	ldr	r3, [pc, #716]	; (8007424 <__ieee754_pow+0x71c>)
 8007156:	18ed      	adds	r5, r5, r3
 8007158:	4bb3      	ldr	r3, [pc, #716]	; (8007428 <__ieee754_pow+0x720>)
 800715a:	00e2      	lsls	r2, r4, #3
 800715c:	189b      	adds	r3, r3, r2
 800715e:	9800      	ldr	r0, [sp, #0]
 8007160:	9901      	ldr	r1, [sp, #4]
 8007162:	920f      	str	r2, [sp, #60]	; 0x3c
 8007164:	0029      	movs	r1, r5
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	0006      	movs	r6, r0
 800716c:	920a      	str	r2, [sp, #40]	; 0x28
 800716e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007170:	f7fa fce8 	bl	8001b44 <__aeabi_dsub>
 8007174:	0032      	movs	r2, r6
 8007176:	002b      	movs	r3, r5
 8007178:	9010      	str	r0, [sp, #64]	; 0x40
 800717a:	9111      	str	r1, [sp, #68]	; 0x44
 800717c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800717e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007180:	f7f9 fac4 	bl	800070c <__aeabi_dadd>
 8007184:	0002      	movs	r2, r0
 8007186:	000b      	movs	r3, r1
 8007188:	2000      	movs	r0, #0
 800718a:	49a3      	ldr	r1, [pc, #652]	; (8007418 <__ieee754_pow+0x710>)
 800718c:	f7f9 fe1e 	bl	8000dcc <__aeabi_ddiv>
 8007190:	0002      	movs	r2, r0
 8007192:	000b      	movs	r3, r1
 8007194:	9012      	str	r0, [sp, #72]	; 0x48
 8007196:	9113      	str	r1, [sp, #76]	; 0x4c
 8007198:	9810      	ldr	r0, [sp, #64]	; 0x40
 800719a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800719c:	f7fa fa10 	bl	80015c0 <__aeabi_dmul>
 80071a0:	9008      	str	r0, [sp, #32]
 80071a2:	9109      	str	r1, [sp, #36]	; 0x24
 80071a4:	9a08      	ldr	r2, [sp, #32]
 80071a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a8:	9204      	str	r2, [sp, #16]
 80071aa:	9305      	str	r3, [sp, #20]
 80071ac:	2300      	movs	r3, #0
 80071ae:	2180      	movs	r1, #128	; 0x80
 80071b0:	2080      	movs	r0, #128	; 0x80
 80071b2:	9304      	str	r3, [sp, #16]
 80071b4:	9a04      	ldr	r2, [sp, #16]
 80071b6:	9b05      	ldr	r3, [sp, #20]
 80071b8:	9200      	str	r2, [sp, #0]
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	002f      	movs	r7, r5
 80071c0:	0589      	lsls	r1, r1, #22
 80071c2:	106d      	asrs	r5, r5, #1
 80071c4:	4329      	orrs	r1, r5
 80071c6:	0300      	lsls	r0, r0, #12
 80071c8:	1809      	adds	r1, r1, r0
 80071ca:	04a0      	lsls	r0, r4, #18
 80071cc:	180b      	adds	r3, r1, r0
 80071ce:	9800      	ldr	r0, [sp, #0]
 80071d0:	9901      	ldr	r1, [sp, #4]
 80071d2:	0014      	movs	r4, r2
 80071d4:	001d      	movs	r5, r3
 80071d6:	f7fa f9f3 	bl	80015c0 <__aeabi_dmul>
 80071da:	0002      	movs	r2, r0
 80071dc:	000b      	movs	r3, r1
 80071de:	9810      	ldr	r0, [sp, #64]	; 0x40
 80071e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80071e2:	f7fa fcaf 	bl	8001b44 <__aeabi_dsub>
 80071e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ea:	9010      	str	r0, [sp, #64]	; 0x40
 80071ec:	9111      	str	r1, [sp, #68]	; 0x44
 80071ee:	0020      	movs	r0, r4
 80071f0:	0029      	movs	r1, r5
 80071f2:	f7fa fca7 	bl	8001b44 <__aeabi_dsub>
 80071f6:	0002      	movs	r2, r0
 80071f8:	000b      	movs	r3, r1
 80071fa:	0030      	movs	r0, r6
 80071fc:	0039      	movs	r1, r7
 80071fe:	f7fa fca1 	bl	8001b44 <__aeabi_dsub>
 8007202:	9a00      	ldr	r2, [sp, #0]
 8007204:	9b01      	ldr	r3, [sp, #4]
 8007206:	f7fa f9db 	bl	80015c0 <__aeabi_dmul>
 800720a:	0002      	movs	r2, r0
 800720c:	000b      	movs	r3, r1
 800720e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007210:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007212:	f7fa fc97 	bl	8001b44 <__aeabi_dsub>
 8007216:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800721a:	f7fa f9d1 	bl	80015c0 <__aeabi_dmul>
 800721e:	9a08      	ldr	r2, [sp, #32]
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	900a      	str	r0, [sp, #40]	; 0x28
 8007224:	910b      	str	r1, [sp, #44]	; 0x2c
 8007226:	0010      	movs	r0, r2
 8007228:	0019      	movs	r1, r3
 800722a:	f7fa f9c9 	bl	80015c0 <__aeabi_dmul>
 800722e:	0006      	movs	r6, r0
 8007230:	000f      	movs	r7, r1
 8007232:	4a7e      	ldr	r2, [pc, #504]	; (800742c <__ieee754_pow+0x724>)
 8007234:	4b7e      	ldr	r3, [pc, #504]	; (8007430 <__ieee754_pow+0x728>)
 8007236:	f7fa f9c3 	bl	80015c0 <__aeabi_dmul>
 800723a:	4a7e      	ldr	r2, [pc, #504]	; (8007434 <__ieee754_pow+0x72c>)
 800723c:	4b7e      	ldr	r3, [pc, #504]	; (8007438 <__ieee754_pow+0x730>)
 800723e:	f7f9 fa65 	bl	800070c <__aeabi_dadd>
 8007242:	0032      	movs	r2, r6
 8007244:	003b      	movs	r3, r7
 8007246:	f7fa f9bb 	bl	80015c0 <__aeabi_dmul>
 800724a:	4a7c      	ldr	r2, [pc, #496]	; (800743c <__ieee754_pow+0x734>)
 800724c:	4b7c      	ldr	r3, [pc, #496]	; (8007440 <__ieee754_pow+0x738>)
 800724e:	f7f9 fa5d 	bl	800070c <__aeabi_dadd>
 8007252:	0032      	movs	r2, r6
 8007254:	003b      	movs	r3, r7
 8007256:	f7fa f9b3 	bl	80015c0 <__aeabi_dmul>
 800725a:	4a7a      	ldr	r2, [pc, #488]	; (8007444 <__ieee754_pow+0x73c>)
 800725c:	4b7a      	ldr	r3, [pc, #488]	; (8007448 <__ieee754_pow+0x740>)
 800725e:	f7f9 fa55 	bl	800070c <__aeabi_dadd>
 8007262:	0032      	movs	r2, r6
 8007264:	003b      	movs	r3, r7
 8007266:	f7fa f9ab 	bl	80015c0 <__aeabi_dmul>
 800726a:	4a78      	ldr	r2, [pc, #480]	; (800744c <__ieee754_pow+0x744>)
 800726c:	4b78      	ldr	r3, [pc, #480]	; (8007450 <__ieee754_pow+0x748>)
 800726e:	f7f9 fa4d 	bl	800070c <__aeabi_dadd>
 8007272:	0032      	movs	r2, r6
 8007274:	003b      	movs	r3, r7
 8007276:	f7fa f9a3 	bl	80015c0 <__aeabi_dmul>
 800727a:	4a76      	ldr	r2, [pc, #472]	; (8007454 <__ieee754_pow+0x74c>)
 800727c:	4b76      	ldr	r3, [pc, #472]	; (8007458 <__ieee754_pow+0x750>)
 800727e:	f7f9 fa45 	bl	800070c <__aeabi_dadd>
 8007282:	0032      	movs	r2, r6
 8007284:	0004      	movs	r4, r0
 8007286:	000d      	movs	r5, r1
 8007288:	003b      	movs	r3, r7
 800728a:	0030      	movs	r0, r6
 800728c:	0039      	movs	r1, r7
 800728e:	f7fa f997 	bl	80015c0 <__aeabi_dmul>
 8007292:	0002      	movs	r2, r0
 8007294:	000b      	movs	r3, r1
 8007296:	0020      	movs	r0, r4
 8007298:	0029      	movs	r1, r5
 800729a:	f7fa f991 	bl	80015c0 <__aeabi_dmul>
 800729e:	9a00      	ldr	r2, [sp, #0]
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	0004      	movs	r4, r0
 80072a4:	000d      	movs	r5, r1
 80072a6:	9808      	ldr	r0, [sp, #32]
 80072a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072aa:	f7f9 fa2f 	bl	800070c <__aeabi_dadd>
 80072ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b2:	f7fa f985 	bl	80015c0 <__aeabi_dmul>
 80072b6:	0022      	movs	r2, r4
 80072b8:	002b      	movs	r3, r5
 80072ba:	f7f9 fa27 	bl	800070c <__aeabi_dadd>
 80072be:	9a00      	ldr	r2, [sp, #0]
 80072c0:	9b01      	ldr	r3, [sp, #4]
 80072c2:	9010      	str	r0, [sp, #64]	; 0x40
 80072c4:	9111      	str	r1, [sp, #68]	; 0x44
 80072c6:	0010      	movs	r0, r2
 80072c8:	0019      	movs	r1, r3
 80072ca:	f7fa f979 	bl	80015c0 <__aeabi_dmul>
 80072ce:	2200      	movs	r2, #0
 80072d0:	4b62      	ldr	r3, [pc, #392]	; (800745c <__ieee754_pow+0x754>)
 80072d2:	0004      	movs	r4, r0
 80072d4:	000d      	movs	r5, r1
 80072d6:	f7f9 fa19 	bl	800070c <__aeabi_dadd>
 80072da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80072dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072de:	f7f9 fa15 	bl	800070c <__aeabi_dadd>
 80072e2:	2000      	movs	r0, #0
 80072e4:	000f      	movs	r7, r1
 80072e6:	0006      	movs	r6, r0
 80072e8:	0002      	movs	r2, r0
 80072ea:	000b      	movs	r3, r1
 80072ec:	9800      	ldr	r0, [sp, #0]
 80072ee:	9901      	ldr	r1, [sp, #4]
 80072f0:	f7fa f966 	bl	80015c0 <__aeabi_dmul>
 80072f4:	2200      	movs	r2, #0
 80072f6:	9000      	str	r0, [sp, #0]
 80072f8:	9101      	str	r1, [sp, #4]
 80072fa:	4b58      	ldr	r3, [pc, #352]	; (800745c <__ieee754_pow+0x754>)
 80072fc:	0030      	movs	r0, r6
 80072fe:	0039      	movs	r1, r7
 8007300:	f7fa fc20 	bl	8001b44 <__aeabi_dsub>
 8007304:	0022      	movs	r2, r4
 8007306:	002b      	movs	r3, r5
 8007308:	f7fa fc1c 	bl	8001b44 <__aeabi_dsub>
 800730c:	0002      	movs	r2, r0
 800730e:	000b      	movs	r3, r1
 8007310:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007312:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007314:	f7fa fc16 	bl	8001b44 <__aeabi_dsub>
 8007318:	9a08      	ldr	r2, [sp, #32]
 800731a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800731c:	f7fa f950 	bl	80015c0 <__aeabi_dmul>
 8007320:	0032      	movs	r2, r6
 8007322:	0004      	movs	r4, r0
 8007324:	000d      	movs	r5, r1
 8007326:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800732a:	003b      	movs	r3, r7
 800732c:	f7fa f948 	bl	80015c0 <__aeabi_dmul>
 8007330:	0002      	movs	r2, r0
 8007332:	000b      	movs	r3, r1
 8007334:	0020      	movs	r0, r4
 8007336:	0029      	movs	r1, r5
 8007338:	f7f9 f9e8 	bl	800070c <__aeabi_dadd>
 800733c:	0004      	movs	r4, r0
 800733e:	000d      	movs	r5, r1
 8007340:	0002      	movs	r2, r0
 8007342:	000b      	movs	r3, r1
 8007344:	9800      	ldr	r0, [sp, #0]
 8007346:	9901      	ldr	r1, [sp, #4]
 8007348:	f7f9 f9e0 	bl	800070c <__aeabi_dadd>
 800734c:	22e0      	movs	r2, #224	; 0xe0
 800734e:	2000      	movs	r0, #0
 8007350:	4b43      	ldr	r3, [pc, #268]	; (8007460 <__ieee754_pow+0x758>)
 8007352:	0612      	lsls	r2, r2, #24
 8007354:	0006      	movs	r6, r0
 8007356:	000f      	movs	r7, r1
 8007358:	f7fa f932 	bl	80015c0 <__aeabi_dmul>
 800735c:	9008      	str	r0, [sp, #32]
 800735e:	9109      	str	r1, [sp, #36]	; 0x24
 8007360:	9a00      	ldr	r2, [sp, #0]
 8007362:	9b01      	ldr	r3, [sp, #4]
 8007364:	0030      	movs	r0, r6
 8007366:	0039      	movs	r1, r7
 8007368:	f7fa fbec 	bl	8001b44 <__aeabi_dsub>
 800736c:	0002      	movs	r2, r0
 800736e:	000b      	movs	r3, r1
 8007370:	0020      	movs	r0, r4
 8007372:	0029      	movs	r1, r5
 8007374:	f7fa fbe6 	bl	8001b44 <__aeabi_dsub>
 8007378:	4a3a      	ldr	r2, [pc, #232]	; (8007464 <__ieee754_pow+0x75c>)
 800737a:	4b39      	ldr	r3, [pc, #228]	; (8007460 <__ieee754_pow+0x758>)
 800737c:	f7fa f920 	bl	80015c0 <__aeabi_dmul>
 8007380:	4a39      	ldr	r2, [pc, #228]	; (8007468 <__ieee754_pow+0x760>)
 8007382:	0004      	movs	r4, r0
 8007384:	000d      	movs	r5, r1
 8007386:	0030      	movs	r0, r6
 8007388:	0039      	movs	r1, r7
 800738a:	4b38      	ldr	r3, [pc, #224]	; (800746c <__ieee754_pow+0x764>)
 800738c:	f7fa f918 	bl	80015c0 <__aeabi_dmul>
 8007390:	0002      	movs	r2, r0
 8007392:	000b      	movs	r3, r1
 8007394:	0020      	movs	r0, r4
 8007396:	0029      	movs	r1, r5
 8007398:	f7f9 f9b8 	bl	800070c <__aeabi_dadd>
 800739c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800739e:	4b34      	ldr	r3, [pc, #208]	; (8007470 <__ieee754_pow+0x768>)
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f7f9 f9b1 	bl	800070c <__aeabi_dadd>
 80073aa:	9000      	str	r0, [sp, #0]
 80073ac:	9101      	str	r1, [sp, #4]
 80073ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80073b0:	f7fa ff68 	bl	8002284 <__aeabi_i2d>
 80073b4:	0004      	movs	r4, r0
 80073b6:	000d      	movs	r5, r1
 80073b8:	9808      	ldr	r0, [sp, #32]
 80073ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073be:	4b2d      	ldr	r3, [pc, #180]	; (8007474 <__ieee754_pow+0x76c>)
 80073c0:	189b      	adds	r3, r3, r2
 80073c2:	681e      	ldr	r6, [r3, #0]
 80073c4:	685f      	ldr	r7, [r3, #4]
 80073c6:	9a00      	ldr	r2, [sp, #0]
 80073c8:	9b01      	ldr	r3, [sp, #4]
 80073ca:	f7f9 f99f 	bl	800070c <__aeabi_dadd>
 80073ce:	0032      	movs	r2, r6
 80073d0:	003b      	movs	r3, r7
 80073d2:	f7f9 f99b 	bl	800070c <__aeabi_dadd>
 80073d6:	0022      	movs	r2, r4
 80073d8:	002b      	movs	r3, r5
 80073da:	f7f9 f997 	bl	800070c <__aeabi_dadd>
 80073de:	2000      	movs	r0, #0
 80073e0:	0022      	movs	r2, r4
 80073e2:	002b      	movs	r3, r5
 80073e4:	9004      	str	r0, [sp, #16]
 80073e6:	9105      	str	r1, [sp, #20]
 80073e8:	f7fa fbac 	bl	8001b44 <__aeabi_dsub>
 80073ec:	0032      	movs	r2, r6
 80073ee:	003b      	movs	r3, r7
 80073f0:	f7fa fba8 	bl	8001b44 <__aeabi_dsub>
 80073f4:	9a08      	ldr	r2, [sp, #32]
 80073f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f8:	f7fa fba4 	bl	8001b44 <__aeabi_dsub>
 80073fc:	0002      	movs	r2, r0
 80073fe:	000b      	movs	r3, r1
 8007400:	9800      	ldr	r0, [sp, #0]
 8007402:	9901      	ldr	r1, [sp, #4]
 8007404:	e618      	b.n	8007038 <__ieee754_pow+0x330>
 8007406:	2300      	movs	r3, #0
 8007408:	4c03      	ldr	r4, [pc, #12]	; (8007418 <__ieee754_pow+0x710>)
 800740a:	e621      	b.n	8007050 <__ieee754_pow+0x348>
 800740c:	7ff00000 	.word	0x7ff00000
 8007410:	43400000 	.word	0x43400000
 8007414:	fffffc01 	.word	0xfffffc01
 8007418:	3ff00000 	.word	0x3ff00000
 800741c:	0003988e 	.word	0x0003988e
 8007420:	000bb679 	.word	0x000bb679
 8007424:	fff00000 	.word	0xfff00000
 8007428:	08007c90 	.word	0x08007c90
 800742c:	4a454eef 	.word	0x4a454eef
 8007430:	3fca7e28 	.word	0x3fca7e28
 8007434:	93c9db65 	.word	0x93c9db65
 8007438:	3fcd864a 	.word	0x3fcd864a
 800743c:	a91d4101 	.word	0xa91d4101
 8007440:	3fd17460 	.word	0x3fd17460
 8007444:	518f264d 	.word	0x518f264d
 8007448:	3fd55555 	.word	0x3fd55555
 800744c:	db6fabff 	.word	0xdb6fabff
 8007450:	3fdb6db6 	.word	0x3fdb6db6
 8007454:	33333303 	.word	0x33333303
 8007458:	3fe33333 	.word	0x3fe33333
 800745c:	40080000 	.word	0x40080000
 8007460:	3feec709 	.word	0x3feec709
 8007464:	dc3a03fd 	.word	0xdc3a03fd
 8007468:	145b01f5 	.word	0x145b01f5
 800746c:	be3e2fe0 	.word	0xbe3e2fe0
 8007470:	08007cb0 	.word	0x08007cb0
 8007474:	08007ca0 	.word	0x08007ca0
 8007478:	4a90      	ldr	r2, [pc, #576]	; (80076bc <__ieee754_pow+0x9b4>)
 800747a:	4b91      	ldr	r3, [pc, #580]	; (80076c0 <__ieee754_pow+0x9b8>)
 800747c:	0030      	movs	r0, r6
 800747e:	0039      	movs	r1, r7
 8007480:	f7f9 f944 	bl	800070c <__aeabi_dadd>
 8007484:	9a04      	ldr	r2, [sp, #16]
 8007486:	9b05      	ldr	r3, [sp, #20]
 8007488:	9002      	str	r0, [sp, #8]
 800748a:	9103      	str	r1, [sp, #12]
 800748c:	0028      	movs	r0, r5
 800748e:	0021      	movs	r1, r4
 8007490:	f7fa fb58 	bl	8001b44 <__aeabi_dsub>
 8007494:	0002      	movs	r2, r0
 8007496:	000b      	movs	r3, r1
 8007498:	9802      	ldr	r0, [sp, #8]
 800749a:	9903      	ldr	r1, [sp, #12]
 800749c:	f7f8 ffe4 	bl	8000468 <__aeabi_dcmpgt>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	d000      	beq.n	80074a6 <__ieee754_pow+0x79e>
 80074a4:	e611      	b.n	80070ca <__ieee754_pow+0x3c2>
 80074a6:	2100      	movs	r1, #0
 80074a8:	4a86      	ldr	r2, [pc, #536]	; (80076c4 <__ieee754_pow+0x9bc>)
 80074aa:	0063      	lsls	r3, r4, #1
 80074ac:	085b      	lsrs	r3, r3, #1
 80074ae:	9102      	str	r1, [sp, #8]
 80074b0:	4293      	cmp	r3, r2
 80074b2:	dd25      	ble.n	8007500 <__ieee754_pow+0x7f8>
 80074b4:	4a84      	ldr	r2, [pc, #528]	; (80076c8 <__ieee754_pow+0x9c0>)
 80074b6:	151b      	asrs	r3, r3, #20
 80074b8:	189b      	adds	r3, r3, r2
 80074ba:	2280      	movs	r2, #128	; 0x80
 80074bc:	0352      	lsls	r2, r2, #13
 80074be:	0011      	movs	r1, r2
 80074c0:	4119      	asrs	r1, r3
 80074c2:	190b      	adds	r3, r1, r4
 80074c4:	005c      	lsls	r4, r3, #1
 80074c6:	4981      	ldr	r1, [pc, #516]	; (80076cc <__ieee754_pow+0x9c4>)
 80074c8:	4d81      	ldr	r5, [pc, #516]	; (80076d0 <__ieee754_pow+0x9c8>)
 80074ca:	0d64      	lsrs	r4, r4, #21
 80074cc:	1864      	adds	r4, r4, r1
 80074ce:	4125      	asrs	r5, r4
 80074d0:	401d      	ands	r5, r3
 80074d2:	031b      	lsls	r3, r3, #12
 80074d4:	0b1b      	lsrs	r3, r3, #12
 80074d6:	4313      	orrs	r3, r2
 80074d8:	2214      	movs	r2, #20
 80074da:	1b12      	subs	r2, r2, r4
 80074dc:	4113      	asrs	r3, r2
 80074de:	9302      	str	r3, [sp, #8]
 80074e0:	9b08      	ldr	r3, [sp, #32]
 80074e2:	2000      	movs	r0, #0
 80074e4:	0029      	movs	r1, r5
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da02      	bge.n	80074f0 <__ieee754_pow+0x7e8>
 80074ea:	9b02      	ldr	r3, [sp, #8]
 80074ec:	425b      	negs	r3, r3
 80074ee:	9302      	str	r3, [sp, #8]
 80074f0:	0002      	movs	r2, r0
 80074f2:	000b      	movs	r3, r1
 80074f4:	9804      	ldr	r0, [sp, #16]
 80074f6:	9905      	ldr	r1, [sp, #20]
 80074f8:	f7fa fb24 	bl	8001b44 <__aeabi_dsub>
 80074fc:	9006      	str	r0, [sp, #24]
 80074fe:	9107      	str	r1, [sp, #28]
 8007500:	9806      	ldr	r0, [sp, #24]
 8007502:	9907      	ldr	r1, [sp, #28]
 8007504:	0032      	movs	r2, r6
 8007506:	003b      	movs	r3, r7
 8007508:	f7f9 f900 	bl	800070c <__aeabi_dadd>
 800750c:	2000      	movs	r0, #0
 800750e:	2200      	movs	r2, #0
 8007510:	4b70      	ldr	r3, [pc, #448]	; (80076d4 <__ieee754_pow+0x9cc>)
 8007512:	9004      	str	r0, [sp, #16]
 8007514:	9105      	str	r1, [sp, #20]
 8007516:	f7fa f853 	bl	80015c0 <__aeabi_dmul>
 800751a:	9a06      	ldr	r2, [sp, #24]
 800751c:	9b07      	ldr	r3, [sp, #28]
 800751e:	9008      	str	r0, [sp, #32]
 8007520:	9109      	str	r1, [sp, #36]	; 0x24
 8007522:	9804      	ldr	r0, [sp, #16]
 8007524:	9905      	ldr	r1, [sp, #20]
 8007526:	f7fa fb0d 	bl	8001b44 <__aeabi_dsub>
 800752a:	0002      	movs	r2, r0
 800752c:	000b      	movs	r3, r1
 800752e:	0030      	movs	r0, r6
 8007530:	0039      	movs	r1, r7
 8007532:	f7fa fb07 	bl	8001b44 <__aeabi_dsub>
 8007536:	4a68      	ldr	r2, [pc, #416]	; (80076d8 <__ieee754_pow+0x9d0>)
 8007538:	4b68      	ldr	r3, [pc, #416]	; (80076dc <__ieee754_pow+0x9d4>)
 800753a:	f7fa f841 	bl	80015c0 <__aeabi_dmul>
 800753e:	4a68      	ldr	r2, [pc, #416]	; (80076e0 <__ieee754_pow+0x9d8>)
 8007540:	0004      	movs	r4, r0
 8007542:	000d      	movs	r5, r1
 8007544:	9804      	ldr	r0, [sp, #16]
 8007546:	9905      	ldr	r1, [sp, #20]
 8007548:	4b66      	ldr	r3, [pc, #408]	; (80076e4 <__ieee754_pow+0x9dc>)
 800754a:	f7fa f839 	bl	80015c0 <__aeabi_dmul>
 800754e:	0002      	movs	r2, r0
 8007550:	000b      	movs	r3, r1
 8007552:	0020      	movs	r0, r4
 8007554:	0029      	movs	r1, r5
 8007556:	f7f9 f8d9 	bl	800070c <__aeabi_dadd>
 800755a:	0004      	movs	r4, r0
 800755c:	000d      	movs	r5, r1
 800755e:	0002      	movs	r2, r0
 8007560:	000b      	movs	r3, r1
 8007562:	9808      	ldr	r0, [sp, #32]
 8007564:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007566:	f7f9 f8d1 	bl	800070c <__aeabi_dadd>
 800756a:	9a08      	ldr	r2, [sp, #32]
 800756c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800756e:	0006      	movs	r6, r0
 8007570:	000f      	movs	r7, r1
 8007572:	f7fa fae7 	bl	8001b44 <__aeabi_dsub>
 8007576:	0002      	movs	r2, r0
 8007578:	000b      	movs	r3, r1
 800757a:	0020      	movs	r0, r4
 800757c:	0029      	movs	r1, r5
 800757e:	f7fa fae1 	bl	8001b44 <__aeabi_dsub>
 8007582:	0032      	movs	r2, r6
 8007584:	9004      	str	r0, [sp, #16]
 8007586:	9105      	str	r1, [sp, #20]
 8007588:	003b      	movs	r3, r7
 800758a:	0030      	movs	r0, r6
 800758c:	0039      	movs	r1, r7
 800758e:	f7fa f817 	bl	80015c0 <__aeabi_dmul>
 8007592:	0004      	movs	r4, r0
 8007594:	000d      	movs	r5, r1
 8007596:	4a54      	ldr	r2, [pc, #336]	; (80076e8 <__ieee754_pow+0x9e0>)
 8007598:	4b54      	ldr	r3, [pc, #336]	; (80076ec <__ieee754_pow+0x9e4>)
 800759a:	f7fa f811 	bl	80015c0 <__aeabi_dmul>
 800759e:	4a54      	ldr	r2, [pc, #336]	; (80076f0 <__ieee754_pow+0x9e8>)
 80075a0:	4b54      	ldr	r3, [pc, #336]	; (80076f4 <__ieee754_pow+0x9ec>)
 80075a2:	f7fa facf 	bl	8001b44 <__aeabi_dsub>
 80075a6:	0022      	movs	r2, r4
 80075a8:	002b      	movs	r3, r5
 80075aa:	f7fa f809 	bl	80015c0 <__aeabi_dmul>
 80075ae:	4a52      	ldr	r2, [pc, #328]	; (80076f8 <__ieee754_pow+0x9f0>)
 80075b0:	4b52      	ldr	r3, [pc, #328]	; (80076fc <__ieee754_pow+0x9f4>)
 80075b2:	f7f9 f8ab 	bl	800070c <__aeabi_dadd>
 80075b6:	0022      	movs	r2, r4
 80075b8:	002b      	movs	r3, r5
 80075ba:	f7fa f801 	bl	80015c0 <__aeabi_dmul>
 80075be:	4a50      	ldr	r2, [pc, #320]	; (8007700 <__ieee754_pow+0x9f8>)
 80075c0:	4b50      	ldr	r3, [pc, #320]	; (8007704 <__ieee754_pow+0x9fc>)
 80075c2:	f7fa fabf 	bl	8001b44 <__aeabi_dsub>
 80075c6:	0022      	movs	r2, r4
 80075c8:	002b      	movs	r3, r5
 80075ca:	f7f9 fff9 	bl	80015c0 <__aeabi_dmul>
 80075ce:	4a4e      	ldr	r2, [pc, #312]	; (8007708 <__ieee754_pow+0xa00>)
 80075d0:	4b4e      	ldr	r3, [pc, #312]	; (800770c <__ieee754_pow+0xa04>)
 80075d2:	f7f9 f89b 	bl	800070c <__aeabi_dadd>
 80075d6:	0022      	movs	r2, r4
 80075d8:	002b      	movs	r3, r5
 80075da:	f7f9 fff1 	bl	80015c0 <__aeabi_dmul>
 80075de:	0002      	movs	r2, r0
 80075e0:	000b      	movs	r3, r1
 80075e2:	0030      	movs	r0, r6
 80075e4:	0039      	movs	r1, r7
 80075e6:	f7fa faad 	bl	8001b44 <__aeabi_dsub>
 80075ea:	0004      	movs	r4, r0
 80075ec:	000d      	movs	r5, r1
 80075ee:	0002      	movs	r2, r0
 80075f0:	000b      	movs	r3, r1
 80075f2:	0030      	movs	r0, r6
 80075f4:	0039      	movs	r1, r7
 80075f6:	f7f9 ffe3 	bl	80015c0 <__aeabi_dmul>
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	9006      	str	r0, [sp, #24]
 80075fe:	9107      	str	r1, [sp, #28]
 8007600:	2200      	movs	r2, #0
 8007602:	0020      	movs	r0, r4
 8007604:	0029      	movs	r1, r5
 8007606:	05db      	lsls	r3, r3, #23
 8007608:	f7fa fa9c 	bl	8001b44 <__aeabi_dsub>
 800760c:	0002      	movs	r2, r0
 800760e:	000b      	movs	r3, r1
 8007610:	9806      	ldr	r0, [sp, #24]
 8007612:	9907      	ldr	r1, [sp, #28]
 8007614:	f7f9 fbda 	bl	8000dcc <__aeabi_ddiv>
 8007618:	9a04      	ldr	r2, [sp, #16]
 800761a:	9b05      	ldr	r3, [sp, #20]
 800761c:	0004      	movs	r4, r0
 800761e:	000d      	movs	r5, r1
 8007620:	0030      	movs	r0, r6
 8007622:	0039      	movs	r1, r7
 8007624:	f7f9 ffcc 	bl	80015c0 <__aeabi_dmul>
 8007628:	9a04      	ldr	r2, [sp, #16]
 800762a:	9b05      	ldr	r3, [sp, #20]
 800762c:	f7f9 f86e 	bl	800070c <__aeabi_dadd>
 8007630:	0002      	movs	r2, r0
 8007632:	000b      	movs	r3, r1
 8007634:	0020      	movs	r0, r4
 8007636:	0029      	movs	r1, r5
 8007638:	f7fa fa84 	bl	8001b44 <__aeabi_dsub>
 800763c:	0032      	movs	r2, r6
 800763e:	003b      	movs	r3, r7
 8007640:	f7fa fa80 	bl	8001b44 <__aeabi_dsub>
 8007644:	0002      	movs	r2, r0
 8007646:	000b      	movs	r3, r1
 8007648:	2000      	movs	r0, #0
 800764a:	4931      	ldr	r1, [pc, #196]	; (8007710 <__ieee754_pow+0xa08>)
 800764c:	f7fa fa7a 	bl	8001b44 <__aeabi_dsub>
 8007650:	9b02      	ldr	r3, [sp, #8]
 8007652:	051b      	lsls	r3, r3, #20
 8007654:	185b      	adds	r3, r3, r1
 8007656:	151a      	asrs	r2, r3, #20
 8007658:	2a00      	cmp	r2, #0
 800765a:	dc25      	bgt.n	80076a8 <__ieee754_pow+0x9a0>
 800765c:	9a02      	ldr	r2, [sp, #8]
 800765e:	f000 f861 	bl	8007724 <scalbn>
 8007662:	9a00      	ldr	r2, [sp, #0]
 8007664:	9b01      	ldr	r3, [sp, #4]
 8007666:	f7ff fc33 	bl	8006ed0 <__ieee754_pow+0x1c8>
 800766a:	4a2a      	ldr	r2, [pc, #168]	; (8007714 <__ieee754_pow+0xa0c>)
 800766c:	004b      	lsls	r3, r1, #1
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	4293      	cmp	r3, r2
 8007672:	dc00      	bgt.n	8007676 <__ieee754_pow+0x96e>
 8007674:	e717      	b.n	80074a6 <__ieee754_pow+0x79e>
 8007676:	4b28      	ldr	r3, [pc, #160]	; (8007718 <__ieee754_pow+0xa10>)
 8007678:	18cb      	adds	r3, r1, r3
 800767a:	4303      	orrs	r3, r0
 800767c:	d008      	beq.n	8007690 <__ieee754_pow+0x988>
 800767e:	9800      	ldr	r0, [sp, #0]
 8007680:	9901      	ldr	r1, [sp, #4]
 8007682:	2300      	movs	r3, #0
 8007684:	2200      	movs	r2, #0
 8007686:	f7f8 fedb 	bl	8000440 <__aeabi_dcmplt>
 800768a:	1e43      	subs	r3, r0, #1
 800768c:	4198      	sbcs	r0, r3
 800768e:	e462      	b.n	8006f56 <__ieee754_pow+0x24e>
 8007690:	9a04      	ldr	r2, [sp, #16]
 8007692:	9b05      	ldr	r3, [sp, #20]
 8007694:	f7fa fa56 	bl	8001b44 <__aeabi_dsub>
 8007698:	0032      	movs	r2, r6
 800769a:	003b      	movs	r3, r7
 800769c:	f7f8 feee 	bl	800047c <__aeabi_dcmpge>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d100      	bne.n	80076a6 <__ieee754_pow+0x99e>
 80076a4:	e6ff      	b.n	80074a6 <__ieee754_pow+0x79e>
 80076a6:	e7ea      	b.n	800767e <__ieee754_pow+0x976>
 80076a8:	0019      	movs	r1, r3
 80076aa:	e7da      	b.n	8007662 <__ieee754_pow+0x95a>
 80076ac:	2300      	movs	r3, #0
 80076ae:	4c18      	ldr	r4, [pc, #96]	; (8007710 <__ieee754_pow+0xa08>)
 80076b0:	f7ff fbf1 	bl	8006e96 <__ieee754_pow+0x18e>
 80076b4:	2300      	movs	r3, #0
 80076b6:	2400      	movs	r4, #0
 80076b8:	f7ff fbed 	bl	8006e96 <__ieee754_pow+0x18e>
 80076bc:	652b82fe 	.word	0x652b82fe
 80076c0:	3c971547 	.word	0x3c971547
 80076c4:	3fe00000 	.word	0x3fe00000
 80076c8:	fffffc02 	.word	0xfffffc02
 80076cc:	fffffc01 	.word	0xfffffc01
 80076d0:	fff00000 	.word	0xfff00000
 80076d4:	3fe62e43 	.word	0x3fe62e43
 80076d8:	fefa39ef 	.word	0xfefa39ef
 80076dc:	3fe62e42 	.word	0x3fe62e42
 80076e0:	0ca86c39 	.word	0x0ca86c39
 80076e4:	be205c61 	.word	0xbe205c61
 80076e8:	72bea4d0 	.word	0x72bea4d0
 80076ec:	3e663769 	.word	0x3e663769
 80076f0:	c5d26bf1 	.word	0xc5d26bf1
 80076f4:	3ebbbd41 	.word	0x3ebbbd41
 80076f8:	af25de2c 	.word	0xaf25de2c
 80076fc:	3f11566a 	.word	0x3f11566a
 8007700:	16bebd93 	.word	0x16bebd93
 8007704:	3f66c16c 	.word	0x3f66c16c
 8007708:	5555553e 	.word	0x5555553e
 800770c:	3fc55555 	.word	0x3fc55555
 8007710:	3ff00000 	.word	0x3ff00000
 8007714:	4090cbff 	.word	0x4090cbff
 8007718:	3f6f3400 	.word	0x3f6f3400

0800771c <fabs>:
 800771c:	0049      	lsls	r1, r1, #1
 800771e:	084b      	lsrs	r3, r1, #1
 8007720:	0019      	movs	r1, r3
 8007722:	4770      	bx	lr

08007724 <scalbn>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	0014      	movs	r4, r2
 8007728:	004a      	lsls	r2, r1, #1
 800772a:	000b      	movs	r3, r1
 800772c:	0d52      	lsrs	r2, r2, #21
 800772e:	d10f      	bne.n	8007750 <scalbn+0x2c>
 8007730:	004b      	lsls	r3, r1, #1
 8007732:	085b      	lsrs	r3, r3, #1
 8007734:	4303      	orrs	r3, r0
 8007736:	d011      	beq.n	800775c <scalbn+0x38>
 8007738:	4b22      	ldr	r3, [pc, #136]	; (80077c4 <scalbn+0xa0>)
 800773a:	2200      	movs	r2, #0
 800773c:	f7f9 ff40 	bl	80015c0 <__aeabi_dmul>
 8007740:	4b21      	ldr	r3, [pc, #132]	; (80077c8 <scalbn+0xa4>)
 8007742:	429c      	cmp	r4, r3
 8007744:	da0b      	bge.n	800775e <scalbn+0x3a>
 8007746:	4a21      	ldr	r2, [pc, #132]	; (80077cc <scalbn+0xa8>)
 8007748:	4b21      	ldr	r3, [pc, #132]	; (80077d0 <scalbn+0xac>)
 800774a:	f7f9 ff39 	bl	80015c0 <__aeabi_dmul>
 800774e:	e005      	b.n	800775c <scalbn+0x38>
 8007750:	4d20      	ldr	r5, [pc, #128]	; (80077d4 <scalbn+0xb0>)
 8007752:	42aa      	cmp	r2, r5
 8007754:	d107      	bne.n	8007766 <scalbn+0x42>
 8007756:	0002      	movs	r2, r0
 8007758:	f7f8 ffd8 	bl	800070c <__aeabi_dadd>
 800775c:	bd70      	pop	{r4, r5, r6, pc}
 800775e:	000b      	movs	r3, r1
 8007760:	004a      	lsls	r2, r1, #1
 8007762:	0d52      	lsrs	r2, r2, #21
 8007764:	3a36      	subs	r2, #54	; 0x36
 8007766:	4d1c      	ldr	r5, [pc, #112]	; (80077d8 <scalbn+0xb4>)
 8007768:	42ac      	cmp	r4, r5
 800776a:	dd0a      	ble.n	8007782 <scalbn+0x5e>
 800776c:	4c1b      	ldr	r4, [pc, #108]	; (80077dc <scalbn+0xb8>)
 800776e:	4d1c      	ldr	r5, [pc, #112]	; (80077e0 <scalbn+0xbc>)
 8007770:	2900      	cmp	r1, #0
 8007772:	da01      	bge.n	8007778 <scalbn+0x54>
 8007774:	4c19      	ldr	r4, [pc, #100]	; (80077dc <scalbn+0xb8>)
 8007776:	4d1b      	ldr	r5, [pc, #108]	; (80077e4 <scalbn+0xc0>)
 8007778:	4a18      	ldr	r2, [pc, #96]	; (80077dc <scalbn+0xb8>)
 800777a:	4b19      	ldr	r3, [pc, #100]	; (80077e0 <scalbn+0xbc>)
 800777c:	0020      	movs	r0, r4
 800777e:	0029      	movs	r1, r5
 8007780:	e7e3      	b.n	800774a <scalbn+0x26>
 8007782:	18a2      	adds	r2, r4, r2
 8007784:	4c18      	ldr	r4, [pc, #96]	; (80077e8 <scalbn+0xc4>)
 8007786:	42a2      	cmp	r2, r4
 8007788:	dcf0      	bgt.n	800776c <scalbn+0x48>
 800778a:	2a00      	cmp	r2, #0
 800778c:	dd05      	ble.n	800779a <scalbn+0x76>
 800778e:	4c17      	ldr	r4, [pc, #92]	; (80077ec <scalbn+0xc8>)
 8007790:	0512      	lsls	r2, r2, #20
 8007792:	4023      	ands	r3, r4
 8007794:	4313      	orrs	r3, r2
 8007796:	0019      	movs	r1, r3
 8007798:	e7e0      	b.n	800775c <scalbn+0x38>
 800779a:	0014      	movs	r4, r2
 800779c:	3435      	adds	r4, #53	; 0x35
 800779e:	da08      	bge.n	80077b2 <scalbn+0x8e>
 80077a0:	4c0a      	ldr	r4, [pc, #40]	; (80077cc <scalbn+0xa8>)
 80077a2:	4d0b      	ldr	r5, [pc, #44]	; (80077d0 <scalbn+0xac>)
 80077a4:	2900      	cmp	r1, #0
 80077a6:	da01      	bge.n	80077ac <scalbn+0x88>
 80077a8:	4c08      	ldr	r4, [pc, #32]	; (80077cc <scalbn+0xa8>)
 80077aa:	4d11      	ldr	r5, [pc, #68]	; (80077f0 <scalbn+0xcc>)
 80077ac:	4a07      	ldr	r2, [pc, #28]	; (80077cc <scalbn+0xa8>)
 80077ae:	4b08      	ldr	r3, [pc, #32]	; (80077d0 <scalbn+0xac>)
 80077b0:	e7e4      	b.n	800777c <scalbn+0x58>
 80077b2:	4c0e      	ldr	r4, [pc, #56]	; (80077ec <scalbn+0xc8>)
 80077b4:	3236      	adds	r2, #54	; 0x36
 80077b6:	4023      	ands	r3, r4
 80077b8:	0512      	lsls	r2, r2, #20
 80077ba:	431a      	orrs	r2, r3
 80077bc:	0011      	movs	r1, r2
 80077be:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <scalbn+0xd0>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	e7c2      	b.n	800774a <scalbn+0x26>
 80077c4:	43500000 	.word	0x43500000
 80077c8:	ffff3cb0 	.word	0xffff3cb0
 80077cc:	c2f8f359 	.word	0xc2f8f359
 80077d0:	01a56e1f 	.word	0x01a56e1f
 80077d4:	000007ff 	.word	0x000007ff
 80077d8:	0000c350 	.word	0x0000c350
 80077dc:	8800759c 	.word	0x8800759c
 80077e0:	7e37e43c 	.word	0x7e37e43c
 80077e4:	fe37e43c 	.word	0xfe37e43c
 80077e8:	000007fe 	.word	0x000007fe
 80077ec:	800fffff 	.word	0x800fffff
 80077f0:	81a56e1f 	.word	0x81a56e1f
 80077f4:	3c900000 	.word	0x3c900000

080077f8 <with_errno>:
 80077f8:	b570      	push	{r4, r5, r6, lr}
 80077fa:	000d      	movs	r5, r1
 80077fc:	0016      	movs	r6, r2
 80077fe:	0004      	movs	r4, r0
 8007800:	f7fe f8dc 	bl	80059bc <__errno>
 8007804:	0029      	movs	r1, r5
 8007806:	6006      	str	r6, [r0, #0]
 8007808:	0020      	movs	r0, r4
 800780a:	bd70      	pop	{r4, r5, r6, pc}

0800780c <xflow>:
 800780c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800780e:	0015      	movs	r5, r2
 8007810:	001c      	movs	r4, r3
 8007812:	2800      	cmp	r0, #0
 8007814:	d010      	beq.n	8007838 <xflow+0x2c>
 8007816:	2380      	movs	r3, #128	; 0x80
 8007818:	0010      	movs	r0, r2
 800781a:	061b      	lsls	r3, r3, #24
 800781c:	18e1      	adds	r1, r4, r3
 800781e:	9000      	str	r0, [sp, #0]
 8007820:	9101      	str	r1, [sp, #4]
 8007822:	9a00      	ldr	r2, [sp, #0]
 8007824:	9b01      	ldr	r3, [sp, #4]
 8007826:	0028      	movs	r0, r5
 8007828:	0021      	movs	r1, r4
 800782a:	f7f9 fec9 	bl	80015c0 <__aeabi_dmul>
 800782e:	2222      	movs	r2, #34	; 0x22
 8007830:	f7ff ffe2 	bl	80077f8 <with_errno>
 8007834:	b003      	add	sp, #12
 8007836:	bd30      	pop	{r4, r5, pc}
 8007838:	0010      	movs	r0, r2
 800783a:	0019      	movs	r1, r3
 800783c:	e7ef      	b.n	800781e <xflow+0x12>

0800783e <__math_uflow>:
 800783e:	2380      	movs	r3, #128	; 0x80
 8007840:	b510      	push	{r4, lr}
 8007842:	2200      	movs	r2, #0
 8007844:	055b      	lsls	r3, r3, #21
 8007846:	f7ff ffe1 	bl	800780c <xflow>
 800784a:	bd10      	pop	{r4, pc}

0800784c <__math_oflow>:
 800784c:	23e0      	movs	r3, #224	; 0xe0
 800784e:	b510      	push	{r4, lr}
 8007850:	2200      	movs	r2, #0
 8007852:	05db      	lsls	r3, r3, #23
 8007854:	f7ff ffda 	bl	800780c <xflow>
 8007858:	bd10      	pop	{r4, pc}
	...

0800785c <__ieee754_sqrt>:
 800785c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785e:	000a      	movs	r2, r1
 8007860:	000c      	movs	r4, r1
 8007862:	496f      	ldr	r1, [pc, #444]	; (8007a20 <__ieee754_sqrt+0x1c4>)
 8007864:	0005      	movs	r5, r0
 8007866:	0003      	movs	r3, r0
 8007868:	0008      	movs	r0, r1
 800786a:	b087      	sub	sp, #28
 800786c:	4020      	ands	r0, r4
 800786e:	4288      	cmp	r0, r1
 8007870:	d111      	bne.n	8007896 <__ieee754_sqrt+0x3a>
 8007872:	002a      	movs	r2, r5
 8007874:	0023      	movs	r3, r4
 8007876:	0028      	movs	r0, r5
 8007878:	0021      	movs	r1, r4
 800787a:	f7f9 fea1 	bl	80015c0 <__aeabi_dmul>
 800787e:	0002      	movs	r2, r0
 8007880:	000b      	movs	r3, r1
 8007882:	0028      	movs	r0, r5
 8007884:	0021      	movs	r1, r4
 8007886:	f7f8 ff41 	bl	800070c <__aeabi_dadd>
 800788a:	0005      	movs	r5, r0
 800788c:	000c      	movs	r4, r1
 800788e:	0028      	movs	r0, r5
 8007890:	0021      	movs	r1, r4
 8007892:	b007      	add	sp, #28
 8007894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007896:	2c00      	cmp	r4, #0
 8007898:	dc12      	bgt.n	80078c0 <__ieee754_sqrt+0x64>
 800789a:	0061      	lsls	r1, r4, #1
 800789c:	0849      	lsrs	r1, r1, #1
 800789e:	4329      	orrs	r1, r5
 80078a0:	d0f5      	beq.n	800788e <__ieee754_sqrt+0x32>
 80078a2:	2100      	movs	r1, #0
 80078a4:	428c      	cmp	r4, r1
 80078a6:	d100      	bne.n	80078aa <__ieee754_sqrt+0x4e>
 80078a8:	e09f      	b.n	80079ea <__ieee754_sqrt+0x18e>
 80078aa:	002a      	movs	r2, r5
 80078ac:	0023      	movs	r3, r4
 80078ae:	0028      	movs	r0, r5
 80078b0:	0021      	movs	r1, r4
 80078b2:	f7fa f947 	bl	8001b44 <__aeabi_dsub>
 80078b6:	0002      	movs	r2, r0
 80078b8:	000b      	movs	r3, r1
 80078ba:	f7f9 fa87 	bl	8000dcc <__aeabi_ddiv>
 80078be:	e7e4      	b.n	800788a <__ieee754_sqrt+0x2e>
 80078c0:	1521      	asrs	r1, r4, #20
 80078c2:	d100      	bne.n	80078c6 <__ieee754_sqrt+0x6a>
 80078c4:	e091      	b.n	80079ea <__ieee754_sqrt+0x18e>
 80078c6:	4857      	ldr	r0, [pc, #348]	; (8007a24 <__ieee754_sqrt+0x1c8>)
 80078c8:	0312      	lsls	r2, r2, #12
 80078ca:	180c      	adds	r4, r1, r0
 80078cc:	2080      	movs	r0, #128	; 0x80
 80078ce:	0b12      	lsrs	r2, r2, #12
 80078d0:	0340      	lsls	r0, r0, #13
 80078d2:	4310      	orrs	r0, r2
 80078d4:	07c9      	lsls	r1, r1, #31
 80078d6:	d403      	bmi.n	80078e0 <__ieee754_sqrt+0x84>
 80078d8:	0fda      	lsrs	r2, r3, #31
 80078da:	0040      	lsls	r0, r0, #1
 80078dc:	1810      	adds	r0, r2, r0
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	2500      	movs	r5, #0
 80078e2:	1062      	asrs	r2, r4, #1
 80078e4:	0040      	lsls	r0, r0, #1
 80078e6:	2480      	movs	r4, #128	; 0x80
 80078e8:	9205      	str	r2, [sp, #20]
 80078ea:	0fda      	lsrs	r2, r3, #31
 80078ec:	1812      	adds	r2, r2, r0
 80078ee:	0029      	movs	r1, r5
 80078f0:	2016      	movs	r0, #22
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	03a4      	lsls	r4, r4, #14
 80078f6:	190e      	adds	r6, r1, r4
 80078f8:	4296      	cmp	r6, r2
 80078fa:	dc02      	bgt.n	8007902 <__ieee754_sqrt+0xa6>
 80078fc:	1931      	adds	r1, r6, r4
 80078fe:	1b92      	subs	r2, r2, r6
 8007900:	192d      	adds	r5, r5, r4
 8007902:	0fde      	lsrs	r6, r3, #31
 8007904:	0052      	lsls	r2, r2, #1
 8007906:	3801      	subs	r0, #1
 8007908:	18b2      	adds	r2, r6, r2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	0864      	lsrs	r4, r4, #1
 800790e:	2800      	cmp	r0, #0
 8007910:	d1f1      	bne.n	80078f6 <__ieee754_sqrt+0x9a>
 8007912:	2620      	movs	r6, #32
 8007914:	2780      	movs	r7, #128	; 0x80
 8007916:	0004      	movs	r4, r0
 8007918:	9604      	str	r6, [sp, #16]
 800791a:	063f      	lsls	r7, r7, #24
 800791c:	183e      	adds	r6, r7, r0
 800791e:	46b4      	mov	ip, r6
 8007920:	428a      	cmp	r2, r1
 8007922:	dc02      	bgt.n	800792a <__ieee754_sqrt+0xce>
 8007924:	d114      	bne.n	8007950 <__ieee754_sqrt+0xf4>
 8007926:	429e      	cmp	r6, r3
 8007928:	d812      	bhi.n	8007950 <__ieee754_sqrt+0xf4>
 800792a:	4660      	mov	r0, ip
 800792c:	4666      	mov	r6, ip
 800792e:	19c0      	adds	r0, r0, r7
 8007930:	9100      	str	r1, [sp, #0]
 8007932:	2e00      	cmp	r6, #0
 8007934:	da03      	bge.n	800793e <__ieee754_sqrt+0xe2>
 8007936:	43c6      	mvns	r6, r0
 8007938:	0ff6      	lsrs	r6, r6, #31
 800793a:	198e      	adds	r6, r1, r6
 800793c:	9600      	str	r6, [sp, #0]
 800793e:	1a52      	subs	r2, r2, r1
 8007940:	4563      	cmp	r3, ip
 8007942:	4189      	sbcs	r1, r1
 8007944:	4249      	negs	r1, r1
 8007946:	1a52      	subs	r2, r2, r1
 8007948:	4661      	mov	r1, ip
 800794a:	1a5b      	subs	r3, r3, r1
 800794c:	9900      	ldr	r1, [sp, #0]
 800794e:	19e4      	adds	r4, r4, r7
 8007950:	0fde      	lsrs	r6, r3, #31
 8007952:	0052      	lsls	r2, r2, #1
 8007954:	18b2      	adds	r2, r6, r2
 8007956:	9e04      	ldr	r6, [sp, #16]
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	3e01      	subs	r6, #1
 800795c:	087f      	lsrs	r7, r7, #1
 800795e:	9604      	str	r6, [sp, #16]
 8007960:	2e00      	cmp	r6, #0
 8007962:	d1db      	bne.n	800791c <__ieee754_sqrt+0xc0>
 8007964:	431a      	orrs	r2, r3
 8007966:	d01f      	beq.n	80079a8 <__ieee754_sqrt+0x14c>
 8007968:	4e2f      	ldr	r6, [pc, #188]	; (8007a28 <__ieee754_sqrt+0x1cc>)
 800796a:	4f30      	ldr	r7, [pc, #192]	; (8007a2c <__ieee754_sqrt+0x1d0>)
 800796c:	6830      	ldr	r0, [r6, #0]
 800796e:	6871      	ldr	r1, [r6, #4]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	9200      	str	r2, [sp, #0]
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	6832      	ldr	r2, [r6, #0]
 800797a:	6873      	ldr	r3, [r6, #4]
 800797c:	9202      	str	r2, [sp, #8]
 800797e:	9303      	str	r3, [sp, #12]
 8007980:	9a00      	ldr	r2, [sp, #0]
 8007982:	9b01      	ldr	r3, [sp, #4]
 8007984:	f7fa f8de 	bl	8001b44 <__aeabi_dsub>
 8007988:	0002      	movs	r2, r0
 800798a:	000b      	movs	r3, r1
 800798c:	9802      	ldr	r0, [sp, #8]
 800798e:	9903      	ldr	r1, [sp, #12]
 8007990:	f7f8 fd60 	bl	8000454 <__aeabi_dcmple>
 8007994:	2800      	cmp	r0, #0
 8007996:	d007      	beq.n	80079a8 <__ieee754_sqrt+0x14c>
 8007998:	6830      	ldr	r0, [r6, #0]
 800799a:	6871      	ldr	r1, [r6, #4]
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	1c67      	adds	r7, r4, #1
 80079a2:	d127      	bne.n	80079f4 <__ieee754_sqrt+0x198>
 80079a4:	9c04      	ldr	r4, [sp, #16]
 80079a6:	3501      	adds	r5, #1
 80079a8:	4b21      	ldr	r3, [pc, #132]	; (8007a30 <__ieee754_sqrt+0x1d4>)
 80079aa:	1069      	asrs	r1, r5, #1
 80079ac:	18c9      	adds	r1, r1, r3
 80079ae:	0864      	lsrs	r4, r4, #1
 80079b0:	07ed      	lsls	r5, r5, #31
 80079b2:	d502      	bpl.n	80079ba <__ieee754_sqrt+0x15e>
 80079b4:	2380      	movs	r3, #128	; 0x80
 80079b6:	061b      	lsls	r3, r3, #24
 80079b8:	431c      	orrs	r4, r3
 80079ba:	9b05      	ldr	r3, [sp, #20]
 80079bc:	0025      	movs	r5, r4
 80079be:	0518      	lsls	r0, r3, #20
 80079c0:	1843      	adds	r3, r0, r1
 80079c2:	001c      	movs	r4, r3
 80079c4:	e763      	b.n	800788e <__ieee754_sqrt+0x32>
 80079c6:	0ada      	lsrs	r2, r3, #11
 80079c8:	3815      	subs	r0, #21
 80079ca:	055b      	lsls	r3, r3, #21
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	d0fa      	beq.n	80079c6 <__ieee754_sqrt+0x16a>
 80079d0:	2480      	movs	r4, #128	; 0x80
 80079d2:	0364      	lsls	r4, r4, #13
 80079d4:	4222      	tst	r2, r4
 80079d6:	d00a      	beq.n	80079ee <__ieee754_sqrt+0x192>
 80079d8:	2420      	movs	r4, #32
 80079da:	001e      	movs	r6, r3
 80079dc:	1a64      	subs	r4, r4, r1
 80079de:	40e6      	lsrs	r6, r4
 80079e0:	1e4d      	subs	r5, r1, #1
 80079e2:	408b      	lsls	r3, r1
 80079e4:	4332      	orrs	r2, r6
 80079e6:	1b41      	subs	r1, r0, r5
 80079e8:	e76d      	b.n	80078c6 <__ieee754_sqrt+0x6a>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e7ee      	b.n	80079cc <__ieee754_sqrt+0x170>
 80079ee:	0052      	lsls	r2, r2, #1
 80079f0:	3101      	adds	r1, #1
 80079f2:	e7ef      	b.n	80079d4 <__ieee754_sqrt+0x178>
 80079f4:	f7f8 fe8a 	bl	800070c <__aeabi_dadd>
 80079f8:	6877      	ldr	r7, [r6, #4]
 80079fa:	6836      	ldr	r6, [r6, #0]
 80079fc:	0002      	movs	r2, r0
 80079fe:	000b      	movs	r3, r1
 8007a00:	0030      	movs	r0, r6
 8007a02:	0039      	movs	r1, r7
 8007a04:	f7f8 fd1c 	bl	8000440 <__aeabi_dcmplt>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d004      	beq.n	8007a16 <__ieee754_sqrt+0x1ba>
 8007a0c:	3402      	adds	r4, #2
 8007a0e:	4263      	negs	r3, r4
 8007a10:	4163      	adcs	r3, r4
 8007a12:	18ed      	adds	r5, r5, r3
 8007a14:	e7c8      	b.n	80079a8 <__ieee754_sqrt+0x14c>
 8007a16:	2301      	movs	r3, #1
 8007a18:	3401      	adds	r4, #1
 8007a1a:	439c      	bics	r4, r3
 8007a1c:	e7c4      	b.n	80079a8 <__ieee754_sqrt+0x14c>
 8007a1e:	46c0      	nop			; (mov r8, r8)
 8007a20:	7ff00000 	.word	0x7ff00000
 8007a24:	fffffc01 	.word	0xfffffc01
 8007a28:	200000a0 	.word	0x200000a0
 8007a2c:	200000a8 	.word	0x200000a8
 8007a30:	3fe00000 	.word	0x3fe00000

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
