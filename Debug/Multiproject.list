
Multiproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c70  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08007d30  08007d30  00017d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fb0  08007fb0  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08007fb0  08007fb0  00017fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fb8  08007fb8  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fb8  08007fb8  00017fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fbc  08007fbc  00017fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08007fc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200000b0  08008070  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08008070  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af87  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a5f  00000000  00000000  0002b0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b8  00000000  00000000  0002cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005f1  00000000  00000000  0002d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b7b5  00000000  00000000  0002d8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b729  00000000  00000000  00049066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0eb3  00000000  00000000  0005478f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000273c  00000000  00000000  00105644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00107d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200000b0 	.word	0x200000b0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007d14 	.word	0x08007d14

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000b4 	.word	0x200000b4
 8000100:	08007d14 	.word	0x08007d14

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0010      	movs	r0, r2
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	0019      	movs	r1, r3
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 f815 	bl	8001454 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff65 	bl	8001304 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f807 	bl	8001454 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fffd 	bl	8001454 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ff8d 	bl	8001388 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff83 	bl	8001388 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_uldivmod>:
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000494:	2a00      	cmp	r2, #0
 8000496:	d10f      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000498:	2900      	cmp	r1, #0
 800049a:	d100      	bne.n	800049e <__aeabi_uldivmod+0xe>
 800049c:	2800      	cmp	r0, #0
 800049e:	d002      	beq.n	80004a6 <__aeabi_uldivmod+0x16>
 80004a0:	2100      	movs	r1, #0
 80004a2:	43c9      	mvns	r1, r1
 80004a4:	0008      	movs	r0, r1
 80004a6:	b407      	push	{r0, r1, r2}
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <__aeabi_uldivmod+0x24>)
 80004aa:	a102      	add	r1, pc, #8	; (adr r1, 80004b4 <__aeabi_uldivmod+0x24>)
 80004ac:	1840      	adds	r0, r0, r1
 80004ae:	9002      	str	r0, [sp, #8]
 80004b0:	bd03      	pop	{r0, r1, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	ffffff5d 	.word	0xffffff5d
 80004b8:	b403      	push	{r0, r1}
 80004ba:	4668      	mov	r0, sp
 80004bc:	b501      	push	{r0, lr}
 80004be:	9802      	ldr	r0, [sp, #8]
 80004c0:	f000 f806 	bl	80004d0 <__udivmoddi4>
 80004c4:	9b01      	ldr	r3, [sp, #4]
 80004c6:	469e      	mov	lr, r3
 80004c8:	b002      	add	sp, #8
 80004ca:	bc0c      	pop	{r2, r3}
 80004cc:	4770      	bx	lr
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__udivmoddi4>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	4657      	mov	r7, sl
 80004d4:	464e      	mov	r6, r9
 80004d6:	4645      	mov	r5, r8
 80004d8:	46de      	mov	lr, fp
 80004da:	b5e0      	push	{r5, r6, r7, lr}
 80004dc:	0004      	movs	r4, r0
 80004de:	000d      	movs	r5, r1
 80004e0:	4692      	mov	sl, r2
 80004e2:	4699      	mov	r9, r3
 80004e4:	b083      	sub	sp, #12
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d830      	bhi.n	800054c <__udivmoddi4+0x7c>
 80004ea:	d02d      	beq.n	8000548 <__udivmoddi4+0x78>
 80004ec:	4649      	mov	r1, r9
 80004ee:	4650      	mov	r0, sl
 80004f0:	f001 ff20 	bl	8002334 <__clzdi2>
 80004f4:	0029      	movs	r1, r5
 80004f6:	0006      	movs	r6, r0
 80004f8:	0020      	movs	r0, r4
 80004fa:	f001 ff1b 	bl	8002334 <__clzdi2>
 80004fe:	1a33      	subs	r3, r6, r0
 8000500:	4698      	mov	r8, r3
 8000502:	3b20      	subs	r3, #32
 8000504:	d434      	bmi.n	8000570 <__udivmoddi4+0xa0>
 8000506:	469b      	mov	fp, r3
 8000508:	4653      	mov	r3, sl
 800050a:	465a      	mov	r2, fp
 800050c:	4093      	lsls	r3, r2
 800050e:	4642      	mov	r2, r8
 8000510:	001f      	movs	r7, r3
 8000512:	4653      	mov	r3, sl
 8000514:	4093      	lsls	r3, r2
 8000516:	001e      	movs	r6, r3
 8000518:	42af      	cmp	r7, r5
 800051a:	d83b      	bhi.n	8000594 <__udivmoddi4+0xc4>
 800051c:	42af      	cmp	r7, r5
 800051e:	d100      	bne.n	8000522 <__udivmoddi4+0x52>
 8000520:	e079      	b.n	8000616 <__udivmoddi4+0x146>
 8000522:	465b      	mov	r3, fp
 8000524:	1ba4      	subs	r4, r4, r6
 8000526:	41bd      	sbcs	r5, r7
 8000528:	2b00      	cmp	r3, #0
 800052a:	da00      	bge.n	800052e <__udivmoddi4+0x5e>
 800052c:	e076      	b.n	800061c <__udivmoddi4+0x14c>
 800052e:	2200      	movs	r2, #0
 8000530:	2300      	movs	r3, #0
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	9301      	str	r3, [sp, #4]
 8000536:	2301      	movs	r3, #1
 8000538:	465a      	mov	r2, fp
 800053a:	4093      	lsls	r3, r2
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2301      	movs	r3, #1
 8000540:	4642      	mov	r2, r8
 8000542:	4093      	lsls	r3, r2
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	e029      	b.n	800059c <__udivmoddi4+0xcc>
 8000548:	4282      	cmp	r2, r0
 800054a:	d9cf      	bls.n	80004ec <__udivmoddi4+0x1c>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <__udivmoddi4+0x8e>
 800055a:	601c      	str	r4, [r3, #0]
 800055c:	605d      	str	r5, [r3, #4]
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	b003      	add	sp, #12
 8000564:	bcf0      	pop	{r4, r5, r6, r7}
 8000566:	46bb      	mov	fp, r7
 8000568:	46b2      	mov	sl, r6
 800056a:	46a9      	mov	r9, r5
 800056c:	46a0      	mov	r8, r4
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000570:	4642      	mov	r2, r8
 8000572:	469b      	mov	fp, r3
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	4652      	mov	r2, sl
 800057a:	40da      	lsrs	r2, r3
 800057c:	4641      	mov	r1, r8
 800057e:	0013      	movs	r3, r2
 8000580:	464a      	mov	r2, r9
 8000582:	408a      	lsls	r2, r1
 8000584:	0017      	movs	r7, r2
 8000586:	4642      	mov	r2, r8
 8000588:	431f      	orrs	r7, r3
 800058a:	4653      	mov	r3, sl
 800058c:	4093      	lsls	r3, r2
 800058e:	001e      	movs	r6, r3
 8000590:	42af      	cmp	r7, r5
 8000592:	d9c3      	bls.n	800051c <__udivmoddi4+0x4c>
 8000594:	2200      	movs	r2, #0
 8000596:	2300      	movs	r3, #0
 8000598:	9200      	str	r2, [sp, #0]
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	4643      	mov	r3, r8
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d0d8      	beq.n	8000554 <__udivmoddi4+0x84>
 80005a2:	07fb      	lsls	r3, r7, #31
 80005a4:	0872      	lsrs	r2, r6, #1
 80005a6:	431a      	orrs	r2, r3
 80005a8:	4646      	mov	r6, r8
 80005aa:	087b      	lsrs	r3, r7, #1
 80005ac:	e00e      	b.n	80005cc <__udivmoddi4+0xfc>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d101      	bne.n	80005b6 <__udivmoddi4+0xe6>
 80005b2:	42a2      	cmp	r2, r4
 80005b4:	d80c      	bhi.n	80005d0 <__udivmoddi4+0x100>
 80005b6:	1aa4      	subs	r4, r4, r2
 80005b8:	419d      	sbcs	r5, r3
 80005ba:	2001      	movs	r0, #1
 80005bc:	1924      	adds	r4, r4, r4
 80005be:	416d      	adcs	r5, r5
 80005c0:	2100      	movs	r1, #0
 80005c2:	3e01      	subs	r6, #1
 80005c4:	1824      	adds	r4, r4, r0
 80005c6:	414d      	adcs	r5, r1
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d006      	beq.n	80005da <__udivmoddi4+0x10a>
 80005cc:	42ab      	cmp	r3, r5
 80005ce:	d9ee      	bls.n	80005ae <__udivmoddi4+0xde>
 80005d0:	3e01      	subs	r6, #1
 80005d2:	1924      	adds	r4, r4, r4
 80005d4:	416d      	adcs	r5, r5
 80005d6:	2e00      	cmp	r6, #0
 80005d8:	d1f8      	bne.n	80005cc <__udivmoddi4+0xfc>
 80005da:	9800      	ldr	r0, [sp, #0]
 80005dc:	9901      	ldr	r1, [sp, #4]
 80005de:	465b      	mov	r3, fp
 80005e0:	1900      	adds	r0, r0, r4
 80005e2:	4169      	adcs	r1, r5
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	db24      	blt.n	8000632 <__udivmoddi4+0x162>
 80005e8:	002b      	movs	r3, r5
 80005ea:	465a      	mov	r2, fp
 80005ec:	4644      	mov	r4, r8
 80005ee:	40d3      	lsrs	r3, r2
 80005f0:	002a      	movs	r2, r5
 80005f2:	40e2      	lsrs	r2, r4
 80005f4:	001c      	movs	r4, r3
 80005f6:	465b      	mov	r3, fp
 80005f8:	0015      	movs	r5, r2
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	db2a      	blt.n	8000654 <__udivmoddi4+0x184>
 80005fe:	0026      	movs	r6, r4
 8000600:	409e      	lsls	r6, r3
 8000602:	0033      	movs	r3, r6
 8000604:	0026      	movs	r6, r4
 8000606:	4647      	mov	r7, r8
 8000608:	40be      	lsls	r6, r7
 800060a:	0032      	movs	r2, r6
 800060c:	1a80      	subs	r0, r0, r2
 800060e:	4199      	sbcs	r1, r3
 8000610:	9000      	str	r0, [sp, #0]
 8000612:	9101      	str	r1, [sp, #4]
 8000614:	e79e      	b.n	8000554 <__udivmoddi4+0x84>
 8000616:	42a3      	cmp	r3, r4
 8000618:	d8bc      	bhi.n	8000594 <__udivmoddi4+0xc4>
 800061a:	e782      	b.n	8000522 <__udivmoddi4+0x52>
 800061c:	4642      	mov	r2, r8
 800061e:	2320      	movs	r3, #32
 8000620:	2100      	movs	r1, #0
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	2200      	movs	r2, #0
 8000626:	9100      	str	r1, [sp, #0]
 8000628:	9201      	str	r2, [sp, #4]
 800062a:	2201      	movs	r2, #1
 800062c:	40da      	lsrs	r2, r3
 800062e:	9201      	str	r2, [sp, #4]
 8000630:	e785      	b.n	800053e <__udivmoddi4+0x6e>
 8000632:	4642      	mov	r2, r8
 8000634:	2320      	movs	r3, #32
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	002a      	movs	r2, r5
 800063a:	4646      	mov	r6, r8
 800063c:	409a      	lsls	r2, r3
 800063e:	0023      	movs	r3, r4
 8000640:	40f3      	lsrs	r3, r6
 8000642:	4644      	mov	r4, r8
 8000644:	4313      	orrs	r3, r2
 8000646:	002a      	movs	r2, r5
 8000648:	40e2      	lsrs	r2, r4
 800064a:	001c      	movs	r4, r3
 800064c:	465b      	mov	r3, fp
 800064e:	0015      	movs	r5, r2
 8000650:	2b00      	cmp	r3, #0
 8000652:	dad4      	bge.n	80005fe <__udivmoddi4+0x12e>
 8000654:	4642      	mov	r2, r8
 8000656:	002f      	movs	r7, r5
 8000658:	2320      	movs	r3, #32
 800065a:	0026      	movs	r6, r4
 800065c:	4097      	lsls	r7, r2
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	40de      	lsrs	r6, r3
 8000662:	003b      	movs	r3, r7
 8000664:	4333      	orrs	r3, r6
 8000666:	e7cd      	b.n	8000604 <__udivmoddi4+0x134>

08000668 <__aeabi_dadd>:
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	464f      	mov	r7, r9
 800066c:	4646      	mov	r6, r8
 800066e:	46d6      	mov	lr, sl
 8000670:	0004      	movs	r4, r0
 8000672:	b5c0      	push	{r6, r7, lr}
 8000674:	001f      	movs	r7, r3
 8000676:	030b      	lsls	r3, r1, #12
 8000678:	0010      	movs	r0, r2
 800067a:	004e      	lsls	r6, r1, #1
 800067c:	0a5b      	lsrs	r3, r3, #9
 800067e:	0fcd      	lsrs	r5, r1, #31
 8000680:	0f61      	lsrs	r1, r4, #29
 8000682:	007a      	lsls	r2, r7, #1
 8000684:	4319      	orrs	r1, r3
 8000686:	00e3      	lsls	r3, r4, #3
 8000688:	033c      	lsls	r4, r7, #12
 800068a:	0fff      	lsrs	r7, r7, #31
 800068c:	46bc      	mov	ip, r7
 800068e:	0a64      	lsrs	r4, r4, #9
 8000690:	0f47      	lsrs	r7, r0, #29
 8000692:	4327      	orrs	r7, r4
 8000694:	0d76      	lsrs	r6, r6, #21
 8000696:	0d52      	lsrs	r2, r2, #21
 8000698:	00c0      	lsls	r0, r0, #3
 800069a:	46b9      	mov	r9, r7
 800069c:	4680      	mov	r8, r0
 800069e:	1ab7      	subs	r7, r6, r2
 80006a0:	4565      	cmp	r5, ip
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x3e>
 80006a4:	e09b      	b.n	80007de <__aeabi_dadd+0x176>
 80006a6:	2f00      	cmp	r7, #0
 80006a8:	dc00      	bgt.n	80006ac <__aeabi_dadd+0x44>
 80006aa:	e084      	b.n	80007b6 <__aeabi_dadd+0x14e>
 80006ac:	2a00      	cmp	r2, #0
 80006ae:	d100      	bne.n	80006b2 <__aeabi_dadd+0x4a>
 80006b0:	e0be      	b.n	8000830 <__aeabi_dadd+0x1c8>
 80006b2:	4ac8      	ldr	r2, [pc, #800]	; (80009d4 <__aeabi_dadd+0x36c>)
 80006b4:	4296      	cmp	r6, r2
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x52>
 80006b8:	e124      	b.n	8000904 <__aeabi_dadd+0x29c>
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	464c      	mov	r4, r9
 80006be:	0412      	lsls	r2, r2, #16
 80006c0:	4314      	orrs	r4, r2
 80006c2:	46a1      	mov	r9, r4
 80006c4:	2f38      	cmp	r7, #56	; 0x38
 80006c6:	dd00      	ble.n	80006ca <__aeabi_dadd+0x62>
 80006c8:	e167      	b.n	800099a <__aeabi_dadd+0x332>
 80006ca:	2f1f      	cmp	r7, #31
 80006cc:	dd00      	ble.n	80006d0 <__aeabi_dadd+0x68>
 80006ce:	e1d6      	b.n	8000a7e <__aeabi_dadd+0x416>
 80006d0:	2220      	movs	r2, #32
 80006d2:	464c      	mov	r4, r9
 80006d4:	1bd2      	subs	r2, r2, r7
 80006d6:	4094      	lsls	r4, r2
 80006d8:	46a2      	mov	sl, r4
 80006da:	4644      	mov	r4, r8
 80006dc:	40fc      	lsrs	r4, r7
 80006de:	0020      	movs	r0, r4
 80006e0:	4654      	mov	r4, sl
 80006e2:	4304      	orrs	r4, r0
 80006e4:	4640      	mov	r0, r8
 80006e6:	4090      	lsls	r0, r2
 80006e8:	1e42      	subs	r2, r0, #1
 80006ea:	4190      	sbcs	r0, r2
 80006ec:	464a      	mov	r2, r9
 80006ee:	40fa      	lsrs	r2, r7
 80006f0:	4304      	orrs	r4, r0
 80006f2:	1a89      	subs	r1, r1, r2
 80006f4:	1b1c      	subs	r4, r3, r4
 80006f6:	42a3      	cmp	r3, r4
 80006f8:	4192      	sbcs	r2, r2
 80006fa:	4252      	negs	r2, r2
 80006fc:	1a8b      	subs	r3, r1, r2
 80006fe:	469a      	mov	sl, r3
 8000700:	4653      	mov	r3, sl
 8000702:	021b      	lsls	r3, r3, #8
 8000704:	d400      	bmi.n	8000708 <__aeabi_dadd+0xa0>
 8000706:	e0d4      	b.n	80008b2 <__aeabi_dadd+0x24a>
 8000708:	4653      	mov	r3, sl
 800070a:	025a      	lsls	r2, r3, #9
 800070c:	0a53      	lsrs	r3, r2, #9
 800070e:	469a      	mov	sl, r3
 8000710:	4653      	mov	r3, sl
 8000712:	2b00      	cmp	r3, #0
 8000714:	d100      	bne.n	8000718 <__aeabi_dadd+0xb0>
 8000716:	e104      	b.n	8000922 <__aeabi_dadd+0x2ba>
 8000718:	4650      	mov	r0, sl
 800071a:	f001 fded 	bl	80022f8 <__clzsi2>
 800071e:	0003      	movs	r3, r0
 8000720:	3b08      	subs	r3, #8
 8000722:	2220      	movs	r2, #32
 8000724:	0020      	movs	r0, r4
 8000726:	1ad2      	subs	r2, r2, r3
 8000728:	4651      	mov	r1, sl
 800072a:	40d0      	lsrs	r0, r2
 800072c:	4099      	lsls	r1, r3
 800072e:	0002      	movs	r2, r0
 8000730:	409c      	lsls	r4, r3
 8000732:	430a      	orrs	r2, r1
 8000734:	42b3      	cmp	r3, r6
 8000736:	da00      	bge.n	800073a <__aeabi_dadd+0xd2>
 8000738:	e102      	b.n	8000940 <__aeabi_dadd+0x2d8>
 800073a:	1b9b      	subs	r3, r3, r6
 800073c:	1c59      	adds	r1, r3, #1
 800073e:	291f      	cmp	r1, #31
 8000740:	dd00      	ble.n	8000744 <__aeabi_dadd+0xdc>
 8000742:	e0a7      	b.n	8000894 <__aeabi_dadd+0x22c>
 8000744:	2320      	movs	r3, #32
 8000746:	0010      	movs	r0, r2
 8000748:	0026      	movs	r6, r4
 800074a:	1a5b      	subs	r3, r3, r1
 800074c:	409c      	lsls	r4, r3
 800074e:	4098      	lsls	r0, r3
 8000750:	40ce      	lsrs	r6, r1
 8000752:	40ca      	lsrs	r2, r1
 8000754:	1e63      	subs	r3, r4, #1
 8000756:	419c      	sbcs	r4, r3
 8000758:	4330      	orrs	r0, r6
 800075a:	4692      	mov	sl, r2
 800075c:	2600      	movs	r6, #0
 800075e:	4304      	orrs	r4, r0
 8000760:	0763      	lsls	r3, r4, #29
 8000762:	d009      	beq.n	8000778 <__aeabi_dadd+0x110>
 8000764:	230f      	movs	r3, #15
 8000766:	4023      	ands	r3, r4
 8000768:	2b04      	cmp	r3, #4
 800076a:	d005      	beq.n	8000778 <__aeabi_dadd+0x110>
 800076c:	1d23      	adds	r3, r4, #4
 800076e:	42a3      	cmp	r3, r4
 8000770:	41a4      	sbcs	r4, r4
 8000772:	4264      	negs	r4, r4
 8000774:	44a2      	add	sl, r4
 8000776:	001c      	movs	r4, r3
 8000778:	4653      	mov	r3, sl
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	d400      	bmi.n	8000780 <__aeabi_dadd+0x118>
 800077e:	e09b      	b.n	80008b8 <__aeabi_dadd+0x250>
 8000780:	4b94      	ldr	r3, [pc, #592]	; (80009d4 <__aeabi_dadd+0x36c>)
 8000782:	3601      	adds	r6, #1
 8000784:	429e      	cmp	r6, r3
 8000786:	d100      	bne.n	800078a <__aeabi_dadd+0x122>
 8000788:	e0b8      	b.n	80008fc <__aeabi_dadd+0x294>
 800078a:	4653      	mov	r3, sl
 800078c:	4992      	ldr	r1, [pc, #584]	; (80009d8 <__aeabi_dadd+0x370>)
 800078e:	08e4      	lsrs	r4, r4, #3
 8000790:	400b      	ands	r3, r1
 8000792:	0019      	movs	r1, r3
 8000794:	075b      	lsls	r3, r3, #29
 8000796:	4323      	orrs	r3, r4
 8000798:	0572      	lsls	r2, r6, #21
 800079a:	024c      	lsls	r4, r1, #9
 800079c:	0b24      	lsrs	r4, r4, #12
 800079e:	0d52      	lsrs	r2, r2, #21
 80007a0:	0512      	lsls	r2, r2, #20
 80007a2:	07ed      	lsls	r5, r5, #31
 80007a4:	4322      	orrs	r2, r4
 80007a6:	432a      	orrs	r2, r5
 80007a8:	0018      	movs	r0, r3
 80007aa:	0011      	movs	r1, r2
 80007ac:	bce0      	pop	{r5, r6, r7}
 80007ae:	46ba      	mov	sl, r7
 80007b0:	46b1      	mov	r9, r6
 80007b2:	46a8      	mov	r8, r5
 80007b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007b6:	2f00      	cmp	r7, #0
 80007b8:	d048      	beq.n	800084c <__aeabi_dadd+0x1e4>
 80007ba:	1b97      	subs	r7, r2, r6
 80007bc:	2e00      	cmp	r6, #0
 80007be:	d000      	beq.n	80007c2 <__aeabi_dadd+0x15a>
 80007c0:	e10e      	b.n	80009e0 <__aeabi_dadd+0x378>
 80007c2:	000c      	movs	r4, r1
 80007c4:	431c      	orrs	r4, r3
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0x162>
 80007c8:	e1b7      	b.n	8000b3a <__aeabi_dadd+0x4d2>
 80007ca:	1e7c      	subs	r4, r7, #1
 80007cc:	2f01      	cmp	r7, #1
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x16a>
 80007d0:	e226      	b.n	8000c20 <__aeabi_dadd+0x5b8>
 80007d2:	4d80      	ldr	r5, [pc, #512]	; (80009d4 <__aeabi_dadd+0x36c>)
 80007d4:	42af      	cmp	r7, r5
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x172>
 80007d8:	e1d5      	b.n	8000b86 <__aeabi_dadd+0x51e>
 80007da:	0027      	movs	r7, r4
 80007dc:	e107      	b.n	80009ee <__aeabi_dadd+0x386>
 80007de:	2f00      	cmp	r7, #0
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dadd+0x17c>
 80007e2:	e0b2      	b.n	800094a <__aeabi_dadd+0x2e2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d047      	beq.n	8000878 <__aeabi_dadd+0x210>
 80007e8:	4a7a      	ldr	r2, [pc, #488]	; (80009d4 <__aeabi_dadd+0x36c>)
 80007ea:	4296      	cmp	r6, r2
 80007ec:	d100      	bne.n	80007f0 <__aeabi_dadd+0x188>
 80007ee:	e089      	b.n	8000904 <__aeabi_dadd+0x29c>
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	464c      	mov	r4, r9
 80007f4:	0412      	lsls	r2, r2, #16
 80007f6:	4314      	orrs	r4, r2
 80007f8:	46a1      	mov	r9, r4
 80007fa:	2f38      	cmp	r7, #56	; 0x38
 80007fc:	dc6b      	bgt.n	80008d6 <__aeabi_dadd+0x26e>
 80007fe:	2f1f      	cmp	r7, #31
 8000800:	dc00      	bgt.n	8000804 <__aeabi_dadd+0x19c>
 8000802:	e16e      	b.n	8000ae2 <__aeabi_dadd+0x47a>
 8000804:	003a      	movs	r2, r7
 8000806:	4648      	mov	r0, r9
 8000808:	3a20      	subs	r2, #32
 800080a:	40d0      	lsrs	r0, r2
 800080c:	4684      	mov	ip, r0
 800080e:	2f20      	cmp	r7, #32
 8000810:	d007      	beq.n	8000822 <__aeabi_dadd+0x1ba>
 8000812:	2240      	movs	r2, #64	; 0x40
 8000814:	4648      	mov	r0, r9
 8000816:	1bd2      	subs	r2, r2, r7
 8000818:	4090      	lsls	r0, r2
 800081a:	0002      	movs	r2, r0
 800081c:	4640      	mov	r0, r8
 800081e:	4310      	orrs	r0, r2
 8000820:	4680      	mov	r8, r0
 8000822:	4640      	mov	r0, r8
 8000824:	1e42      	subs	r2, r0, #1
 8000826:	4190      	sbcs	r0, r2
 8000828:	4662      	mov	r2, ip
 800082a:	0004      	movs	r4, r0
 800082c:	4314      	orrs	r4, r2
 800082e:	e057      	b.n	80008e0 <__aeabi_dadd+0x278>
 8000830:	464a      	mov	r2, r9
 8000832:	4302      	orrs	r2, r0
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x1d0>
 8000836:	e103      	b.n	8000a40 <__aeabi_dadd+0x3d8>
 8000838:	1e7a      	subs	r2, r7, #1
 800083a:	2f01      	cmp	r7, #1
 800083c:	d100      	bne.n	8000840 <__aeabi_dadd+0x1d8>
 800083e:	e193      	b.n	8000b68 <__aeabi_dadd+0x500>
 8000840:	4c64      	ldr	r4, [pc, #400]	; (80009d4 <__aeabi_dadd+0x36c>)
 8000842:	42a7      	cmp	r7, r4
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1e0>
 8000846:	e18a      	b.n	8000b5e <__aeabi_dadd+0x4f6>
 8000848:	0017      	movs	r7, r2
 800084a:	e73b      	b.n	80006c4 <__aeabi_dadd+0x5c>
 800084c:	4c63      	ldr	r4, [pc, #396]	; (80009dc <__aeabi_dadd+0x374>)
 800084e:	1c72      	adds	r2, r6, #1
 8000850:	4222      	tst	r2, r4
 8000852:	d000      	beq.n	8000856 <__aeabi_dadd+0x1ee>
 8000854:	e0e0      	b.n	8000a18 <__aeabi_dadd+0x3b0>
 8000856:	000a      	movs	r2, r1
 8000858:	431a      	orrs	r2, r3
 800085a:	2e00      	cmp	r6, #0
 800085c:	d000      	beq.n	8000860 <__aeabi_dadd+0x1f8>
 800085e:	e174      	b.n	8000b4a <__aeabi_dadd+0x4e2>
 8000860:	2a00      	cmp	r2, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x1fe>
 8000864:	e1d0      	b.n	8000c08 <__aeabi_dadd+0x5a0>
 8000866:	464a      	mov	r2, r9
 8000868:	4302      	orrs	r2, r0
 800086a:	d000      	beq.n	800086e <__aeabi_dadd+0x206>
 800086c:	e1e3      	b.n	8000c36 <__aeabi_dadd+0x5ce>
 800086e:	074a      	lsls	r2, r1, #29
 8000870:	08db      	lsrs	r3, r3, #3
 8000872:	4313      	orrs	r3, r2
 8000874:	08c9      	lsrs	r1, r1, #3
 8000876:	e029      	b.n	80008cc <__aeabi_dadd+0x264>
 8000878:	464a      	mov	r2, r9
 800087a:	4302      	orrs	r2, r0
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x218>
 800087e:	e17d      	b.n	8000b7c <__aeabi_dadd+0x514>
 8000880:	1e7a      	subs	r2, r7, #1
 8000882:	2f01      	cmp	r7, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x220>
 8000886:	e0e0      	b.n	8000a4a <__aeabi_dadd+0x3e2>
 8000888:	4c52      	ldr	r4, [pc, #328]	; (80009d4 <__aeabi_dadd+0x36c>)
 800088a:	42a7      	cmp	r7, r4
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x228>
 800088e:	e166      	b.n	8000b5e <__aeabi_dadd+0x4f6>
 8000890:	0017      	movs	r7, r2
 8000892:	e7b2      	b.n	80007fa <__aeabi_dadd+0x192>
 8000894:	0010      	movs	r0, r2
 8000896:	3b1f      	subs	r3, #31
 8000898:	40d8      	lsrs	r0, r3
 800089a:	2920      	cmp	r1, #32
 800089c:	d003      	beq.n	80008a6 <__aeabi_dadd+0x23e>
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	1a5b      	subs	r3, r3, r1
 80008a2:	409a      	lsls	r2, r3
 80008a4:	4314      	orrs	r4, r2
 80008a6:	1e63      	subs	r3, r4, #1
 80008a8:	419c      	sbcs	r4, r3
 80008aa:	2300      	movs	r3, #0
 80008ac:	2600      	movs	r6, #0
 80008ae:	469a      	mov	sl, r3
 80008b0:	4304      	orrs	r4, r0
 80008b2:	0763      	lsls	r3, r4, #29
 80008b4:	d000      	beq.n	80008b8 <__aeabi_dadd+0x250>
 80008b6:	e755      	b.n	8000764 <__aeabi_dadd+0xfc>
 80008b8:	4652      	mov	r2, sl
 80008ba:	08e3      	lsrs	r3, r4, #3
 80008bc:	0752      	lsls	r2, r2, #29
 80008be:	4313      	orrs	r3, r2
 80008c0:	4652      	mov	r2, sl
 80008c2:	0037      	movs	r7, r6
 80008c4:	08d1      	lsrs	r1, r2, #3
 80008c6:	4a43      	ldr	r2, [pc, #268]	; (80009d4 <__aeabi_dadd+0x36c>)
 80008c8:	4297      	cmp	r7, r2
 80008ca:	d01f      	beq.n	800090c <__aeabi_dadd+0x2a4>
 80008cc:	0309      	lsls	r1, r1, #12
 80008ce:	057a      	lsls	r2, r7, #21
 80008d0:	0b0c      	lsrs	r4, r1, #12
 80008d2:	0d52      	lsrs	r2, r2, #21
 80008d4:	e764      	b.n	80007a0 <__aeabi_dadd+0x138>
 80008d6:	4642      	mov	r2, r8
 80008d8:	464c      	mov	r4, r9
 80008da:	4314      	orrs	r4, r2
 80008dc:	1e62      	subs	r2, r4, #1
 80008de:	4194      	sbcs	r4, r2
 80008e0:	18e4      	adds	r4, r4, r3
 80008e2:	429c      	cmp	r4, r3
 80008e4:	4192      	sbcs	r2, r2
 80008e6:	4252      	negs	r2, r2
 80008e8:	4692      	mov	sl, r2
 80008ea:	448a      	add	sl, r1
 80008ec:	4653      	mov	r3, sl
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	d5df      	bpl.n	80008b2 <__aeabi_dadd+0x24a>
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <__aeabi_dadd+0x36c>)
 80008f4:	3601      	adds	r6, #1
 80008f6:	429e      	cmp	r6, r3
 80008f8:	d000      	beq.n	80008fc <__aeabi_dadd+0x294>
 80008fa:	e0b3      	b.n	8000a64 <__aeabi_dadd+0x3fc>
 80008fc:	0032      	movs	r2, r6
 80008fe:	2400      	movs	r4, #0
 8000900:	2300      	movs	r3, #0
 8000902:	e74d      	b.n	80007a0 <__aeabi_dadd+0x138>
 8000904:	074a      	lsls	r2, r1, #29
 8000906:	08db      	lsrs	r3, r3, #3
 8000908:	4313      	orrs	r3, r2
 800090a:	08c9      	lsrs	r1, r1, #3
 800090c:	001a      	movs	r2, r3
 800090e:	430a      	orrs	r2, r1
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x2ac>
 8000912:	e200      	b.n	8000d16 <__aeabi_dadd+0x6ae>
 8000914:	2480      	movs	r4, #128	; 0x80
 8000916:	0324      	lsls	r4, r4, #12
 8000918:	430c      	orrs	r4, r1
 800091a:	0324      	lsls	r4, r4, #12
 800091c:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <__aeabi_dadd+0x36c>)
 800091e:	0b24      	lsrs	r4, r4, #12
 8000920:	e73e      	b.n	80007a0 <__aeabi_dadd+0x138>
 8000922:	0020      	movs	r0, r4
 8000924:	f001 fce8 	bl	80022f8 <__clzsi2>
 8000928:	0003      	movs	r3, r0
 800092a:	3318      	adds	r3, #24
 800092c:	2b1f      	cmp	r3, #31
 800092e:	dc00      	bgt.n	8000932 <__aeabi_dadd+0x2ca>
 8000930:	e6f7      	b.n	8000722 <__aeabi_dadd+0xba>
 8000932:	0022      	movs	r2, r4
 8000934:	3808      	subs	r0, #8
 8000936:	4082      	lsls	r2, r0
 8000938:	2400      	movs	r4, #0
 800093a:	42b3      	cmp	r3, r6
 800093c:	db00      	blt.n	8000940 <__aeabi_dadd+0x2d8>
 800093e:	e6fc      	b.n	800073a <__aeabi_dadd+0xd2>
 8000940:	1af6      	subs	r6, r6, r3
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <__aeabi_dadd+0x370>)
 8000944:	401a      	ands	r2, r3
 8000946:	4692      	mov	sl, r2
 8000948:	e70a      	b.n	8000760 <__aeabi_dadd+0xf8>
 800094a:	2f00      	cmp	r7, #0
 800094c:	d02b      	beq.n	80009a6 <__aeabi_dadd+0x33e>
 800094e:	1b97      	subs	r7, r2, r6
 8000950:	2e00      	cmp	r6, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x2ee>
 8000954:	e0b8      	b.n	8000ac8 <__aeabi_dadd+0x460>
 8000956:	4c1f      	ldr	r4, [pc, #124]	; (80009d4 <__aeabi_dadd+0x36c>)
 8000958:	42a2      	cmp	r2, r4
 800095a:	d100      	bne.n	800095e <__aeabi_dadd+0x2f6>
 800095c:	e11c      	b.n	8000b98 <__aeabi_dadd+0x530>
 800095e:	2480      	movs	r4, #128	; 0x80
 8000960:	0424      	lsls	r4, r4, #16
 8000962:	4321      	orrs	r1, r4
 8000964:	2f38      	cmp	r7, #56	; 0x38
 8000966:	dd00      	ble.n	800096a <__aeabi_dadd+0x302>
 8000968:	e11e      	b.n	8000ba8 <__aeabi_dadd+0x540>
 800096a:	2f1f      	cmp	r7, #31
 800096c:	dd00      	ble.n	8000970 <__aeabi_dadd+0x308>
 800096e:	e19e      	b.n	8000cae <__aeabi_dadd+0x646>
 8000970:	2620      	movs	r6, #32
 8000972:	000c      	movs	r4, r1
 8000974:	1bf6      	subs	r6, r6, r7
 8000976:	0018      	movs	r0, r3
 8000978:	40b3      	lsls	r3, r6
 800097a:	40b4      	lsls	r4, r6
 800097c:	40f8      	lsrs	r0, r7
 800097e:	1e5e      	subs	r6, r3, #1
 8000980:	41b3      	sbcs	r3, r6
 8000982:	40f9      	lsrs	r1, r7
 8000984:	4304      	orrs	r4, r0
 8000986:	431c      	orrs	r4, r3
 8000988:	4489      	add	r9, r1
 800098a:	4444      	add	r4, r8
 800098c:	4544      	cmp	r4, r8
 800098e:	419b      	sbcs	r3, r3
 8000990:	425b      	negs	r3, r3
 8000992:	444b      	add	r3, r9
 8000994:	469a      	mov	sl, r3
 8000996:	0016      	movs	r6, r2
 8000998:	e7a8      	b.n	80008ec <__aeabi_dadd+0x284>
 800099a:	4642      	mov	r2, r8
 800099c:	464c      	mov	r4, r9
 800099e:	4314      	orrs	r4, r2
 80009a0:	1e62      	subs	r2, r4, #1
 80009a2:	4194      	sbcs	r4, r2
 80009a4:	e6a6      	b.n	80006f4 <__aeabi_dadd+0x8c>
 80009a6:	4c0d      	ldr	r4, [pc, #52]	; (80009dc <__aeabi_dadd+0x374>)
 80009a8:	1c72      	adds	r2, r6, #1
 80009aa:	4222      	tst	r2, r4
 80009ac:	d000      	beq.n	80009b0 <__aeabi_dadd+0x348>
 80009ae:	e0a8      	b.n	8000b02 <__aeabi_dadd+0x49a>
 80009b0:	000a      	movs	r2, r1
 80009b2:	431a      	orrs	r2, r3
 80009b4:	2e00      	cmp	r6, #0
 80009b6:	d000      	beq.n	80009ba <__aeabi_dadd+0x352>
 80009b8:	e10a      	b.n	8000bd0 <__aeabi_dadd+0x568>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dadd+0x358>
 80009be:	e15e      	b.n	8000c7e <__aeabi_dadd+0x616>
 80009c0:	464a      	mov	r2, r9
 80009c2:	4302      	orrs	r2, r0
 80009c4:	d000      	beq.n	80009c8 <__aeabi_dadd+0x360>
 80009c6:	e161      	b.n	8000c8c <__aeabi_dadd+0x624>
 80009c8:	074a      	lsls	r2, r1, #29
 80009ca:	08db      	lsrs	r3, r3, #3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	08c9      	lsrs	r1, r1, #3
 80009d0:	e77c      	b.n	80008cc <__aeabi_dadd+0x264>
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	000007ff 	.word	0x000007ff
 80009d8:	ff7fffff 	.word	0xff7fffff
 80009dc:	000007fe 	.word	0x000007fe
 80009e0:	4ccf      	ldr	r4, [pc, #828]	; (8000d20 <__aeabi_dadd+0x6b8>)
 80009e2:	42a2      	cmp	r2, r4
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x380>
 80009e6:	e0ce      	b.n	8000b86 <__aeabi_dadd+0x51e>
 80009e8:	2480      	movs	r4, #128	; 0x80
 80009ea:	0424      	lsls	r4, r4, #16
 80009ec:	4321      	orrs	r1, r4
 80009ee:	2f38      	cmp	r7, #56	; 0x38
 80009f0:	dc5b      	bgt.n	8000aaa <__aeabi_dadd+0x442>
 80009f2:	2f1f      	cmp	r7, #31
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x390>
 80009f6:	e0dc      	b.n	8000bb2 <__aeabi_dadd+0x54a>
 80009f8:	2520      	movs	r5, #32
 80009fa:	000c      	movs	r4, r1
 80009fc:	1bed      	subs	r5, r5, r7
 80009fe:	001e      	movs	r6, r3
 8000a00:	40ab      	lsls	r3, r5
 8000a02:	40ac      	lsls	r4, r5
 8000a04:	40fe      	lsrs	r6, r7
 8000a06:	1e5d      	subs	r5, r3, #1
 8000a08:	41ab      	sbcs	r3, r5
 8000a0a:	4334      	orrs	r4, r6
 8000a0c:	40f9      	lsrs	r1, r7
 8000a0e:	431c      	orrs	r4, r3
 8000a10:	464b      	mov	r3, r9
 8000a12:	1a5b      	subs	r3, r3, r1
 8000a14:	4699      	mov	r9, r3
 8000a16:	e04c      	b.n	8000ab2 <__aeabi_dadd+0x44a>
 8000a18:	464a      	mov	r2, r9
 8000a1a:	1a1c      	subs	r4, r3, r0
 8000a1c:	1a88      	subs	r0, r1, r2
 8000a1e:	42a3      	cmp	r3, r4
 8000a20:	4192      	sbcs	r2, r2
 8000a22:	4252      	negs	r2, r2
 8000a24:	4692      	mov	sl, r2
 8000a26:	0002      	movs	r2, r0
 8000a28:	4650      	mov	r0, sl
 8000a2a:	1a12      	subs	r2, r2, r0
 8000a2c:	4692      	mov	sl, r2
 8000a2e:	0212      	lsls	r2, r2, #8
 8000a30:	d478      	bmi.n	8000b24 <__aeabi_dadd+0x4bc>
 8000a32:	4653      	mov	r3, sl
 8000a34:	4323      	orrs	r3, r4
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x3d2>
 8000a38:	e66a      	b.n	8000710 <__aeabi_dadd+0xa8>
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2500      	movs	r5, #0
 8000a3e:	e745      	b.n	80008cc <__aeabi_dadd+0x264>
 8000a40:	074a      	lsls	r2, r1, #29
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	08c9      	lsrs	r1, r1, #3
 8000a48:	e73d      	b.n	80008c6 <__aeabi_dadd+0x25e>
 8000a4a:	181c      	adds	r4, r3, r0
 8000a4c:	429c      	cmp	r4, r3
 8000a4e:	419b      	sbcs	r3, r3
 8000a50:	4449      	add	r1, r9
 8000a52:	468a      	mov	sl, r1
 8000a54:	425b      	negs	r3, r3
 8000a56:	449a      	add	sl, r3
 8000a58:	4653      	mov	r3, sl
 8000a5a:	2601      	movs	r6, #1
 8000a5c:	021b      	lsls	r3, r3, #8
 8000a5e:	d400      	bmi.n	8000a62 <__aeabi_dadd+0x3fa>
 8000a60:	e727      	b.n	80008b2 <__aeabi_dadd+0x24a>
 8000a62:	2602      	movs	r6, #2
 8000a64:	4652      	mov	r2, sl
 8000a66:	4baf      	ldr	r3, [pc, #700]	; (8000d24 <__aeabi_dadd+0x6bc>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	4021      	ands	r1, r4
 8000a70:	0862      	lsrs	r2, r4, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	07dc      	lsls	r4, r3, #31
 8000a76:	085b      	lsrs	r3, r3, #1
 8000a78:	469a      	mov	sl, r3
 8000a7a:	4314      	orrs	r4, r2
 8000a7c:	e670      	b.n	8000760 <__aeabi_dadd+0xf8>
 8000a7e:	003a      	movs	r2, r7
 8000a80:	464c      	mov	r4, r9
 8000a82:	3a20      	subs	r2, #32
 8000a84:	40d4      	lsrs	r4, r2
 8000a86:	46a4      	mov	ip, r4
 8000a88:	2f20      	cmp	r7, #32
 8000a8a:	d007      	beq.n	8000a9c <__aeabi_dadd+0x434>
 8000a8c:	2240      	movs	r2, #64	; 0x40
 8000a8e:	4648      	mov	r0, r9
 8000a90:	1bd2      	subs	r2, r2, r7
 8000a92:	4090      	lsls	r0, r2
 8000a94:	0002      	movs	r2, r0
 8000a96:	4640      	mov	r0, r8
 8000a98:	4310      	orrs	r0, r2
 8000a9a:	4680      	mov	r8, r0
 8000a9c:	4640      	mov	r0, r8
 8000a9e:	1e42      	subs	r2, r0, #1
 8000aa0:	4190      	sbcs	r0, r2
 8000aa2:	4662      	mov	r2, ip
 8000aa4:	0004      	movs	r4, r0
 8000aa6:	4314      	orrs	r4, r2
 8000aa8:	e624      	b.n	80006f4 <__aeabi_dadd+0x8c>
 8000aaa:	4319      	orrs	r1, r3
 8000aac:	000c      	movs	r4, r1
 8000aae:	1e63      	subs	r3, r4, #1
 8000ab0:	419c      	sbcs	r4, r3
 8000ab2:	4643      	mov	r3, r8
 8000ab4:	1b1c      	subs	r4, r3, r4
 8000ab6:	45a0      	cmp	r8, r4
 8000ab8:	419b      	sbcs	r3, r3
 8000aba:	4649      	mov	r1, r9
 8000abc:	425b      	negs	r3, r3
 8000abe:	1acb      	subs	r3, r1, r3
 8000ac0:	469a      	mov	sl, r3
 8000ac2:	4665      	mov	r5, ip
 8000ac4:	0016      	movs	r6, r2
 8000ac6:	e61b      	b.n	8000700 <__aeabi_dadd+0x98>
 8000ac8:	000c      	movs	r4, r1
 8000aca:	431c      	orrs	r4, r3
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dadd+0x468>
 8000ace:	e0c7      	b.n	8000c60 <__aeabi_dadd+0x5f8>
 8000ad0:	1e7c      	subs	r4, r7, #1
 8000ad2:	2f01      	cmp	r7, #1
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dadd+0x470>
 8000ad6:	e0f9      	b.n	8000ccc <__aeabi_dadd+0x664>
 8000ad8:	4e91      	ldr	r6, [pc, #580]	; (8000d20 <__aeabi_dadd+0x6b8>)
 8000ada:	42b7      	cmp	r7, r6
 8000adc:	d05c      	beq.n	8000b98 <__aeabi_dadd+0x530>
 8000ade:	0027      	movs	r7, r4
 8000ae0:	e740      	b.n	8000964 <__aeabi_dadd+0x2fc>
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	464c      	mov	r4, r9
 8000ae6:	4640      	mov	r0, r8
 8000ae8:	1bd2      	subs	r2, r2, r7
 8000aea:	4094      	lsls	r4, r2
 8000aec:	40f8      	lsrs	r0, r7
 8000aee:	4304      	orrs	r4, r0
 8000af0:	4640      	mov	r0, r8
 8000af2:	4090      	lsls	r0, r2
 8000af4:	1e42      	subs	r2, r0, #1
 8000af6:	4190      	sbcs	r0, r2
 8000af8:	464a      	mov	r2, r9
 8000afa:	40fa      	lsrs	r2, r7
 8000afc:	4304      	orrs	r4, r0
 8000afe:	1889      	adds	r1, r1, r2
 8000b00:	e6ee      	b.n	80008e0 <__aeabi_dadd+0x278>
 8000b02:	4c87      	ldr	r4, [pc, #540]	; (8000d20 <__aeabi_dadd+0x6b8>)
 8000b04:	42a2      	cmp	r2, r4
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x4a2>
 8000b08:	e6f9      	b.n	80008fe <__aeabi_dadd+0x296>
 8000b0a:	1818      	adds	r0, r3, r0
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	419b      	sbcs	r3, r3
 8000b10:	4449      	add	r1, r9
 8000b12:	425b      	negs	r3, r3
 8000b14:	18cb      	adds	r3, r1, r3
 8000b16:	07dc      	lsls	r4, r3, #31
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	085b      	lsrs	r3, r3, #1
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	0016      	movs	r6, r2
 8000b20:	4304      	orrs	r4, r0
 8000b22:	e6c6      	b.n	80008b2 <__aeabi_dadd+0x24a>
 8000b24:	4642      	mov	r2, r8
 8000b26:	1ad4      	subs	r4, r2, r3
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	4180      	sbcs	r0, r0
 8000b2c:	464b      	mov	r3, r9
 8000b2e:	4240      	negs	r0, r0
 8000b30:	1a59      	subs	r1, r3, r1
 8000b32:	1a0b      	subs	r3, r1, r0
 8000b34:	469a      	mov	sl, r3
 8000b36:	4665      	mov	r5, ip
 8000b38:	e5ea      	b.n	8000710 <__aeabi_dadd+0xa8>
 8000b3a:	464b      	mov	r3, r9
 8000b3c:	464a      	mov	r2, r9
 8000b3e:	08c0      	lsrs	r0, r0, #3
 8000b40:	075b      	lsls	r3, r3, #29
 8000b42:	4665      	mov	r5, ip
 8000b44:	4303      	orrs	r3, r0
 8000b46:	08d1      	lsrs	r1, r2, #3
 8000b48:	e6bd      	b.n	80008c6 <__aeabi_dadd+0x25e>
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_dadd+0x4e8>
 8000b4e:	e08e      	b.n	8000c6e <__aeabi_dadd+0x606>
 8000b50:	464b      	mov	r3, r9
 8000b52:	4303      	orrs	r3, r0
 8000b54:	d117      	bne.n	8000b86 <__aeabi_dadd+0x51e>
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	2500      	movs	r5, #0
 8000b5a:	0309      	lsls	r1, r1, #12
 8000b5c:	e6da      	b.n	8000914 <__aeabi_dadd+0x2ac>
 8000b5e:	074a      	lsls	r2, r1, #29
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	08c9      	lsrs	r1, r1, #3
 8000b66:	e6d1      	b.n	800090c <__aeabi_dadd+0x2a4>
 8000b68:	1a1c      	subs	r4, r3, r0
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	419b      	sbcs	r3, r3
 8000b70:	1a89      	subs	r1, r1, r2
 8000b72:	425b      	negs	r3, r3
 8000b74:	1acb      	subs	r3, r1, r3
 8000b76:	469a      	mov	sl, r3
 8000b78:	2601      	movs	r6, #1
 8000b7a:	e5c1      	b.n	8000700 <__aeabi_dadd+0x98>
 8000b7c:	074a      	lsls	r2, r1, #29
 8000b7e:	08db      	lsrs	r3, r3, #3
 8000b80:	4313      	orrs	r3, r2
 8000b82:	08c9      	lsrs	r1, r1, #3
 8000b84:	e69f      	b.n	80008c6 <__aeabi_dadd+0x25e>
 8000b86:	4643      	mov	r3, r8
 8000b88:	08d8      	lsrs	r0, r3, #3
 8000b8a:	464b      	mov	r3, r9
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	075b      	lsls	r3, r3, #29
 8000b90:	4665      	mov	r5, ip
 8000b92:	4303      	orrs	r3, r0
 8000b94:	08d1      	lsrs	r1, r2, #3
 8000b96:	e6b9      	b.n	800090c <__aeabi_dadd+0x2a4>
 8000b98:	4643      	mov	r3, r8
 8000b9a:	08d8      	lsrs	r0, r3, #3
 8000b9c:	464b      	mov	r3, r9
 8000b9e:	464a      	mov	r2, r9
 8000ba0:	075b      	lsls	r3, r3, #29
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	08d1      	lsrs	r1, r2, #3
 8000ba6:	e6b1      	b.n	800090c <__aeabi_dadd+0x2a4>
 8000ba8:	4319      	orrs	r1, r3
 8000baa:	000c      	movs	r4, r1
 8000bac:	1e63      	subs	r3, r4, #1
 8000bae:	419c      	sbcs	r4, r3
 8000bb0:	e6eb      	b.n	800098a <__aeabi_dadd+0x322>
 8000bb2:	003c      	movs	r4, r7
 8000bb4:	000d      	movs	r5, r1
 8000bb6:	3c20      	subs	r4, #32
 8000bb8:	40e5      	lsrs	r5, r4
 8000bba:	2f20      	cmp	r7, #32
 8000bbc:	d003      	beq.n	8000bc6 <__aeabi_dadd+0x55e>
 8000bbe:	2440      	movs	r4, #64	; 0x40
 8000bc0:	1be4      	subs	r4, r4, r7
 8000bc2:	40a1      	lsls	r1, r4
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	001c      	movs	r4, r3
 8000bc8:	1e63      	subs	r3, r4, #1
 8000bca:	419c      	sbcs	r4, r3
 8000bcc:	432c      	orrs	r4, r5
 8000bce:	e770      	b.n	8000ab2 <__aeabi_dadd+0x44a>
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	d0e1      	beq.n	8000b98 <__aeabi_dadd+0x530>
 8000bd4:	464a      	mov	r2, r9
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	d0c1      	beq.n	8000b5e <__aeabi_dadd+0x4f6>
 8000bda:	074a      	lsls	r2, r1, #29
 8000bdc:	08db      	lsrs	r3, r3, #3
 8000bde:	4313      	orrs	r3, r2
 8000be0:	2280      	movs	r2, #128	; 0x80
 8000be2:	08c9      	lsrs	r1, r1, #3
 8000be4:	0312      	lsls	r2, r2, #12
 8000be6:	4211      	tst	r1, r2
 8000be8:	d008      	beq.n	8000bfc <__aeabi_dadd+0x594>
 8000bea:	4648      	mov	r0, r9
 8000bec:	08c4      	lsrs	r4, r0, #3
 8000bee:	4214      	tst	r4, r2
 8000bf0:	d104      	bne.n	8000bfc <__aeabi_dadd+0x594>
 8000bf2:	4643      	mov	r3, r8
 8000bf4:	0021      	movs	r1, r4
 8000bf6:	08db      	lsrs	r3, r3, #3
 8000bf8:	0742      	lsls	r2, r0, #29
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	0f5a      	lsrs	r2, r3, #29
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	0752      	lsls	r2, r2, #29
 8000c02:	08db      	lsrs	r3, r3, #3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	e681      	b.n	800090c <__aeabi_dadd+0x2a4>
 8000c08:	464b      	mov	r3, r9
 8000c0a:	4303      	orrs	r3, r0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_dadd+0x5a8>
 8000c0e:	e714      	b.n	8000a3a <__aeabi_dadd+0x3d2>
 8000c10:	464b      	mov	r3, r9
 8000c12:	464a      	mov	r2, r9
 8000c14:	08c0      	lsrs	r0, r0, #3
 8000c16:	075b      	lsls	r3, r3, #29
 8000c18:	4665      	mov	r5, ip
 8000c1a:	4303      	orrs	r3, r0
 8000c1c:	08d1      	lsrs	r1, r2, #3
 8000c1e:	e655      	b.n	80008cc <__aeabi_dadd+0x264>
 8000c20:	1ac4      	subs	r4, r0, r3
 8000c22:	45a0      	cmp	r8, r4
 8000c24:	4180      	sbcs	r0, r0
 8000c26:	464b      	mov	r3, r9
 8000c28:	4240      	negs	r0, r0
 8000c2a:	1a59      	subs	r1, r3, r1
 8000c2c:	1a0b      	subs	r3, r1, r0
 8000c2e:	469a      	mov	sl, r3
 8000c30:	4665      	mov	r5, ip
 8000c32:	2601      	movs	r6, #1
 8000c34:	e564      	b.n	8000700 <__aeabi_dadd+0x98>
 8000c36:	1a1c      	subs	r4, r3, r0
 8000c38:	464a      	mov	r2, r9
 8000c3a:	42a3      	cmp	r3, r4
 8000c3c:	4180      	sbcs	r0, r0
 8000c3e:	1a8a      	subs	r2, r1, r2
 8000c40:	4240      	negs	r0, r0
 8000c42:	1a12      	subs	r2, r2, r0
 8000c44:	4692      	mov	sl, r2
 8000c46:	0212      	lsls	r2, r2, #8
 8000c48:	d549      	bpl.n	8000cde <__aeabi_dadd+0x676>
 8000c4a:	4642      	mov	r2, r8
 8000c4c:	1ad4      	subs	r4, r2, r3
 8000c4e:	45a0      	cmp	r8, r4
 8000c50:	4180      	sbcs	r0, r0
 8000c52:	464b      	mov	r3, r9
 8000c54:	4240      	negs	r0, r0
 8000c56:	1a59      	subs	r1, r3, r1
 8000c58:	1a0b      	subs	r3, r1, r0
 8000c5a:	469a      	mov	sl, r3
 8000c5c:	4665      	mov	r5, ip
 8000c5e:	e57f      	b.n	8000760 <__aeabi_dadd+0xf8>
 8000c60:	464b      	mov	r3, r9
 8000c62:	464a      	mov	r2, r9
 8000c64:	08c0      	lsrs	r0, r0, #3
 8000c66:	075b      	lsls	r3, r3, #29
 8000c68:	4303      	orrs	r3, r0
 8000c6a:	08d1      	lsrs	r1, r2, #3
 8000c6c:	e62b      	b.n	80008c6 <__aeabi_dadd+0x25e>
 8000c6e:	464a      	mov	r2, r9
 8000c70:	08db      	lsrs	r3, r3, #3
 8000c72:	4302      	orrs	r2, r0
 8000c74:	d138      	bne.n	8000ce8 <__aeabi_dadd+0x680>
 8000c76:	074a      	lsls	r2, r1, #29
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	08c9      	lsrs	r1, r1, #3
 8000c7c:	e646      	b.n	800090c <__aeabi_dadd+0x2a4>
 8000c7e:	464b      	mov	r3, r9
 8000c80:	464a      	mov	r2, r9
 8000c82:	08c0      	lsrs	r0, r0, #3
 8000c84:	075b      	lsls	r3, r3, #29
 8000c86:	4303      	orrs	r3, r0
 8000c88:	08d1      	lsrs	r1, r2, #3
 8000c8a:	e61f      	b.n	80008cc <__aeabi_dadd+0x264>
 8000c8c:	181c      	adds	r4, r3, r0
 8000c8e:	429c      	cmp	r4, r3
 8000c90:	419b      	sbcs	r3, r3
 8000c92:	4449      	add	r1, r9
 8000c94:	468a      	mov	sl, r1
 8000c96:	425b      	negs	r3, r3
 8000c98:	449a      	add	sl, r3
 8000c9a:	4653      	mov	r3, sl
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	d400      	bmi.n	8000ca2 <__aeabi_dadd+0x63a>
 8000ca0:	e607      	b.n	80008b2 <__aeabi_dadd+0x24a>
 8000ca2:	4652      	mov	r2, sl
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <__aeabi_dadd+0x6bc>)
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	401a      	ands	r2, r3
 8000caa:	4692      	mov	sl, r2
 8000cac:	e601      	b.n	80008b2 <__aeabi_dadd+0x24a>
 8000cae:	003c      	movs	r4, r7
 8000cb0:	000e      	movs	r6, r1
 8000cb2:	3c20      	subs	r4, #32
 8000cb4:	40e6      	lsrs	r6, r4
 8000cb6:	2f20      	cmp	r7, #32
 8000cb8:	d003      	beq.n	8000cc2 <__aeabi_dadd+0x65a>
 8000cba:	2440      	movs	r4, #64	; 0x40
 8000cbc:	1be4      	subs	r4, r4, r7
 8000cbe:	40a1      	lsls	r1, r4
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	001c      	movs	r4, r3
 8000cc4:	1e63      	subs	r3, r4, #1
 8000cc6:	419c      	sbcs	r4, r3
 8000cc8:	4334      	orrs	r4, r6
 8000cca:	e65e      	b.n	800098a <__aeabi_dadd+0x322>
 8000ccc:	4443      	add	r3, r8
 8000cce:	4283      	cmp	r3, r0
 8000cd0:	4180      	sbcs	r0, r0
 8000cd2:	4449      	add	r1, r9
 8000cd4:	468a      	mov	sl, r1
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	001c      	movs	r4, r3
 8000cda:	4482      	add	sl, r0
 8000cdc:	e6bc      	b.n	8000a58 <__aeabi_dadd+0x3f0>
 8000cde:	4653      	mov	r3, sl
 8000ce0:	4323      	orrs	r3, r4
 8000ce2:	d100      	bne.n	8000ce6 <__aeabi_dadd+0x67e>
 8000ce4:	e6a9      	b.n	8000a3a <__aeabi_dadd+0x3d2>
 8000ce6:	e5e4      	b.n	80008b2 <__aeabi_dadd+0x24a>
 8000ce8:	074a      	lsls	r2, r1, #29
 8000cea:	4313      	orrs	r3, r2
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	08c9      	lsrs	r1, r1, #3
 8000cf0:	0312      	lsls	r2, r2, #12
 8000cf2:	4211      	tst	r1, r2
 8000cf4:	d009      	beq.n	8000d0a <__aeabi_dadd+0x6a2>
 8000cf6:	4648      	mov	r0, r9
 8000cf8:	08c4      	lsrs	r4, r0, #3
 8000cfa:	4214      	tst	r4, r2
 8000cfc:	d105      	bne.n	8000d0a <__aeabi_dadd+0x6a2>
 8000cfe:	4643      	mov	r3, r8
 8000d00:	4665      	mov	r5, ip
 8000d02:	0021      	movs	r1, r4
 8000d04:	08db      	lsrs	r3, r3, #3
 8000d06:	0742      	lsls	r2, r0, #29
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	0f5a      	lsrs	r2, r3, #29
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	0752      	lsls	r2, r2, #29
 8000d12:	4313      	orrs	r3, r2
 8000d14:	e5fa      	b.n	800090c <__aeabi_dadd+0x2a4>
 8000d16:	2300      	movs	r3, #0
 8000d18:	4a01      	ldr	r2, [pc, #4]	; (8000d20 <__aeabi_dadd+0x6b8>)
 8000d1a:	001c      	movs	r4, r3
 8000d1c:	e540      	b.n	80007a0 <__aeabi_dadd+0x138>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	000007ff 	.word	0x000007ff
 8000d24:	ff7fffff 	.word	0xff7fffff

08000d28 <__aeabi_ddiv>:
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	4657      	mov	r7, sl
 8000d2c:	464e      	mov	r6, r9
 8000d2e:	4645      	mov	r5, r8
 8000d30:	46de      	mov	lr, fp
 8000d32:	b5e0      	push	{r5, r6, r7, lr}
 8000d34:	030c      	lsls	r4, r1, #12
 8000d36:	001f      	movs	r7, r3
 8000d38:	004b      	lsls	r3, r1, #1
 8000d3a:	4681      	mov	r9, r0
 8000d3c:	4692      	mov	sl, r2
 8000d3e:	0005      	movs	r5, r0
 8000d40:	b085      	sub	sp, #20
 8000d42:	0b24      	lsrs	r4, r4, #12
 8000d44:	0d5b      	lsrs	r3, r3, #21
 8000d46:	0fce      	lsrs	r6, r1, #31
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_ddiv+0x26>
 8000d4c:	e152      	b.n	8000ff4 <__aeabi_ddiv+0x2cc>
 8000d4e:	4ad2      	ldr	r2, [pc, #840]	; (8001098 <__aeabi_ddiv+0x370>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d100      	bne.n	8000d56 <__aeabi_ddiv+0x2e>
 8000d54:	e16e      	b.n	8001034 <__aeabi_ddiv+0x30c>
 8000d56:	0f42      	lsrs	r2, r0, #29
 8000d58:	00e4      	lsls	r4, r4, #3
 8000d5a:	4314      	orrs	r4, r2
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	0412      	lsls	r2, r2, #16
 8000d60:	4322      	orrs	r2, r4
 8000d62:	4690      	mov	r8, r2
 8000d64:	4acd      	ldr	r2, [pc, #820]	; (800109c <__aeabi_ddiv+0x374>)
 8000d66:	00c5      	lsls	r5, r0, #3
 8000d68:	4693      	mov	fp, r2
 8000d6a:	449b      	add	fp, r3
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4699      	mov	r9, r3
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	033c      	lsls	r4, r7, #12
 8000d74:	007b      	lsls	r3, r7, #1
 8000d76:	4650      	mov	r0, sl
 8000d78:	0b24      	lsrs	r4, r4, #12
 8000d7a:	0d5b      	lsrs	r3, r3, #21
 8000d7c:	0fff      	lsrs	r7, r7, #31
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_ddiv+0x5c>
 8000d82:	e11a      	b.n	8000fba <__aeabi_ddiv+0x292>
 8000d84:	4ac4      	ldr	r2, [pc, #784]	; (8001098 <__aeabi_ddiv+0x370>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d100      	bne.n	8000d8c <__aeabi_ddiv+0x64>
 8000d8a:	e15e      	b.n	800104a <__aeabi_ddiv+0x322>
 8000d8c:	0f42      	lsrs	r2, r0, #29
 8000d8e:	00e4      	lsls	r4, r4, #3
 8000d90:	4322      	orrs	r2, r4
 8000d92:	2480      	movs	r4, #128	; 0x80
 8000d94:	0424      	lsls	r4, r4, #16
 8000d96:	4314      	orrs	r4, r2
 8000d98:	4ac0      	ldr	r2, [pc, #768]	; (800109c <__aeabi_ddiv+0x374>)
 8000d9a:	00c1      	lsls	r1, r0, #3
 8000d9c:	4694      	mov	ip, r2
 8000d9e:	465a      	mov	r2, fp
 8000da0:	4463      	add	r3, ip
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	469b      	mov	fp, r3
 8000da6:	2000      	movs	r0, #0
 8000da8:	0033      	movs	r3, r6
 8000daa:	407b      	eors	r3, r7
 8000dac:	469a      	mov	sl, r3
 8000dae:	464b      	mov	r3, r9
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d827      	bhi.n	8000e04 <__aeabi_ddiv+0xdc>
 8000db4:	4aba      	ldr	r2, [pc, #744]	; (80010a0 <__aeabi_ddiv+0x378>)
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	58d3      	ldr	r3, [r2, r3]
 8000dba:	469f      	mov	pc, r3
 8000dbc:	46b2      	mov	sl, r6
 8000dbe:	9b00      	ldr	r3, [sp, #0]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d016      	beq.n	8000df2 <__aeabi_ddiv+0xca>
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d100      	bne.n	8000dca <__aeabi_ddiv+0xa2>
 8000dc8:	e287      	b.n	80012da <__aeabi_ddiv+0x5b2>
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d000      	beq.n	8000dd0 <__aeabi_ddiv+0xa8>
 8000dce:	e0d5      	b.n	8000f7c <__aeabi_ddiv+0x254>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2500      	movs	r5, #0
 8000dd6:	051b      	lsls	r3, r3, #20
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	4652      	mov	r2, sl
 8000ddc:	07d2      	lsls	r2, r2, #31
 8000dde:	4313      	orrs	r3, r2
 8000de0:	0028      	movs	r0, r5
 8000de2:	0019      	movs	r1, r3
 8000de4:	b005      	add	sp, #20
 8000de6:	bcf0      	pop	{r4, r5, r6, r7}
 8000de8:	46bb      	mov	fp, r7
 8000dea:	46b2      	mov	sl, r6
 8000dec:	46a9      	mov	r9, r5
 8000dee:	46a0      	mov	r8, r4
 8000df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000df2:	2200      	movs	r2, #0
 8000df4:	2500      	movs	r5, #0
 8000df6:	4ba8      	ldr	r3, [pc, #672]	; (8001098 <__aeabi_ddiv+0x370>)
 8000df8:	e7ed      	b.n	8000dd6 <__aeabi_ddiv+0xae>
 8000dfa:	46ba      	mov	sl, r7
 8000dfc:	46a0      	mov	r8, r4
 8000dfe:	000d      	movs	r5, r1
 8000e00:	9000      	str	r0, [sp, #0]
 8000e02:	e7dc      	b.n	8000dbe <__aeabi_ddiv+0x96>
 8000e04:	4544      	cmp	r4, r8
 8000e06:	d200      	bcs.n	8000e0a <__aeabi_ddiv+0xe2>
 8000e08:	e1c4      	b.n	8001194 <__aeabi_ddiv+0x46c>
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_ddiv+0xe6>
 8000e0c:	e1bf      	b.n	800118e <__aeabi_ddiv+0x466>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	425b      	negs	r3, r3
 8000e12:	469c      	mov	ip, r3
 8000e14:	002e      	movs	r6, r5
 8000e16:	4640      	mov	r0, r8
 8000e18:	2500      	movs	r5, #0
 8000e1a:	44e3      	add	fp, ip
 8000e1c:	0223      	lsls	r3, r4, #8
 8000e1e:	0e0c      	lsrs	r4, r1, #24
 8000e20:	431c      	orrs	r4, r3
 8000e22:	0c1b      	lsrs	r3, r3, #16
 8000e24:	4699      	mov	r9, r3
 8000e26:	0423      	lsls	r3, r4, #16
 8000e28:	020a      	lsls	r2, r1, #8
 8000e2a:	0c1f      	lsrs	r7, r3, #16
 8000e2c:	4649      	mov	r1, r9
 8000e2e:	9200      	str	r2, [sp, #0]
 8000e30:	9701      	str	r7, [sp, #4]
 8000e32:	f7ff f9ff 	bl	8000234 <__aeabi_uidivmod>
 8000e36:	0002      	movs	r2, r0
 8000e38:	437a      	muls	r2, r7
 8000e3a:	040b      	lsls	r3, r1, #16
 8000e3c:	0c31      	lsrs	r1, r6, #16
 8000e3e:	4680      	mov	r8, r0
 8000e40:	4319      	orrs	r1, r3
 8000e42:	428a      	cmp	r2, r1
 8000e44:	d907      	bls.n	8000e56 <__aeabi_ddiv+0x12e>
 8000e46:	2301      	movs	r3, #1
 8000e48:	425b      	negs	r3, r3
 8000e4a:	469c      	mov	ip, r3
 8000e4c:	1909      	adds	r1, r1, r4
 8000e4e:	44e0      	add	r8, ip
 8000e50:	428c      	cmp	r4, r1
 8000e52:	d800      	bhi.n	8000e56 <__aeabi_ddiv+0x12e>
 8000e54:	e201      	b.n	800125a <__aeabi_ddiv+0x532>
 8000e56:	1a88      	subs	r0, r1, r2
 8000e58:	4649      	mov	r1, r9
 8000e5a:	f7ff f9eb 	bl	8000234 <__aeabi_uidivmod>
 8000e5e:	9a01      	ldr	r2, [sp, #4]
 8000e60:	0436      	lsls	r6, r6, #16
 8000e62:	4342      	muls	r2, r0
 8000e64:	0409      	lsls	r1, r1, #16
 8000e66:	0c36      	lsrs	r6, r6, #16
 8000e68:	0003      	movs	r3, r0
 8000e6a:	430e      	orrs	r6, r1
 8000e6c:	42b2      	cmp	r2, r6
 8000e6e:	d904      	bls.n	8000e7a <__aeabi_ddiv+0x152>
 8000e70:	1936      	adds	r6, r6, r4
 8000e72:	3b01      	subs	r3, #1
 8000e74:	42b4      	cmp	r4, r6
 8000e76:	d800      	bhi.n	8000e7a <__aeabi_ddiv+0x152>
 8000e78:	e1e9      	b.n	800124e <__aeabi_ddiv+0x526>
 8000e7a:	1ab0      	subs	r0, r6, r2
 8000e7c:	4642      	mov	r2, r8
 8000e7e:	9e00      	ldr	r6, [sp, #0]
 8000e80:	0412      	lsls	r2, r2, #16
 8000e82:	431a      	orrs	r2, r3
 8000e84:	0c33      	lsrs	r3, r6, #16
 8000e86:	001f      	movs	r7, r3
 8000e88:	0c11      	lsrs	r1, r2, #16
 8000e8a:	4690      	mov	r8, r2
 8000e8c:	9302      	str	r3, [sp, #8]
 8000e8e:	0413      	lsls	r3, r2, #16
 8000e90:	0432      	lsls	r2, r6, #16
 8000e92:	0c16      	lsrs	r6, r2, #16
 8000e94:	0032      	movs	r2, r6
 8000e96:	0c1b      	lsrs	r3, r3, #16
 8000e98:	435a      	muls	r2, r3
 8000e9a:	9603      	str	r6, [sp, #12]
 8000e9c:	437b      	muls	r3, r7
 8000e9e:	434e      	muls	r6, r1
 8000ea0:	4379      	muls	r1, r7
 8000ea2:	0c17      	lsrs	r7, r2, #16
 8000ea4:	46bc      	mov	ip, r7
 8000ea6:	199b      	adds	r3, r3, r6
 8000ea8:	4463      	add	r3, ip
 8000eaa:	429e      	cmp	r6, r3
 8000eac:	d903      	bls.n	8000eb6 <__aeabi_ddiv+0x18e>
 8000eae:	2680      	movs	r6, #128	; 0x80
 8000eb0:	0276      	lsls	r6, r6, #9
 8000eb2:	46b4      	mov	ip, r6
 8000eb4:	4461      	add	r1, ip
 8000eb6:	0c1e      	lsrs	r6, r3, #16
 8000eb8:	1871      	adds	r1, r6, r1
 8000eba:	0416      	lsls	r6, r2, #16
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	0c36      	lsrs	r6, r6, #16
 8000ec0:	199e      	adds	r6, r3, r6
 8000ec2:	4288      	cmp	r0, r1
 8000ec4:	d302      	bcc.n	8000ecc <__aeabi_ddiv+0x1a4>
 8000ec6:	d112      	bne.n	8000eee <__aeabi_ddiv+0x1c6>
 8000ec8:	42b5      	cmp	r5, r6
 8000eca:	d210      	bcs.n	8000eee <__aeabi_ddiv+0x1c6>
 8000ecc:	4643      	mov	r3, r8
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	9b00      	ldr	r3, [sp, #0]
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	4465      	add	r5, ip
 8000ed6:	001f      	movs	r7, r3
 8000ed8:	429d      	cmp	r5, r3
 8000eda:	419b      	sbcs	r3, r3
 8000edc:	425b      	negs	r3, r3
 8000ede:	191b      	adds	r3, r3, r4
 8000ee0:	18c0      	adds	r0, r0, r3
 8000ee2:	4284      	cmp	r4, r0
 8000ee4:	d200      	bcs.n	8000ee8 <__aeabi_ddiv+0x1c0>
 8000ee6:	e19e      	b.n	8001226 <__aeabi_ddiv+0x4fe>
 8000ee8:	d100      	bne.n	8000eec <__aeabi_ddiv+0x1c4>
 8000eea:	e199      	b.n	8001220 <__aeabi_ddiv+0x4f8>
 8000eec:	4690      	mov	r8, r2
 8000eee:	1bae      	subs	r6, r5, r6
 8000ef0:	42b5      	cmp	r5, r6
 8000ef2:	41ad      	sbcs	r5, r5
 8000ef4:	1a40      	subs	r0, r0, r1
 8000ef6:	426d      	negs	r5, r5
 8000ef8:	1b40      	subs	r0, r0, r5
 8000efa:	4284      	cmp	r4, r0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_ddiv+0x1d8>
 8000efe:	e1d2      	b.n	80012a6 <__aeabi_ddiv+0x57e>
 8000f00:	4649      	mov	r1, r9
 8000f02:	f7ff f997 	bl	8000234 <__aeabi_uidivmod>
 8000f06:	9a01      	ldr	r2, [sp, #4]
 8000f08:	040b      	lsls	r3, r1, #16
 8000f0a:	4342      	muls	r2, r0
 8000f0c:	0c31      	lsrs	r1, r6, #16
 8000f0e:	0005      	movs	r5, r0
 8000f10:	4319      	orrs	r1, r3
 8000f12:	428a      	cmp	r2, r1
 8000f14:	d900      	bls.n	8000f18 <__aeabi_ddiv+0x1f0>
 8000f16:	e16c      	b.n	80011f2 <__aeabi_ddiv+0x4ca>
 8000f18:	1a88      	subs	r0, r1, r2
 8000f1a:	4649      	mov	r1, r9
 8000f1c:	f7ff f98a 	bl	8000234 <__aeabi_uidivmod>
 8000f20:	9a01      	ldr	r2, [sp, #4]
 8000f22:	0436      	lsls	r6, r6, #16
 8000f24:	4342      	muls	r2, r0
 8000f26:	0409      	lsls	r1, r1, #16
 8000f28:	0c36      	lsrs	r6, r6, #16
 8000f2a:	0003      	movs	r3, r0
 8000f2c:	430e      	orrs	r6, r1
 8000f2e:	42b2      	cmp	r2, r6
 8000f30:	d900      	bls.n	8000f34 <__aeabi_ddiv+0x20c>
 8000f32:	e153      	b.n	80011dc <__aeabi_ddiv+0x4b4>
 8000f34:	9803      	ldr	r0, [sp, #12]
 8000f36:	1ab6      	subs	r6, r6, r2
 8000f38:	0002      	movs	r2, r0
 8000f3a:	042d      	lsls	r5, r5, #16
 8000f3c:	431d      	orrs	r5, r3
 8000f3e:	9f02      	ldr	r7, [sp, #8]
 8000f40:	042b      	lsls	r3, r5, #16
 8000f42:	0c1b      	lsrs	r3, r3, #16
 8000f44:	435a      	muls	r2, r3
 8000f46:	437b      	muls	r3, r7
 8000f48:	469c      	mov	ip, r3
 8000f4a:	0c29      	lsrs	r1, r5, #16
 8000f4c:	4348      	muls	r0, r1
 8000f4e:	0c13      	lsrs	r3, r2, #16
 8000f50:	4484      	add	ip, r0
 8000f52:	4463      	add	r3, ip
 8000f54:	4379      	muls	r1, r7
 8000f56:	4298      	cmp	r0, r3
 8000f58:	d903      	bls.n	8000f62 <__aeabi_ddiv+0x23a>
 8000f5a:	2080      	movs	r0, #128	; 0x80
 8000f5c:	0240      	lsls	r0, r0, #9
 8000f5e:	4684      	mov	ip, r0
 8000f60:	4461      	add	r1, ip
 8000f62:	0c18      	lsrs	r0, r3, #16
 8000f64:	0412      	lsls	r2, r2, #16
 8000f66:	041b      	lsls	r3, r3, #16
 8000f68:	0c12      	lsrs	r2, r2, #16
 8000f6a:	1840      	adds	r0, r0, r1
 8000f6c:	189b      	adds	r3, r3, r2
 8000f6e:	4286      	cmp	r6, r0
 8000f70:	d200      	bcs.n	8000f74 <__aeabi_ddiv+0x24c>
 8000f72:	e100      	b.n	8001176 <__aeabi_ddiv+0x44e>
 8000f74:	d100      	bne.n	8000f78 <__aeabi_ddiv+0x250>
 8000f76:	e0fb      	b.n	8001170 <__aeabi_ddiv+0x448>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	431d      	orrs	r5, r3
 8000f7c:	4b49      	ldr	r3, [pc, #292]	; (80010a4 <__aeabi_ddiv+0x37c>)
 8000f7e:	445b      	add	r3, fp
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	dc00      	bgt.n	8000f86 <__aeabi_ddiv+0x25e>
 8000f84:	e0aa      	b.n	80010dc <__aeabi_ddiv+0x3b4>
 8000f86:	076a      	lsls	r2, r5, #29
 8000f88:	d000      	beq.n	8000f8c <__aeabi_ddiv+0x264>
 8000f8a:	e13d      	b.n	8001208 <__aeabi_ddiv+0x4e0>
 8000f8c:	08e9      	lsrs	r1, r5, #3
 8000f8e:	4642      	mov	r2, r8
 8000f90:	01d2      	lsls	r2, r2, #7
 8000f92:	d506      	bpl.n	8000fa2 <__aeabi_ddiv+0x27a>
 8000f94:	4642      	mov	r2, r8
 8000f96:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <__aeabi_ddiv+0x380>)
 8000f98:	401a      	ands	r2, r3
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	4690      	mov	r8, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	445b      	add	r3, fp
 8000fa2:	4a42      	ldr	r2, [pc, #264]	; (80010ac <__aeabi_ddiv+0x384>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	dd00      	ble.n	8000faa <__aeabi_ddiv+0x282>
 8000fa8:	e723      	b.n	8000df2 <__aeabi_ddiv+0xca>
 8000faa:	4642      	mov	r2, r8
 8000fac:	055b      	lsls	r3, r3, #21
 8000fae:	0755      	lsls	r5, r2, #29
 8000fb0:	0252      	lsls	r2, r2, #9
 8000fb2:	430d      	orrs	r5, r1
 8000fb4:	0b12      	lsrs	r2, r2, #12
 8000fb6:	0d5b      	lsrs	r3, r3, #21
 8000fb8:	e70d      	b.n	8000dd6 <__aeabi_ddiv+0xae>
 8000fba:	4651      	mov	r1, sl
 8000fbc:	4321      	orrs	r1, r4
 8000fbe:	d100      	bne.n	8000fc2 <__aeabi_ddiv+0x29a>
 8000fc0:	e07c      	b.n	80010bc <__aeabi_ddiv+0x394>
 8000fc2:	2c00      	cmp	r4, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_ddiv+0x2a0>
 8000fc6:	e0fb      	b.n	80011c0 <__aeabi_ddiv+0x498>
 8000fc8:	0020      	movs	r0, r4
 8000fca:	f001 f995 	bl	80022f8 <__clzsi2>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	3a0b      	subs	r2, #11
 8000fd2:	231d      	movs	r3, #29
 8000fd4:	1a9b      	subs	r3, r3, r2
 8000fd6:	4652      	mov	r2, sl
 8000fd8:	0001      	movs	r1, r0
 8000fda:	40da      	lsrs	r2, r3
 8000fdc:	4653      	mov	r3, sl
 8000fde:	3908      	subs	r1, #8
 8000fe0:	408b      	lsls	r3, r1
 8000fe2:	408c      	lsls	r4, r1
 8000fe4:	0019      	movs	r1, r3
 8000fe6:	4314      	orrs	r4, r2
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <__aeabi_ddiv+0x388>)
 8000fea:	4458      	add	r0, fp
 8000fec:	469b      	mov	fp, r3
 8000fee:	4483      	add	fp, r0
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	e6d9      	b.n	8000da8 <__aeabi_ddiv+0x80>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	4323      	orrs	r3, r4
 8000ff8:	4698      	mov	r8, r3
 8000ffa:	d044      	beq.n	8001086 <__aeabi_ddiv+0x35e>
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_ddiv+0x2da>
 8001000:	e0cf      	b.n	80011a2 <__aeabi_ddiv+0x47a>
 8001002:	0020      	movs	r0, r4
 8001004:	f001 f978 	bl	80022f8 <__clzsi2>
 8001008:	0001      	movs	r1, r0
 800100a:	0002      	movs	r2, r0
 800100c:	390b      	subs	r1, #11
 800100e:	231d      	movs	r3, #29
 8001010:	1a5b      	subs	r3, r3, r1
 8001012:	4649      	mov	r1, r9
 8001014:	0010      	movs	r0, r2
 8001016:	40d9      	lsrs	r1, r3
 8001018:	3808      	subs	r0, #8
 800101a:	4084      	lsls	r4, r0
 800101c:	000b      	movs	r3, r1
 800101e:	464d      	mov	r5, r9
 8001020:	4323      	orrs	r3, r4
 8001022:	4698      	mov	r8, r3
 8001024:	4085      	lsls	r5, r0
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <__aeabi_ddiv+0x38c>)
 8001028:	1a9b      	subs	r3, r3, r2
 800102a:	469b      	mov	fp, r3
 800102c:	2300      	movs	r3, #0
 800102e:	4699      	mov	r9, r3
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	e69e      	b.n	8000d72 <__aeabi_ddiv+0x4a>
 8001034:	0002      	movs	r2, r0
 8001036:	4322      	orrs	r2, r4
 8001038:	4690      	mov	r8, r2
 800103a:	d11d      	bne.n	8001078 <__aeabi_ddiv+0x350>
 800103c:	2208      	movs	r2, #8
 800103e:	469b      	mov	fp, r3
 8001040:	2302      	movs	r3, #2
 8001042:	2500      	movs	r5, #0
 8001044:	4691      	mov	r9, r2
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	e693      	b.n	8000d72 <__aeabi_ddiv+0x4a>
 800104a:	4651      	mov	r1, sl
 800104c:	4321      	orrs	r1, r4
 800104e:	d109      	bne.n	8001064 <__aeabi_ddiv+0x33c>
 8001050:	2302      	movs	r3, #2
 8001052:	464a      	mov	r2, r9
 8001054:	431a      	orrs	r2, r3
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <__aeabi_ddiv+0x390>)
 8001058:	4691      	mov	r9, r2
 800105a:	469c      	mov	ip, r3
 800105c:	2400      	movs	r4, #0
 800105e:	2002      	movs	r0, #2
 8001060:	44e3      	add	fp, ip
 8001062:	e6a1      	b.n	8000da8 <__aeabi_ddiv+0x80>
 8001064:	2303      	movs	r3, #3
 8001066:	464a      	mov	r2, r9
 8001068:	431a      	orrs	r2, r3
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <__aeabi_ddiv+0x390>)
 800106c:	4691      	mov	r9, r2
 800106e:	469c      	mov	ip, r3
 8001070:	4651      	mov	r1, sl
 8001072:	2003      	movs	r0, #3
 8001074:	44e3      	add	fp, ip
 8001076:	e697      	b.n	8000da8 <__aeabi_ddiv+0x80>
 8001078:	220c      	movs	r2, #12
 800107a:	469b      	mov	fp, r3
 800107c:	2303      	movs	r3, #3
 800107e:	46a0      	mov	r8, r4
 8001080:	4691      	mov	r9, r2
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	e675      	b.n	8000d72 <__aeabi_ddiv+0x4a>
 8001086:	2304      	movs	r3, #4
 8001088:	4699      	mov	r9, r3
 800108a:	2300      	movs	r3, #0
 800108c:	469b      	mov	fp, r3
 800108e:	3301      	adds	r3, #1
 8001090:	2500      	movs	r5, #0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	e66d      	b.n	8000d72 <__aeabi_ddiv+0x4a>
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	000007ff 	.word	0x000007ff
 800109c:	fffffc01 	.word	0xfffffc01
 80010a0:	08007db4 	.word	0x08007db4
 80010a4:	000003ff 	.word	0x000003ff
 80010a8:	feffffff 	.word	0xfeffffff
 80010ac:	000007fe 	.word	0x000007fe
 80010b0:	000003f3 	.word	0x000003f3
 80010b4:	fffffc0d 	.word	0xfffffc0d
 80010b8:	fffff801 	.word	0xfffff801
 80010bc:	464a      	mov	r2, r9
 80010be:	2301      	movs	r3, #1
 80010c0:	431a      	orrs	r2, r3
 80010c2:	4691      	mov	r9, r2
 80010c4:	2400      	movs	r4, #0
 80010c6:	2001      	movs	r0, #1
 80010c8:	e66e      	b.n	8000da8 <__aeabi_ddiv+0x80>
 80010ca:	2300      	movs	r3, #0
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	469a      	mov	sl, r3
 80010d0:	2500      	movs	r5, #0
 80010d2:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <__aeabi_ddiv+0x5cc>)
 80010d4:	0312      	lsls	r2, r2, #12
 80010d6:	e67e      	b.n	8000dd6 <__aeabi_ddiv+0xae>
 80010d8:	2501      	movs	r5, #1
 80010da:	426d      	negs	r5, r5
 80010dc:	2201      	movs	r2, #1
 80010de:	1ad2      	subs	r2, r2, r3
 80010e0:	2a38      	cmp	r2, #56	; 0x38
 80010e2:	dd00      	ble.n	80010e6 <__aeabi_ddiv+0x3be>
 80010e4:	e674      	b.n	8000dd0 <__aeabi_ddiv+0xa8>
 80010e6:	2a1f      	cmp	r2, #31
 80010e8:	dc00      	bgt.n	80010ec <__aeabi_ddiv+0x3c4>
 80010ea:	e0bd      	b.n	8001268 <__aeabi_ddiv+0x540>
 80010ec:	211f      	movs	r1, #31
 80010ee:	4249      	negs	r1, r1
 80010f0:	1acb      	subs	r3, r1, r3
 80010f2:	4641      	mov	r1, r8
 80010f4:	40d9      	lsrs	r1, r3
 80010f6:	000b      	movs	r3, r1
 80010f8:	2a20      	cmp	r2, #32
 80010fa:	d004      	beq.n	8001106 <__aeabi_ddiv+0x3de>
 80010fc:	4641      	mov	r1, r8
 80010fe:	4a7e      	ldr	r2, [pc, #504]	; (80012f8 <__aeabi_ddiv+0x5d0>)
 8001100:	445a      	add	r2, fp
 8001102:	4091      	lsls	r1, r2
 8001104:	430d      	orrs	r5, r1
 8001106:	0029      	movs	r1, r5
 8001108:	1e4a      	subs	r2, r1, #1
 800110a:	4191      	sbcs	r1, r2
 800110c:	4319      	orrs	r1, r3
 800110e:	2307      	movs	r3, #7
 8001110:	001d      	movs	r5, r3
 8001112:	2200      	movs	r2, #0
 8001114:	400d      	ands	r5, r1
 8001116:	420b      	tst	r3, r1
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x3f4>
 800111a:	e0d0      	b.n	80012be <__aeabi_ddiv+0x596>
 800111c:	220f      	movs	r2, #15
 800111e:	2300      	movs	r3, #0
 8001120:	400a      	ands	r2, r1
 8001122:	2a04      	cmp	r2, #4
 8001124:	d100      	bne.n	8001128 <__aeabi_ddiv+0x400>
 8001126:	e0c7      	b.n	80012b8 <__aeabi_ddiv+0x590>
 8001128:	1d0a      	adds	r2, r1, #4
 800112a:	428a      	cmp	r2, r1
 800112c:	4189      	sbcs	r1, r1
 800112e:	4249      	negs	r1, r1
 8001130:	185b      	adds	r3, r3, r1
 8001132:	0011      	movs	r1, r2
 8001134:	021a      	lsls	r2, r3, #8
 8001136:	d400      	bmi.n	800113a <__aeabi_ddiv+0x412>
 8001138:	e0be      	b.n	80012b8 <__aeabi_ddiv+0x590>
 800113a:	2301      	movs	r3, #1
 800113c:	2200      	movs	r2, #0
 800113e:	2500      	movs	r5, #0
 8001140:	e649      	b.n	8000dd6 <__aeabi_ddiv+0xae>
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	4643      	mov	r3, r8
 8001146:	0312      	lsls	r2, r2, #12
 8001148:	4213      	tst	r3, r2
 800114a:	d008      	beq.n	800115e <__aeabi_ddiv+0x436>
 800114c:	4214      	tst	r4, r2
 800114e:	d106      	bne.n	800115e <__aeabi_ddiv+0x436>
 8001150:	4322      	orrs	r2, r4
 8001152:	0312      	lsls	r2, r2, #12
 8001154:	46ba      	mov	sl, r7
 8001156:	000d      	movs	r5, r1
 8001158:	4b66      	ldr	r3, [pc, #408]	; (80012f4 <__aeabi_ddiv+0x5cc>)
 800115a:	0b12      	lsrs	r2, r2, #12
 800115c:	e63b      	b.n	8000dd6 <__aeabi_ddiv+0xae>
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	4643      	mov	r3, r8
 8001162:	0312      	lsls	r2, r2, #12
 8001164:	431a      	orrs	r2, r3
 8001166:	0312      	lsls	r2, r2, #12
 8001168:	46b2      	mov	sl, r6
 800116a:	4b62      	ldr	r3, [pc, #392]	; (80012f4 <__aeabi_ddiv+0x5cc>)
 800116c:	0b12      	lsrs	r2, r2, #12
 800116e:	e632      	b.n	8000dd6 <__aeabi_ddiv+0xae>
 8001170:	2b00      	cmp	r3, #0
 8001172:	d100      	bne.n	8001176 <__aeabi_ddiv+0x44e>
 8001174:	e702      	b.n	8000f7c <__aeabi_ddiv+0x254>
 8001176:	19a6      	adds	r6, r4, r6
 8001178:	1e6a      	subs	r2, r5, #1
 800117a:	42a6      	cmp	r6, r4
 800117c:	d200      	bcs.n	8001180 <__aeabi_ddiv+0x458>
 800117e:	e089      	b.n	8001294 <__aeabi_ddiv+0x56c>
 8001180:	4286      	cmp	r6, r0
 8001182:	d200      	bcs.n	8001186 <__aeabi_ddiv+0x45e>
 8001184:	e09f      	b.n	80012c6 <__aeabi_ddiv+0x59e>
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x462>
 8001188:	e0af      	b.n	80012ea <__aeabi_ddiv+0x5c2>
 800118a:	0015      	movs	r5, r2
 800118c:	e6f4      	b.n	8000f78 <__aeabi_ddiv+0x250>
 800118e:	42a9      	cmp	r1, r5
 8001190:	d900      	bls.n	8001194 <__aeabi_ddiv+0x46c>
 8001192:	e63c      	b.n	8000e0e <__aeabi_ddiv+0xe6>
 8001194:	4643      	mov	r3, r8
 8001196:	07de      	lsls	r6, r3, #31
 8001198:	0858      	lsrs	r0, r3, #1
 800119a:	086b      	lsrs	r3, r5, #1
 800119c:	431e      	orrs	r6, r3
 800119e:	07ed      	lsls	r5, r5, #31
 80011a0:	e63c      	b.n	8000e1c <__aeabi_ddiv+0xf4>
 80011a2:	f001 f8a9 	bl	80022f8 <__clzsi2>
 80011a6:	0001      	movs	r1, r0
 80011a8:	0002      	movs	r2, r0
 80011aa:	3115      	adds	r1, #21
 80011ac:	3220      	adds	r2, #32
 80011ae:	291c      	cmp	r1, #28
 80011b0:	dc00      	bgt.n	80011b4 <__aeabi_ddiv+0x48c>
 80011b2:	e72c      	b.n	800100e <__aeabi_ddiv+0x2e6>
 80011b4:	464b      	mov	r3, r9
 80011b6:	3808      	subs	r0, #8
 80011b8:	4083      	lsls	r3, r0
 80011ba:	2500      	movs	r5, #0
 80011bc:	4698      	mov	r8, r3
 80011be:	e732      	b.n	8001026 <__aeabi_ddiv+0x2fe>
 80011c0:	f001 f89a 	bl	80022f8 <__clzsi2>
 80011c4:	0003      	movs	r3, r0
 80011c6:	001a      	movs	r2, r3
 80011c8:	3215      	adds	r2, #21
 80011ca:	3020      	adds	r0, #32
 80011cc:	2a1c      	cmp	r2, #28
 80011ce:	dc00      	bgt.n	80011d2 <__aeabi_ddiv+0x4aa>
 80011d0:	e6ff      	b.n	8000fd2 <__aeabi_ddiv+0x2aa>
 80011d2:	4654      	mov	r4, sl
 80011d4:	3b08      	subs	r3, #8
 80011d6:	2100      	movs	r1, #0
 80011d8:	409c      	lsls	r4, r3
 80011da:	e705      	b.n	8000fe8 <__aeabi_ddiv+0x2c0>
 80011dc:	1936      	adds	r6, r6, r4
 80011de:	3b01      	subs	r3, #1
 80011e0:	42b4      	cmp	r4, r6
 80011e2:	d900      	bls.n	80011e6 <__aeabi_ddiv+0x4be>
 80011e4:	e6a6      	b.n	8000f34 <__aeabi_ddiv+0x20c>
 80011e6:	42b2      	cmp	r2, r6
 80011e8:	d800      	bhi.n	80011ec <__aeabi_ddiv+0x4c4>
 80011ea:	e6a3      	b.n	8000f34 <__aeabi_ddiv+0x20c>
 80011ec:	1e83      	subs	r3, r0, #2
 80011ee:	1936      	adds	r6, r6, r4
 80011f0:	e6a0      	b.n	8000f34 <__aeabi_ddiv+0x20c>
 80011f2:	1909      	adds	r1, r1, r4
 80011f4:	3d01      	subs	r5, #1
 80011f6:	428c      	cmp	r4, r1
 80011f8:	d900      	bls.n	80011fc <__aeabi_ddiv+0x4d4>
 80011fa:	e68d      	b.n	8000f18 <__aeabi_ddiv+0x1f0>
 80011fc:	428a      	cmp	r2, r1
 80011fe:	d800      	bhi.n	8001202 <__aeabi_ddiv+0x4da>
 8001200:	e68a      	b.n	8000f18 <__aeabi_ddiv+0x1f0>
 8001202:	1e85      	subs	r5, r0, #2
 8001204:	1909      	adds	r1, r1, r4
 8001206:	e687      	b.n	8000f18 <__aeabi_ddiv+0x1f0>
 8001208:	220f      	movs	r2, #15
 800120a:	402a      	ands	r2, r5
 800120c:	2a04      	cmp	r2, #4
 800120e:	d100      	bne.n	8001212 <__aeabi_ddiv+0x4ea>
 8001210:	e6bc      	b.n	8000f8c <__aeabi_ddiv+0x264>
 8001212:	1d29      	adds	r1, r5, #4
 8001214:	42a9      	cmp	r1, r5
 8001216:	41ad      	sbcs	r5, r5
 8001218:	426d      	negs	r5, r5
 800121a:	08c9      	lsrs	r1, r1, #3
 800121c:	44a8      	add	r8, r5
 800121e:	e6b6      	b.n	8000f8e <__aeabi_ddiv+0x266>
 8001220:	42af      	cmp	r7, r5
 8001222:	d900      	bls.n	8001226 <__aeabi_ddiv+0x4fe>
 8001224:	e662      	b.n	8000eec <__aeabi_ddiv+0x1c4>
 8001226:	4281      	cmp	r1, r0
 8001228:	d804      	bhi.n	8001234 <__aeabi_ddiv+0x50c>
 800122a:	d000      	beq.n	800122e <__aeabi_ddiv+0x506>
 800122c:	e65e      	b.n	8000eec <__aeabi_ddiv+0x1c4>
 800122e:	42ae      	cmp	r6, r5
 8001230:	d800      	bhi.n	8001234 <__aeabi_ddiv+0x50c>
 8001232:	e65b      	b.n	8000eec <__aeabi_ddiv+0x1c4>
 8001234:	2302      	movs	r3, #2
 8001236:	425b      	negs	r3, r3
 8001238:	469c      	mov	ip, r3
 800123a:	9b00      	ldr	r3, [sp, #0]
 800123c:	44e0      	add	r8, ip
 800123e:	469c      	mov	ip, r3
 8001240:	4465      	add	r5, ip
 8001242:	429d      	cmp	r5, r3
 8001244:	419b      	sbcs	r3, r3
 8001246:	425b      	negs	r3, r3
 8001248:	191b      	adds	r3, r3, r4
 800124a:	18c0      	adds	r0, r0, r3
 800124c:	e64f      	b.n	8000eee <__aeabi_ddiv+0x1c6>
 800124e:	42b2      	cmp	r2, r6
 8001250:	d800      	bhi.n	8001254 <__aeabi_ddiv+0x52c>
 8001252:	e612      	b.n	8000e7a <__aeabi_ddiv+0x152>
 8001254:	1e83      	subs	r3, r0, #2
 8001256:	1936      	adds	r6, r6, r4
 8001258:	e60f      	b.n	8000e7a <__aeabi_ddiv+0x152>
 800125a:	428a      	cmp	r2, r1
 800125c:	d800      	bhi.n	8001260 <__aeabi_ddiv+0x538>
 800125e:	e5fa      	b.n	8000e56 <__aeabi_ddiv+0x12e>
 8001260:	1e83      	subs	r3, r0, #2
 8001262:	4698      	mov	r8, r3
 8001264:	1909      	adds	r1, r1, r4
 8001266:	e5f6      	b.n	8000e56 <__aeabi_ddiv+0x12e>
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <__aeabi_ddiv+0x5d4>)
 800126a:	0028      	movs	r0, r5
 800126c:	445b      	add	r3, fp
 800126e:	4641      	mov	r1, r8
 8001270:	409d      	lsls	r5, r3
 8001272:	4099      	lsls	r1, r3
 8001274:	40d0      	lsrs	r0, r2
 8001276:	1e6b      	subs	r3, r5, #1
 8001278:	419d      	sbcs	r5, r3
 800127a:	4643      	mov	r3, r8
 800127c:	4301      	orrs	r1, r0
 800127e:	4329      	orrs	r1, r5
 8001280:	40d3      	lsrs	r3, r2
 8001282:	074a      	lsls	r2, r1, #29
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x560>
 8001286:	e755      	b.n	8001134 <__aeabi_ddiv+0x40c>
 8001288:	220f      	movs	r2, #15
 800128a:	400a      	ands	r2, r1
 800128c:	2a04      	cmp	r2, #4
 800128e:	d000      	beq.n	8001292 <__aeabi_ddiv+0x56a>
 8001290:	e74a      	b.n	8001128 <__aeabi_ddiv+0x400>
 8001292:	e74f      	b.n	8001134 <__aeabi_ddiv+0x40c>
 8001294:	0015      	movs	r5, r2
 8001296:	4286      	cmp	r6, r0
 8001298:	d000      	beq.n	800129c <__aeabi_ddiv+0x574>
 800129a:	e66d      	b.n	8000f78 <__aeabi_ddiv+0x250>
 800129c:	9a00      	ldr	r2, [sp, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d000      	beq.n	80012a4 <__aeabi_ddiv+0x57c>
 80012a2:	e669      	b.n	8000f78 <__aeabi_ddiv+0x250>
 80012a4:	e66a      	b.n	8000f7c <__aeabi_ddiv+0x254>
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <__aeabi_ddiv+0x5d8>)
 80012a8:	445b      	add	r3, fp
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	dc00      	bgt.n	80012b0 <__aeabi_ddiv+0x588>
 80012ae:	e713      	b.n	80010d8 <__aeabi_ddiv+0x3b0>
 80012b0:	2501      	movs	r5, #1
 80012b2:	2100      	movs	r1, #0
 80012b4:	44a8      	add	r8, r5
 80012b6:	e66a      	b.n	8000f8e <__aeabi_ddiv+0x266>
 80012b8:	075d      	lsls	r5, r3, #29
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	0b1a      	lsrs	r2, r3, #12
 80012be:	08c9      	lsrs	r1, r1, #3
 80012c0:	2300      	movs	r3, #0
 80012c2:	430d      	orrs	r5, r1
 80012c4:	e587      	b.n	8000dd6 <__aeabi_ddiv+0xae>
 80012c6:	9900      	ldr	r1, [sp, #0]
 80012c8:	3d02      	subs	r5, #2
 80012ca:	004a      	lsls	r2, r1, #1
 80012cc:	428a      	cmp	r2, r1
 80012ce:	41bf      	sbcs	r7, r7
 80012d0:	427f      	negs	r7, r7
 80012d2:	193f      	adds	r7, r7, r4
 80012d4:	19f6      	adds	r6, r6, r7
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	e7dd      	b.n	8001296 <__aeabi_ddiv+0x56e>
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	4643      	mov	r3, r8
 80012de:	0312      	lsls	r2, r2, #12
 80012e0:	431a      	orrs	r2, r3
 80012e2:	0312      	lsls	r2, r2, #12
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <__aeabi_ddiv+0x5cc>)
 80012e6:	0b12      	lsrs	r2, r2, #12
 80012e8:	e575      	b.n	8000dd6 <__aeabi_ddiv+0xae>
 80012ea:	9900      	ldr	r1, [sp, #0]
 80012ec:	4299      	cmp	r1, r3
 80012ee:	d3ea      	bcc.n	80012c6 <__aeabi_ddiv+0x59e>
 80012f0:	0015      	movs	r5, r2
 80012f2:	e7d3      	b.n	800129c <__aeabi_ddiv+0x574>
 80012f4:	000007ff 	.word	0x000007ff
 80012f8:	0000043e 	.word	0x0000043e
 80012fc:	0000041e 	.word	0x0000041e
 8001300:	000003ff 	.word	0x000003ff

08001304 <__eqdf2>:
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	464e      	mov	r6, r9
 8001308:	4645      	mov	r5, r8
 800130a:	46de      	mov	lr, fp
 800130c:	4657      	mov	r7, sl
 800130e:	4690      	mov	r8, r2
 8001310:	b5e0      	push	{r5, r6, r7, lr}
 8001312:	0017      	movs	r7, r2
 8001314:	031a      	lsls	r2, r3, #12
 8001316:	0b12      	lsrs	r2, r2, #12
 8001318:	0005      	movs	r5, r0
 800131a:	4684      	mov	ip, r0
 800131c:	4819      	ldr	r0, [pc, #100]	; (8001384 <__eqdf2+0x80>)
 800131e:	030e      	lsls	r6, r1, #12
 8001320:	004c      	lsls	r4, r1, #1
 8001322:	4691      	mov	r9, r2
 8001324:	005a      	lsls	r2, r3, #1
 8001326:	0fdb      	lsrs	r3, r3, #31
 8001328:	469b      	mov	fp, r3
 800132a:	0b36      	lsrs	r6, r6, #12
 800132c:	0d64      	lsrs	r4, r4, #21
 800132e:	0fc9      	lsrs	r1, r1, #31
 8001330:	0d52      	lsrs	r2, r2, #21
 8001332:	4284      	cmp	r4, r0
 8001334:	d019      	beq.n	800136a <__eqdf2+0x66>
 8001336:	4282      	cmp	r2, r0
 8001338:	d010      	beq.n	800135c <__eqdf2+0x58>
 800133a:	2001      	movs	r0, #1
 800133c:	4294      	cmp	r4, r2
 800133e:	d10e      	bne.n	800135e <__eqdf2+0x5a>
 8001340:	454e      	cmp	r6, r9
 8001342:	d10c      	bne.n	800135e <__eqdf2+0x5a>
 8001344:	2001      	movs	r0, #1
 8001346:	45c4      	cmp	ip, r8
 8001348:	d109      	bne.n	800135e <__eqdf2+0x5a>
 800134a:	4559      	cmp	r1, fp
 800134c:	d017      	beq.n	800137e <__eqdf2+0x7a>
 800134e:	2c00      	cmp	r4, #0
 8001350:	d105      	bne.n	800135e <__eqdf2+0x5a>
 8001352:	0030      	movs	r0, r6
 8001354:	4328      	orrs	r0, r5
 8001356:	1e43      	subs	r3, r0, #1
 8001358:	4198      	sbcs	r0, r3
 800135a:	e000      	b.n	800135e <__eqdf2+0x5a>
 800135c:	2001      	movs	r0, #1
 800135e:	bcf0      	pop	{r4, r5, r6, r7}
 8001360:	46bb      	mov	fp, r7
 8001362:	46b2      	mov	sl, r6
 8001364:	46a9      	mov	r9, r5
 8001366:	46a0      	mov	r8, r4
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136a:	0033      	movs	r3, r6
 800136c:	2001      	movs	r0, #1
 800136e:	432b      	orrs	r3, r5
 8001370:	d1f5      	bne.n	800135e <__eqdf2+0x5a>
 8001372:	42a2      	cmp	r2, r4
 8001374:	d1f3      	bne.n	800135e <__eqdf2+0x5a>
 8001376:	464b      	mov	r3, r9
 8001378:	433b      	orrs	r3, r7
 800137a:	d1f0      	bne.n	800135e <__eqdf2+0x5a>
 800137c:	e7e2      	b.n	8001344 <__eqdf2+0x40>
 800137e:	2000      	movs	r0, #0
 8001380:	e7ed      	b.n	800135e <__eqdf2+0x5a>
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	000007ff 	.word	0x000007ff

08001388 <__gedf2>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	4647      	mov	r7, r8
 800138c:	46ce      	mov	lr, r9
 800138e:	0004      	movs	r4, r0
 8001390:	0018      	movs	r0, r3
 8001392:	0016      	movs	r6, r2
 8001394:	031b      	lsls	r3, r3, #12
 8001396:	0b1b      	lsrs	r3, r3, #12
 8001398:	4d2d      	ldr	r5, [pc, #180]	; (8001450 <__gedf2+0xc8>)
 800139a:	004a      	lsls	r2, r1, #1
 800139c:	4699      	mov	r9, r3
 800139e:	b580      	push	{r7, lr}
 80013a0:	0043      	lsls	r3, r0, #1
 80013a2:	030f      	lsls	r7, r1, #12
 80013a4:	46a4      	mov	ip, r4
 80013a6:	46b0      	mov	r8, r6
 80013a8:	0b3f      	lsrs	r7, r7, #12
 80013aa:	0d52      	lsrs	r2, r2, #21
 80013ac:	0fc9      	lsrs	r1, r1, #31
 80013ae:	0d5b      	lsrs	r3, r3, #21
 80013b0:	0fc0      	lsrs	r0, r0, #31
 80013b2:	42aa      	cmp	r2, r5
 80013b4:	d021      	beq.n	80013fa <__gedf2+0x72>
 80013b6:	42ab      	cmp	r3, r5
 80013b8:	d013      	beq.n	80013e2 <__gedf2+0x5a>
 80013ba:	2a00      	cmp	r2, #0
 80013bc:	d122      	bne.n	8001404 <__gedf2+0x7c>
 80013be:	433c      	orrs	r4, r7
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <__gedf2+0x42>
 80013c4:	464d      	mov	r5, r9
 80013c6:	432e      	orrs	r6, r5
 80013c8:	d022      	beq.n	8001410 <__gedf2+0x88>
 80013ca:	2c00      	cmp	r4, #0
 80013cc:	d010      	beq.n	80013f0 <__gedf2+0x68>
 80013ce:	4281      	cmp	r1, r0
 80013d0:	d022      	beq.n	8001418 <__gedf2+0x90>
 80013d2:	2002      	movs	r0, #2
 80013d4:	3901      	subs	r1, #1
 80013d6:	4008      	ands	r0, r1
 80013d8:	3801      	subs	r0, #1
 80013da:	bcc0      	pop	{r6, r7}
 80013dc:	46b9      	mov	r9, r7
 80013de:	46b0      	mov	r8, r6
 80013e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013e2:	464d      	mov	r5, r9
 80013e4:	432e      	orrs	r6, r5
 80013e6:	d129      	bne.n	800143c <__gedf2+0xb4>
 80013e8:	2a00      	cmp	r2, #0
 80013ea:	d1f0      	bne.n	80013ce <__gedf2+0x46>
 80013ec:	433c      	orrs	r4, r7
 80013ee:	d1ee      	bne.n	80013ce <__gedf2+0x46>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d1f2      	bne.n	80013da <__gedf2+0x52>
 80013f4:	2001      	movs	r0, #1
 80013f6:	4240      	negs	r0, r0
 80013f8:	e7ef      	b.n	80013da <__gedf2+0x52>
 80013fa:	003d      	movs	r5, r7
 80013fc:	4325      	orrs	r5, r4
 80013fe:	d11d      	bne.n	800143c <__gedf2+0xb4>
 8001400:	4293      	cmp	r3, r2
 8001402:	d0ee      	beq.n	80013e2 <__gedf2+0x5a>
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e2      	bne.n	80013ce <__gedf2+0x46>
 8001408:	464c      	mov	r4, r9
 800140a:	4326      	orrs	r6, r4
 800140c:	d1df      	bne.n	80013ce <__gedf2+0x46>
 800140e:	e7e0      	b.n	80013d2 <__gedf2+0x4a>
 8001410:	2000      	movs	r0, #0
 8001412:	2c00      	cmp	r4, #0
 8001414:	d0e1      	beq.n	80013da <__gedf2+0x52>
 8001416:	e7dc      	b.n	80013d2 <__gedf2+0x4a>
 8001418:	429a      	cmp	r2, r3
 800141a:	dc0a      	bgt.n	8001432 <__gedf2+0xaa>
 800141c:	dbe8      	blt.n	80013f0 <__gedf2+0x68>
 800141e:	454f      	cmp	r7, r9
 8001420:	d8d7      	bhi.n	80013d2 <__gedf2+0x4a>
 8001422:	d00e      	beq.n	8001442 <__gedf2+0xba>
 8001424:	2000      	movs	r0, #0
 8001426:	454f      	cmp	r7, r9
 8001428:	d2d7      	bcs.n	80013da <__gedf2+0x52>
 800142a:	2900      	cmp	r1, #0
 800142c:	d0e2      	beq.n	80013f4 <__gedf2+0x6c>
 800142e:	0008      	movs	r0, r1
 8001430:	e7d3      	b.n	80013da <__gedf2+0x52>
 8001432:	4243      	negs	r3, r0
 8001434:	4158      	adcs	r0, r3
 8001436:	0040      	lsls	r0, r0, #1
 8001438:	3801      	subs	r0, #1
 800143a:	e7ce      	b.n	80013da <__gedf2+0x52>
 800143c:	2002      	movs	r0, #2
 800143e:	4240      	negs	r0, r0
 8001440:	e7cb      	b.n	80013da <__gedf2+0x52>
 8001442:	45c4      	cmp	ip, r8
 8001444:	d8c5      	bhi.n	80013d2 <__gedf2+0x4a>
 8001446:	2000      	movs	r0, #0
 8001448:	45c4      	cmp	ip, r8
 800144a:	d2c6      	bcs.n	80013da <__gedf2+0x52>
 800144c:	e7ed      	b.n	800142a <__gedf2+0xa2>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	000007ff 	.word	0x000007ff

08001454 <__ledf2>:
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	4647      	mov	r7, r8
 8001458:	46ce      	mov	lr, r9
 800145a:	0004      	movs	r4, r0
 800145c:	0018      	movs	r0, r3
 800145e:	0016      	movs	r6, r2
 8001460:	031b      	lsls	r3, r3, #12
 8001462:	0b1b      	lsrs	r3, r3, #12
 8001464:	4d2c      	ldr	r5, [pc, #176]	; (8001518 <__ledf2+0xc4>)
 8001466:	004a      	lsls	r2, r1, #1
 8001468:	4699      	mov	r9, r3
 800146a:	b580      	push	{r7, lr}
 800146c:	0043      	lsls	r3, r0, #1
 800146e:	030f      	lsls	r7, r1, #12
 8001470:	46a4      	mov	ip, r4
 8001472:	46b0      	mov	r8, r6
 8001474:	0b3f      	lsrs	r7, r7, #12
 8001476:	0d52      	lsrs	r2, r2, #21
 8001478:	0fc9      	lsrs	r1, r1, #31
 800147a:	0d5b      	lsrs	r3, r3, #21
 800147c:	0fc0      	lsrs	r0, r0, #31
 800147e:	42aa      	cmp	r2, r5
 8001480:	d00d      	beq.n	800149e <__ledf2+0x4a>
 8001482:	42ab      	cmp	r3, r5
 8001484:	d010      	beq.n	80014a8 <__ledf2+0x54>
 8001486:	2a00      	cmp	r2, #0
 8001488:	d127      	bne.n	80014da <__ledf2+0x86>
 800148a:	433c      	orrs	r4, r7
 800148c:	2b00      	cmp	r3, #0
 800148e:	d111      	bne.n	80014b4 <__ledf2+0x60>
 8001490:	464d      	mov	r5, r9
 8001492:	432e      	orrs	r6, r5
 8001494:	d10e      	bne.n	80014b4 <__ledf2+0x60>
 8001496:	2000      	movs	r0, #0
 8001498:	2c00      	cmp	r4, #0
 800149a:	d015      	beq.n	80014c8 <__ledf2+0x74>
 800149c:	e00e      	b.n	80014bc <__ledf2+0x68>
 800149e:	003d      	movs	r5, r7
 80014a0:	4325      	orrs	r5, r4
 80014a2:	d110      	bne.n	80014c6 <__ledf2+0x72>
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d118      	bne.n	80014da <__ledf2+0x86>
 80014a8:	464d      	mov	r5, r9
 80014aa:	432e      	orrs	r6, r5
 80014ac:	d10b      	bne.n	80014c6 <__ledf2+0x72>
 80014ae:	2a00      	cmp	r2, #0
 80014b0:	d102      	bne.n	80014b8 <__ledf2+0x64>
 80014b2:	433c      	orrs	r4, r7
 80014b4:	2c00      	cmp	r4, #0
 80014b6:	d00b      	beq.n	80014d0 <__ledf2+0x7c>
 80014b8:	4281      	cmp	r1, r0
 80014ba:	d014      	beq.n	80014e6 <__ledf2+0x92>
 80014bc:	2002      	movs	r0, #2
 80014be:	3901      	subs	r1, #1
 80014c0:	4008      	ands	r0, r1
 80014c2:	3801      	subs	r0, #1
 80014c4:	e000      	b.n	80014c8 <__ledf2+0x74>
 80014c6:	2002      	movs	r0, #2
 80014c8:	bcc0      	pop	{r6, r7}
 80014ca:	46b9      	mov	r9, r7
 80014cc:	46b0      	mov	r8, r6
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d1f9      	bne.n	80014c8 <__ledf2+0x74>
 80014d4:	2001      	movs	r0, #1
 80014d6:	4240      	negs	r0, r0
 80014d8:	e7f6      	b.n	80014c8 <__ledf2+0x74>
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d1ec      	bne.n	80014b8 <__ledf2+0x64>
 80014de:	464c      	mov	r4, r9
 80014e0:	4326      	orrs	r6, r4
 80014e2:	d1e9      	bne.n	80014b8 <__ledf2+0x64>
 80014e4:	e7ea      	b.n	80014bc <__ledf2+0x68>
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dd04      	ble.n	80014f4 <__ledf2+0xa0>
 80014ea:	4243      	negs	r3, r0
 80014ec:	4158      	adcs	r0, r3
 80014ee:	0040      	lsls	r0, r0, #1
 80014f0:	3801      	subs	r0, #1
 80014f2:	e7e9      	b.n	80014c8 <__ledf2+0x74>
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbeb      	blt.n	80014d0 <__ledf2+0x7c>
 80014f8:	454f      	cmp	r7, r9
 80014fa:	d8df      	bhi.n	80014bc <__ledf2+0x68>
 80014fc:	d006      	beq.n	800150c <__ledf2+0xb8>
 80014fe:	2000      	movs	r0, #0
 8001500:	454f      	cmp	r7, r9
 8001502:	d2e1      	bcs.n	80014c8 <__ledf2+0x74>
 8001504:	2900      	cmp	r1, #0
 8001506:	d0e5      	beq.n	80014d4 <__ledf2+0x80>
 8001508:	0008      	movs	r0, r1
 800150a:	e7dd      	b.n	80014c8 <__ledf2+0x74>
 800150c:	45c4      	cmp	ip, r8
 800150e:	d8d5      	bhi.n	80014bc <__ledf2+0x68>
 8001510:	2000      	movs	r0, #0
 8001512:	45c4      	cmp	ip, r8
 8001514:	d2d8      	bcs.n	80014c8 <__ledf2+0x74>
 8001516:	e7f5      	b.n	8001504 <__ledf2+0xb0>
 8001518:	000007ff 	.word	0x000007ff

0800151c <__aeabi_dmul>:
 800151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151e:	4645      	mov	r5, r8
 8001520:	46de      	mov	lr, fp
 8001522:	4657      	mov	r7, sl
 8001524:	464e      	mov	r6, r9
 8001526:	b5e0      	push	{r5, r6, r7, lr}
 8001528:	001f      	movs	r7, r3
 800152a:	030b      	lsls	r3, r1, #12
 800152c:	0b1b      	lsrs	r3, r3, #12
 800152e:	469b      	mov	fp, r3
 8001530:	004d      	lsls	r5, r1, #1
 8001532:	0fcb      	lsrs	r3, r1, #31
 8001534:	0004      	movs	r4, r0
 8001536:	4691      	mov	r9, r2
 8001538:	4698      	mov	r8, r3
 800153a:	b087      	sub	sp, #28
 800153c:	0d6d      	lsrs	r5, r5, #21
 800153e:	d100      	bne.n	8001542 <__aeabi_dmul+0x26>
 8001540:	e1cd      	b.n	80018de <__aeabi_dmul+0x3c2>
 8001542:	4bce      	ldr	r3, [pc, #824]	; (800187c <__aeabi_dmul+0x360>)
 8001544:	429d      	cmp	r5, r3
 8001546:	d100      	bne.n	800154a <__aeabi_dmul+0x2e>
 8001548:	e1e9      	b.n	800191e <__aeabi_dmul+0x402>
 800154a:	465a      	mov	r2, fp
 800154c:	0f43      	lsrs	r3, r0, #29
 800154e:	00d2      	lsls	r2, r2, #3
 8001550:	4313      	orrs	r3, r2
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	0412      	lsls	r2, r2, #16
 8001556:	431a      	orrs	r2, r3
 8001558:	00c3      	lsls	r3, r0, #3
 800155a:	469a      	mov	sl, r3
 800155c:	4bc8      	ldr	r3, [pc, #800]	; (8001880 <__aeabi_dmul+0x364>)
 800155e:	4693      	mov	fp, r2
 8001560:	469c      	mov	ip, r3
 8001562:	2300      	movs	r3, #0
 8001564:	2600      	movs	r6, #0
 8001566:	4465      	add	r5, ip
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	033c      	lsls	r4, r7, #12
 800156c:	007b      	lsls	r3, r7, #1
 800156e:	4648      	mov	r0, r9
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d5b      	lsrs	r3, r3, #21
 8001574:	0fff      	lsrs	r7, r7, #31
 8001576:	2b00      	cmp	r3, #0
 8001578:	d100      	bne.n	800157c <__aeabi_dmul+0x60>
 800157a:	e189      	b.n	8001890 <__aeabi_dmul+0x374>
 800157c:	4abf      	ldr	r2, [pc, #764]	; (800187c <__aeabi_dmul+0x360>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <__aeabi_dmul+0x9a>
 8001582:	0f42      	lsrs	r2, r0, #29
 8001584:	00e4      	lsls	r4, r4, #3
 8001586:	4322      	orrs	r2, r4
 8001588:	2480      	movs	r4, #128	; 0x80
 800158a:	0424      	lsls	r4, r4, #16
 800158c:	4314      	orrs	r4, r2
 800158e:	4abc      	ldr	r2, [pc, #752]	; (8001880 <__aeabi_dmul+0x364>)
 8001590:	2100      	movs	r1, #0
 8001592:	4694      	mov	ip, r2
 8001594:	4642      	mov	r2, r8
 8001596:	4463      	add	r3, ip
 8001598:	195b      	adds	r3, r3, r5
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	9b01      	ldr	r3, [sp, #4]
 800159e:	407a      	eors	r2, r7
 80015a0:	3301      	adds	r3, #1
 80015a2:	00c0      	lsls	r0, r0, #3
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	2e0a      	cmp	r6, #10
 80015aa:	dd1c      	ble.n	80015e6 <__aeabi_dmul+0xca>
 80015ac:	003a      	movs	r2, r7
 80015ae:	2e0b      	cmp	r6, #11
 80015b0:	d05e      	beq.n	8001670 <__aeabi_dmul+0x154>
 80015b2:	4647      	mov	r7, r8
 80015b4:	e056      	b.n	8001664 <__aeabi_dmul+0x148>
 80015b6:	4649      	mov	r1, r9
 80015b8:	4bb0      	ldr	r3, [pc, #704]	; (800187c <__aeabi_dmul+0x360>)
 80015ba:	4321      	orrs	r1, r4
 80015bc:	18eb      	adds	r3, r5, r3
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d12a      	bne.n	800161a <__aeabi_dmul+0xfe>
 80015c4:	2080      	movs	r0, #128	; 0x80
 80015c6:	2202      	movs	r2, #2
 80015c8:	0100      	lsls	r0, r0, #4
 80015ca:	002b      	movs	r3, r5
 80015cc:	4684      	mov	ip, r0
 80015ce:	4316      	orrs	r6, r2
 80015d0:	4642      	mov	r2, r8
 80015d2:	4463      	add	r3, ip
 80015d4:	407a      	eors	r2, r7
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	2e0a      	cmp	r6, #10
 80015dc:	dd00      	ble.n	80015e0 <__aeabi_dmul+0xc4>
 80015de:	e231      	b.n	8001a44 <__aeabi_dmul+0x528>
 80015e0:	2000      	movs	r0, #0
 80015e2:	2400      	movs	r4, #0
 80015e4:	2102      	movs	r1, #2
 80015e6:	2e02      	cmp	r6, #2
 80015e8:	dc26      	bgt.n	8001638 <__aeabi_dmul+0x11c>
 80015ea:	3e01      	subs	r6, #1
 80015ec:	2e01      	cmp	r6, #1
 80015ee:	d852      	bhi.n	8001696 <__aeabi_dmul+0x17a>
 80015f0:	2902      	cmp	r1, #2
 80015f2:	d04c      	beq.n	800168e <__aeabi_dmul+0x172>
 80015f4:	2901      	cmp	r1, #1
 80015f6:	d000      	beq.n	80015fa <__aeabi_dmul+0xde>
 80015f8:	e118      	b.n	800182c <__aeabi_dmul+0x310>
 80015fa:	2300      	movs	r3, #0
 80015fc:	2400      	movs	r4, #0
 80015fe:	2500      	movs	r5, #0
 8001600:	051b      	lsls	r3, r3, #20
 8001602:	4323      	orrs	r3, r4
 8001604:	07d2      	lsls	r2, r2, #31
 8001606:	4313      	orrs	r3, r2
 8001608:	0028      	movs	r0, r5
 800160a:	0019      	movs	r1, r3
 800160c:	b007      	add	sp, #28
 800160e:	bcf0      	pop	{r4, r5, r6, r7}
 8001610:	46bb      	mov	fp, r7
 8001612:	46b2      	mov	sl, r6
 8001614:	46a9      	mov	r9, r5
 8001616:	46a0      	mov	r8, r4
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	2203      	movs	r2, #3
 800161e:	0109      	lsls	r1, r1, #4
 8001620:	002b      	movs	r3, r5
 8001622:	468c      	mov	ip, r1
 8001624:	4316      	orrs	r6, r2
 8001626:	4642      	mov	r2, r8
 8001628:	4463      	add	r3, ip
 800162a:	407a      	eors	r2, r7
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	2e0a      	cmp	r6, #10
 8001632:	dd00      	ble.n	8001636 <__aeabi_dmul+0x11a>
 8001634:	e228      	b.n	8001a88 <__aeabi_dmul+0x56c>
 8001636:	2103      	movs	r1, #3
 8001638:	2501      	movs	r5, #1
 800163a:	40b5      	lsls	r5, r6
 800163c:	46ac      	mov	ip, r5
 800163e:	26a6      	movs	r6, #166	; 0xa6
 8001640:	4663      	mov	r3, ip
 8001642:	00f6      	lsls	r6, r6, #3
 8001644:	4035      	ands	r5, r6
 8001646:	4233      	tst	r3, r6
 8001648:	d10b      	bne.n	8001662 <__aeabi_dmul+0x146>
 800164a:	2690      	movs	r6, #144	; 0x90
 800164c:	00b6      	lsls	r6, r6, #2
 800164e:	4233      	tst	r3, r6
 8001650:	d118      	bne.n	8001684 <__aeabi_dmul+0x168>
 8001652:	3eb9      	subs	r6, #185	; 0xb9
 8001654:	3eff      	subs	r6, #255	; 0xff
 8001656:	421e      	tst	r6, r3
 8001658:	d01d      	beq.n	8001696 <__aeabi_dmul+0x17a>
 800165a:	46a3      	mov	fp, r4
 800165c:	4682      	mov	sl, r0
 800165e:	9100      	str	r1, [sp, #0]
 8001660:	e000      	b.n	8001664 <__aeabi_dmul+0x148>
 8001662:	0017      	movs	r7, r2
 8001664:	9900      	ldr	r1, [sp, #0]
 8001666:	003a      	movs	r2, r7
 8001668:	2902      	cmp	r1, #2
 800166a:	d010      	beq.n	800168e <__aeabi_dmul+0x172>
 800166c:	465c      	mov	r4, fp
 800166e:	4650      	mov	r0, sl
 8001670:	2903      	cmp	r1, #3
 8001672:	d1bf      	bne.n	80015f4 <__aeabi_dmul+0xd8>
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	031b      	lsls	r3, r3, #12
 8001678:	431c      	orrs	r4, r3
 800167a:	0324      	lsls	r4, r4, #12
 800167c:	0005      	movs	r5, r0
 800167e:	4b7f      	ldr	r3, [pc, #508]	; (800187c <__aeabi_dmul+0x360>)
 8001680:	0b24      	lsrs	r4, r4, #12
 8001682:	e7bd      	b.n	8001600 <__aeabi_dmul+0xe4>
 8001684:	2480      	movs	r4, #128	; 0x80
 8001686:	2200      	movs	r2, #0
 8001688:	4b7c      	ldr	r3, [pc, #496]	; (800187c <__aeabi_dmul+0x360>)
 800168a:	0324      	lsls	r4, r4, #12
 800168c:	e7b8      	b.n	8001600 <__aeabi_dmul+0xe4>
 800168e:	2400      	movs	r4, #0
 8001690:	2500      	movs	r5, #0
 8001692:	4b7a      	ldr	r3, [pc, #488]	; (800187c <__aeabi_dmul+0x360>)
 8001694:	e7b4      	b.n	8001600 <__aeabi_dmul+0xe4>
 8001696:	4653      	mov	r3, sl
 8001698:	041e      	lsls	r6, r3, #16
 800169a:	0c36      	lsrs	r6, r6, #16
 800169c:	0c1f      	lsrs	r7, r3, #16
 800169e:	0033      	movs	r3, r6
 80016a0:	0c01      	lsrs	r1, r0, #16
 80016a2:	0400      	lsls	r0, r0, #16
 80016a4:	0c00      	lsrs	r0, r0, #16
 80016a6:	4343      	muls	r3, r0
 80016a8:	4698      	mov	r8, r3
 80016aa:	0003      	movs	r3, r0
 80016ac:	437b      	muls	r3, r7
 80016ae:	4699      	mov	r9, r3
 80016b0:	0033      	movs	r3, r6
 80016b2:	434b      	muls	r3, r1
 80016b4:	469c      	mov	ip, r3
 80016b6:	4643      	mov	r3, r8
 80016b8:	000d      	movs	r5, r1
 80016ba:	0c1b      	lsrs	r3, r3, #16
 80016bc:	469a      	mov	sl, r3
 80016be:	437d      	muls	r5, r7
 80016c0:	44cc      	add	ip, r9
 80016c2:	44d4      	add	ip, sl
 80016c4:	9500      	str	r5, [sp, #0]
 80016c6:	45e1      	cmp	r9, ip
 80016c8:	d904      	bls.n	80016d4 <__aeabi_dmul+0x1b8>
 80016ca:	2380      	movs	r3, #128	; 0x80
 80016cc:	025b      	lsls	r3, r3, #9
 80016ce:	4699      	mov	r9, r3
 80016d0:	444d      	add	r5, r9
 80016d2:	9500      	str	r5, [sp, #0]
 80016d4:	4663      	mov	r3, ip
 80016d6:	0c1b      	lsrs	r3, r3, #16
 80016d8:	001d      	movs	r5, r3
 80016da:	4663      	mov	r3, ip
 80016dc:	041b      	lsls	r3, r3, #16
 80016de:	469c      	mov	ip, r3
 80016e0:	4643      	mov	r3, r8
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	0c1b      	lsrs	r3, r3, #16
 80016e6:	4698      	mov	r8, r3
 80016e8:	4663      	mov	r3, ip
 80016ea:	4443      	add	r3, r8
 80016ec:	9303      	str	r3, [sp, #12]
 80016ee:	0c23      	lsrs	r3, r4, #16
 80016f0:	4698      	mov	r8, r3
 80016f2:	0033      	movs	r3, r6
 80016f4:	0424      	lsls	r4, r4, #16
 80016f6:	0c24      	lsrs	r4, r4, #16
 80016f8:	4363      	muls	r3, r4
 80016fa:	469c      	mov	ip, r3
 80016fc:	0023      	movs	r3, r4
 80016fe:	437b      	muls	r3, r7
 8001700:	4699      	mov	r9, r3
 8001702:	4643      	mov	r3, r8
 8001704:	435e      	muls	r6, r3
 8001706:	435f      	muls	r7, r3
 8001708:	444e      	add	r6, r9
 800170a:	4663      	mov	r3, ip
 800170c:	46b2      	mov	sl, r6
 800170e:	0c1e      	lsrs	r6, r3, #16
 8001710:	4456      	add	r6, sl
 8001712:	45b1      	cmp	r9, r6
 8001714:	d903      	bls.n	800171e <__aeabi_dmul+0x202>
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	4699      	mov	r9, r3
 800171c:	444f      	add	r7, r9
 800171e:	0c33      	lsrs	r3, r6, #16
 8001720:	4699      	mov	r9, r3
 8001722:	003b      	movs	r3, r7
 8001724:	444b      	add	r3, r9
 8001726:	9305      	str	r3, [sp, #20]
 8001728:	4663      	mov	r3, ip
 800172a:	46ac      	mov	ip, r5
 800172c:	041f      	lsls	r7, r3, #16
 800172e:	0c3f      	lsrs	r7, r7, #16
 8001730:	0436      	lsls	r6, r6, #16
 8001732:	19f6      	adds	r6, r6, r7
 8001734:	44b4      	add	ip, r6
 8001736:	4663      	mov	r3, ip
 8001738:	9304      	str	r3, [sp, #16]
 800173a:	465b      	mov	r3, fp
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	469c      	mov	ip, r3
 8001740:	465b      	mov	r3, fp
 8001742:	041f      	lsls	r7, r3, #16
 8001744:	0c3f      	lsrs	r7, r7, #16
 8001746:	003b      	movs	r3, r7
 8001748:	4343      	muls	r3, r0
 800174a:	4699      	mov	r9, r3
 800174c:	4663      	mov	r3, ip
 800174e:	4343      	muls	r3, r0
 8001750:	469a      	mov	sl, r3
 8001752:	464b      	mov	r3, r9
 8001754:	4660      	mov	r0, ip
 8001756:	0c1b      	lsrs	r3, r3, #16
 8001758:	469b      	mov	fp, r3
 800175a:	4348      	muls	r0, r1
 800175c:	4379      	muls	r1, r7
 800175e:	4451      	add	r1, sl
 8001760:	4459      	add	r1, fp
 8001762:	458a      	cmp	sl, r1
 8001764:	d903      	bls.n	800176e <__aeabi_dmul+0x252>
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	025b      	lsls	r3, r3, #9
 800176a:	469a      	mov	sl, r3
 800176c:	4450      	add	r0, sl
 800176e:	0c0b      	lsrs	r3, r1, #16
 8001770:	469a      	mov	sl, r3
 8001772:	464b      	mov	r3, r9
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	4699      	mov	r9, r3
 800177a:	003b      	movs	r3, r7
 800177c:	4363      	muls	r3, r4
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	4645      	mov	r5, r8
 8001782:	4449      	add	r1, r9
 8001784:	4699      	mov	r9, r3
 8001786:	4663      	mov	r3, ip
 8001788:	435c      	muls	r4, r3
 800178a:	436b      	muls	r3, r5
 800178c:	469c      	mov	ip, r3
 800178e:	464b      	mov	r3, r9
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	4698      	mov	r8, r3
 8001794:	436f      	muls	r7, r5
 8001796:	193f      	adds	r7, r7, r4
 8001798:	4447      	add	r7, r8
 800179a:	4450      	add	r0, sl
 800179c:	42bc      	cmp	r4, r7
 800179e:	d903      	bls.n	80017a8 <__aeabi_dmul+0x28c>
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	4698      	mov	r8, r3
 80017a6:	44c4      	add	ip, r8
 80017a8:	9b04      	ldr	r3, [sp, #16]
 80017aa:	9d00      	ldr	r5, [sp, #0]
 80017ac:	4698      	mov	r8, r3
 80017ae:	4445      	add	r5, r8
 80017b0:	42b5      	cmp	r5, r6
 80017b2:	41b6      	sbcs	r6, r6
 80017b4:	4273      	negs	r3, r6
 80017b6:	4698      	mov	r8, r3
 80017b8:	464b      	mov	r3, r9
 80017ba:	041e      	lsls	r6, r3, #16
 80017bc:	9b05      	ldr	r3, [sp, #20]
 80017be:	043c      	lsls	r4, r7, #16
 80017c0:	4699      	mov	r9, r3
 80017c2:	0c36      	lsrs	r6, r6, #16
 80017c4:	19a4      	adds	r4, r4, r6
 80017c6:	444c      	add	r4, r9
 80017c8:	46a1      	mov	r9, r4
 80017ca:	4683      	mov	fp, r0
 80017cc:	186e      	adds	r6, r5, r1
 80017ce:	44c1      	add	r9, r8
 80017d0:	428e      	cmp	r6, r1
 80017d2:	4189      	sbcs	r1, r1
 80017d4:	44cb      	add	fp, r9
 80017d6:	465d      	mov	r5, fp
 80017d8:	4249      	negs	r1, r1
 80017da:	186d      	adds	r5, r5, r1
 80017dc:	429c      	cmp	r4, r3
 80017de:	41a4      	sbcs	r4, r4
 80017e0:	45c1      	cmp	r9, r8
 80017e2:	419b      	sbcs	r3, r3
 80017e4:	4583      	cmp	fp, r0
 80017e6:	4180      	sbcs	r0, r0
 80017e8:	428d      	cmp	r5, r1
 80017ea:	4189      	sbcs	r1, r1
 80017ec:	425b      	negs	r3, r3
 80017ee:	4264      	negs	r4, r4
 80017f0:	431c      	orrs	r4, r3
 80017f2:	4240      	negs	r0, r0
 80017f4:	9b03      	ldr	r3, [sp, #12]
 80017f6:	4249      	negs	r1, r1
 80017f8:	4301      	orrs	r1, r0
 80017fa:	0270      	lsls	r0, r6, #9
 80017fc:	0c3f      	lsrs	r7, r7, #16
 80017fe:	4318      	orrs	r0, r3
 8001800:	19e4      	adds	r4, r4, r7
 8001802:	1e47      	subs	r7, r0, #1
 8001804:	41b8      	sbcs	r0, r7
 8001806:	1864      	adds	r4, r4, r1
 8001808:	4464      	add	r4, ip
 800180a:	0df6      	lsrs	r6, r6, #23
 800180c:	0261      	lsls	r1, r4, #9
 800180e:	4330      	orrs	r0, r6
 8001810:	0dec      	lsrs	r4, r5, #23
 8001812:	026e      	lsls	r6, r5, #9
 8001814:	430c      	orrs	r4, r1
 8001816:	4330      	orrs	r0, r6
 8001818:	01c9      	lsls	r1, r1, #7
 800181a:	d400      	bmi.n	800181e <__aeabi_dmul+0x302>
 800181c:	e0f1      	b.n	8001a02 <__aeabi_dmul+0x4e6>
 800181e:	2101      	movs	r1, #1
 8001820:	0843      	lsrs	r3, r0, #1
 8001822:	4001      	ands	r1, r0
 8001824:	430b      	orrs	r3, r1
 8001826:	07e0      	lsls	r0, r4, #31
 8001828:	4318      	orrs	r0, r3
 800182a:	0864      	lsrs	r4, r4, #1
 800182c:	4915      	ldr	r1, [pc, #84]	; (8001884 <__aeabi_dmul+0x368>)
 800182e:	9b02      	ldr	r3, [sp, #8]
 8001830:	468c      	mov	ip, r1
 8001832:	4463      	add	r3, ip
 8001834:	2b00      	cmp	r3, #0
 8001836:	dc00      	bgt.n	800183a <__aeabi_dmul+0x31e>
 8001838:	e097      	b.n	800196a <__aeabi_dmul+0x44e>
 800183a:	0741      	lsls	r1, r0, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x336>
 800183e:	210f      	movs	r1, #15
 8001840:	4001      	ands	r1, r0
 8001842:	2904      	cmp	r1, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x336>
 8001846:	1d01      	adds	r1, r0, #4
 8001848:	4281      	cmp	r1, r0
 800184a:	4180      	sbcs	r0, r0
 800184c:	4240      	negs	r0, r0
 800184e:	1824      	adds	r4, r4, r0
 8001850:	0008      	movs	r0, r1
 8001852:	01e1      	lsls	r1, r4, #7
 8001854:	d506      	bpl.n	8001864 <__aeabi_dmul+0x348>
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	00c9      	lsls	r1, r1, #3
 800185a:	468c      	mov	ip, r1
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <__aeabi_dmul+0x36c>)
 800185e:	401c      	ands	r4, r3
 8001860:	9b02      	ldr	r3, [sp, #8]
 8001862:	4463      	add	r3, ip
 8001864:	4909      	ldr	r1, [pc, #36]	; (800188c <__aeabi_dmul+0x370>)
 8001866:	428b      	cmp	r3, r1
 8001868:	dd00      	ble.n	800186c <__aeabi_dmul+0x350>
 800186a:	e710      	b.n	800168e <__aeabi_dmul+0x172>
 800186c:	0761      	lsls	r1, r4, #29
 800186e:	08c5      	lsrs	r5, r0, #3
 8001870:	0264      	lsls	r4, r4, #9
 8001872:	055b      	lsls	r3, r3, #21
 8001874:	430d      	orrs	r5, r1
 8001876:	0b24      	lsrs	r4, r4, #12
 8001878:	0d5b      	lsrs	r3, r3, #21
 800187a:	e6c1      	b.n	8001600 <__aeabi_dmul+0xe4>
 800187c:	000007ff 	.word	0x000007ff
 8001880:	fffffc01 	.word	0xfffffc01
 8001884:	000003ff 	.word	0x000003ff
 8001888:	feffffff 	.word	0xfeffffff
 800188c:	000007fe 	.word	0x000007fe
 8001890:	464b      	mov	r3, r9
 8001892:	4323      	orrs	r3, r4
 8001894:	d059      	beq.n	800194a <__aeabi_dmul+0x42e>
 8001896:	2c00      	cmp	r4, #0
 8001898:	d100      	bne.n	800189c <__aeabi_dmul+0x380>
 800189a:	e0a3      	b.n	80019e4 <__aeabi_dmul+0x4c8>
 800189c:	0020      	movs	r0, r4
 800189e:	f000 fd2b 	bl	80022f8 <__clzsi2>
 80018a2:	0001      	movs	r1, r0
 80018a4:	0003      	movs	r3, r0
 80018a6:	390b      	subs	r1, #11
 80018a8:	221d      	movs	r2, #29
 80018aa:	1a52      	subs	r2, r2, r1
 80018ac:	4649      	mov	r1, r9
 80018ae:	0018      	movs	r0, r3
 80018b0:	40d1      	lsrs	r1, r2
 80018b2:	464a      	mov	r2, r9
 80018b4:	3808      	subs	r0, #8
 80018b6:	4082      	lsls	r2, r0
 80018b8:	4084      	lsls	r4, r0
 80018ba:	0010      	movs	r0, r2
 80018bc:	430c      	orrs	r4, r1
 80018be:	4a74      	ldr	r2, [pc, #464]	; (8001a90 <__aeabi_dmul+0x574>)
 80018c0:	1aeb      	subs	r3, r5, r3
 80018c2:	4694      	mov	ip, r2
 80018c4:	4642      	mov	r2, r8
 80018c6:	4463      	add	r3, ip
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	9b01      	ldr	r3, [sp, #4]
 80018cc:	407a      	eors	r2, r7
 80018ce:	3301      	adds	r3, #1
 80018d0:	2100      	movs	r1, #0
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2e0a      	cmp	r6, #10
 80018d8:	dd00      	ble.n	80018dc <__aeabi_dmul+0x3c0>
 80018da:	e667      	b.n	80015ac <__aeabi_dmul+0x90>
 80018dc:	e683      	b.n	80015e6 <__aeabi_dmul+0xca>
 80018de:	465b      	mov	r3, fp
 80018e0:	4303      	orrs	r3, r0
 80018e2:	469a      	mov	sl, r3
 80018e4:	d02a      	beq.n	800193c <__aeabi_dmul+0x420>
 80018e6:	465b      	mov	r3, fp
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d06d      	beq.n	80019c8 <__aeabi_dmul+0x4ac>
 80018ec:	4658      	mov	r0, fp
 80018ee:	f000 fd03 	bl	80022f8 <__clzsi2>
 80018f2:	0001      	movs	r1, r0
 80018f4:	0003      	movs	r3, r0
 80018f6:	390b      	subs	r1, #11
 80018f8:	221d      	movs	r2, #29
 80018fa:	1a52      	subs	r2, r2, r1
 80018fc:	0021      	movs	r1, r4
 80018fe:	0018      	movs	r0, r3
 8001900:	465d      	mov	r5, fp
 8001902:	40d1      	lsrs	r1, r2
 8001904:	3808      	subs	r0, #8
 8001906:	4085      	lsls	r5, r0
 8001908:	000a      	movs	r2, r1
 800190a:	4084      	lsls	r4, r0
 800190c:	432a      	orrs	r2, r5
 800190e:	4693      	mov	fp, r2
 8001910:	46a2      	mov	sl, r4
 8001912:	4d5f      	ldr	r5, [pc, #380]	; (8001a90 <__aeabi_dmul+0x574>)
 8001914:	2600      	movs	r6, #0
 8001916:	1aed      	subs	r5, r5, r3
 8001918:	2300      	movs	r3, #0
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	e625      	b.n	800156a <__aeabi_dmul+0x4e>
 800191e:	465b      	mov	r3, fp
 8001920:	4303      	orrs	r3, r0
 8001922:	469a      	mov	sl, r3
 8001924:	d105      	bne.n	8001932 <__aeabi_dmul+0x416>
 8001926:	2300      	movs	r3, #0
 8001928:	469b      	mov	fp, r3
 800192a:	3302      	adds	r3, #2
 800192c:	2608      	movs	r6, #8
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	e61b      	b.n	800156a <__aeabi_dmul+0x4e>
 8001932:	2303      	movs	r3, #3
 8001934:	4682      	mov	sl, r0
 8001936:	260c      	movs	r6, #12
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	e616      	b.n	800156a <__aeabi_dmul+0x4e>
 800193c:	2300      	movs	r3, #0
 800193e:	469b      	mov	fp, r3
 8001940:	3301      	adds	r3, #1
 8001942:	2604      	movs	r6, #4
 8001944:	2500      	movs	r5, #0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	e60f      	b.n	800156a <__aeabi_dmul+0x4e>
 800194a:	4642      	mov	r2, r8
 800194c:	3301      	adds	r3, #1
 800194e:	9501      	str	r5, [sp, #4]
 8001950:	431e      	orrs	r6, r3
 8001952:	9b01      	ldr	r3, [sp, #4]
 8001954:	407a      	eors	r2, r7
 8001956:	3301      	adds	r3, #1
 8001958:	2400      	movs	r4, #0
 800195a:	2000      	movs	r0, #0
 800195c:	2101      	movs	r1, #1
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	2e0a      	cmp	r6, #10
 8001964:	dd00      	ble.n	8001968 <__aeabi_dmul+0x44c>
 8001966:	e621      	b.n	80015ac <__aeabi_dmul+0x90>
 8001968:	e63d      	b.n	80015e6 <__aeabi_dmul+0xca>
 800196a:	2101      	movs	r1, #1
 800196c:	1ac9      	subs	r1, r1, r3
 800196e:	2938      	cmp	r1, #56	; 0x38
 8001970:	dd00      	ble.n	8001974 <__aeabi_dmul+0x458>
 8001972:	e642      	b.n	80015fa <__aeabi_dmul+0xde>
 8001974:	291f      	cmp	r1, #31
 8001976:	dd47      	ble.n	8001a08 <__aeabi_dmul+0x4ec>
 8001978:	261f      	movs	r6, #31
 800197a:	0025      	movs	r5, r4
 800197c:	4276      	negs	r6, r6
 800197e:	1af3      	subs	r3, r6, r3
 8001980:	40dd      	lsrs	r5, r3
 8001982:	002b      	movs	r3, r5
 8001984:	2920      	cmp	r1, #32
 8001986:	d005      	beq.n	8001994 <__aeabi_dmul+0x478>
 8001988:	4942      	ldr	r1, [pc, #264]	; (8001a94 <__aeabi_dmul+0x578>)
 800198a:	9d02      	ldr	r5, [sp, #8]
 800198c:	468c      	mov	ip, r1
 800198e:	4465      	add	r5, ip
 8001990:	40ac      	lsls	r4, r5
 8001992:	4320      	orrs	r0, r4
 8001994:	1e41      	subs	r1, r0, #1
 8001996:	4188      	sbcs	r0, r1
 8001998:	4318      	orrs	r0, r3
 800199a:	2307      	movs	r3, #7
 800199c:	001d      	movs	r5, r3
 800199e:	2400      	movs	r4, #0
 80019a0:	4005      	ands	r5, r0
 80019a2:	4203      	tst	r3, r0
 80019a4:	d04a      	beq.n	8001a3c <__aeabi_dmul+0x520>
 80019a6:	230f      	movs	r3, #15
 80019a8:	2400      	movs	r4, #0
 80019aa:	4003      	ands	r3, r0
 80019ac:	2b04      	cmp	r3, #4
 80019ae:	d042      	beq.n	8001a36 <__aeabi_dmul+0x51a>
 80019b0:	1d03      	adds	r3, r0, #4
 80019b2:	4283      	cmp	r3, r0
 80019b4:	4180      	sbcs	r0, r0
 80019b6:	4240      	negs	r0, r0
 80019b8:	1824      	adds	r4, r4, r0
 80019ba:	0018      	movs	r0, r3
 80019bc:	0223      	lsls	r3, r4, #8
 80019be:	d53a      	bpl.n	8001a36 <__aeabi_dmul+0x51a>
 80019c0:	2301      	movs	r3, #1
 80019c2:	2400      	movs	r4, #0
 80019c4:	2500      	movs	r5, #0
 80019c6:	e61b      	b.n	8001600 <__aeabi_dmul+0xe4>
 80019c8:	f000 fc96 	bl	80022f8 <__clzsi2>
 80019cc:	0001      	movs	r1, r0
 80019ce:	0003      	movs	r3, r0
 80019d0:	3115      	adds	r1, #21
 80019d2:	3320      	adds	r3, #32
 80019d4:	291c      	cmp	r1, #28
 80019d6:	dd8f      	ble.n	80018f8 <__aeabi_dmul+0x3dc>
 80019d8:	3808      	subs	r0, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	4084      	lsls	r4, r0
 80019de:	4692      	mov	sl, r2
 80019e0:	46a3      	mov	fp, r4
 80019e2:	e796      	b.n	8001912 <__aeabi_dmul+0x3f6>
 80019e4:	f000 fc88 	bl	80022f8 <__clzsi2>
 80019e8:	0001      	movs	r1, r0
 80019ea:	0003      	movs	r3, r0
 80019ec:	3115      	adds	r1, #21
 80019ee:	3320      	adds	r3, #32
 80019f0:	291c      	cmp	r1, #28
 80019f2:	dc00      	bgt.n	80019f6 <__aeabi_dmul+0x4da>
 80019f4:	e758      	b.n	80018a8 <__aeabi_dmul+0x38c>
 80019f6:	0002      	movs	r2, r0
 80019f8:	464c      	mov	r4, r9
 80019fa:	3a08      	subs	r2, #8
 80019fc:	2000      	movs	r0, #0
 80019fe:	4094      	lsls	r4, r2
 8001a00:	e75d      	b.n	80018be <__aeabi_dmul+0x3a2>
 8001a02:	9b01      	ldr	r3, [sp, #4]
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	e711      	b.n	800182c <__aeabi_dmul+0x310>
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <__aeabi_dmul+0x57c>)
 8001a0a:	0026      	movs	r6, r4
 8001a0c:	469c      	mov	ip, r3
 8001a0e:	0003      	movs	r3, r0
 8001a10:	9d02      	ldr	r5, [sp, #8]
 8001a12:	40cb      	lsrs	r3, r1
 8001a14:	4465      	add	r5, ip
 8001a16:	40ae      	lsls	r6, r5
 8001a18:	431e      	orrs	r6, r3
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	40ab      	lsls	r3, r5
 8001a1e:	1e58      	subs	r0, r3, #1
 8001a20:	4183      	sbcs	r3, r0
 8001a22:	0030      	movs	r0, r6
 8001a24:	4318      	orrs	r0, r3
 8001a26:	40cc      	lsrs	r4, r1
 8001a28:	0743      	lsls	r3, r0, #29
 8001a2a:	d0c7      	beq.n	80019bc <__aeabi_dmul+0x4a0>
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	4003      	ands	r3, r0
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d1bd      	bne.n	80019b0 <__aeabi_dmul+0x494>
 8001a34:	e7c2      	b.n	80019bc <__aeabi_dmul+0x4a0>
 8001a36:	0765      	lsls	r5, r4, #29
 8001a38:	0264      	lsls	r4, r4, #9
 8001a3a:	0b24      	lsrs	r4, r4, #12
 8001a3c:	08c0      	lsrs	r0, r0, #3
 8001a3e:	2300      	movs	r3, #0
 8001a40:	4305      	orrs	r5, r0
 8001a42:	e5dd      	b.n	8001600 <__aeabi_dmul+0xe4>
 8001a44:	2500      	movs	r5, #0
 8001a46:	2302      	movs	r3, #2
 8001a48:	2e0f      	cmp	r6, #15
 8001a4a:	d10c      	bne.n	8001a66 <__aeabi_dmul+0x54a>
 8001a4c:	2480      	movs	r4, #128	; 0x80
 8001a4e:	465b      	mov	r3, fp
 8001a50:	0324      	lsls	r4, r4, #12
 8001a52:	4223      	tst	r3, r4
 8001a54:	d00e      	beq.n	8001a74 <__aeabi_dmul+0x558>
 8001a56:	4221      	tst	r1, r4
 8001a58:	d10c      	bne.n	8001a74 <__aeabi_dmul+0x558>
 8001a5a:	430c      	orrs	r4, r1
 8001a5c:	0324      	lsls	r4, r4, #12
 8001a5e:	003a      	movs	r2, r7
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <__aeabi_dmul+0x580>)
 8001a62:	0b24      	lsrs	r4, r4, #12
 8001a64:	e5cc      	b.n	8001600 <__aeabi_dmul+0xe4>
 8001a66:	2e0b      	cmp	r6, #11
 8001a68:	d000      	beq.n	8001a6c <__aeabi_dmul+0x550>
 8001a6a:	e5a2      	b.n	80015b2 <__aeabi_dmul+0x96>
 8001a6c:	468b      	mov	fp, r1
 8001a6e:	46aa      	mov	sl, r5
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	e5f7      	b.n	8001664 <__aeabi_dmul+0x148>
 8001a74:	2480      	movs	r4, #128	; 0x80
 8001a76:	465b      	mov	r3, fp
 8001a78:	0324      	lsls	r4, r4, #12
 8001a7a:	431c      	orrs	r4, r3
 8001a7c:	0324      	lsls	r4, r4, #12
 8001a7e:	4642      	mov	r2, r8
 8001a80:	4655      	mov	r5, sl
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <__aeabi_dmul+0x580>)
 8001a84:	0b24      	lsrs	r4, r4, #12
 8001a86:	e5bb      	b.n	8001600 <__aeabi_dmul+0xe4>
 8001a88:	464d      	mov	r5, r9
 8001a8a:	0021      	movs	r1, r4
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e7db      	b.n	8001a48 <__aeabi_dmul+0x52c>
 8001a90:	fffffc0d 	.word	0xfffffc0d
 8001a94:	0000043e 	.word	0x0000043e
 8001a98:	0000041e 	.word	0x0000041e
 8001a9c:	000007ff 	.word	0x000007ff

08001aa0 <__aeabi_dsub>:
 8001aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aa2:	4657      	mov	r7, sl
 8001aa4:	464e      	mov	r6, r9
 8001aa6:	4645      	mov	r5, r8
 8001aa8:	46de      	mov	lr, fp
 8001aaa:	b5e0      	push	{r5, r6, r7, lr}
 8001aac:	000d      	movs	r5, r1
 8001aae:	0004      	movs	r4, r0
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	0010      	movs	r0, r2
 8001ab4:	032b      	lsls	r3, r5, #12
 8001ab6:	0a5b      	lsrs	r3, r3, #9
 8001ab8:	0f62      	lsrs	r2, r4, #29
 8001aba:	431a      	orrs	r2, r3
 8001abc:	00e3      	lsls	r3, r4, #3
 8001abe:	030c      	lsls	r4, r1, #12
 8001ac0:	0a64      	lsrs	r4, r4, #9
 8001ac2:	0f47      	lsrs	r7, r0, #29
 8001ac4:	4327      	orrs	r7, r4
 8001ac6:	4cd0      	ldr	r4, [pc, #832]	; (8001e08 <__aeabi_dsub+0x368>)
 8001ac8:	006e      	lsls	r6, r5, #1
 8001aca:	4691      	mov	r9, r2
 8001acc:	b083      	sub	sp, #12
 8001ace:	004a      	lsls	r2, r1, #1
 8001ad0:	00c0      	lsls	r0, r0, #3
 8001ad2:	4698      	mov	r8, r3
 8001ad4:	46a2      	mov	sl, r4
 8001ad6:	0d76      	lsrs	r6, r6, #21
 8001ad8:	0fed      	lsrs	r5, r5, #31
 8001ada:	0d52      	lsrs	r2, r2, #21
 8001adc:	0fc9      	lsrs	r1, r1, #31
 8001ade:	9001      	str	r0, [sp, #4]
 8001ae0:	42a2      	cmp	r2, r4
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dsub+0x46>
 8001ae4:	e0b9      	b.n	8001c5a <__aeabi_dsub+0x1ba>
 8001ae6:	2401      	movs	r4, #1
 8001ae8:	4061      	eors	r1, r4
 8001aea:	468b      	mov	fp, r1
 8001aec:	428d      	cmp	r5, r1
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dsub+0x52>
 8001af0:	e08d      	b.n	8001c0e <__aeabi_dsub+0x16e>
 8001af2:	1ab4      	subs	r4, r6, r2
 8001af4:	46a4      	mov	ip, r4
 8001af6:	2c00      	cmp	r4, #0
 8001af8:	dc00      	bgt.n	8001afc <__aeabi_dsub+0x5c>
 8001afa:	e0b7      	b.n	8001c6c <__aeabi_dsub+0x1cc>
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x62>
 8001b00:	e0cb      	b.n	8001c9a <__aeabi_dsub+0x1fa>
 8001b02:	4ac1      	ldr	r2, [pc, #772]	; (8001e08 <__aeabi_dsub+0x368>)
 8001b04:	4296      	cmp	r6, r2
 8001b06:	d100      	bne.n	8001b0a <__aeabi_dsub+0x6a>
 8001b08:	e186      	b.n	8001e18 <__aeabi_dsub+0x378>
 8001b0a:	2280      	movs	r2, #128	; 0x80
 8001b0c:	0412      	lsls	r2, r2, #16
 8001b0e:	4317      	orrs	r7, r2
 8001b10:	4662      	mov	r2, ip
 8001b12:	2a38      	cmp	r2, #56	; 0x38
 8001b14:	dd00      	ble.n	8001b18 <__aeabi_dsub+0x78>
 8001b16:	e1a4      	b.n	8001e62 <__aeabi_dsub+0x3c2>
 8001b18:	2a1f      	cmp	r2, #31
 8001b1a:	dd00      	ble.n	8001b1e <__aeabi_dsub+0x7e>
 8001b1c:	e21d      	b.n	8001f5a <__aeabi_dsub+0x4ba>
 8001b1e:	4661      	mov	r1, ip
 8001b20:	2220      	movs	r2, #32
 8001b22:	003c      	movs	r4, r7
 8001b24:	1a52      	subs	r2, r2, r1
 8001b26:	0001      	movs	r1, r0
 8001b28:	4090      	lsls	r0, r2
 8001b2a:	4094      	lsls	r4, r2
 8001b2c:	1e42      	subs	r2, r0, #1
 8001b2e:	4190      	sbcs	r0, r2
 8001b30:	4662      	mov	r2, ip
 8001b32:	46a0      	mov	r8, r4
 8001b34:	4664      	mov	r4, ip
 8001b36:	40d7      	lsrs	r7, r2
 8001b38:	464a      	mov	r2, r9
 8001b3a:	40e1      	lsrs	r1, r4
 8001b3c:	4644      	mov	r4, r8
 8001b3e:	1bd2      	subs	r2, r2, r7
 8001b40:	4691      	mov	r9, r2
 8001b42:	430c      	orrs	r4, r1
 8001b44:	4304      	orrs	r4, r0
 8001b46:	1b1c      	subs	r4, r3, r4
 8001b48:	42a3      	cmp	r3, r4
 8001b4a:	4192      	sbcs	r2, r2
 8001b4c:	464b      	mov	r3, r9
 8001b4e:	4252      	negs	r2, r2
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	469a      	mov	sl, r3
 8001b54:	4653      	mov	r3, sl
 8001b56:	021b      	lsls	r3, r3, #8
 8001b58:	d400      	bmi.n	8001b5c <__aeabi_dsub+0xbc>
 8001b5a:	e12b      	b.n	8001db4 <__aeabi_dsub+0x314>
 8001b5c:	4653      	mov	r3, sl
 8001b5e:	025a      	lsls	r2, r3, #9
 8001b60:	0a53      	lsrs	r3, r2, #9
 8001b62:	469a      	mov	sl, r3
 8001b64:	4653      	mov	r3, sl
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d100      	bne.n	8001b6c <__aeabi_dsub+0xcc>
 8001b6a:	e166      	b.n	8001e3a <__aeabi_dsub+0x39a>
 8001b6c:	4650      	mov	r0, sl
 8001b6e:	f000 fbc3 	bl	80022f8 <__clzsi2>
 8001b72:	0003      	movs	r3, r0
 8001b74:	3b08      	subs	r3, #8
 8001b76:	2220      	movs	r2, #32
 8001b78:	0020      	movs	r0, r4
 8001b7a:	1ad2      	subs	r2, r2, r3
 8001b7c:	4651      	mov	r1, sl
 8001b7e:	40d0      	lsrs	r0, r2
 8001b80:	4099      	lsls	r1, r3
 8001b82:	0002      	movs	r2, r0
 8001b84:	409c      	lsls	r4, r3
 8001b86:	430a      	orrs	r2, r1
 8001b88:	429e      	cmp	r6, r3
 8001b8a:	dd00      	ble.n	8001b8e <__aeabi_dsub+0xee>
 8001b8c:	e164      	b.n	8001e58 <__aeabi_dsub+0x3b8>
 8001b8e:	1b9b      	subs	r3, r3, r6
 8001b90:	1c59      	adds	r1, r3, #1
 8001b92:	291f      	cmp	r1, #31
 8001b94:	dd00      	ble.n	8001b98 <__aeabi_dsub+0xf8>
 8001b96:	e0fe      	b.n	8001d96 <__aeabi_dsub+0x2f6>
 8001b98:	2320      	movs	r3, #32
 8001b9a:	0010      	movs	r0, r2
 8001b9c:	0026      	movs	r6, r4
 8001b9e:	1a5b      	subs	r3, r3, r1
 8001ba0:	409c      	lsls	r4, r3
 8001ba2:	4098      	lsls	r0, r3
 8001ba4:	40ce      	lsrs	r6, r1
 8001ba6:	40ca      	lsrs	r2, r1
 8001ba8:	1e63      	subs	r3, r4, #1
 8001baa:	419c      	sbcs	r4, r3
 8001bac:	4330      	orrs	r0, r6
 8001bae:	4692      	mov	sl, r2
 8001bb0:	2600      	movs	r6, #0
 8001bb2:	4304      	orrs	r4, r0
 8001bb4:	0763      	lsls	r3, r4, #29
 8001bb6:	d009      	beq.n	8001bcc <__aeabi_dsub+0x12c>
 8001bb8:	230f      	movs	r3, #15
 8001bba:	4023      	ands	r3, r4
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d005      	beq.n	8001bcc <__aeabi_dsub+0x12c>
 8001bc0:	1d23      	adds	r3, r4, #4
 8001bc2:	42a3      	cmp	r3, r4
 8001bc4:	41a4      	sbcs	r4, r4
 8001bc6:	4264      	negs	r4, r4
 8001bc8:	44a2      	add	sl, r4
 8001bca:	001c      	movs	r4, r3
 8001bcc:	4653      	mov	r3, sl
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	d400      	bmi.n	8001bd4 <__aeabi_dsub+0x134>
 8001bd2:	e0f2      	b.n	8001dba <__aeabi_dsub+0x31a>
 8001bd4:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <__aeabi_dsub+0x368>)
 8001bd6:	3601      	adds	r6, #1
 8001bd8:	429e      	cmp	r6, r3
 8001bda:	d100      	bne.n	8001bde <__aeabi_dsub+0x13e>
 8001bdc:	e10f      	b.n	8001dfe <__aeabi_dsub+0x35e>
 8001bde:	4653      	mov	r3, sl
 8001be0:	498a      	ldr	r1, [pc, #552]	; (8001e0c <__aeabi_dsub+0x36c>)
 8001be2:	08e4      	lsrs	r4, r4, #3
 8001be4:	400b      	ands	r3, r1
 8001be6:	0019      	movs	r1, r3
 8001be8:	075b      	lsls	r3, r3, #29
 8001bea:	4323      	orrs	r3, r4
 8001bec:	0572      	lsls	r2, r6, #21
 8001bee:	024c      	lsls	r4, r1, #9
 8001bf0:	0b24      	lsrs	r4, r4, #12
 8001bf2:	0d52      	lsrs	r2, r2, #21
 8001bf4:	0512      	lsls	r2, r2, #20
 8001bf6:	4322      	orrs	r2, r4
 8001bf8:	07ed      	lsls	r5, r5, #31
 8001bfa:	432a      	orrs	r2, r5
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	0011      	movs	r1, r2
 8001c00:	b003      	add	sp, #12
 8001c02:	bcf0      	pop	{r4, r5, r6, r7}
 8001c04:	46bb      	mov	fp, r7
 8001c06:	46b2      	mov	sl, r6
 8001c08:	46a9      	mov	r9, r5
 8001c0a:	46a0      	mov	r8, r4
 8001c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0e:	1ab4      	subs	r4, r6, r2
 8001c10:	46a4      	mov	ip, r4
 8001c12:	2c00      	cmp	r4, #0
 8001c14:	dd59      	ble.n	8001cca <__aeabi_dsub+0x22a>
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x17c>
 8001c1a:	e0b0      	b.n	8001d7e <__aeabi_dsub+0x2de>
 8001c1c:	4556      	cmp	r6, sl
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_dsub+0x182>
 8001c20:	e0fa      	b.n	8001e18 <__aeabi_dsub+0x378>
 8001c22:	2280      	movs	r2, #128	; 0x80
 8001c24:	0412      	lsls	r2, r2, #16
 8001c26:	4317      	orrs	r7, r2
 8001c28:	4662      	mov	r2, ip
 8001c2a:	2a38      	cmp	r2, #56	; 0x38
 8001c2c:	dd00      	ble.n	8001c30 <__aeabi_dsub+0x190>
 8001c2e:	e0d4      	b.n	8001dda <__aeabi_dsub+0x33a>
 8001c30:	2a1f      	cmp	r2, #31
 8001c32:	dc00      	bgt.n	8001c36 <__aeabi_dsub+0x196>
 8001c34:	e1c0      	b.n	8001fb8 <__aeabi_dsub+0x518>
 8001c36:	0039      	movs	r1, r7
 8001c38:	3a20      	subs	r2, #32
 8001c3a:	40d1      	lsrs	r1, r2
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	2a20      	cmp	r2, #32
 8001c40:	d006      	beq.n	8001c50 <__aeabi_dsub+0x1b0>
 8001c42:	4664      	mov	r4, ip
 8001c44:	2240      	movs	r2, #64	; 0x40
 8001c46:	1b12      	subs	r2, r2, r4
 8001c48:	003c      	movs	r4, r7
 8001c4a:	4094      	lsls	r4, r2
 8001c4c:	4304      	orrs	r4, r0
 8001c4e:	9401      	str	r4, [sp, #4]
 8001c50:	9c01      	ldr	r4, [sp, #4]
 8001c52:	1e62      	subs	r2, r4, #1
 8001c54:	4194      	sbcs	r4, r2
 8001c56:	430c      	orrs	r4, r1
 8001c58:	e0c3      	b.n	8001de2 <__aeabi_dsub+0x342>
 8001c5a:	003c      	movs	r4, r7
 8001c5c:	4304      	orrs	r4, r0
 8001c5e:	d02b      	beq.n	8001cb8 <__aeabi_dsub+0x218>
 8001c60:	468b      	mov	fp, r1
 8001c62:	428d      	cmp	r5, r1
 8001c64:	d02e      	beq.n	8001cc4 <__aeabi_dsub+0x224>
 8001c66:	4c6a      	ldr	r4, [pc, #424]	; (8001e10 <__aeabi_dsub+0x370>)
 8001c68:	46a4      	mov	ip, r4
 8001c6a:	44b4      	add	ip, r6
 8001c6c:	4664      	mov	r4, ip
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d05f      	beq.n	8001d32 <__aeabi_dsub+0x292>
 8001c72:	1b94      	subs	r4, r2, r6
 8001c74:	46a4      	mov	ip, r4
 8001c76:	2e00      	cmp	r6, #0
 8001c78:	d000      	beq.n	8001c7c <__aeabi_dsub+0x1dc>
 8001c7a:	e120      	b.n	8001ebe <__aeabi_dsub+0x41e>
 8001c7c:	464c      	mov	r4, r9
 8001c7e:	431c      	orrs	r4, r3
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x1e4>
 8001c82:	e1c7      	b.n	8002014 <__aeabi_dsub+0x574>
 8001c84:	4661      	mov	r1, ip
 8001c86:	1e4c      	subs	r4, r1, #1
 8001c88:	2901      	cmp	r1, #1
 8001c8a:	d100      	bne.n	8001c8e <__aeabi_dsub+0x1ee>
 8001c8c:	e223      	b.n	80020d6 <__aeabi_dsub+0x636>
 8001c8e:	4d5e      	ldr	r5, [pc, #376]	; (8001e08 <__aeabi_dsub+0x368>)
 8001c90:	45ac      	cmp	ip, r5
 8001c92:	d100      	bne.n	8001c96 <__aeabi_dsub+0x1f6>
 8001c94:	e1d8      	b.n	8002048 <__aeabi_dsub+0x5a8>
 8001c96:	46a4      	mov	ip, r4
 8001c98:	e11a      	b.n	8001ed0 <__aeabi_dsub+0x430>
 8001c9a:	003a      	movs	r2, r7
 8001c9c:	4302      	orrs	r2, r0
 8001c9e:	d100      	bne.n	8001ca2 <__aeabi_dsub+0x202>
 8001ca0:	e0e4      	b.n	8001e6c <__aeabi_dsub+0x3cc>
 8001ca2:	0022      	movs	r2, r4
 8001ca4:	3a01      	subs	r2, #1
 8001ca6:	2c01      	cmp	r4, #1
 8001ca8:	d100      	bne.n	8001cac <__aeabi_dsub+0x20c>
 8001caa:	e1c3      	b.n	8002034 <__aeabi_dsub+0x594>
 8001cac:	4956      	ldr	r1, [pc, #344]	; (8001e08 <__aeabi_dsub+0x368>)
 8001cae:	428c      	cmp	r4, r1
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x214>
 8001cb2:	e0b1      	b.n	8001e18 <__aeabi_dsub+0x378>
 8001cb4:	4694      	mov	ip, r2
 8001cb6:	e72b      	b.n	8001b10 <__aeabi_dsub+0x70>
 8001cb8:	2401      	movs	r4, #1
 8001cba:	4061      	eors	r1, r4
 8001cbc:	468b      	mov	fp, r1
 8001cbe:	428d      	cmp	r5, r1
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x224>
 8001cc2:	e716      	b.n	8001af2 <__aeabi_dsub+0x52>
 8001cc4:	4952      	ldr	r1, [pc, #328]	; (8001e10 <__aeabi_dsub+0x370>)
 8001cc6:	468c      	mov	ip, r1
 8001cc8:	44b4      	add	ip, r6
 8001cca:	4664      	mov	r4, ip
 8001ccc:	2c00      	cmp	r4, #0
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_dsub+0x232>
 8001cd0:	e0d3      	b.n	8001e7a <__aeabi_dsub+0x3da>
 8001cd2:	1b91      	subs	r1, r2, r6
 8001cd4:	468c      	mov	ip, r1
 8001cd6:	2e00      	cmp	r6, #0
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x23c>
 8001cda:	e15e      	b.n	8001f9a <__aeabi_dsub+0x4fa>
 8001cdc:	494a      	ldr	r1, [pc, #296]	; (8001e08 <__aeabi_dsub+0x368>)
 8001cde:	428a      	cmp	r2, r1
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x244>
 8001ce2:	e1be      	b.n	8002062 <__aeabi_dsub+0x5c2>
 8001ce4:	2180      	movs	r1, #128	; 0x80
 8001ce6:	464c      	mov	r4, r9
 8001ce8:	0409      	lsls	r1, r1, #16
 8001cea:	430c      	orrs	r4, r1
 8001cec:	46a1      	mov	r9, r4
 8001cee:	4661      	mov	r1, ip
 8001cf0:	2938      	cmp	r1, #56	; 0x38
 8001cf2:	dd00      	ble.n	8001cf6 <__aeabi_dsub+0x256>
 8001cf4:	e1ba      	b.n	800206c <__aeabi_dsub+0x5cc>
 8001cf6:	291f      	cmp	r1, #31
 8001cf8:	dd00      	ble.n	8001cfc <__aeabi_dsub+0x25c>
 8001cfa:	e227      	b.n	800214c <__aeabi_dsub+0x6ac>
 8001cfc:	2420      	movs	r4, #32
 8001cfe:	1a64      	subs	r4, r4, r1
 8001d00:	4649      	mov	r1, r9
 8001d02:	40a1      	lsls	r1, r4
 8001d04:	001e      	movs	r6, r3
 8001d06:	4688      	mov	r8, r1
 8001d08:	4661      	mov	r1, ip
 8001d0a:	40a3      	lsls	r3, r4
 8001d0c:	40ce      	lsrs	r6, r1
 8001d0e:	4641      	mov	r1, r8
 8001d10:	1e5c      	subs	r4, r3, #1
 8001d12:	41a3      	sbcs	r3, r4
 8001d14:	4331      	orrs	r1, r6
 8001d16:	4319      	orrs	r1, r3
 8001d18:	000c      	movs	r4, r1
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	40d9      	lsrs	r1, r3
 8001d20:	187f      	adds	r7, r7, r1
 8001d22:	1824      	adds	r4, r4, r0
 8001d24:	4284      	cmp	r4, r0
 8001d26:	419b      	sbcs	r3, r3
 8001d28:	425b      	negs	r3, r3
 8001d2a:	469a      	mov	sl, r3
 8001d2c:	0016      	movs	r6, r2
 8001d2e:	44ba      	add	sl, r7
 8001d30:	e05d      	b.n	8001dee <__aeabi_dsub+0x34e>
 8001d32:	4c38      	ldr	r4, [pc, #224]	; (8001e14 <__aeabi_dsub+0x374>)
 8001d34:	1c72      	adds	r2, r6, #1
 8001d36:	4222      	tst	r2, r4
 8001d38:	d000      	beq.n	8001d3c <__aeabi_dsub+0x29c>
 8001d3a:	e0df      	b.n	8001efc <__aeabi_dsub+0x45c>
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	2e00      	cmp	r6, #0
 8001d42:	d000      	beq.n	8001d46 <__aeabi_dsub+0x2a6>
 8001d44:	e15c      	b.n	8002000 <__aeabi_dsub+0x560>
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x2ac>
 8001d4a:	e1cf      	b.n	80020ec <__aeabi_dsub+0x64c>
 8001d4c:	003a      	movs	r2, r7
 8001d4e:	4302      	orrs	r2, r0
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x2b4>
 8001d52:	e17f      	b.n	8002054 <__aeabi_dsub+0x5b4>
 8001d54:	1a1c      	subs	r4, r3, r0
 8001d56:	464a      	mov	r2, r9
 8001d58:	42a3      	cmp	r3, r4
 8001d5a:	4189      	sbcs	r1, r1
 8001d5c:	1bd2      	subs	r2, r2, r7
 8001d5e:	4249      	negs	r1, r1
 8001d60:	1a52      	subs	r2, r2, r1
 8001d62:	4692      	mov	sl, r2
 8001d64:	0212      	lsls	r2, r2, #8
 8001d66:	d400      	bmi.n	8001d6a <__aeabi_dsub+0x2ca>
 8001d68:	e20a      	b.n	8002180 <__aeabi_dsub+0x6e0>
 8001d6a:	1ac4      	subs	r4, r0, r3
 8001d6c:	42a0      	cmp	r0, r4
 8001d6e:	4180      	sbcs	r0, r0
 8001d70:	464b      	mov	r3, r9
 8001d72:	4240      	negs	r0, r0
 8001d74:	1aff      	subs	r7, r7, r3
 8001d76:	1a3b      	subs	r3, r7, r0
 8001d78:	469a      	mov	sl, r3
 8001d7a:	465d      	mov	r5, fp
 8001d7c:	e71a      	b.n	8001bb4 <__aeabi_dsub+0x114>
 8001d7e:	003a      	movs	r2, r7
 8001d80:	4302      	orrs	r2, r0
 8001d82:	d073      	beq.n	8001e6c <__aeabi_dsub+0x3cc>
 8001d84:	0022      	movs	r2, r4
 8001d86:	3a01      	subs	r2, #1
 8001d88:	2c01      	cmp	r4, #1
 8001d8a:	d100      	bne.n	8001d8e <__aeabi_dsub+0x2ee>
 8001d8c:	e0cb      	b.n	8001f26 <__aeabi_dsub+0x486>
 8001d8e:	4554      	cmp	r4, sl
 8001d90:	d042      	beq.n	8001e18 <__aeabi_dsub+0x378>
 8001d92:	4694      	mov	ip, r2
 8001d94:	e748      	b.n	8001c28 <__aeabi_dsub+0x188>
 8001d96:	0010      	movs	r0, r2
 8001d98:	3b1f      	subs	r3, #31
 8001d9a:	40d8      	lsrs	r0, r3
 8001d9c:	2920      	cmp	r1, #32
 8001d9e:	d003      	beq.n	8001da8 <__aeabi_dsub+0x308>
 8001da0:	2340      	movs	r3, #64	; 0x40
 8001da2:	1a5b      	subs	r3, r3, r1
 8001da4:	409a      	lsls	r2, r3
 8001da6:	4314      	orrs	r4, r2
 8001da8:	1e63      	subs	r3, r4, #1
 8001daa:	419c      	sbcs	r4, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	2600      	movs	r6, #0
 8001db0:	469a      	mov	sl, r3
 8001db2:	4304      	orrs	r4, r0
 8001db4:	0763      	lsls	r3, r4, #29
 8001db6:	d000      	beq.n	8001dba <__aeabi_dsub+0x31a>
 8001db8:	e6fe      	b.n	8001bb8 <__aeabi_dsub+0x118>
 8001dba:	4652      	mov	r2, sl
 8001dbc:	08e3      	lsrs	r3, r4, #3
 8001dbe:	0752      	lsls	r2, r2, #29
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	4652      	mov	r2, sl
 8001dc4:	46b4      	mov	ip, r6
 8001dc6:	08d2      	lsrs	r2, r2, #3
 8001dc8:	490f      	ldr	r1, [pc, #60]	; (8001e08 <__aeabi_dsub+0x368>)
 8001dca:	458c      	cmp	ip, r1
 8001dcc:	d02a      	beq.n	8001e24 <__aeabi_dsub+0x384>
 8001dce:	0312      	lsls	r2, r2, #12
 8001dd0:	0b14      	lsrs	r4, r2, #12
 8001dd2:	4662      	mov	r2, ip
 8001dd4:	0552      	lsls	r2, r2, #21
 8001dd6:	0d52      	lsrs	r2, r2, #21
 8001dd8:	e70c      	b.n	8001bf4 <__aeabi_dsub+0x154>
 8001dda:	003c      	movs	r4, r7
 8001ddc:	4304      	orrs	r4, r0
 8001dde:	1e62      	subs	r2, r4, #1
 8001de0:	4194      	sbcs	r4, r2
 8001de2:	18e4      	adds	r4, r4, r3
 8001de4:	429c      	cmp	r4, r3
 8001de6:	4192      	sbcs	r2, r2
 8001de8:	4252      	negs	r2, r2
 8001dea:	444a      	add	r2, r9
 8001dec:	4692      	mov	sl, r2
 8001dee:	4653      	mov	r3, sl
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	d5df      	bpl.n	8001db4 <__aeabi_dsub+0x314>
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <__aeabi_dsub+0x368>)
 8001df6:	3601      	adds	r6, #1
 8001df8:	429e      	cmp	r6, r3
 8001dfa:	d000      	beq.n	8001dfe <__aeabi_dsub+0x35e>
 8001dfc:	e0a0      	b.n	8001f40 <__aeabi_dsub+0x4a0>
 8001dfe:	0032      	movs	r2, r6
 8001e00:	2400      	movs	r4, #0
 8001e02:	2300      	movs	r3, #0
 8001e04:	e6f6      	b.n	8001bf4 <__aeabi_dsub+0x154>
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	000007ff 	.word	0x000007ff
 8001e0c:	ff7fffff 	.word	0xff7fffff
 8001e10:	fffff801 	.word	0xfffff801
 8001e14:	000007fe 	.word	0x000007fe
 8001e18:	08db      	lsrs	r3, r3, #3
 8001e1a:	464a      	mov	r2, r9
 8001e1c:	0752      	lsls	r2, r2, #29
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	464a      	mov	r2, r9
 8001e22:	08d2      	lsrs	r2, r2, #3
 8001e24:	0019      	movs	r1, r3
 8001e26:	4311      	orrs	r1, r2
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x38c>
 8001e2a:	e1b5      	b.n	8002198 <__aeabi_dsub+0x6f8>
 8001e2c:	2480      	movs	r4, #128	; 0x80
 8001e2e:	0324      	lsls	r4, r4, #12
 8001e30:	4314      	orrs	r4, r2
 8001e32:	0324      	lsls	r4, r4, #12
 8001e34:	4ad5      	ldr	r2, [pc, #852]	; (800218c <__aeabi_dsub+0x6ec>)
 8001e36:	0b24      	lsrs	r4, r4, #12
 8001e38:	e6dc      	b.n	8001bf4 <__aeabi_dsub+0x154>
 8001e3a:	0020      	movs	r0, r4
 8001e3c:	f000 fa5c 	bl	80022f8 <__clzsi2>
 8001e40:	0003      	movs	r3, r0
 8001e42:	3318      	adds	r3, #24
 8001e44:	2b1f      	cmp	r3, #31
 8001e46:	dc00      	bgt.n	8001e4a <__aeabi_dsub+0x3aa>
 8001e48:	e695      	b.n	8001b76 <__aeabi_dsub+0xd6>
 8001e4a:	0022      	movs	r2, r4
 8001e4c:	3808      	subs	r0, #8
 8001e4e:	4082      	lsls	r2, r0
 8001e50:	2400      	movs	r4, #0
 8001e52:	429e      	cmp	r6, r3
 8001e54:	dc00      	bgt.n	8001e58 <__aeabi_dsub+0x3b8>
 8001e56:	e69a      	b.n	8001b8e <__aeabi_dsub+0xee>
 8001e58:	1af6      	subs	r6, r6, r3
 8001e5a:	4bcd      	ldr	r3, [pc, #820]	; (8002190 <__aeabi_dsub+0x6f0>)
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	4692      	mov	sl, r2
 8001e60:	e6a8      	b.n	8001bb4 <__aeabi_dsub+0x114>
 8001e62:	003c      	movs	r4, r7
 8001e64:	4304      	orrs	r4, r0
 8001e66:	1e62      	subs	r2, r4, #1
 8001e68:	4194      	sbcs	r4, r2
 8001e6a:	e66c      	b.n	8001b46 <__aeabi_dsub+0xa6>
 8001e6c:	464a      	mov	r2, r9
 8001e6e:	08db      	lsrs	r3, r3, #3
 8001e70:	0752      	lsls	r2, r2, #29
 8001e72:	4313      	orrs	r3, r2
 8001e74:	464a      	mov	r2, r9
 8001e76:	08d2      	lsrs	r2, r2, #3
 8001e78:	e7a6      	b.n	8001dc8 <__aeabi_dsub+0x328>
 8001e7a:	4cc6      	ldr	r4, [pc, #792]	; (8002194 <__aeabi_dsub+0x6f4>)
 8001e7c:	1c72      	adds	r2, r6, #1
 8001e7e:	4222      	tst	r2, r4
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dsub+0x3e4>
 8001e82:	e0ac      	b.n	8001fde <__aeabi_dsub+0x53e>
 8001e84:	464a      	mov	r2, r9
 8001e86:	431a      	orrs	r2, r3
 8001e88:	2e00      	cmp	r6, #0
 8001e8a:	d000      	beq.n	8001e8e <__aeabi_dsub+0x3ee>
 8001e8c:	e105      	b.n	800209a <__aeabi_dsub+0x5fa>
 8001e8e:	2a00      	cmp	r2, #0
 8001e90:	d100      	bne.n	8001e94 <__aeabi_dsub+0x3f4>
 8001e92:	e156      	b.n	8002142 <__aeabi_dsub+0x6a2>
 8001e94:	003a      	movs	r2, r7
 8001e96:	4302      	orrs	r2, r0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x3fc>
 8001e9a:	e0db      	b.n	8002054 <__aeabi_dsub+0x5b4>
 8001e9c:	181c      	adds	r4, r3, r0
 8001e9e:	429c      	cmp	r4, r3
 8001ea0:	419b      	sbcs	r3, r3
 8001ea2:	444f      	add	r7, r9
 8001ea4:	46ba      	mov	sl, r7
 8001ea6:	425b      	negs	r3, r3
 8001ea8:	449a      	add	sl, r3
 8001eaa:	4653      	mov	r3, sl
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	d400      	bmi.n	8001eb2 <__aeabi_dsub+0x412>
 8001eb0:	e780      	b.n	8001db4 <__aeabi_dsub+0x314>
 8001eb2:	4652      	mov	r2, sl
 8001eb4:	4bb6      	ldr	r3, [pc, #728]	; (8002190 <__aeabi_dsub+0x6f0>)
 8001eb6:	2601      	movs	r6, #1
 8001eb8:	401a      	ands	r2, r3
 8001eba:	4692      	mov	sl, r2
 8001ebc:	e77a      	b.n	8001db4 <__aeabi_dsub+0x314>
 8001ebe:	4cb3      	ldr	r4, [pc, #716]	; (800218c <__aeabi_dsub+0x6ec>)
 8001ec0:	42a2      	cmp	r2, r4
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x426>
 8001ec4:	e0c0      	b.n	8002048 <__aeabi_dsub+0x5a8>
 8001ec6:	2480      	movs	r4, #128	; 0x80
 8001ec8:	464d      	mov	r5, r9
 8001eca:	0424      	lsls	r4, r4, #16
 8001ecc:	4325      	orrs	r5, r4
 8001ece:	46a9      	mov	r9, r5
 8001ed0:	4664      	mov	r4, ip
 8001ed2:	2c38      	cmp	r4, #56	; 0x38
 8001ed4:	dc53      	bgt.n	8001f7e <__aeabi_dsub+0x4de>
 8001ed6:	4661      	mov	r1, ip
 8001ed8:	2c1f      	cmp	r4, #31
 8001eda:	dd00      	ble.n	8001ede <__aeabi_dsub+0x43e>
 8001edc:	e0cd      	b.n	800207a <__aeabi_dsub+0x5da>
 8001ede:	2520      	movs	r5, #32
 8001ee0:	001e      	movs	r6, r3
 8001ee2:	1b2d      	subs	r5, r5, r4
 8001ee4:	464c      	mov	r4, r9
 8001ee6:	40ab      	lsls	r3, r5
 8001ee8:	40ac      	lsls	r4, r5
 8001eea:	40ce      	lsrs	r6, r1
 8001eec:	1e5d      	subs	r5, r3, #1
 8001eee:	41ab      	sbcs	r3, r5
 8001ef0:	4334      	orrs	r4, r6
 8001ef2:	4323      	orrs	r3, r4
 8001ef4:	464c      	mov	r4, r9
 8001ef6:	40cc      	lsrs	r4, r1
 8001ef8:	1b3f      	subs	r7, r7, r4
 8001efa:	e045      	b.n	8001f88 <__aeabi_dsub+0x4e8>
 8001efc:	464a      	mov	r2, r9
 8001efe:	1a1c      	subs	r4, r3, r0
 8001f00:	1bd1      	subs	r1, r2, r7
 8001f02:	42a3      	cmp	r3, r4
 8001f04:	4192      	sbcs	r2, r2
 8001f06:	4252      	negs	r2, r2
 8001f08:	4692      	mov	sl, r2
 8001f0a:	000a      	movs	r2, r1
 8001f0c:	4651      	mov	r1, sl
 8001f0e:	1a52      	subs	r2, r2, r1
 8001f10:	4692      	mov	sl, r2
 8001f12:	0212      	lsls	r2, r2, #8
 8001f14:	d500      	bpl.n	8001f18 <__aeabi_dsub+0x478>
 8001f16:	e083      	b.n	8002020 <__aeabi_dsub+0x580>
 8001f18:	4653      	mov	r3, sl
 8001f1a:	4323      	orrs	r3, r4
 8001f1c:	d000      	beq.n	8001f20 <__aeabi_dsub+0x480>
 8001f1e:	e621      	b.n	8001b64 <__aeabi_dsub+0xc4>
 8001f20:	2200      	movs	r2, #0
 8001f22:	2500      	movs	r5, #0
 8001f24:	e753      	b.n	8001dce <__aeabi_dsub+0x32e>
 8001f26:	181c      	adds	r4, r3, r0
 8001f28:	429c      	cmp	r4, r3
 8001f2a:	419b      	sbcs	r3, r3
 8001f2c:	444f      	add	r7, r9
 8001f2e:	46ba      	mov	sl, r7
 8001f30:	425b      	negs	r3, r3
 8001f32:	449a      	add	sl, r3
 8001f34:	4653      	mov	r3, sl
 8001f36:	2601      	movs	r6, #1
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	d400      	bmi.n	8001f3e <__aeabi_dsub+0x49e>
 8001f3c:	e73a      	b.n	8001db4 <__aeabi_dsub+0x314>
 8001f3e:	2602      	movs	r6, #2
 8001f40:	4652      	mov	r2, sl
 8001f42:	4b93      	ldr	r3, [pc, #588]	; (8002190 <__aeabi_dsub+0x6f0>)
 8001f44:	2101      	movs	r1, #1
 8001f46:	401a      	ands	r2, r3
 8001f48:	0013      	movs	r3, r2
 8001f4a:	4021      	ands	r1, r4
 8001f4c:	0862      	lsrs	r2, r4, #1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	07dc      	lsls	r4, r3, #31
 8001f52:	085b      	lsrs	r3, r3, #1
 8001f54:	469a      	mov	sl, r3
 8001f56:	4314      	orrs	r4, r2
 8001f58:	e62c      	b.n	8001bb4 <__aeabi_dsub+0x114>
 8001f5a:	0039      	movs	r1, r7
 8001f5c:	3a20      	subs	r2, #32
 8001f5e:	40d1      	lsrs	r1, r2
 8001f60:	4662      	mov	r2, ip
 8001f62:	2a20      	cmp	r2, #32
 8001f64:	d006      	beq.n	8001f74 <__aeabi_dsub+0x4d4>
 8001f66:	4664      	mov	r4, ip
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	1b12      	subs	r2, r2, r4
 8001f6c:	003c      	movs	r4, r7
 8001f6e:	4094      	lsls	r4, r2
 8001f70:	4304      	orrs	r4, r0
 8001f72:	9401      	str	r4, [sp, #4]
 8001f74:	9c01      	ldr	r4, [sp, #4]
 8001f76:	1e62      	subs	r2, r4, #1
 8001f78:	4194      	sbcs	r4, r2
 8001f7a:	430c      	orrs	r4, r1
 8001f7c:	e5e3      	b.n	8001b46 <__aeabi_dsub+0xa6>
 8001f7e:	4649      	mov	r1, r9
 8001f80:	4319      	orrs	r1, r3
 8001f82:	000b      	movs	r3, r1
 8001f84:	1e5c      	subs	r4, r3, #1
 8001f86:	41a3      	sbcs	r3, r4
 8001f88:	1ac4      	subs	r4, r0, r3
 8001f8a:	42a0      	cmp	r0, r4
 8001f8c:	419b      	sbcs	r3, r3
 8001f8e:	425b      	negs	r3, r3
 8001f90:	1afb      	subs	r3, r7, r3
 8001f92:	469a      	mov	sl, r3
 8001f94:	465d      	mov	r5, fp
 8001f96:	0016      	movs	r6, r2
 8001f98:	e5dc      	b.n	8001b54 <__aeabi_dsub+0xb4>
 8001f9a:	4649      	mov	r1, r9
 8001f9c:	4319      	orrs	r1, r3
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dsub+0x502>
 8001fa0:	e0ae      	b.n	8002100 <__aeabi_dsub+0x660>
 8001fa2:	4661      	mov	r1, ip
 8001fa4:	4664      	mov	r4, ip
 8001fa6:	3901      	subs	r1, #1
 8001fa8:	2c01      	cmp	r4, #1
 8001faa:	d100      	bne.n	8001fae <__aeabi_dsub+0x50e>
 8001fac:	e0e0      	b.n	8002170 <__aeabi_dsub+0x6d0>
 8001fae:	4c77      	ldr	r4, [pc, #476]	; (800218c <__aeabi_dsub+0x6ec>)
 8001fb0:	45a4      	cmp	ip, r4
 8001fb2:	d056      	beq.n	8002062 <__aeabi_dsub+0x5c2>
 8001fb4:	468c      	mov	ip, r1
 8001fb6:	e69a      	b.n	8001cee <__aeabi_dsub+0x24e>
 8001fb8:	4661      	mov	r1, ip
 8001fba:	2220      	movs	r2, #32
 8001fbc:	003c      	movs	r4, r7
 8001fbe:	1a52      	subs	r2, r2, r1
 8001fc0:	4094      	lsls	r4, r2
 8001fc2:	0001      	movs	r1, r0
 8001fc4:	4090      	lsls	r0, r2
 8001fc6:	46a0      	mov	r8, r4
 8001fc8:	4664      	mov	r4, ip
 8001fca:	1e42      	subs	r2, r0, #1
 8001fcc:	4190      	sbcs	r0, r2
 8001fce:	4662      	mov	r2, ip
 8001fd0:	40e1      	lsrs	r1, r4
 8001fd2:	4644      	mov	r4, r8
 8001fd4:	40d7      	lsrs	r7, r2
 8001fd6:	430c      	orrs	r4, r1
 8001fd8:	4304      	orrs	r4, r0
 8001fda:	44b9      	add	r9, r7
 8001fdc:	e701      	b.n	8001de2 <__aeabi_dsub+0x342>
 8001fde:	496b      	ldr	r1, [pc, #428]	; (800218c <__aeabi_dsub+0x6ec>)
 8001fe0:	428a      	cmp	r2, r1
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dsub+0x546>
 8001fe4:	e70c      	b.n	8001e00 <__aeabi_dsub+0x360>
 8001fe6:	1818      	adds	r0, r3, r0
 8001fe8:	4298      	cmp	r0, r3
 8001fea:	419b      	sbcs	r3, r3
 8001fec:	444f      	add	r7, r9
 8001fee:	425b      	negs	r3, r3
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	07dc      	lsls	r4, r3, #31
 8001ff4:	0840      	lsrs	r0, r0, #1
 8001ff6:	085b      	lsrs	r3, r3, #1
 8001ff8:	469a      	mov	sl, r3
 8001ffa:	0016      	movs	r6, r2
 8001ffc:	4304      	orrs	r4, r0
 8001ffe:	e6d9      	b.n	8001db4 <__aeabi_dsub+0x314>
 8002000:	2a00      	cmp	r2, #0
 8002002:	d000      	beq.n	8002006 <__aeabi_dsub+0x566>
 8002004:	e081      	b.n	800210a <__aeabi_dsub+0x66a>
 8002006:	003b      	movs	r3, r7
 8002008:	4303      	orrs	r3, r0
 800200a:	d11d      	bne.n	8002048 <__aeabi_dsub+0x5a8>
 800200c:	2280      	movs	r2, #128	; 0x80
 800200e:	2500      	movs	r5, #0
 8002010:	0312      	lsls	r2, r2, #12
 8002012:	e70b      	b.n	8001e2c <__aeabi_dsub+0x38c>
 8002014:	08c0      	lsrs	r0, r0, #3
 8002016:	077b      	lsls	r3, r7, #29
 8002018:	465d      	mov	r5, fp
 800201a:	4303      	orrs	r3, r0
 800201c:	08fa      	lsrs	r2, r7, #3
 800201e:	e6d3      	b.n	8001dc8 <__aeabi_dsub+0x328>
 8002020:	1ac4      	subs	r4, r0, r3
 8002022:	42a0      	cmp	r0, r4
 8002024:	4180      	sbcs	r0, r0
 8002026:	464b      	mov	r3, r9
 8002028:	4240      	negs	r0, r0
 800202a:	1aff      	subs	r7, r7, r3
 800202c:	1a3b      	subs	r3, r7, r0
 800202e:	469a      	mov	sl, r3
 8002030:	465d      	mov	r5, fp
 8002032:	e597      	b.n	8001b64 <__aeabi_dsub+0xc4>
 8002034:	1a1c      	subs	r4, r3, r0
 8002036:	464a      	mov	r2, r9
 8002038:	42a3      	cmp	r3, r4
 800203a:	419b      	sbcs	r3, r3
 800203c:	1bd7      	subs	r7, r2, r7
 800203e:	425b      	negs	r3, r3
 8002040:	1afb      	subs	r3, r7, r3
 8002042:	469a      	mov	sl, r3
 8002044:	2601      	movs	r6, #1
 8002046:	e585      	b.n	8001b54 <__aeabi_dsub+0xb4>
 8002048:	08c0      	lsrs	r0, r0, #3
 800204a:	077b      	lsls	r3, r7, #29
 800204c:	465d      	mov	r5, fp
 800204e:	4303      	orrs	r3, r0
 8002050:	08fa      	lsrs	r2, r7, #3
 8002052:	e6e7      	b.n	8001e24 <__aeabi_dsub+0x384>
 8002054:	464a      	mov	r2, r9
 8002056:	08db      	lsrs	r3, r3, #3
 8002058:	0752      	lsls	r2, r2, #29
 800205a:	4313      	orrs	r3, r2
 800205c:	464a      	mov	r2, r9
 800205e:	08d2      	lsrs	r2, r2, #3
 8002060:	e6b5      	b.n	8001dce <__aeabi_dsub+0x32e>
 8002062:	08c0      	lsrs	r0, r0, #3
 8002064:	077b      	lsls	r3, r7, #29
 8002066:	4303      	orrs	r3, r0
 8002068:	08fa      	lsrs	r2, r7, #3
 800206a:	e6db      	b.n	8001e24 <__aeabi_dsub+0x384>
 800206c:	4649      	mov	r1, r9
 800206e:	4319      	orrs	r1, r3
 8002070:	000b      	movs	r3, r1
 8002072:	1e59      	subs	r1, r3, #1
 8002074:	418b      	sbcs	r3, r1
 8002076:	001c      	movs	r4, r3
 8002078:	e653      	b.n	8001d22 <__aeabi_dsub+0x282>
 800207a:	464d      	mov	r5, r9
 800207c:	3c20      	subs	r4, #32
 800207e:	40e5      	lsrs	r5, r4
 8002080:	2920      	cmp	r1, #32
 8002082:	d005      	beq.n	8002090 <__aeabi_dsub+0x5f0>
 8002084:	2440      	movs	r4, #64	; 0x40
 8002086:	1a64      	subs	r4, r4, r1
 8002088:	4649      	mov	r1, r9
 800208a:	40a1      	lsls	r1, r4
 800208c:	430b      	orrs	r3, r1
 800208e:	4698      	mov	r8, r3
 8002090:	4643      	mov	r3, r8
 8002092:	1e5c      	subs	r4, r3, #1
 8002094:	41a3      	sbcs	r3, r4
 8002096:	432b      	orrs	r3, r5
 8002098:	e776      	b.n	8001f88 <__aeabi_dsub+0x4e8>
 800209a:	2a00      	cmp	r2, #0
 800209c:	d0e1      	beq.n	8002062 <__aeabi_dsub+0x5c2>
 800209e:	003a      	movs	r2, r7
 80020a0:	08db      	lsrs	r3, r3, #3
 80020a2:	4302      	orrs	r2, r0
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x608>
 80020a6:	e6b8      	b.n	8001e1a <__aeabi_dsub+0x37a>
 80020a8:	464a      	mov	r2, r9
 80020aa:	0752      	lsls	r2, r2, #29
 80020ac:	2480      	movs	r4, #128	; 0x80
 80020ae:	4313      	orrs	r3, r2
 80020b0:	464a      	mov	r2, r9
 80020b2:	0324      	lsls	r4, r4, #12
 80020b4:	08d2      	lsrs	r2, r2, #3
 80020b6:	4222      	tst	r2, r4
 80020b8:	d007      	beq.n	80020ca <__aeabi_dsub+0x62a>
 80020ba:	08fe      	lsrs	r6, r7, #3
 80020bc:	4226      	tst	r6, r4
 80020be:	d104      	bne.n	80020ca <__aeabi_dsub+0x62a>
 80020c0:	465d      	mov	r5, fp
 80020c2:	0032      	movs	r2, r6
 80020c4:	08c3      	lsrs	r3, r0, #3
 80020c6:	077f      	lsls	r7, r7, #29
 80020c8:	433b      	orrs	r3, r7
 80020ca:	0f59      	lsrs	r1, r3, #29
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	0749      	lsls	r1, r1, #29
 80020d0:	08db      	lsrs	r3, r3, #3
 80020d2:	430b      	orrs	r3, r1
 80020d4:	e6a6      	b.n	8001e24 <__aeabi_dsub+0x384>
 80020d6:	1ac4      	subs	r4, r0, r3
 80020d8:	42a0      	cmp	r0, r4
 80020da:	4180      	sbcs	r0, r0
 80020dc:	464b      	mov	r3, r9
 80020de:	4240      	negs	r0, r0
 80020e0:	1aff      	subs	r7, r7, r3
 80020e2:	1a3b      	subs	r3, r7, r0
 80020e4:	469a      	mov	sl, r3
 80020e6:	465d      	mov	r5, fp
 80020e8:	2601      	movs	r6, #1
 80020ea:	e533      	b.n	8001b54 <__aeabi_dsub+0xb4>
 80020ec:	003b      	movs	r3, r7
 80020ee:	4303      	orrs	r3, r0
 80020f0:	d100      	bne.n	80020f4 <__aeabi_dsub+0x654>
 80020f2:	e715      	b.n	8001f20 <__aeabi_dsub+0x480>
 80020f4:	08c0      	lsrs	r0, r0, #3
 80020f6:	077b      	lsls	r3, r7, #29
 80020f8:	465d      	mov	r5, fp
 80020fa:	4303      	orrs	r3, r0
 80020fc:	08fa      	lsrs	r2, r7, #3
 80020fe:	e666      	b.n	8001dce <__aeabi_dsub+0x32e>
 8002100:	08c0      	lsrs	r0, r0, #3
 8002102:	077b      	lsls	r3, r7, #29
 8002104:	4303      	orrs	r3, r0
 8002106:	08fa      	lsrs	r2, r7, #3
 8002108:	e65e      	b.n	8001dc8 <__aeabi_dsub+0x328>
 800210a:	003a      	movs	r2, r7
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	4302      	orrs	r2, r0
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x674>
 8002112:	e682      	b.n	8001e1a <__aeabi_dsub+0x37a>
 8002114:	464a      	mov	r2, r9
 8002116:	0752      	lsls	r2, r2, #29
 8002118:	2480      	movs	r4, #128	; 0x80
 800211a:	4313      	orrs	r3, r2
 800211c:	464a      	mov	r2, r9
 800211e:	0324      	lsls	r4, r4, #12
 8002120:	08d2      	lsrs	r2, r2, #3
 8002122:	4222      	tst	r2, r4
 8002124:	d007      	beq.n	8002136 <__aeabi_dsub+0x696>
 8002126:	08fe      	lsrs	r6, r7, #3
 8002128:	4226      	tst	r6, r4
 800212a:	d104      	bne.n	8002136 <__aeabi_dsub+0x696>
 800212c:	465d      	mov	r5, fp
 800212e:	0032      	movs	r2, r6
 8002130:	08c3      	lsrs	r3, r0, #3
 8002132:	077f      	lsls	r7, r7, #29
 8002134:	433b      	orrs	r3, r7
 8002136:	0f59      	lsrs	r1, r3, #29
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	08db      	lsrs	r3, r3, #3
 800213c:	0749      	lsls	r1, r1, #29
 800213e:	430b      	orrs	r3, r1
 8002140:	e670      	b.n	8001e24 <__aeabi_dsub+0x384>
 8002142:	08c0      	lsrs	r0, r0, #3
 8002144:	077b      	lsls	r3, r7, #29
 8002146:	4303      	orrs	r3, r0
 8002148:	08fa      	lsrs	r2, r7, #3
 800214a:	e640      	b.n	8001dce <__aeabi_dsub+0x32e>
 800214c:	464c      	mov	r4, r9
 800214e:	3920      	subs	r1, #32
 8002150:	40cc      	lsrs	r4, r1
 8002152:	4661      	mov	r1, ip
 8002154:	2920      	cmp	r1, #32
 8002156:	d006      	beq.n	8002166 <__aeabi_dsub+0x6c6>
 8002158:	4666      	mov	r6, ip
 800215a:	2140      	movs	r1, #64	; 0x40
 800215c:	1b89      	subs	r1, r1, r6
 800215e:	464e      	mov	r6, r9
 8002160:	408e      	lsls	r6, r1
 8002162:	4333      	orrs	r3, r6
 8002164:	4698      	mov	r8, r3
 8002166:	4643      	mov	r3, r8
 8002168:	1e59      	subs	r1, r3, #1
 800216a:	418b      	sbcs	r3, r1
 800216c:	431c      	orrs	r4, r3
 800216e:	e5d8      	b.n	8001d22 <__aeabi_dsub+0x282>
 8002170:	181c      	adds	r4, r3, r0
 8002172:	4284      	cmp	r4, r0
 8002174:	4180      	sbcs	r0, r0
 8002176:	444f      	add	r7, r9
 8002178:	46ba      	mov	sl, r7
 800217a:	4240      	negs	r0, r0
 800217c:	4482      	add	sl, r0
 800217e:	e6d9      	b.n	8001f34 <__aeabi_dsub+0x494>
 8002180:	4653      	mov	r3, sl
 8002182:	4323      	orrs	r3, r4
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x6e8>
 8002186:	e6cb      	b.n	8001f20 <__aeabi_dsub+0x480>
 8002188:	e614      	b.n	8001db4 <__aeabi_dsub+0x314>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	000007ff 	.word	0x000007ff
 8002190:	ff7fffff 	.word	0xff7fffff
 8002194:	000007fe 	.word	0x000007fe
 8002198:	2300      	movs	r3, #0
 800219a:	4a01      	ldr	r2, [pc, #4]	; (80021a0 <__aeabi_dsub+0x700>)
 800219c:	001c      	movs	r4, r3
 800219e:	e529      	b.n	8001bf4 <__aeabi_dsub+0x154>
 80021a0:	000007ff 	.word	0x000007ff

080021a4 <__aeabi_dcmpun>:
 80021a4:	b570      	push	{r4, r5, r6, lr}
 80021a6:	0005      	movs	r5, r0
 80021a8:	480c      	ldr	r0, [pc, #48]	; (80021dc <__aeabi_dcmpun+0x38>)
 80021aa:	031c      	lsls	r4, r3, #12
 80021ac:	0016      	movs	r6, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	030a      	lsls	r2, r1, #12
 80021b2:	0049      	lsls	r1, r1, #1
 80021b4:	0b12      	lsrs	r2, r2, #12
 80021b6:	0d49      	lsrs	r1, r1, #21
 80021b8:	0b24      	lsrs	r4, r4, #12
 80021ba:	0d5b      	lsrs	r3, r3, #21
 80021bc:	4281      	cmp	r1, r0
 80021be:	d008      	beq.n	80021d2 <__aeabi_dcmpun+0x2e>
 80021c0:	4a06      	ldr	r2, [pc, #24]	; (80021dc <__aeabi_dcmpun+0x38>)
 80021c2:	2000      	movs	r0, #0
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d103      	bne.n	80021d0 <__aeabi_dcmpun+0x2c>
 80021c8:	0020      	movs	r0, r4
 80021ca:	4330      	orrs	r0, r6
 80021cc:	1e43      	subs	r3, r0, #1
 80021ce:	4198      	sbcs	r0, r3
 80021d0:	bd70      	pop	{r4, r5, r6, pc}
 80021d2:	2001      	movs	r0, #1
 80021d4:	432a      	orrs	r2, r5
 80021d6:	d1fb      	bne.n	80021d0 <__aeabi_dcmpun+0x2c>
 80021d8:	e7f2      	b.n	80021c0 <__aeabi_dcmpun+0x1c>
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	000007ff 	.word	0x000007ff

080021e0 <__aeabi_d2iz>:
 80021e0:	000a      	movs	r2, r1
 80021e2:	b530      	push	{r4, r5, lr}
 80021e4:	4c13      	ldr	r4, [pc, #76]	; (8002234 <__aeabi_d2iz+0x54>)
 80021e6:	0053      	lsls	r3, r2, #1
 80021e8:	0309      	lsls	r1, r1, #12
 80021ea:	0005      	movs	r5, r0
 80021ec:	0b09      	lsrs	r1, r1, #12
 80021ee:	2000      	movs	r0, #0
 80021f0:	0d5b      	lsrs	r3, r3, #21
 80021f2:	0fd2      	lsrs	r2, r2, #31
 80021f4:	42a3      	cmp	r3, r4
 80021f6:	dd04      	ble.n	8002202 <__aeabi_d2iz+0x22>
 80021f8:	480f      	ldr	r0, [pc, #60]	; (8002238 <__aeabi_d2iz+0x58>)
 80021fa:	4283      	cmp	r3, r0
 80021fc:	dd02      	ble.n	8002204 <__aeabi_d2iz+0x24>
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <__aeabi_d2iz+0x5c>)
 8002200:	18d0      	adds	r0, r2, r3
 8002202:	bd30      	pop	{r4, r5, pc}
 8002204:	2080      	movs	r0, #128	; 0x80
 8002206:	0340      	lsls	r0, r0, #13
 8002208:	4301      	orrs	r1, r0
 800220a:	480d      	ldr	r0, [pc, #52]	; (8002240 <__aeabi_d2iz+0x60>)
 800220c:	1ac0      	subs	r0, r0, r3
 800220e:	281f      	cmp	r0, #31
 8002210:	dd08      	ble.n	8002224 <__aeabi_d2iz+0x44>
 8002212:	480c      	ldr	r0, [pc, #48]	; (8002244 <__aeabi_d2iz+0x64>)
 8002214:	1ac3      	subs	r3, r0, r3
 8002216:	40d9      	lsrs	r1, r3
 8002218:	000b      	movs	r3, r1
 800221a:	4258      	negs	r0, r3
 800221c:	2a00      	cmp	r2, #0
 800221e:	d1f0      	bne.n	8002202 <__aeabi_d2iz+0x22>
 8002220:	0018      	movs	r0, r3
 8002222:	e7ee      	b.n	8002202 <__aeabi_d2iz+0x22>
 8002224:	4c08      	ldr	r4, [pc, #32]	; (8002248 <__aeabi_d2iz+0x68>)
 8002226:	40c5      	lsrs	r5, r0
 8002228:	46a4      	mov	ip, r4
 800222a:	4463      	add	r3, ip
 800222c:	4099      	lsls	r1, r3
 800222e:	000b      	movs	r3, r1
 8002230:	432b      	orrs	r3, r5
 8002232:	e7f2      	b.n	800221a <__aeabi_d2iz+0x3a>
 8002234:	000003fe 	.word	0x000003fe
 8002238:	0000041d 	.word	0x0000041d
 800223c:	7fffffff 	.word	0x7fffffff
 8002240:	00000433 	.word	0x00000433
 8002244:	00000413 	.word	0x00000413
 8002248:	fffffbed 	.word	0xfffffbed

0800224c <__aeabi_i2d>:
 800224c:	b570      	push	{r4, r5, r6, lr}
 800224e:	2800      	cmp	r0, #0
 8002250:	d016      	beq.n	8002280 <__aeabi_i2d+0x34>
 8002252:	17c3      	asrs	r3, r0, #31
 8002254:	18c5      	adds	r5, r0, r3
 8002256:	405d      	eors	r5, r3
 8002258:	0fc4      	lsrs	r4, r0, #31
 800225a:	0028      	movs	r0, r5
 800225c:	f000 f84c 	bl	80022f8 <__clzsi2>
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <__aeabi_i2d+0x5c>)
 8002262:	1a1b      	subs	r3, r3, r0
 8002264:	280a      	cmp	r0, #10
 8002266:	dc16      	bgt.n	8002296 <__aeabi_i2d+0x4a>
 8002268:	0002      	movs	r2, r0
 800226a:	002e      	movs	r6, r5
 800226c:	3215      	adds	r2, #21
 800226e:	4096      	lsls	r6, r2
 8002270:	220b      	movs	r2, #11
 8002272:	1a12      	subs	r2, r2, r0
 8002274:	40d5      	lsrs	r5, r2
 8002276:	055b      	lsls	r3, r3, #21
 8002278:	032d      	lsls	r5, r5, #12
 800227a:	0b2d      	lsrs	r5, r5, #12
 800227c:	0d5b      	lsrs	r3, r3, #21
 800227e:	e003      	b.n	8002288 <__aeabi_i2d+0x3c>
 8002280:	2400      	movs	r4, #0
 8002282:	2300      	movs	r3, #0
 8002284:	2500      	movs	r5, #0
 8002286:	2600      	movs	r6, #0
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	432b      	orrs	r3, r5
 800228c:	07e4      	lsls	r4, r4, #31
 800228e:	4323      	orrs	r3, r4
 8002290:	0030      	movs	r0, r6
 8002292:	0019      	movs	r1, r3
 8002294:	bd70      	pop	{r4, r5, r6, pc}
 8002296:	380b      	subs	r0, #11
 8002298:	4085      	lsls	r5, r0
 800229a:	055b      	lsls	r3, r3, #21
 800229c:	032d      	lsls	r5, r5, #12
 800229e:	2600      	movs	r6, #0
 80022a0:	0b2d      	lsrs	r5, r5, #12
 80022a2:	0d5b      	lsrs	r3, r3, #21
 80022a4:	e7f0      	b.n	8002288 <__aeabi_i2d+0x3c>
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	0000041e 	.word	0x0000041e

080022ac <__aeabi_ui2d>:
 80022ac:	b510      	push	{r4, lr}
 80022ae:	1e04      	subs	r4, r0, #0
 80022b0:	d010      	beq.n	80022d4 <__aeabi_ui2d+0x28>
 80022b2:	f000 f821 	bl	80022f8 <__clzsi2>
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <__aeabi_ui2d+0x48>)
 80022b8:	1a1b      	subs	r3, r3, r0
 80022ba:	280a      	cmp	r0, #10
 80022bc:	dc11      	bgt.n	80022e2 <__aeabi_ui2d+0x36>
 80022be:	220b      	movs	r2, #11
 80022c0:	0021      	movs	r1, r4
 80022c2:	1a12      	subs	r2, r2, r0
 80022c4:	40d1      	lsrs	r1, r2
 80022c6:	3015      	adds	r0, #21
 80022c8:	030a      	lsls	r2, r1, #12
 80022ca:	055b      	lsls	r3, r3, #21
 80022cc:	4084      	lsls	r4, r0
 80022ce:	0b12      	lsrs	r2, r2, #12
 80022d0:	0d5b      	lsrs	r3, r3, #21
 80022d2:	e001      	b.n	80022d8 <__aeabi_ui2d+0x2c>
 80022d4:	2300      	movs	r3, #0
 80022d6:	2200      	movs	r2, #0
 80022d8:	051b      	lsls	r3, r3, #20
 80022da:	4313      	orrs	r3, r2
 80022dc:	0020      	movs	r0, r4
 80022de:	0019      	movs	r1, r3
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	0022      	movs	r2, r4
 80022e4:	380b      	subs	r0, #11
 80022e6:	4082      	lsls	r2, r0
 80022e8:	055b      	lsls	r3, r3, #21
 80022ea:	0312      	lsls	r2, r2, #12
 80022ec:	2400      	movs	r4, #0
 80022ee:	0b12      	lsrs	r2, r2, #12
 80022f0:	0d5b      	lsrs	r3, r3, #21
 80022f2:	e7f1      	b.n	80022d8 <__aeabi_ui2d+0x2c>
 80022f4:	0000041e 	.word	0x0000041e

080022f8 <__clzsi2>:
 80022f8:	211c      	movs	r1, #28
 80022fa:	2301      	movs	r3, #1
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	4298      	cmp	r0, r3
 8002300:	d301      	bcc.n	8002306 <__clzsi2+0xe>
 8002302:	0c00      	lsrs	r0, r0, #16
 8002304:	3910      	subs	r1, #16
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	4298      	cmp	r0, r3
 800230a:	d301      	bcc.n	8002310 <__clzsi2+0x18>
 800230c:	0a00      	lsrs	r0, r0, #8
 800230e:	3908      	subs	r1, #8
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	4298      	cmp	r0, r3
 8002314:	d301      	bcc.n	800231a <__clzsi2+0x22>
 8002316:	0900      	lsrs	r0, r0, #4
 8002318:	3904      	subs	r1, #4
 800231a:	a202      	add	r2, pc, #8	; (adr r2, 8002324 <__clzsi2+0x2c>)
 800231c:	5c10      	ldrb	r0, [r2, r0]
 800231e:	1840      	adds	r0, r0, r1
 8002320:	4770      	bx	lr
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	02020304 	.word	0x02020304
 8002328:	01010101 	.word	0x01010101
	...

08002334 <__clzdi2>:
 8002334:	b510      	push	{r4, lr}
 8002336:	2900      	cmp	r1, #0
 8002338:	d103      	bne.n	8002342 <__clzdi2+0xe>
 800233a:	f7ff ffdd 	bl	80022f8 <__clzsi2>
 800233e:	3020      	adds	r0, #32
 8002340:	e002      	b.n	8002348 <__clzdi2+0x14>
 8002342:	0008      	movs	r0, r1
 8002344:	f7ff ffd8 	bl	80022f8 <__clzsi2>
 8002348:	bd10      	pop	{r4, pc}
 800234a:	46c0      	nop			; (mov r8, r8)

0800234c <decode_NMEA_message>:
#include "NMEA.h"
#include <stdio.h>
#include <math.h>

bool decode_NMEA_message(char input_data[550], GPGGA_struct *gpgga)
{
 800234c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234e:	b08d      	sub	sp, #52	; 0x34
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
	int idx = 0, i = 0, integral_part, fractional_part, data, valid_id ;
 8002356:	2300      	movs	r3, #0
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800235a:	2300      	movs	r3, #0
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28

	char buffer[12];
	memset(buffer,'\0',12);
 800235e:	2308      	movs	r3, #8
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	220c      	movs	r2, #12
 8002364:	2100      	movs	r1, #0
 8002366:	0018      	movs	r0, r3
 8002368:	f003 fc66 	bl	8005c38 <memset>

	/******************* TIME DECODING *******************/

	while(input_data[idx] != 'G' || input_data[idx + 1] != 'P' || input_data[idx + 2] != 'G' || input_data[idx + 3] != 'G' || input_data[idx + 4] != 'A')
 800236c:	e009      	b.n	8002382 <decode_NMEA_message+0x36>
	{
		idx++;
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	3301      	adds	r3, #1
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(idx > 477)
 8002374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002376:	23ef      	movs	r3, #239	; 0xef
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	429a      	cmp	r2, r3
 800237c:	db01      	blt.n	8002382 <decode_NMEA_message+0x36>
			return FALSE;
 800237e:	2300      	movs	r3, #0
 8002380:	e243      	b.n	800280a <decode_NMEA_message+0x4be>
	while(input_data[idx] != 'G' || input_data[idx + 1] != 'P' || input_data[idx + 2] != 'G' || input_data[idx + 3] != 'G' || input_data[idx + 4] != 'A')
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	18d3      	adds	r3, r2, r3
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b47      	cmp	r3, #71	; 0x47
 800238c:	d1ef      	bne.n	800236e <decode_NMEA_message+0x22>
 800238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002390:	3301      	adds	r3, #1
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b50      	cmp	r3, #80	; 0x50
 800239a:	d1e8      	bne.n	800236e <decode_NMEA_message+0x22>
 800239c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239e:	3302      	adds	r3, #2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b47      	cmp	r3, #71	; 0x47
 80023a8:	d1e1      	bne.n	800236e <decode_NMEA_message+0x22>
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	3303      	adds	r3, #3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	18d3      	adds	r3, r2, r3
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b47      	cmp	r3, #71	; 0x47
 80023b6:	d1da      	bne.n	800236e <decode_NMEA_message+0x22>
 80023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ba:	3304      	adds	r3, #4
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	18d3      	adds	r3, r2, r3
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b41      	cmp	r3, #65	; 0x41
 80023c4:	d1d3      	bne.n	800236e <decode_NMEA_message+0x22>
	}

	idx += 6; // We also take in consideration the comma
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	3306      	adds	r3, #6
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c

	valid_id = idx;
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24

	for(int i = 0; i < 5; i++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
 80023d4:	e00e      	b.n	80023f4 <decode_NMEA_message+0xa8>
	{
		while(input_data[valid_id] != ',')
			{
				valid_id++;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	3301      	adds	r3, #1
 80023da:	627b      	str	r3, [r7, #36]	; 0x24
		while(input_data[valid_id] != ',')
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	18d3      	adds	r3, r2, r3
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b2c      	cmp	r3, #44	; 0x2c
 80023e6:	d1f6      	bne.n	80023d6 <decode_NMEA_message+0x8a>
			}
		valid_id++;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	3301      	adds	r3, #1
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 5; i++)
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	3301      	adds	r3, #1
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	ddf0      	ble.n	80023dc <decode_NMEA_message+0x90>
	}

 	if(input_data[valid_id] < 49)
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	18d3      	adds	r3, r2, r3
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b30      	cmp	r3, #48	; 0x30
 8002404:	d811      	bhi.n	800242a <decode_NMEA_message+0xde>
	{
		return FALSE;
 8002406:	2300      	movs	r3, #0
 8002408:	e1ff      	b.n	800280a <decode_NMEA_message+0x4be>
	}


	while(input_data[idx] != ',')
	{
		buffer[i] = input_data[idx];
 800240a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	18d3      	adds	r3, r2, r3
 8002410:	7819      	ldrb	r1, [r3, #0]
 8002412:	2308      	movs	r3, #8
 8002414:	18fa      	adds	r2, r7, r3
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	18d3      	adds	r3, r2, r3
 800241a:	1c0a      	adds	r2, r1, #0
 800241c:	701a      	strb	r2, [r3, #0]
		idx++;
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	3301      	adds	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	3301      	adds	r3, #1
 8002428:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != ',')
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	18d3      	adds	r3, r2, r3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b2c      	cmp	r3, #44	; 0x2c
 8002434:	d1e9      	bne.n	800240a <decode_NMEA_message+0xbe>
	}

	sscanf(buffer, "%d", &data);
 8002436:	2314      	movs	r3, #20
 8002438:	18fa      	adds	r2, r7, r3
 800243a:	49d5      	ldr	r1, [pc, #852]	; (8002790 <decode_NMEA_message+0x444>)
 800243c:	2408      	movs	r4, #8
 800243e:	193b      	adds	r3, r7, r4
 8002440:	0018      	movs	r0, r3
 8002442:	f003 fbcf 	bl	8005be4 <siscanf>

	gpgga->time.hr = data / 10000;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	49d2      	ldr	r1, [pc, #840]	; (8002794 <decode_NMEA_message+0x448>)
 800244a:	0018      	movs	r0, r3
 800244c:	f7fd fef6 	bl	800023c <__divsi3>
 8002450:	0003      	movs	r3, r0
 8002452:	b2da      	uxtb	r2, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	701a      	strb	r2, [r3, #0]
	gpgga->time.min = ((data / 100) % 100);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2164      	movs	r1, #100	; 0x64
 800245c:	0018      	movs	r0, r3
 800245e:	f7fd feed 	bl	800023c <__divsi3>
 8002462:	0003      	movs	r3, r0
 8002464:	2164      	movs	r1, #100	; 0x64
 8002466:	0018      	movs	r0, r3
 8002468:	f7fd ffce 	bl	8000408 <__aeabi_idivmod>
 800246c:	000b      	movs	r3, r1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	705a      	strb	r2, [r3, #1]
	gpgga->time.sec = data % 100;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2164      	movs	r1, #100	; 0x64
 8002478:	0018      	movs	r0, r3
 800247a:	f7fd ffc5 	bl	8000408 <__aeabi_idivmod>
 800247e:	000b      	movs	r3, r1
 8002480:	b2da      	uxtb	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	709a      	strb	r2, [r3, #2]

	memset(buffer,'\0',12);
 8002486:	193b      	adds	r3, r7, r4
 8002488:	220c      	movs	r2, #12
 800248a:	2100      	movs	r1, #0
 800248c:	0018      	movs	r0, r3
 800248e:	f003 fbd3 	bl	8005c38 <memset>
 	i = 0; //reset the length counter
 8002492:	2300      	movs	r3, #0
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
	idx++; //reach the first character of latitude value
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	3301      	adds	r3, #1
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/******************* LATITUDE DECODING *******************/

	while(input_data[idx] != '.')
 800249c:	e00f      	b.n	80024be <decode_NMEA_message+0x172>
	{
		buffer[i] = input_data[idx];
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	18d3      	adds	r3, r2, r3
 80024a4:	7819      	ldrb	r1, [r3, #0]
 80024a6:	2308      	movs	r3, #8
 80024a8:	18fa      	adds	r2, r7, r3
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ac:	18d3      	adds	r3, r2, r3
 80024ae:	1c0a      	adds	r2, r1, #0
 80024b0:	701a      	strb	r2, [r3, #0]
		idx++;
 80024b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b4:	3301      	adds	r3, #1
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 80024b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ba:	3301      	adds	r3, #1
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != '.')
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b2e      	cmp	r3, #46	; 0x2e
 80024c8:	d1e9      	bne.n	800249e <decode_NMEA_message+0x152>
	}

	sscanf(buffer, "%d", &integral_part);
 80024ca:	231c      	movs	r3, #28
 80024cc:	18fa      	adds	r2, r7, r3
 80024ce:	49b0      	ldr	r1, [pc, #704]	; (8002790 <decode_NMEA_message+0x444>)
 80024d0:	2408      	movs	r4, #8
 80024d2:	193b      	adds	r3, r7, r4
 80024d4:	0018      	movs	r0, r3
 80024d6:	f003 fb85 	bl	8005be4 <siscanf>
	i = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
	idx++; // pass the point
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	3301      	adds	r3, #1
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(buffer,'\0',12);
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	220c      	movs	r2, #12
 80024e8:	2100      	movs	r1, #0
 80024ea:	0018      	movs	r0, r3
 80024ec:	f003 fba4 	bl	8005c38 <memset>

	while(input_data[idx] != ',')
 80024f0:	e00f      	b.n	8002512 <decode_NMEA_message+0x1c6>
	{
		buffer[i] = input_data[idx];
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	18d3      	adds	r3, r2, r3
 80024f8:	7819      	ldrb	r1, [r3, #0]
 80024fa:	2308      	movs	r3, #8
 80024fc:	18fa      	adds	r2, r7, r3
 80024fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002500:	18d3      	adds	r3, r2, r3
 8002502:	1c0a      	adds	r2, r1, #0
 8002504:	701a      	strb	r2, [r3, #0]
		idx++;
 8002506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002508:	3301      	adds	r3, #1
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250e:	3301      	adds	r3, #1
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != ',')
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	18d3      	adds	r3, r2, r3
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b2c      	cmp	r3, #44	; 0x2c
 800251c:	d1e9      	bne.n	80024f2 <decode_NMEA_message+0x1a6>
	}

	sscanf(buffer, "%d", &fractional_part);
 800251e:	2318      	movs	r3, #24
 8002520:	18fa      	adds	r2, r7, r3
 8002522:	499b      	ldr	r1, [pc, #620]	; (8002790 <decode_NMEA_message+0x444>)
 8002524:	2608      	movs	r6, #8
 8002526:	19bb      	adds	r3, r7, r6
 8002528:	0018      	movs	r0, r3
 800252a:	f003 fb5b 	bl	8005be4 <siscanf>

	gpgga->location.len_latitude_fractional_part = strlen(buffer);
 800252e:	19bb      	adds	r3, r7, r6
 8002530:	0018      	movs	r0, r3
 8002532:	f7fd fde7 	bl	8000104 <strlen>
 8002536:	0003      	movs	r3, r0
 8002538:	001a      	movs	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	60da      	str	r2, [r3, #12]

	gpgga->location.latitude = integral_part *pow(10, strlen(buffer)) + fractional_part;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff fe83 	bl	800224c <__aeabi_i2d>
 8002546:	0004      	movs	r4, r0
 8002548:	000d      	movs	r5, r1
 800254a:	19bb      	adds	r3, r7, r6
 800254c:	0018      	movs	r0, r3
 800254e:	f7fd fdd9 	bl	8000104 <strlen>
 8002552:	0003      	movs	r3, r0
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff fea9 	bl	80022ac <__aeabi_ui2d>
 800255a:	0002      	movs	r2, r0
 800255c:	000b      	movs	r3, r1
 800255e:	2000      	movs	r0, #0
 8002560:	498d      	ldr	r1, [pc, #564]	; (8002798 <decode_NMEA_message+0x44c>)
 8002562:	f004 fccb 	bl	8006efc <pow>
 8002566:	0002      	movs	r2, r0
 8002568:	000b      	movs	r3, r1
 800256a:	0020      	movs	r0, r4
 800256c:	0029      	movs	r1, r5
 800256e:	f7fe ffd5 	bl	800151c <__aeabi_dmul>
 8002572:	0002      	movs	r2, r0
 8002574:	000b      	movs	r3, r1
 8002576:	0014      	movs	r4, r2
 8002578:	001d      	movs	r5, r3
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff fe65 	bl	800224c <__aeabi_i2d>
 8002582:	0002      	movs	r2, r0
 8002584:	000b      	movs	r3, r1
 8002586:	0020      	movs	r0, r4
 8002588:	0029      	movs	r1, r5
 800258a:	f7fe f86d 	bl	8000668 <__aeabi_dadd>
 800258e:	0002      	movs	r2, r0
 8002590:	000b      	movs	r3, r1
 8002592:	0010      	movs	r0, r2
 8002594:	0019      	movs	r1, r3
 8002596:	f7ff fe23 	bl	80021e0 <__aeabi_d2iz>
 800259a:	0002      	movs	r2, r0
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	605a      	str	r2, [r3, #4]

	idx++;
 80025a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a2:	3301      	adds	r3, #1
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c

	gpgga->location.NS[0] = input_data[idx];
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	18d3      	adds	r3, r2, r3
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	721a      	strb	r2, [r3, #8]

	idx += 2; //reach the longitude
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	3302      	adds	r3, #2
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/******************* LONGITUDE DECODING *******************/
	memset(buffer,'\0',12);
 80025b8:	19bb      	adds	r3, r7, r6
 80025ba:	220c      	movs	r2, #12
 80025bc:	2100      	movs	r1, #0
 80025be:	0018      	movs	r0, r3
 80025c0:	f003 fb3a 	bl	8005c38 <memset>
	i = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28

	while(input_data[idx] != '.')
 80025c8:	e00f      	b.n	80025ea <decode_NMEA_message+0x29e>
	{
		buffer[i] = input_data[idx];
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	18d3      	adds	r3, r2, r3
 80025d0:	7819      	ldrb	r1, [r3, #0]
 80025d2:	2308      	movs	r3, #8
 80025d4:	18fa      	adds	r2, r7, r3
 80025d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d8:	18d3      	adds	r3, r2, r3
 80025da:	1c0a      	adds	r2, r1, #0
 80025dc:	701a      	strb	r2, [r3, #0]
		idx++;
 80025de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e0:	3301      	adds	r3, #1
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	3301      	adds	r3, #1
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != '.')
 80025ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	18d3      	adds	r3, r2, r3
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b2e      	cmp	r3, #46	; 0x2e
 80025f4:	d1e9      	bne.n	80025ca <decode_NMEA_message+0x27e>
	}

	i = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	62bb      	str	r3, [r7, #40]	; 0x28
	idx++; // pass the point
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	3301      	adds	r3, #1
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c

	sscanf(buffer, "%d", &integral_part);
 8002600:	231c      	movs	r3, #28
 8002602:	18fa      	adds	r2, r7, r3
 8002604:	4962      	ldr	r1, [pc, #392]	; (8002790 <decode_NMEA_message+0x444>)
 8002606:	2408      	movs	r4, #8
 8002608:	193b      	adds	r3, r7, r4
 800260a:	0018      	movs	r0, r3
 800260c:	f003 faea 	bl	8005be4 <siscanf>

	memset(buffer, '\0', 12);
 8002610:	193b      	adds	r3, r7, r4
 8002612:	220c      	movs	r2, #12
 8002614:	2100      	movs	r1, #0
 8002616:	0018      	movs	r0, r3
 8002618:	f003 fb0e 	bl	8005c38 <memset>

	while(input_data[idx] != ',')
 800261c:	e00f      	b.n	800263e <decode_NMEA_message+0x2f2>
	{
		buffer[i] = input_data[idx];
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	18d3      	adds	r3, r2, r3
 8002624:	7819      	ldrb	r1, [r3, #0]
 8002626:	2308      	movs	r3, #8
 8002628:	18fa      	adds	r2, r7, r3
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	18d3      	adds	r3, r2, r3
 800262e:	1c0a      	adds	r2, r1, #0
 8002630:	701a      	strb	r2, [r3, #0]
		idx++;
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	3301      	adds	r3, #1
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 8002638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263a:	3301      	adds	r3, #1
 800263c:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != ',')
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	18d3      	adds	r3, r2, r3
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b2c      	cmp	r3, #44	; 0x2c
 8002648:	d1e9      	bne.n	800261e <decode_NMEA_message+0x2d2>
	}

	sscanf(buffer, "%d", &fractional_part);
 800264a:	2318      	movs	r3, #24
 800264c:	18fa      	adds	r2, r7, r3
 800264e:	4950      	ldr	r1, [pc, #320]	; (8002790 <decode_NMEA_message+0x444>)
 8002650:	2608      	movs	r6, #8
 8002652:	19bb      	adds	r3, r7, r6
 8002654:	0018      	movs	r0, r3
 8002656:	f003 fac5 	bl	8005be4 <siscanf>

	gpgga->location.len_longitude_fractional_part = strlen(buffer);
 800265a:	19bb      	adds	r3, r7, r6
 800265c:	0018      	movs	r0, r3
 800265e:	f7fd fd51 	bl	8000104 <strlen>
 8002662:	0003      	movs	r3, r0
 8002664:	001a      	movs	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	619a      	str	r2, [r3, #24]

	gpgga->location.longitude = integral_part *pow(10, strlen(buffer)) + fractional_part;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	0018      	movs	r0, r3
 800266e:	f7ff fded 	bl	800224c <__aeabi_i2d>
 8002672:	0004      	movs	r4, r0
 8002674:	000d      	movs	r5, r1
 8002676:	19bb      	adds	r3, r7, r6
 8002678:	0018      	movs	r0, r3
 800267a:	f7fd fd43 	bl	8000104 <strlen>
 800267e:	0003      	movs	r3, r0
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff fe13 	bl	80022ac <__aeabi_ui2d>
 8002686:	0002      	movs	r2, r0
 8002688:	000b      	movs	r3, r1
 800268a:	2000      	movs	r0, #0
 800268c:	4942      	ldr	r1, [pc, #264]	; (8002798 <decode_NMEA_message+0x44c>)
 800268e:	f004 fc35 	bl	8006efc <pow>
 8002692:	0002      	movs	r2, r0
 8002694:	000b      	movs	r3, r1
 8002696:	0020      	movs	r0, r4
 8002698:	0029      	movs	r1, r5
 800269a:	f7fe ff3f 	bl	800151c <__aeabi_dmul>
 800269e:	0002      	movs	r2, r0
 80026a0:	000b      	movs	r3, r1
 80026a2:	0014      	movs	r4, r2
 80026a4:	001d      	movs	r5, r3
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f7ff fdcf 	bl	800224c <__aeabi_i2d>
 80026ae:	0002      	movs	r2, r0
 80026b0:	000b      	movs	r3, r1
 80026b2:	0020      	movs	r0, r4
 80026b4:	0029      	movs	r1, r5
 80026b6:	f7fd ffd7 	bl	8000668 <__aeabi_dadd>
 80026ba:	0002      	movs	r2, r0
 80026bc:	000b      	movs	r3, r1
 80026be:	0010      	movs	r0, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	f7ff fd8d 	bl	80021e0 <__aeabi_d2iz>
 80026c6:	0002      	movs	r2, r0
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	611a      	str	r2, [r3, #16]

	idx++;
 80026cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ce:	3301      	adds	r3, #1
 80026d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	gpgga->location.EW[0] = input_data[idx];
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	18d3      	adds	r3, r2, r3
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	751a      	strb	r2, [r3, #20]

	idx += 2; //reach the fix quality
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	3302      	adds	r3, #2
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c

	memset(buffer,'\0',12);
 80026e4:	19bb      	adds	r3, r7, r6
 80026e6:	220c      	movs	r2, #12
 80026e8:	2100      	movs	r1, #0
 80026ea:	0018      	movs	r0, r3
 80026ec:	f003 faa4 	bl	8005c38 <memset>
	i = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/******************* Fix Quality DECODING *******************/

	sscanf(input_data[idx], "%d", &gpgga->fix_quality );
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	18d3      	adds	r3, r2, r3
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	0018      	movs	r0, r3
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	331c      	adds	r3, #28
 8002702:	001a      	movs	r2, r3
 8002704:	4b22      	ldr	r3, [pc, #136]	; (8002790 <decode_NMEA_message+0x444>)
 8002706:	0019      	movs	r1, r3
 8002708:	f003 fa6c 	bl	8005be4 <siscanf>

	if(gpgga->fix_quality < 1)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	7f1b      	ldrb	r3, [r3, #28]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <decode_NMEA_message+0x3cc>
		return FALSE;
 8002714:	2300      	movs	r3, #0
 8002716:	e078      	b.n	800280a <decode_NMEA_message+0x4be>

	idx += 2; //reach the number of satellites
 8002718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271a:	3302      	adds	r3, #2
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/******************* Number of satellites DECODING *******************/
	while(input_data[idx] != ',')
 800271e:	e00f      	b.n	8002740 <decode_NMEA_message+0x3f4>
	{
		buffer[i] = input_data[idx];
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	18d3      	adds	r3, r2, r3
 8002726:	7819      	ldrb	r1, [r3, #0]
 8002728:	2308      	movs	r3, #8
 800272a:	18fa      	adds	r2, r7, r3
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	18d3      	adds	r3, r2, r3
 8002730:	1c0a      	adds	r2, r1, #0
 8002732:	701a      	strb	r2, [r3, #0]
		idx++;
 8002734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002736:	3301      	adds	r3, #1
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	3301      	adds	r3, #1
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != ',')
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	18d3      	adds	r3, r2, r3
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b2c      	cmp	r3, #44	; 0x2c
 800274a:	d1e9      	bne.n	8002720 <decode_NMEA_message+0x3d4>
	}

	sscanf(buffer, "%d", &gpgga->nr_of_satellites );
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	3320      	adds	r3, #32
 8002750:	001a      	movs	r2, r3
 8002752:	490f      	ldr	r1, [pc, #60]	; (8002790 <decode_NMEA_message+0x444>)
 8002754:	2408      	movs	r4, #8
 8002756:	193b      	adds	r3, r7, r4
 8002758:	0018      	movs	r0, r3
 800275a:	f003 fa43 	bl	8005be4 <siscanf>

	idx += 2;
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	3302      	adds	r3, #2
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c

	memset(buffer,'\0',12);
 8002764:	193b      	adds	r3, r7, r4
 8002766:	220c      	movs	r2, #12
 8002768:	2100      	movs	r1, #0
 800276a:	0018      	movs	r0, r3
 800276c:	f003 fa64 	bl	8005c38 <memset>
	i = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28

	//get over next value, not needed
	while(input_data[idx] != ',')
 8002774:	e002      	b.n	800277c <decode_NMEA_message+0x430>
	{
		idx++;
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	3301      	adds	r3, #1
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(input_data[idx] != ',')
 800277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	18d3      	adds	r3, r2, r3
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b2c      	cmp	r3, #44	; 0x2c
 8002786:	d1f6      	bne.n	8002776 <decode_NMEA_message+0x42a>
	}
	idx++;
 8002788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278a:	3301      	adds	r3, #1
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c

	while(input_data[idx] != '.')
 800278e:	e015      	b.n	80027bc <decode_NMEA_message+0x470>
 8002790:	08007d30 	.word	0x08007d30
 8002794:	00002710 	.word	0x00002710
 8002798:	40240000 	.word	0x40240000
	{
		buffer[i] = input_data[idx];
 800279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	18d3      	adds	r3, r2, r3
 80027a2:	7819      	ldrb	r1, [r3, #0]
 80027a4:	2308      	movs	r3, #8
 80027a6:	18fa      	adds	r2, r7, r3
 80027a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	1c0a      	adds	r2, r1, #0
 80027ae:	701a      	strb	r2, [r3, #0]
		idx++;
 80027b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b2:	3301      	adds	r3, #1
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		i++;
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	3301      	adds	r3, #1
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
	while(input_data[idx] != '.')
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	18d3      	adds	r3, r2, r3
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b2e      	cmp	r3, #46	; 0x2e
 80027c6:	d1e9      	bne.n	800279c <decode_NMEA_message+0x450>
	}

	sscanf(buffer, "%d", &integral_part);
 80027c8:	231c      	movs	r3, #28
 80027ca:	18fa      	adds	r2, r7, r3
 80027cc:	4911      	ldr	r1, [pc, #68]	; (8002814 <decode_NMEA_message+0x4c8>)
 80027ce:	2308      	movs	r3, #8
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	0018      	movs	r0, r3
 80027d4:	f003 fa06 	bl	8005be4 <siscanf>
	idx++;
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	3301      	adds	r3, #1
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c

	sscanf(input_data[idx], "%d", &fractional_part);
 80027de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	18d3      	adds	r3, r2, r3
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	0018      	movs	r0, r3
 80027e8:	2318      	movs	r3, #24
 80027ea:	18fa      	adds	r2, r7, r3
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <decode_NMEA_message+0x4c8>)
 80027ee:	0019      	movs	r1, r3
 80027f0:	f003 f9f8 	bl	8005be4 <siscanf>

	gpgga->altitude = integral_part * 10 + fractional_part;
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	0013      	movs	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	001a      	movs	r2, r3
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	18d2      	adds	r2, r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	629a      	str	r2, [r3, #40]	; 0x28


	return TRUE;
 8002808:	2301      	movs	r3, #1


}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b00d      	add	sp, #52	; 0x34
 8002810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	08007d30 	.word	0x08007d30

08002818 <SysTick_Handler>:
#include "main.h"

extern UART_HandleTypeDef uart_gps;

void SysTick_Handler (void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800281c:	f000 fd02 	bl	8003224 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8002820:	f000 fdfa 	bl	8003418 <HAL_SYSTICK_IRQHandler>
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&uart_gps);
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <USART1_IRQHandler+0x14>)
 8002832:	0018      	movs	r0, r3
 8002834:	f001 fa3e 	bl	8003cb4 <HAL_UART_IRQHandler>
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	20000160 	.word	0x20000160

08002844 <main>:
char loading_console_message[40] = "GPS MODULE IS SEARCHING SIGNAL \n\r";

GPGGA_struct gpgga;

int main()
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
 	HAL_Init();
 8002848:	f000 fc82 	bl	8003150 <HAL_Init>
	UART_Init();
 800284c:	f000 f818 	bl	8002880 <UART_Init>

	HAL_UART_Transmit(&console_output,(uint8_t*)&start_console_message, 27, HAL_UART_TIMEOUT_VALUE);
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <main+0x28>)
 8002852:	4907      	ldr	r1, [pc, #28]	; (8002870 <main+0x2c>)
 8002854:	4807      	ldr	r0, [pc, #28]	; (8002874 <main+0x30>)
 8002856:	221b      	movs	r2, #27
 8002858:	f001 f922 	bl	8003aa0 <HAL_UART_Transmit>


	while(1)
	{
		HAL_UART_Receive_IT(&uart_gps,(uint8_t*)&data, 700);
 800285c:	23af      	movs	r3, #175	; 0xaf
 800285e:	009a      	lsls	r2, r3, #2
 8002860:	4905      	ldr	r1, [pc, #20]	; (8002878 <main+0x34>)
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <main+0x38>)
 8002864:	0018      	movs	r0, r3
 8002866:	f001 f9bf 	bl	8003be8 <HAL_UART_Receive_IT>
 800286a:	e7f7      	b.n	800285c <main+0x18>
 800286c:	01ffffff 	.word	0x01ffffff
 8002870:	20000020 	.word	0x20000020
 8002874:	200000cc 	.word	0x200000cc
 8002878:	200001f4 	.word	0x200001f4
 800287c:	20000160 	.word	0x20000160

08002880 <UART_Init>:
	}

}

void UART_Init()
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	console_output.Instance = USART2;
 8002884:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <UART_Init+0x84>)
 8002886:	4a20      	ldr	r2, [pc, #128]	; (8002908 <UART_Init+0x88>)
 8002888:	601a      	str	r2, [r3, #0]
	console_output.Init.BaudRate = 115200;
 800288a:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <UART_Init+0x84>)
 800288c:	22e1      	movs	r2, #225	; 0xe1
 800288e:	0252      	lsls	r2, r2, #9
 8002890:	605a      	str	r2, [r3, #4]
	console_output.Init.Mode = UART_MODE_TX;
 8002892:	4b1c      	ldr	r3, [pc, #112]	; (8002904 <UART_Init+0x84>)
 8002894:	2208      	movs	r2, #8
 8002896:	615a      	str	r2, [r3, #20]
	console_output.Init.Parity = UART_PARITY_NONE;
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <UART_Init+0x84>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
	console_output.Init.StopBits = UART_STOPBITS_1;
 800289e:	4b19      	ldr	r3, [pc, #100]	; (8002904 <UART_Init+0x84>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	60da      	str	r2, [r3, #12]
	console_output.Init.WordLength = UART_WORDLENGTH_8B;
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <UART_Init+0x84>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
	console_output.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b16      	ldr	r3, [pc, #88]	; (8002904 <UART_Init+0x84>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&console_output) != HAL_OK)
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <UART_Init+0x84>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f001 f89e 	bl	80039f4 <HAL_UART_Init>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d001      	beq.n	80028c0 <UART_Init+0x40>
	{
		Error_handler();
 80028bc:	f000 f82a 	bl	8002914 <Error_handler>
	}

	uart_gps.Instance = USART1;
 80028c0:	4b12      	ldr	r3, [pc, #72]	; (800290c <UART_Init+0x8c>)
 80028c2:	4a13      	ldr	r2, [pc, #76]	; (8002910 <UART_Init+0x90>)
 80028c4:	601a      	str	r2, [r3, #0]
	uart_gps.Init.BaudRate = 9600;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <UART_Init+0x8c>)
 80028c8:	2296      	movs	r2, #150	; 0x96
 80028ca:	0192      	lsls	r2, r2, #6
 80028cc:	605a      	str	r2, [r3, #4]
	uart_gps.Init.Mode = UART_MODE_TX_RX;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <UART_Init+0x8c>)
 80028d0:	220c      	movs	r2, #12
 80028d2:	615a      	str	r2, [r3, #20]
	uart_gps.Init.Parity = UART_PARITY_NONE;
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <UART_Init+0x8c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]
	uart_gps.Init.StopBits = UART_STOPBITS_1;
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <UART_Init+0x8c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	60da      	str	r2, [r3, #12]
	uart_gps.Init.WordLength = UART_WORDLENGTH_8B;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <UART_Init+0x8c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
	uart_gps.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <UART_Init+0x8c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
	if(HAL_UART_Init(&uart_gps) != HAL_OK)
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <UART_Init+0x8c>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f001 f880 	bl	80039f4 <HAL_UART_Init>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d001      	beq.n	80028fc <UART_Init+0x7c>
	{
		Error_handler();
 80028f8:	f000 f80c 	bl	8002914 <Error_handler>
	}
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	200000cc 	.word	0x200000cc
 8002908:	40004400 	.word	0x40004400
 800290c:	20000160 	.word	0x20000160
 8002910:	40013800 	.word	0x40013800

08002914 <Error_handler>:

void Error_handler()
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
	while(1);
 8002918:	e7fe      	b.n	8002918 <Error_handler+0x4>
	...

0800291c <HAL_UART_RxCpltCallback>:
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]


	if(decode_NMEA_message(data, &gpgga) != FALSE)
 8002924:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_UART_RxCpltCallback+0x34>)
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_UART_RxCpltCallback+0x38>)
 8002928:	0011      	movs	r1, r2
 800292a:	0018      	movs	r0, r3
 800292c:	f7ff fd0e 	bl	800234c <decode_NMEA_message>
 8002930:	1e03      	subs	r3, r0, #0
 8002932:	d002      	beq.n	800293a <HAL_UART_RxCpltCallback+0x1e>
	{
		UART_GPS();
 8002934:	f000 f816 	bl	8002964 <UART_GPS>
	else{
		HAL_UART_Transmit(&console_output, (uint8_t*)&message_gps_not_connected, 30, HAL_UART_TIMEOUT_VALUE);
	}
		//	HAL_UART_Transmit(&console_output, (uint8_t*)&data, 700, HAL_UART_TIMEOUT_VALUE);

}
 8002938:	e005      	b.n	8002946 <HAL_UART_RxCpltCallback+0x2a>
		HAL_UART_Transmit(&console_output, (uint8_t*)&message_gps_not_connected, 30, HAL_UART_TIMEOUT_VALUE);
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <HAL_UART_RxCpltCallback+0x3c>)
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <HAL_UART_RxCpltCallback+0x40>)
 800293e:	4808      	ldr	r0, [pc, #32]	; (8002960 <HAL_UART_RxCpltCallback+0x44>)
 8002940:	221e      	movs	r2, #30
 8002942:	f001 f8ad 	bl	8003aa0 <HAL_UART_Transmit>
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	2000041c 	.word	0x2000041c
 8002954:	200001f4 	.word	0x200001f4
 8002958:	01ffffff 	.word	0x01ffffff
 800295c:	20000000 	.word	0x20000000
 8002960:	200000cc 	.word	0x200000cc

08002964 <UART_GPS>:

void UART_GPS()
{
 8002964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002966:	b0a1      	sub	sp, #132	; 0x84
 8002968:	af00      	add	r7, sp, #0
	char start_gps_message[13] = "GPS data: \n";
 800296a:	2670      	movs	r6, #112	; 0x70
 800296c:	19b9      	adds	r1, r7, r6
 800296e:	4afb      	ldr	r2, [pc, #1004]	; (8002d5c <UART_GPS+0x3f8>)
 8002970:	000b      	movs	r3, r1
 8002972:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002974:	c331      	stmia	r3!, {r0, r4, r5}
 8002976:	2300      	movs	r3, #0
 8002978:	730b      	strb	r3, [r1, #12]
	char time_message[6] = "Time: ";
 800297a:	2568      	movs	r5, #104	; 0x68
 800297c:	197b      	adds	r3, r7, r5
 800297e:	4af8      	ldr	r2, [pc, #992]	; (8002d60 <UART_GPS+0x3fc>)
 8002980:	6811      	ldr	r1, [r2, #0]
 8002982:	6019      	str	r1, [r3, #0]
 8002984:	8892      	ldrh	r2, [r2, #4]
 8002986:	809a      	strh	r2, [r3, #4]
	char latitude_message[12] = "\nLatitude: ";
 8002988:	235c      	movs	r3, #92	; 0x5c
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	4af5      	ldr	r2, [pc, #980]	; (8002d64 <UART_GPS+0x400>)
 800298e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002990:	c313      	stmia	r3!, {r0, r1, r4}
	char longitude_message[13] = "\nLongitude: ";
 8002992:	234c      	movs	r3, #76	; 0x4c
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	4af4      	ldr	r2, [pc, #976]	; (8002d68 <UART_GPS+0x404>)
 8002998:	ca13      	ldmia	r2!, {r0, r1, r4}
 800299a:	c313      	stmia	r3!, {r0, r1, r4}
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	701a      	strb	r2, [r3, #0]
	char nr_satttelites_message[24] = "\nNumber of satellites: ";
 80029a0:	2334      	movs	r3, #52	; 0x34
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	4af1      	ldr	r2, [pc, #964]	; (8002d6c <UART_GPS+0x408>)
 80029a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029a8:	c313      	stmia	r3!, {r0, r1, r4}
 80029aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029ac:	c313      	stmia	r3!, {r0, r1, r4}
	char altitude_message[12] = "\nAltitude: ";
 80029ae:	2328      	movs	r3, #40	; 0x28
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	4aef      	ldr	r2, [pc, #956]	; (8002d70 <UART_GPS+0x40c>)
 80029b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80029b6:	c313      	stmia	r3!, {r0, r1, r4}

	char string[20], substring[20];
	memset(string,'\0',20);
 80029b8:	2414      	movs	r4, #20
 80029ba:	193b      	adds	r3, r7, r4
 80029bc:	2214      	movs	r2, #20
 80029be:	2100      	movs	r1, #0
 80029c0:	0018      	movs	r0, r3
 80029c2:	f003 f939 	bl	8005c38 <memset>
	memset(substring,'\0',20);
 80029c6:	003b      	movs	r3, r7
 80029c8:	2214      	movs	r2, #20
 80029ca:	2100      	movs	r1, #0
 80029cc:	0018      	movs	r0, r3
 80029ce:	f003 f933 	bl	8005c38 <memset>




	HAL_UART_Transmit(&console_output, start_gps_message, strlen(start_gps_message), HAL_UART_TIMEOUT_VALUE);
 80029d2:	19bb      	adds	r3, r7, r6
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7fd fb95 	bl	8000104 <strlen>
 80029da:	0003      	movs	r3, r0
 80029dc:	b29a      	uxth	r2, r3
 80029de:	4be5      	ldr	r3, [pc, #916]	; (8002d74 <UART_GPS+0x410>)
 80029e0:	19b9      	adds	r1, r7, r6
 80029e2:	48e5      	ldr	r0, [pc, #916]	; (8002d78 <UART_GPS+0x414>)
 80029e4:	f001 f85c 	bl	8003aa0 <HAL_UART_Transmit>


/********************************* DISPLAY TIME  *********************************/
	HAL_UART_Transmit(&console_output, time_message, strlen(time_message), HAL_UART_TIMEOUT_VALUE);
 80029e8:	197b      	adds	r3, r7, r5
 80029ea:	0018      	movs	r0, r3
 80029ec:	f7fd fb8a 	bl	8000104 <strlen>
 80029f0:	0003      	movs	r3, r0
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	4bdf      	ldr	r3, [pc, #892]	; (8002d74 <UART_GPS+0x410>)
 80029f6:	1979      	adds	r1, r7, r5
 80029f8:	48df      	ldr	r0, [pc, #892]	; (8002d78 <UART_GPS+0x414>)
 80029fa:	f001 f851 	bl	8003aa0 <HAL_UART_Transmit>

	sprintf(substring, "%d", gpgga.time.hr);
 80029fe:	4bdf      	ldr	r3, [pc, #892]	; (8002d7c <UART_GPS+0x418>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	001a      	movs	r2, r3
 8002a04:	49de      	ldr	r1, [pc, #888]	; (8002d80 <UART_GPS+0x41c>)
 8002a06:	003b      	movs	r3, r7
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f003 f8cb 	bl	8005ba4 <siprintf>
	if(gpgga.time.hr < 10)
 8002a0e:	4bdb      	ldr	r3, [pc, #876]	; (8002d7c <UART_GPS+0x418>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b09      	cmp	r3, #9
 8002a14:	d80e      	bhi.n	8002a34 <UART_GPS+0xd0>
	{
		strcat(string,"0");
 8002a16:	193b      	adds	r3, r7, r4
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f7fd fb73 	bl	8000104 <strlen>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	001a      	movs	r2, r3
 8002a22:	193b      	adds	r3, r7, r4
 8002a24:	189a      	adds	r2, r3, r2
 8002a26:	4bd7      	ldr	r3, [pc, #860]	; (8002d84 <UART_GPS+0x420>)
 8002a28:	0010      	movs	r0, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	001a      	movs	r2, r3
 8002a30:	f003 f960 	bl	8005cf4 <memcpy>
	}

	strcat(string,substring);
 8002a34:	003a      	movs	r2, r7
 8002a36:	2414      	movs	r4, #20
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	0011      	movs	r1, r2
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f003 f903 	bl	8005c48 <strcat>
	strcat(string,":");
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7fd fb5d 	bl	8000104 <strlen>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	193b      	adds	r3, r7, r4
 8002a50:	189a      	adds	r2, r3, r2
 8002a52:	4bcd      	ldr	r3, [pc, #820]	; (8002d88 <UART_GPS+0x424>)
 8002a54:	0010      	movs	r0, r2
 8002a56:	0019      	movs	r1, r3
 8002a58:	2302      	movs	r3, #2
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	f003 f94a 	bl	8005cf4 <memcpy>

	sprintf(substring, "%d", gpgga.time.min);
 8002a60:	4bc6      	ldr	r3, [pc, #792]	; (8002d7c <UART_GPS+0x418>)
 8002a62:	785b      	ldrb	r3, [r3, #1]
 8002a64:	001a      	movs	r2, r3
 8002a66:	49c6      	ldr	r1, [pc, #792]	; (8002d80 <UART_GPS+0x41c>)
 8002a68:	003b      	movs	r3, r7
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f003 f89a 	bl	8005ba4 <siprintf>
	if(gpgga.time.min < 10)
 8002a70:	4bc2      	ldr	r3, [pc, #776]	; (8002d7c <UART_GPS+0x418>)
 8002a72:	785b      	ldrb	r3, [r3, #1]
 8002a74:	2b09      	cmp	r3, #9
 8002a76:	d80e      	bhi.n	8002a96 <UART_GPS+0x132>
	{
		strcat(string,"0");
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7fd fb42 	bl	8000104 <strlen>
 8002a80:	0003      	movs	r3, r0
 8002a82:	001a      	movs	r2, r3
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	189a      	adds	r2, r3, r2
 8002a88:	4bbe      	ldr	r3, [pc, #760]	; (8002d84 <UART_GPS+0x420>)
 8002a8a:	0010      	movs	r0, r2
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	2302      	movs	r3, #2
 8002a90:	001a      	movs	r2, r3
 8002a92:	f003 f92f 	bl	8005cf4 <memcpy>
	}

	strcat(string,substring);
 8002a96:	003a      	movs	r2, r7
 8002a98:	2414      	movs	r4, #20
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f003 f8d2 	bl	8005c48 <strcat>
	strcat(string,":");
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7fd fb2c 	bl	8000104 <strlen>
 8002aac:	0003      	movs	r3, r0
 8002aae:	001a      	movs	r2, r3
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	189a      	adds	r2, r3, r2
 8002ab4:	4bb4      	ldr	r3, [pc, #720]	; (8002d88 <UART_GPS+0x424>)
 8002ab6:	0010      	movs	r0, r2
 8002ab8:	0019      	movs	r1, r3
 8002aba:	2302      	movs	r3, #2
 8002abc:	001a      	movs	r2, r3
 8002abe:	f003 f919 	bl	8005cf4 <memcpy>

	sprintf(substring, "%d", gpgga.time.sec);
 8002ac2:	4bae      	ldr	r3, [pc, #696]	; (8002d7c <UART_GPS+0x418>)
 8002ac4:	789b      	ldrb	r3, [r3, #2]
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	49ad      	ldr	r1, [pc, #692]	; (8002d80 <UART_GPS+0x41c>)
 8002aca:	003b      	movs	r3, r7
 8002acc:	0018      	movs	r0, r3
 8002ace:	f003 f869 	bl	8005ba4 <siprintf>
	if(gpgga.time.sec < 10)
 8002ad2:	4baa      	ldr	r3, [pc, #680]	; (8002d7c <UART_GPS+0x418>)
 8002ad4:	789b      	ldrb	r3, [r3, #2]
 8002ad6:	2b09      	cmp	r3, #9
 8002ad8:	d80e      	bhi.n	8002af8 <UART_GPS+0x194>
	{
		strcat(string,"0");
 8002ada:	193b      	adds	r3, r7, r4
 8002adc:	0018      	movs	r0, r3
 8002ade:	f7fd fb11 	bl	8000104 <strlen>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	189a      	adds	r2, r3, r2
 8002aea:	4ba6      	ldr	r3, [pc, #664]	; (8002d84 <UART_GPS+0x420>)
 8002aec:	0010      	movs	r0, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	2302      	movs	r3, #2
 8002af2:	001a      	movs	r2, r3
 8002af4:	f003 f8fe 	bl	8005cf4 <memcpy>
	}

	strcat(string,substring);
 8002af8:	003a      	movs	r2, r7
 8002afa:	2614      	movs	r6, #20
 8002afc:	19bb      	adds	r3, r7, r6
 8002afe:	0011      	movs	r1, r2
 8002b00:	0018      	movs	r0, r3
 8002b02:	f003 f8a1 	bl	8005c48 <strcat>
	strcat(string,"\n");
 8002b06:	19bb      	adds	r3, r7, r6
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f7fd fafb 	bl	8000104 <strlen>
 8002b0e:	0003      	movs	r3, r0
 8002b10:	001a      	movs	r2, r3
 8002b12:	19bb      	adds	r3, r7, r6
 8002b14:	189a      	adds	r2, r3, r2
 8002b16:	4b9d      	ldr	r3, [pc, #628]	; (8002d8c <UART_GPS+0x428>)
 8002b18:	0010      	movs	r0, r2
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	001a      	movs	r2, r3
 8002b20:	f003 f8e8 	bl	8005cf4 <memcpy>

	HAL_UART_Transmit(&console_output, string, strlen(string), HAL_UART_TIMEOUT_VALUE);
 8002b24:	19bb      	adds	r3, r7, r6
 8002b26:	0018      	movs	r0, r3
 8002b28:	f7fd faec 	bl	8000104 <strlen>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b90      	ldr	r3, [pc, #576]	; (8002d74 <UART_GPS+0x410>)
 8002b32:	19b9      	adds	r1, r7, r6
 8002b34:	4890      	ldr	r0, [pc, #576]	; (8002d78 <UART_GPS+0x414>)
 8002b36:	f000 ffb3 	bl	8003aa0 <HAL_UART_Transmit>

/********************************* DISPLAY lATITUDE *********************************/
	memset(string,'\0',20);
 8002b3a:	19bb      	adds	r3, r7, r6
 8002b3c:	2214      	movs	r2, #20
 8002b3e:	2100      	movs	r1, #0
 8002b40:	0018      	movs	r0, r3
 8002b42:	f003 f879 	bl	8005c38 <memset>
	memset(substring,'\0',20);
 8002b46:	003b      	movs	r3, r7
 8002b48:	2214      	movs	r2, #20
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f003 f873 	bl	8005c38 <memset>
	HAL_UART_Transmit(&console_output, latitude_message, strlen(latitude_message), HAL_UART_TIMEOUT_VALUE);
 8002b52:	245c      	movs	r4, #92	; 0x5c
 8002b54:	193b      	adds	r3, r7, r4
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7fd fad4 	bl	8000104 <strlen>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b84      	ldr	r3, [pc, #528]	; (8002d74 <UART_GPS+0x410>)
 8002b62:	1939      	adds	r1, r7, r4
 8002b64:	4884      	ldr	r0, [pc, #528]	; (8002d78 <UART_GPS+0x414>)
 8002b66:	f000 ff9b 	bl	8003aa0 <HAL_UART_Transmit>


	//avem lungimea partii intregi daca locatie e: 4432.28 , avem 4


	sprintf(string,"%d",(int)(gpgga.location.latitude / pow(10,gpgga.location.len_latitude_fractional_part)));
 8002b6a:	4b84      	ldr	r3, [pc, #528]	; (8002d7c <UART_GPS+0x418>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f7ff fb6c 	bl	800224c <__aeabi_i2d>
 8002b74:	0004      	movs	r4, r0
 8002b76:	000d      	movs	r5, r1
 8002b78:	4b80      	ldr	r3, [pc, #512]	; (8002d7c <UART_GPS+0x418>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff fb65 	bl	800224c <__aeabi_i2d>
 8002b82:	0002      	movs	r2, r0
 8002b84:	000b      	movs	r3, r1
 8002b86:	2000      	movs	r0, #0
 8002b88:	4981      	ldr	r1, [pc, #516]	; (8002d90 <UART_GPS+0x42c>)
 8002b8a:	f004 f9b7 	bl	8006efc <pow>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	000b      	movs	r3, r1
 8002b92:	0020      	movs	r0, r4
 8002b94:	0029      	movs	r1, r5
 8002b96:	f7fe f8c7 	bl	8000d28 <__aeabi_ddiv>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	000b      	movs	r3, r1
 8002b9e:	0010      	movs	r0, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	f7ff fb1d 	bl	80021e0 <__aeabi_d2iz>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	4975      	ldr	r1, [pc, #468]	; (8002d80 <UART_GPS+0x41c>)
 8002baa:	19bb      	adds	r3, r7, r6
 8002bac:	0018      	movs	r0, r3
 8002bae:	f002 fff9 	bl	8005ba4 <siprintf>

	strcat(string,".");
 8002bb2:	19bb      	adds	r3, r7, r6
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f7fd faa5 	bl	8000104 <strlen>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	19bb      	adds	r3, r7, r6
 8002bc0:	189a      	adds	r2, r3, r2
 8002bc2:	4b74      	ldr	r3, [pc, #464]	; (8002d94 <UART_GPS+0x430>)
 8002bc4:	0010      	movs	r0, r2
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	2302      	movs	r3, #2
 8002bca:	001a      	movs	r2, r3
 8002bcc:	f003 f892 	bl	8005cf4 <memcpy>

	sprintf(substring,"%d",(int)(gpgga.location.latitude % ((int)(pow(10,gpgga.location.len_latitude_fractional_part)))));
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <UART_GPS+0x418>)
 8002bd2:	685c      	ldr	r4, [r3, #4]
 8002bd4:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <UART_GPS+0x418>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff fb37 	bl	800224c <__aeabi_i2d>
 8002bde:	0002      	movs	r2, r0
 8002be0:	000b      	movs	r3, r1
 8002be2:	2000      	movs	r0, #0
 8002be4:	496a      	ldr	r1, [pc, #424]	; (8002d90 <UART_GPS+0x42c>)
 8002be6:	f004 f989 	bl	8006efc <pow>
 8002bea:	0002      	movs	r2, r0
 8002bec:	000b      	movs	r3, r1
 8002bee:	0010      	movs	r0, r2
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	f7ff faf5 	bl	80021e0 <__aeabi_d2iz>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	0020      	movs	r0, r4
 8002bfc:	f7fd fc04 	bl	8000408 <__aeabi_idivmod>
 8002c00:	000b      	movs	r3, r1
 8002c02:	001a      	movs	r2, r3
 8002c04:	495e      	ldr	r1, [pc, #376]	; (8002d80 <UART_GPS+0x41c>)
 8002c06:	003b      	movs	r3, r7
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f002 ffcb 	bl	8005ba4 <siprintf>

	strcat(string,substring);
 8002c0e:	003a      	movs	r2, r7
 8002c10:	19bb      	adds	r3, r7, r6
 8002c12:	0011      	movs	r1, r2
 8002c14:	0018      	movs	r0, r3
 8002c16:	f003 f817 	bl	8005c48 <strcat>
	strcat(string," ");
 8002c1a:	19bb      	adds	r3, r7, r6
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7fd fa71 	bl	8000104 <strlen>
 8002c22:	0003      	movs	r3, r0
 8002c24:	001a      	movs	r2, r3
 8002c26:	19bb      	adds	r3, r7, r6
 8002c28:	189a      	adds	r2, r3, r2
 8002c2a:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <UART_GPS+0x434>)
 8002c2c:	0010      	movs	r0, r2
 8002c2e:	0019      	movs	r1, r3
 8002c30:	2302      	movs	r3, #2
 8002c32:	001a      	movs	r2, r3
 8002c34:	f003 f85e 	bl	8005cf4 <memcpy>
	strncat(string, gpgga.location.NS,1);
 8002c38:	4958      	ldr	r1, [pc, #352]	; (8002d9c <UART_GPS+0x438>)
 8002c3a:	19bb      	adds	r3, r7, r6
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f003 f80f 	bl	8005c62 <strncat>
	strcat(string,"\n");
 8002c44:	19bb      	adds	r3, r7, r6
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7fd fa5c 	bl	8000104 <strlen>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	001a      	movs	r2, r3
 8002c50:	19bb      	adds	r3, r7, r6
 8002c52:	189a      	adds	r2, r3, r2
 8002c54:	4b4d      	ldr	r3, [pc, #308]	; (8002d8c <UART_GPS+0x428>)
 8002c56:	0010      	movs	r0, r2
 8002c58:	0019      	movs	r1, r3
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	f003 f849 	bl	8005cf4 <memcpy>

	HAL_UART_Transmit(&console_output, string, strlen(string), HAL_UART_TIMEOUT_VALUE);
 8002c62:	19bb      	adds	r3, r7, r6
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7fd fa4d 	bl	8000104 <strlen>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	4b41      	ldr	r3, [pc, #260]	; (8002d74 <UART_GPS+0x410>)
 8002c70:	19b9      	adds	r1, r7, r6
 8002c72:	4841      	ldr	r0, [pc, #260]	; (8002d78 <UART_GPS+0x414>)
 8002c74:	f000 ff14 	bl	8003aa0 <HAL_UART_Transmit>

/********************************* DISPLAY LONGITUDE *********************************/
	memset(string,'\0',20);
 8002c78:	19bb      	adds	r3, r7, r6
 8002c7a:	2214      	movs	r2, #20
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f002 ffda 	bl	8005c38 <memset>
	memset(substring,'\0',20);
 8002c84:	003b      	movs	r3, r7
 8002c86:	2214      	movs	r2, #20
 8002c88:	2100      	movs	r1, #0
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f002 ffd4 	bl	8005c38 <memset>
	HAL_UART_Transmit(&console_output, longitude_message, strlen(longitude_message), HAL_UART_TIMEOUT_VALUE);
 8002c90:	244c      	movs	r4, #76	; 0x4c
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7fd fa35 	bl	8000104 <strlen>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <UART_GPS+0x410>)
 8002ca0:	1939      	adds	r1, r7, r4
 8002ca2:	4835      	ldr	r0, [pc, #212]	; (8002d78 <UART_GPS+0x414>)
 8002ca4:	f000 fefc 	bl	8003aa0 <HAL_UART_Transmit>


	sprintf(string,"%d",(int)(gpgga.location.longitude / pow(10,gpgga.location.len_longitude_fractional_part)));
 8002ca8:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <UART_GPS+0x418>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff facd 	bl	800224c <__aeabi_i2d>
 8002cb2:	0004      	movs	r4, r0
 8002cb4:	000d      	movs	r5, r1
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <UART_GPS+0x418>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f7ff fac6 	bl	800224c <__aeabi_i2d>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	000b      	movs	r3, r1
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	4932      	ldr	r1, [pc, #200]	; (8002d90 <UART_GPS+0x42c>)
 8002cc8:	f004 f918 	bl	8006efc <pow>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	000b      	movs	r3, r1
 8002cd0:	0020      	movs	r0, r4
 8002cd2:	0029      	movs	r1, r5
 8002cd4:	f7fe f828 	bl	8000d28 <__aeabi_ddiv>
 8002cd8:	0002      	movs	r2, r0
 8002cda:	000b      	movs	r3, r1
 8002cdc:	0010      	movs	r0, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	f7ff fa7e 	bl	80021e0 <__aeabi_d2iz>
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	4926      	ldr	r1, [pc, #152]	; (8002d80 <UART_GPS+0x41c>)
 8002ce8:	19bb      	adds	r3, r7, r6
 8002cea:	0018      	movs	r0, r3
 8002cec:	f002 ff5a 	bl	8005ba4 <siprintf>

	strcat(string,".");
 8002cf0:	19bb      	adds	r3, r7, r6
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7fd fa06 	bl	8000104 <strlen>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	001a      	movs	r2, r3
 8002cfc:	19bb      	adds	r3, r7, r6
 8002cfe:	189a      	adds	r2, r3, r2
 8002d00:	4b24      	ldr	r3, [pc, #144]	; (8002d94 <UART_GPS+0x430>)
 8002d02:	0010      	movs	r0, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	2302      	movs	r3, #2
 8002d08:	001a      	movs	r2, r3
 8002d0a:	f002 fff3 	bl	8005cf4 <memcpy>

	sprintf(substring,"%d",(int)(gpgga.location.longitude % ((int)(pow(10,gpgga.location.len_longitude_fractional_part)))));
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <UART_GPS+0x418>)
 8002d10:	691c      	ldr	r4, [r3, #16]
 8002d12:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <UART_GPS+0x418>)
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	0018      	movs	r0, r3
 8002d18:	f7ff fa98 	bl	800224c <__aeabi_i2d>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	000b      	movs	r3, r1
 8002d20:	2000      	movs	r0, #0
 8002d22:	491b      	ldr	r1, [pc, #108]	; (8002d90 <UART_GPS+0x42c>)
 8002d24:	f004 f8ea 	bl	8006efc <pow>
 8002d28:	0002      	movs	r2, r0
 8002d2a:	000b      	movs	r3, r1
 8002d2c:	0010      	movs	r0, r2
 8002d2e:	0019      	movs	r1, r3
 8002d30:	f7ff fa56 	bl	80021e0 <__aeabi_d2iz>
 8002d34:	0003      	movs	r3, r0
 8002d36:	0019      	movs	r1, r3
 8002d38:	0020      	movs	r0, r4
 8002d3a:	f7fd fb65 	bl	8000408 <__aeabi_idivmod>
 8002d3e:	000b      	movs	r3, r1
 8002d40:	001a      	movs	r2, r3
 8002d42:	490f      	ldr	r1, [pc, #60]	; (8002d80 <UART_GPS+0x41c>)
 8002d44:	003b      	movs	r3, r7
 8002d46:	0018      	movs	r0, r3
 8002d48:	f002 ff2c 	bl	8005ba4 <siprintf>

	strcat(string,substring);
 8002d4c:	003a      	movs	r2, r7
 8002d4e:	19bb      	adds	r3, r7, r6
 8002d50:	0011      	movs	r1, r2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f002 ff78 	bl	8005c48 <strcat>
 8002d58:	e022      	b.n	8002da0 <UART_GPS+0x43c>
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	08007d50 	.word	0x08007d50
 8002d60:	08007d60 	.word	0x08007d60
 8002d64:	08007d68 	.word	0x08007d68
 8002d68:	08007d74 	.word	0x08007d74
 8002d6c:	08007d84 	.word	0x08007d84
 8002d70:	08007d9c 	.word	0x08007d9c
 8002d74:	01ffffff 	.word	0x01ffffff
 8002d78:	200000cc 	.word	0x200000cc
 8002d7c:	2000041c 	.word	0x2000041c
 8002d80:	08007d34 	.word	0x08007d34
 8002d84:	08007d38 	.word	0x08007d38
 8002d88:	08007d3c 	.word	0x08007d3c
 8002d8c:	08007d40 	.word	0x08007d40
 8002d90:	40240000 	.word	0x40240000
 8002d94:	08007d44 	.word	0x08007d44
 8002d98:	08007d48 	.word	0x08007d48
 8002d9c:	20000424 	.word	0x20000424
	strcat(string," ");
 8002da0:	19bb      	adds	r3, r7, r6
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7fd f9ae 	bl	8000104 <strlen>
 8002da8:	0003      	movs	r3, r0
 8002daa:	001a      	movs	r2, r3
 8002dac:	19bb      	adds	r3, r7, r6
 8002dae:	189a      	adds	r2, r3, r2
 8002db0:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <UART_GPS+0x5e4>)
 8002db2:	0010      	movs	r0, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	2302      	movs	r3, #2
 8002db8:	001a      	movs	r2, r3
 8002dba:	f002 ff9b 	bl	8005cf4 <memcpy>
	strncat(string, gpgga.location.EW,1);
 8002dbe:	4963      	ldr	r1, [pc, #396]	; (8002f4c <UART_GPS+0x5e8>)
 8002dc0:	0034      	movs	r4, r6
 8002dc2:	193b      	adds	r3, r7, r4
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f002 ff4b 	bl	8005c62 <strncat>
	strcat(string,"\n");
 8002dcc:	193b      	adds	r3, r7, r4
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f7fd f998 	bl	8000104 <strlen>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	193b      	adds	r3, r7, r4
 8002dda:	189a      	adds	r2, r3, r2
 8002ddc:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <UART_GPS+0x5ec>)
 8002dde:	0010      	movs	r0, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	2302      	movs	r3, #2
 8002de4:	001a      	movs	r2, r3
 8002de6:	f002 ff85 	bl	8005cf4 <memcpy>

	HAL_UART_Transmit(&console_output, string, strlen(string), HAL_UART_TIMEOUT_VALUE);
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7fd f989 	bl	8000104 <strlen>
 8002df2:	0003      	movs	r3, r0
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	4b57      	ldr	r3, [pc, #348]	; (8002f54 <UART_GPS+0x5f0>)
 8002df8:	1939      	adds	r1, r7, r4
 8002dfa:	4857      	ldr	r0, [pc, #348]	; (8002f58 <UART_GPS+0x5f4>)
 8002dfc:	f000 fe50 	bl	8003aa0 <HAL_UART_Transmit>

/********************************* DISPLAY NUMBER OF SATELLITES *********************************/
	memset(string,'\0',20);
 8002e00:	193b      	adds	r3, r7, r4
 8002e02:	2214      	movs	r2, #20
 8002e04:	2100      	movs	r1, #0
 8002e06:	0018      	movs	r0, r3
 8002e08:	f002 ff16 	bl	8005c38 <memset>
	memset(substring,'\0',20);
 8002e0c:	003b      	movs	r3, r7
 8002e0e:	2214      	movs	r2, #20
 8002e10:	2100      	movs	r1, #0
 8002e12:	0018      	movs	r0, r3
 8002e14:	f002 ff10 	bl	8005c38 <memset>
	HAL_UART_Transmit(&console_output, nr_satttelites_message, strlen(nr_satttelites_message), HAL_UART_TIMEOUT_VALUE);
 8002e18:	2534      	movs	r5, #52	; 0x34
 8002e1a:	197b      	adds	r3, r7, r5
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7fd f971 	bl	8000104 <strlen>
 8002e22:	0003      	movs	r3, r0
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	4b4b      	ldr	r3, [pc, #300]	; (8002f54 <UART_GPS+0x5f0>)
 8002e28:	1979      	adds	r1, r7, r5
 8002e2a:	484b      	ldr	r0, [pc, #300]	; (8002f58 <UART_GPS+0x5f4>)
 8002e2c:	f000 fe38 	bl	8003aa0 <HAL_UART_Transmit>

	sprintf(substring, "%d", gpgga.nr_of_satellites);
 8002e30:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <UART_GPS+0x5f8>)
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	494a      	ldr	r1, [pc, #296]	; (8002f60 <UART_GPS+0x5fc>)
 8002e36:	003b      	movs	r3, r7
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f002 feb3 	bl	8005ba4 <siprintf>

	strcpy(string,substring);
 8002e3e:	003a      	movs	r2, r7
 8002e40:	193b      	adds	r3, r7, r4
 8002e42:	0011      	movs	r1, r2
 8002e44:	0018      	movs	r0, r3
 8002e46:	f002 ff4d 	bl	8005ce4 <strcpy>
	strcat(string,"\n");
 8002e4a:	193b      	adds	r3, r7, r4
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7fd f959 	bl	8000104 <strlen>
 8002e52:	0003      	movs	r3, r0
 8002e54:	001a      	movs	r2, r3
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	189a      	adds	r2, r3, r2
 8002e5a:	4b3d      	ldr	r3, [pc, #244]	; (8002f50 <UART_GPS+0x5ec>)
 8002e5c:	0010      	movs	r0, r2
 8002e5e:	0019      	movs	r1, r3
 8002e60:	2302      	movs	r3, #2
 8002e62:	001a      	movs	r2, r3
 8002e64:	f002 ff46 	bl	8005cf4 <memcpy>

	HAL_UART_Transmit(&console_output, string, strlen(string), HAL_UART_TIMEOUT_VALUE);
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f7fd f94a 	bl	8000104 <strlen>
 8002e70:	0003      	movs	r3, r0
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	4b37      	ldr	r3, [pc, #220]	; (8002f54 <UART_GPS+0x5f0>)
 8002e76:	1939      	adds	r1, r7, r4
 8002e78:	4837      	ldr	r0, [pc, #220]	; (8002f58 <UART_GPS+0x5f4>)
 8002e7a:	f000 fe11 	bl	8003aa0 <HAL_UART_Transmit>

	/********************************* DISPLAY ALTITUDE *********************************/
	memset(string,'\0',20);
 8002e7e:	193b      	adds	r3, r7, r4
 8002e80:	2214      	movs	r2, #20
 8002e82:	2100      	movs	r1, #0
 8002e84:	0018      	movs	r0, r3
 8002e86:	f002 fed7 	bl	8005c38 <memset>
	memset(substring,'\0',20);
 8002e8a:	003b      	movs	r3, r7
 8002e8c:	2214      	movs	r2, #20
 8002e8e:	2100      	movs	r1, #0
 8002e90:	0018      	movs	r0, r3
 8002e92:	f002 fed1 	bl	8005c38 <memset>
	HAL_UART_Transmit(&console_output, altitude_message, strlen(altitude_message), HAL_UART_TIMEOUT_VALUE);
 8002e96:	2528      	movs	r5, #40	; 0x28
 8002e98:	197b      	adds	r3, r7, r5
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7fd f932 	bl	8000104 <strlen>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <UART_GPS+0x5f0>)
 8002ea6:	1979      	adds	r1, r7, r5
 8002ea8:	482b      	ldr	r0, [pc, #172]	; (8002f58 <UART_GPS+0x5f4>)
 8002eaa:	f000 fdf9 	bl	8003aa0 <HAL_UART_Transmit>

	sprintf(string, "%d", gpgga.altitude / 10);
 8002eae:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <UART_GPS+0x5f8>)
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	210a      	movs	r1, #10
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7fd f9c1 	bl	800023c <__divsi3>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	4928      	ldr	r1, [pc, #160]	; (8002f60 <UART_GPS+0x5fc>)
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f002 fe6e 	bl	8005ba4 <siprintf>

	strcat(string,".");
 8002ec8:	193b      	adds	r3, r7, r4
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7fd f91a 	bl	8000104 <strlen>
 8002ed0:	0003      	movs	r3, r0
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	193b      	adds	r3, r7, r4
 8002ed6:	189a      	adds	r2, r3, r2
 8002ed8:	4b22      	ldr	r3, [pc, #136]	; (8002f64 <UART_GPS+0x600>)
 8002eda:	0010      	movs	r0, r2
 8002edc:	0019      	movs	r1, r3
 8002ede:	2302      	movs	r3, #2
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	f002 ff07 	bl	8005cf4 <memcpy>

	sprintf(substring,"%d",(int)(gpgga.altitude % 10));
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <UART_GPS+0x5f8>)
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eea:	210a      	movs	r1, #10
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7fd fa8b 	bl	8000408 <__aeabi_idivmod>
 8002ef2:	000b      	movs	r3, r1
 8002ef4:	001a      	movs	r2, r3
 8002ef6:	491a      	ldr	r1, [pc, #104]	; (8002f60 <UART_GPS+0x5fc>)
 8002ef8:	003b      	movs	r3, r7
 8002efa:	0018      	movs	r0, r3
 8002efc:	f002 fe52 	bl	8005ba4 <siprintf>

	strcat(string,substring);
 8002f00:	003a      	movs	r2, r7
 8002f02:	193b      	adds	r3, r7, r4
 8002f04:	0011      	movs	r1, r2
 8002f06:	0018      	movs	r0, r3
 8002f08:	f002 fe9e 	bl	8005c48 <strcat>
	strcat(string,"\n\n");
 8002f0c:	193b      	adds	r3, r7, r4
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7fd f8f8 	bl	8000104 <strlen>
 8002f14:	0003      	movs	r3, r0
 8002f16:	001a      	movs	r2, r3
 8002f18:	193b      	adds	r3, r7, r4
 8002f1a:	189a      	adds	r2, r3, r2
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <UART_GPS+0x604>)
 8002f1e:	0010      	movs	r0, r2
 8002f20:	0019      	movs	r1, r3
 8002f22:	2303      	movs	r3, #3
 8002f24:	001a      	movs	r2, r3
 8002f26:	f002 fee5 	bl	8005cf4 <memcpy>

	HAL_UART_Transmit(&console_output, string, strlen(string), HAL_UART_TIMEOUT_VALUE);
 8002f2a:	193b      	adds	r3, r7, r4
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f7fd f8e9 	bl	8000104 <strlen>
 8002f32:	0003      	movs	r3, r0
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <UART_GPS+0x5f0>)
 8002f38:	1939      	adds	r1, r7, r4
 8002f3a:	4807      	ldr	r0, [pc, #28]	; (8002f58 <UART_GPS+0x5f4>)
 8002f3c:	f000 fdb0 	bl	8003aa0 <HAL_UART_Transmit>

}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b021      	add	sp, #132	; 0x84
 8002f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f48:	08007d48 	.word	0x08007d48
 8002f4c:	20000430 	.word	0x20000430
 8002f50:	08007d40 	.word	0x08007d40
 8002f54:	01ffffff 	.word	0x01ffffff
 8002f58:	200000cc 	.word	0x200000cc
 8002f5c:	2000041c 	.word	0x2000041c
 8002f60:	08007d34 	.word	0x08007d34
 8002f64:	08007d44 	.word	0x08007d44
 8002f68:	08007d4c 	.word	0x08007d4c

08002f6c <HAL_MspInit>:
 *      Author: lorin
 */
#include "main.h"

void HAL_MspInit(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor


	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <HAL_MspInit+0x18>)
 8002f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <HAL_MspInit+0x18>)
 8002f76:	21e0      	movs	r1, #224	; 0xe0
 8002f78:	02c9      	lsls	r1, r1, #11
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b08d      	sub	sp, #52	; 0x34
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_uart;

  /********************enable clocks********************/

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f90:	4b3a      	ldr	r3, [pc, #232]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f94:	4b39      	ldr	r3, [pc, #228]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f9c:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa8:	4b34      	ldr	r3, [pc, #208]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fac:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002fae:	2104      	movs	r1, #4
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb4:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	2204      	movs	r2, #4
 8002fba:	4013      	ands	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	697b      	ldr	r3, [r7, #20]

  __HAL_RCC_USART1_CLK_ENABLE();
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc4:	4b2d      	ldr	r3, [pc, #180]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002fc6:	2180      	movs	r1, #128	; 0x80
 8002fc8:	01c9      	lsls	r1, r1, #7
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	641a      	str	r2, [r3, #64]	; 0x40
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	01db      	lsls	r3, r3, #7
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_USART2_CLK_ENABLE();
 8002fdc:	4b27      	ldr	r3, [pc, #156]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe0:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0289      	lsls	r1, r1, #10
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_UART_MspInit+0xf4>)
 8002fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	029b      	lsls	r3, r3, #10
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]

  /********************pin muxing***********************/

  /* UART TX CONSOLE */
  gpio_uart.Pin = GPIO_PIN_2;
 8002ff8:	241c      	movs	r4, #28
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 8003000:	193b      	adds	r3, r7, r4
 8003002:	2202      	movs	r2, #2
 8003004:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART2;
 8003006:	193b      	adds	r3, r7, r4
 8003008:	2201      	movs	r2, #1
 800300a:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 800300c:	193b      	adds	r3, r7, r4
 800300e:	2201      	movs	r2, #1
 8003010:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 8003012:	193b      	adds	r3, r7, r4
 8003014:	2202      	movs	r2, #2
 8003016:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &gpio_uart);
 8003018:	193a      	adds	r2, r7, r4
 800301a:	23a0      	movs	r3, #160	; 0xa0
 800301c:	05db      	lsls	r3, r3, #23
 800301e:	0011      	movs	r1, r2
 8003020:	0018      	movs	r0, r3
 8003022:	f000 facd 	bl	80035c0 <HAL_GPIO_Init>

  /* UART TX GPS */
  gpio_uart.Pin = GPIO_PIN_4;
 8003026:	193b      	adds	r3, r7, r4
 8003028:	2210      	movs	r2, #16
 800302a:	601a      	str	r2, [r3, #0]
  gpio_uart.Mode = GPIO_MODE_AF_PP;
 800302c:	193b      	adds	r3, r7, r4
 800302e:	2202      	movs	r2, #2
 8003030:	605a      	str	r2, [r3, #4]
  gpio_uart.Alternate = GPIO_AF1_USART1;
 8003032:	193b      	adds	r3, r7, r4
 8003034:	2201      	movs	r2, #1
 8003036:	611a      	str	r2, [r3, #16]
  gpio_uart.Pull = GPIO_PULLUP;
 8003038:	193b      	adds	r3, r7, r4
 800303a:	2201      	movs	r2, #1
 800303c:	609a      	str	r2, [r3, #8]
  gpio_uart.Speed = GPIO_SPEED_FREQ_HIGH;
 800303e:	193b      	adds	r3, r7, r4
 8003040:	2202      	movs	r2, #2
 8003042:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 8003044:	193b      	adds	r3, r7, r4
 8003046:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <HAL_UART_MspInit+0xf8>)
 8003048:	0019      	movs	r1, r3
 800304a:	0010      	movs	r0, r2
 800304c:	f000 fab8 	bl	80035c0 <HAL_GPIO_Init>

  /* UART RX GPS */
  gpio_uart.Pin = GPIO_PIN_5;
 8003050:	0021      	movs	r1, r4
 8003052:	187b      	adds	r3, r7, r1
 8003054:	2220      	movs	r2, #32
 8003056:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOC, &gpio_uart);
 8003058:	187b      	adds	r3, r7, r1
 800305a:	4a09      	ldr	r2, [pc, #36]	; (8003080 <HAL_UART_MspInit+0xf8>)
 800305c:	0019      	movs	r1, r3
 800305e:	0010      	movs	r0, r2
 8003060:	f000 faae 	bl	80035c0 <HAL_GPIO_Init>

  //3 . Enable the IRQ and set up the priority (NVIC settings )
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003064:	201b      	movs	r0, #27
 8003066:	f000 f9ba 	bl	80033de <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn,15,0);
 800306a:	2200      	movs	r2, #0
 800306c:	210f      	movs	r1, #15
 800306e:	201b      	movs	r0, #27
 8003070:	f000 f9a0 	bl	80033b4 <HAL_NVIC_SetPriority>

}
 8003074:	46c0      	nop			; (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b00d      	add	sp, #52	; 0x34
 800307a:	bd90      	pop	{r4, r7, pc}
 800307c:	40021000 	.word	0x40021000
 8003080:	50000800 	.word	0x50000800

08003084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800308c:	4a14      	ldr	r2, [pc, #80]	; (80030e0 <_sbrk+0x5c>)
 800308e:	4b15      	ldr	r3, [pc, #84]	; (80030e4 <_sbrk+0x60>)
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003098:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <_sbrk+0x64>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d102      	bne.n	80030a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030a0:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <_sbrk+0x64>)
 80030a2:	4a12      	ldr	r2, [pc, #72]	; (80030ec <_sbrk+0x68>)
 80030a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <_sbrk+0x64>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	18d3      	adds	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d207      	bcs.n	80030c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030b4:	f002 fdea 	bl	8005c8c <__errno>
 80030b8:	0003      	movs	r3, r0
 80030ba:	220c      	movs	r2, #12
 80030bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030be:	2301      	movs	r3, #1
 80030c0:	425b      	negs	r3, r3
 80030c2:	e009      	b.n	80030d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <_sbrk+0x64>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ca:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <_sbrk+0x64>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	18d2      	adds	r2, r2, r3
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <_sbrk+0x64>)
 80030d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80030d6:	68fb      	ldr	r3, [r7, #12]
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b006      	add	sp, #24
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20024000 	.word	0x20024000
 80030e4:	00000400 	.word	0x00000400
 80030e8:	20000448 	.word	0x20000448
 80030ec:	20000598 	.word	0x20000598

080030f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80030fe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003100:	f7ff fff6 	bl	80030f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003104:	480c      	ldr	r0, [pc, #48]	; (8003138 <LoopForever+0x6>)
  ldr r1, =_edata
 8003106:	490d      	ldr	r1, [pc, #52]	; (800313c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <LoopForever+0xe>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800310c:	e002      	b.n	8003114 <LoopCopyDataInit>

0800310e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800310e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003112:	3304      	adds	r3, #4

08003114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003118:	d3f9      	bcc.n	800310e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800311a:	4a0a      	ldr	r2, [pc, #40]	; (8003144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800311c:	4c0a      	ldr	r4, [pc, #40]	; (8003148 <LoopForever+0x16>)
  movs r3, #0
 800311e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003120:	e001      	b.n	8003126 <LoopFillZerobss>

08003122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003124:	3204      	adds	r2, #4

08003126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003128:	d3fb      	bcc.n	8003122 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800312a:	f002 fdb5 	bl	8005c98 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800312e:	f7ff fb89 	bl	8002844 <main>

08003132 <LoopForever>:

LoopForever:
  b LoopForever
 8003132:	e7fe      	b.n	8003132 <LoopForever>
  ldr   r0, =_estack
 8003134:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800313c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8003140:	08007fc0 	.word	0x08007fc0
  ldr r2, =_sbss
 8003144:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003148:	20000598 	.word	0x20000598

0800314c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800314c:	e7fe      	b.n	800314c <ADC1_COMP_IRQHandler>
	...

08003150 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003156:	1dfb      	adds	r3, r7, #7
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <HAL_Init+0x3c>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_Init+0x3c>)
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	0049      	lsls	r1, r1, #1
 8003166:	430a      	orrs	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800316a:	2000      	movs	r0, #0
 800316c:	f000 f810 	bl	8003190 <HAL_InitTick>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d003      	beq.n	800317c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003174:	1dfb      	adds	r3, r7, #7
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]
 800317a:	e001      	b.n	8003180 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800317c:	f7ff fef6 	bl	8002f6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	781b      	ldrb	r3, [r3, #0]
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40022000 	.word	0x40022000

08003190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003198:	230f      	movs	r3, #15
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80031a0:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_InitTick+0x88>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02b      	beq.n	8003200 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80031a8:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_InitTick+0x8c>)
 80031aa:	681c      	ldr	r4, [r3, #0]
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <HAL_InitTick+0x88>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	0019      	movs	r1, r3
 80031b2:	23fa      	movs	r3, #250	; 0xfa
 80031b4:	0098      	lsls	r0, r3, #2
 80031b6:	f7fc ffb7 	bl	8000128 <__udivsi3>
 80031ba:	0003      	movs	r3, r0
 80031bc:	0019      	movs	r1, r3
 80031be:	0020      	movs	r0, r4
 80031c0:	f7fc ffb2 	bl	8000128 <__udivsi3>
 80031c4:	0003      	movs	r3, r0
 80031c6:	0018      	movs	r0, r3
 80031c8:	f000 f919 	bl	80033fe <HAL_SYSTICK_Config>
 80031cc:	1e03      	subs	r3, r0, #0
 80031ce:	d112      	bne.n	80031f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	d80a      	bhi.n	80031ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	2301      	movs	r3, #1
 80031da:	425b      	negs	r3, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	0018      	movs	r0, r3
 80031e0:	f000 f8e8 	bl	80033b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031e4:	4b0e      	ldr	r3, [pc, #56]	; (8003220 <HAL_InitTick+0x90>)
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e00d      	b.n	8003208 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80031ec:	230f      	movs	r3, #15
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2201      	movs	r2, #1
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e008      	b.n	8003208 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031f6:	230f      	movs	r3, #15
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	2201      	movs	r2, #1
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	e003      	b.n	8003208 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003200:	230f      	movs	r3, #15
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003208:	230f      	movs	r3, #15
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	781b      	ldrb	r3, [r3, #0]
}
 800320e:	0018      	movs	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	b005      	add	sp, #20
 8003214:	bd90      	pop	{r4, r7, pc}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	20000048 	.word	0x20000048
 800321c:	20000040 	.word	0x20000040
 8003220:	20000044 	.word	0x20000044

08003224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_IncTick+0x1c>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	001a      	movs	r2, r3
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_IncTick+0x20>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	18d2      	adds	r2, r2, r3
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_IncTick+0x20>)
 8003236:	601a      	str	r2, [r3, #0]
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000048 	.word	0x20000048
 8003244:	2000044c 	.word	0x2000044c

08003248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  return uwTick;
 800324c:	4b02      	ldr	r3, [pc, #8]	; (8003258 <HAL_GetTick+0x10>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			; (mov r8, r8)
 8003258:	2000044c 	.word	0x2000044c

0800325c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	0002      	movs	r2, r0
 8003264:	1dfb      	adds	r3, r7, #7
 8003266:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003268:	1dfb      	adds	r3, r7, #7
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b7f      	cmp	r3, #127	; 0x7f
 800326e:	d809      	bhi.n	8003284 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003270:	1dfb      	adds	r3, r7, #7
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	001a      	movs	r2, r3
 8003276:	231f      	movs	r3, #31
 8003278:	401a      	ands	r2, r3
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <__NVIC_EnableIRQ+0x30>)
 800327c:	2101      	movs	r1, #1
 800327e:	4091      	lsls	r1, r2
 8003280:	000a      	movs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}
 800328c:	e000e100 	.word	0xe000e100

08003290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	0002      	movs	r2, r0
 8003298:	6039      	str	r1, [r7, #0]
 800329a:	1dfb      	adds	r3, r7, #7
 800329c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800329e:	1dfb      	adds	r3, r7, #7
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b7f      	cmp	r3, #127	; 0x7f
 80032a4:	d828      	bhi.n	80032f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032a6:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <__NVIC_SetPriority+0xd4>)
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b25b      	sxtb	r3, r3
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	33c0      	adds	r3, #192	; 0xc0
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	589b      	ldr	r3, [r3, r2]
 80032b6:	1dfa      	adds	r2, r7, #7
 80032b8:	7812      	ldrb	r2, [r2, #0]
 80032ba:	0011      	movs	r1, r2
 80032bc:	2203      	movs	r2, #3
 80032be:	400a      	ands	r2, r1
 80032c0:	00d2      	lsls	r2, r2, #3
 80032c2:	21ff      	movs	r1, #255	; 0xff
 80032c4:	4091      	lsls	r1, r2
 80032c6:	000a      	movs	r2, r1
 80032c8:	43d2      	mvns	r2, r2
 80032ca:	401a      	ands	r2, r3
 80032cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	22ff      	movs	r2, #255	; 0xff
 80032d4:	401a      	ands	r2, r3
 80032d6:	1dfb      	adds	r3, r7, #7
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	0018      	movs	r0, r3
 80032dc:	2303      	movs	r3, #3
 80032de:	4003      	ands	r3, r0
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032e4:	481f      	ldr	r0, [pc, #124]	; (8003364 <__NVIC_SetPriority+0xd4>)
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	089b      	lsrs	r3, r3, #2
 80032ee:	430a      	orrs	r2, r1
 80032f0:	33c0      	adds	r3, #192	; 0xc0
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80032f6:	e031      	b.n	800335c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <__NVIC_SetPriority+0xd8>)
 80032fa:	1dfb      	adds	r3, r7, #7
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	0019      	movs	r1, r3
 8003300:	230f      	movs	r3, #15
 8003302:	400b      	ands	r3, r1
 8003304:	3b08      	subs	r3, #8
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3306      	adds	r3, #6
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	18d3      	adds	r3, r2, r3
 800330e:	3304      	adds	r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	1dfa      	adds	r2, r7, #7
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	0011      	movs	r1, r2
 8003318:	2203      	movs	r2, #3
 800331a:	400a      	ands	r2, r1
 800331c:	00d2      	lsls	r2, r2, #3
 800331e:	21ff      	movs	r1, #255	; 0xff
 8003320:	4091      	lsls	r1, r2
 8003322:	000a      	movs	r2, r1
 8003324:	43d2      	mvns	r2, r2
 8003326:	401a      	ands	r2, r3
 8003328:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	019b      	lsls	r3, r3, #6
 800332e:	22ff      	movs	r2, #255	; 0xff
 8003330:	401a      	ands	r2, r3
 8003332:	1dfb      	adds	r3, r7, #7
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	0018      	movs	r0, r3
 8003338:	2303      	movs	r3, #3
 800333a:	4003      	ands	r3, r0
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003340:	4809      	ldr	r0, [pc, #36]	; (8003368 <__NVIC_SetPriority+0xd8>)
 8003342:	1dfb      	adds	r3, r7, #7
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	001c      	movs	r4, r3
 8003348:	230f      	movs	r3, #15
 800334a:	4023      	ands	r3, r4
 800334c:	3b08      	subs	r3, #8
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	430a      	orrs	r2, r1
 8003352:	3306      	adds	r3, #6
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	18c3      	adds	r3, r0, r3
 8003358:	3304      	adds	r3, #4
 800335a:	601a      	str	r2, [r3, #0]
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	b003      	add	sp, #12
 8003362:	bd90      	pop	{r4, r7, pc}
 8003364:	e000e100 	.word	0xe000e100
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	1e5a      	subs	r2, r3, #1
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	045b      	lsls	r3, r3, #17
 800337c:	429a      	cmp	r2, r3
 800337e:	d301      	bcc.n	8003384 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003380:	2301      	movs	r3, #1
 8003382:	e010      	b.n	80033a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <SysTick_Config+0x44>)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	3a01      	subs	r2, #1
 800338a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338c:	2301      	movs	r3, #1
 800338e:	425b      	negs	r3, r3
 8003390:	2103      	movs	r1, #3
 8003392:	0018      	movs	r0, r3
 8003394:	f7ff ff7c 	bl	8003290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <SysTick_Config+0x44>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <SysTick_Config+0x44>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	210f      	movs	r1, #15
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	1c02      	adds	r2, r0, #0
 80033c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b25b      	sxtb	r3, r3
 80033ce:	0011      	movs	r1, r2
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7ff ff5d 	bl	8003290 <__NVIC_SetPriority>
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b004      	add	sp, #16
 80033dc:	bd80      	pop	{r7, pc}

080033de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	0002      	movs	r2, r0
 80033e6:	1dfb      	adds	r3, r7, #7
 80033e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b25b      	sxtb	r3, r3
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff ff33 	bl	800325c <__NVIC_EnableIRQ>
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	b002      	add	sp, #8
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0018      	movs	r0, r3
 800340a:	f7ff ffaf 	bl	800336c <SysTick_Config>
 800340e:	0003      	movs	r3, r0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b002      	add	sp, #8
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800341c:	f000 f803 	bl	8003426 <HAL_SYSTICK_Callback>
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e04f      	b.n	80034e2 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2225      	movs	r2, #37	; 0x25
 8003446:	5c9b      	ldrb	r3, [r3, r2]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d008      	beq.n	8003460 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2204      	movs	r2, #4
 8003452:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2224      	movs	r2, #36	; 0x24
 8003458:	2100      	movs	r1, #0
 800345a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e040      	b.n	80034e2 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	210e      	movs	r1, #14
 800346c:	438a      	bics	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800347a:	491c      	ldr	r1, [pc, #112]	; (80034ec <HAL_DMA_Abort+0xbc>)
 800347c:	400a      	ands	r2, r1
 800347e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	438a      	bics	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	221c      	movs	r2, #28
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	2101      	movs	r1, #1
 800349e:	4091      	lsls	r1, r2
 80034a0:	000a      	movs	r2, r1
 80034a2:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c0:	490a      	ldr	r1, [pc, #40]	; (80034ec <HAL_DMA_Abort+0xbc>)
 80034c2:	400a      	ands	r2, r1
 80034c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2225      	movs	r2, #37	; 0x25
 80034d4:	2101      	movs	r1, #1
 80034d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	2100      	movs	r1, #0
 80034de:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b002      	add	sp, #8
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	fffffeff 	.word	0xfffffeff

080034f0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	210f      	movs	r1, #15
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2225      	movs	r2, #37	; 0x25
 8003504:	5c9b      	ldrb	r3, [r3, r2]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d006      	beq.n	800351a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2204      	movs	r2, #4
 8003510:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003512:	187b      	adds	r3, r7, r1
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e048      	b.n	80035ac <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	210e      	movs	r1, #14
 8003526:	438a      	bics	r2, r1
 8003528:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2101      	movs	r1, #1
 8003536:	438a      	bics	r2, r1
 8003538:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003544:	491d      	ldr	r1, [pc, #116]	; (80035bc <HAL_DMA_Abort_IT+0xcc>)
 8003546:	400a      	ands	r2, r1
 8003548:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	221c      	movs	r2, #28
 8003550:	401a      	ands	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2101      	movs	r1, #1
 8003558:	4091      	lsls	r1, r2
 800355a:	000a      	movs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003566:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00c      	beq.n	800358a <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	4910      	ldr	r1, [pc, #64]	; (80035bc <HAL_DMA_Abort_IT+0xcc>)
 800357c:	400a      	ands	r2, r1
 800357e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003588:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2225      	movs	r2, #37	; 0x25
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2224      	movs	r2, #36	; 0x24
 8003596:	2100      	movs	r1, #0
 8003598:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d004      	beq.n	80035ac <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	0010      	movs	r0, r2
 80035aa:	4798      	blx	r3
    }
  }
  return status;
 80035ac:	230f      	movs	r3, #15
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	781b      	ldrb	r3, [r3, #0]
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b004      	add	sp, #16
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	fffffeff 	.word	0xfffffeff

080035c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ce:	e14d      	b.n	800386c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2101      	movs	r1, #1
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4091      	lsls	r1, r2
 80035da:	000a      	movs	r2, r1
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d100      	bne.n	80035e8 <HAL_GPIO_Init+0x28>
 80035e6:	e13e      	b.n	8003866 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2203      	movs	r2, #3
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d005      	beq.n	8003600 <HAL_GPIO_Init+0x40>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2203      	movs	r2, #3
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d130      	bne.n	8003662 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2203      	movs	r2, #3
 800360c:	409a      	lsls	r2, r3
 800360e:	0013      	movs	r3, r2
 8003610:	43da      	mvns	r2, r3
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	409a      	lsls	r2, r3
 8003622:	0013      	movs	r3, r2
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003636:	2201      	movs	r2, #1
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	409a      	lsls	r2, r3
 800363c:	0013      	movs	r3, r2
 800363e:	43da      	mvns	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	2201      	movs	r2, #1
 800364e:	401a      	ands	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	409a      	lsls	r2, r3
 8003654:	0013      	movs	r3, r2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2203      	movs	r2, #3
 8003668:	4013      	ands	r3, r2
 800366a:	2b03      	cmp	r3, #3
 800366c:	d017      	beq.n	800369e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	2203      	movs	r2, #3
 800367a:	409a      	lsls	r2, r3
 800367c:	0013      	movs	r3, r2
 800367e:	43da      	mvns	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	409a      	lsls	r2, r3
 8003690:	0013      	movs	r3, r2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2203      	movs	r2, #3
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d123      	bne.n	80036f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	08da      	lsrs	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3208      	adds	r2, #8
 80036b2:	0092      	lsls	r2, r2, #2
 80036b4:	58d3      	ldr	r3, [r2, r3]
 80036b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2207      	movs	r2, #7
 80036bc:	4013      	ands	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	220f      	movs	r2, #15
 80036c2:	409a      	lsls	r2, r3
 80036c4:	0013      	movs	r3, r2
 80036c6:	43da      	mvns	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2107      	movs	r1, #7
 80036d6:	400b      	ands	r3, r1
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	409a      	lsls	r2, r3
 80036dc:	0013      	movs	r3, r2
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	08da      	lsrs	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3208      	adds	r2, #8
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	6939      	ldr	r1, [r7, #16]
 80036f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	2203      	movs	r2, #3
 80036fe:	409a      	lsls	r2, r3
 8003700:	0013      	movs	r3, r2
 8003702:	43da      	mvns	r2, r3
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2203      	movs	r2, #3
 8003710:	401a      	ands	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	409a      	lsls	r2, r3
 8003718:	0013      	movs	r3, r2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	23c0      	movs	r3, #192	; 0xc0
 800372c:	029b      	lsls	r3, r3, #10
 800372e:	4013      	ands	r3, r2
 8003730:	d100      	bne.n	8003734 <HAL_GPIO_Init+0x174>
 8003732:	e098      	b.n	8003866 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003734:	4a53      	ldr	r2, [pc, #332]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	3318      	adds	r3, #24
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	589b      	ldr	r3, [r3, r2]
 8003740:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2203      	movs	r2, #3
 8003746:	4013      	ands	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	220f      	movs	r2, #15
 800374c:	409a      	lsls	r2, r3
 800374e:	0013      	movs	r3, r2
 8003750:	43da      	mvns	r2, r3
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	23a0      	movs	r3, #160	; 0xa0
 800375c:	05db      	lsls	r3, r3, #23
 800375e:	429a      	cmp	r2, r3
 8003760:	d019      	beq.n	8003796 <HAL_GPIO_Init+0x1d6>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a48      	ldr	r2, [pc, #288]	; (8003888 <HAL_GPIO_Init+0x2c8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d013      	beq.n	8003792 <HAL_GPIO_Init+0x1d2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a47      	ldr	r2, [pc, #284]	; (800388c <HAL_GPIO_Init+0x2cc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00d      	beq.n	800378e <HAL_GPIO_Init+0x1ce>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a46      	ldr	r2, [pc, #280]	; (8003890 <HAL_GPIO_Init+0x2d0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d007      	beq.n	800378a <HAL_GPIO_Init+0x1ca>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a45      	ldr	r2, [pc, #276]	; (8003894 <HAL_GPIO_Init+0x2d4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d101      	bne.n	8003786 <HAL_GPIO_Init+0x1c6>
 8003782:	2304      	movs	r3, #4
 8003784:	e008      	b.n	8003798 <HAL_GPIO_Init+0x1d8>
 8003786:	2305      	movs	r3, #5
 8003788:	e006      	b.n	8003798 <HAL_GPIO_Init+0x1d8>
 800378a:	2303      	movs	r3, #3
 800378c:	e004      	b.n	8003798 <HAL_GPIO_Init+0x1d8>
 800378e:	2302      	movs	r3, #2
 8003790:	e002      	b.n	8003798 <HAL_GPIO_Init+0x1d8>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_GPIO_Init+0x1d8>
 8003796:	2300      	movs	r3, #0
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	2103      	movs	r1, #3
 800379c:	400a      	ands	r2, r1
 800379e:	00d2      	lsls	r2, r2, #3
 80037a0:	4093      	lsls	r3, r2
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80037a8:	4936      	ldr	r1, [pc, #216]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	3318      	adds	r3, #24
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037b6:	4b33      	ldr	r3, [pc, #204]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	43da      	mvns	r2, r3
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	035b      	lsls	r3, r3, #13
 80037ce:	4013      	ands	r3, r2
 80037d0:	d003      	beq.n	80037da <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037da:	4b2a      	ldr	r3, [pc, #168]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80037e0:	4b28      	ldr	r3, [pc, #160]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	43da      	mvns	r2, r3
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	039b      	lsls	r3, r3, #14
 80037f8:	4013      	ands	r3, r2
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003804:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800380a:	4a1e      	ldr	r2, [pc, #120]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 800380c:	2384      	movs	r3, #132	; 0x84
 800380e:	58d3      	ldr	r3, [r2, r3]
 8003810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	43da      	mvns	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4013      	ands	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	029b      	lsls	r3, r3, #10
 8003824:	4013      	ands	r3, r2
 8003826:	d003      	beq.n	8003830 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003830:	4914      	ldr	r1, [pc, #80]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 8003832:	2284      	movs	r2, #132	; 0x84
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003838:	4a12      	ldr	r2, [pc, #72]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	58d3      	ldr	r3, [r2, r3]
 800383e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	43da      	mvns	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	025b      	lsls	r3, r3, #9
 8003852:	4013      	ands	r3, r2
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800385e:	4909      	ldr	r1, [pc, #36]	; (8003884 <HAL_GPIO_Init+0x2c4>)
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	40da      	lsrs	r2, r3
 8003874:	1e13      	subs	r3, r2, #0
 8003876:	d000      	beq.n	800387a <HAL_GPIO_Init+0x2ba>
 8003878:	e6aa      	b.n	80035d0 <HAL_GPIO_Init+0x10>
  }
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b006      	add	sp, #24
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021800 	.word	0x40021800
 8003888:	50000400 	.word	0x50000400
 800388c:	50000800 	.word	0x50000800
 8003890:	50000c00 	.word	0x50000c00
 8003894:	50001000 	.word	0x50001000

08003898 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	23e0      	movs	r3, #224	; 0xe0
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	4013      	ands	r3, r2
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000

080038b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038b6:	4b3c      	ldr	r3, [pc, #240]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2238      	movs	r2, #56	; 0x38
 80038bc:	4013      	ands	r3, r2
 80038be:	d10f      	bne.n	80038e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80038c0:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0adb      	lsrs	r3, r3, #11
 80038c6:	2207      	movs	r2, #7
 80038c8:	4013      	ands	r3, r2
 80038ca:	2201      	movs	r2, #1
 80038cc:	409a      	lsls	r2, r3
 80038ce:	0013      	movs	r3, r2
 80038d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	4835      	ldr	r0, [pc, #212]	; (80039ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80038d6:	f7fc fc27 	bl	8000128 <__udivsi3>
 80038da:	0003      	movs	r3, r0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	e05d      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038e0:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2238      	movs	r2, #56	; 0x38
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d102      	bne.n	80038f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038ec:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	e054      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f2:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2238      	movs	r2, #56	; 0x38
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d138      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80038fe:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2203      	movs	r2, #3
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	2207      	movs	r2, #7
 8003910:	4013      	ands	r3, r2
 8003912:	3301      	adds	r3, #1
 8003914:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d10d      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	4824      	ldr	r0, [pc, #144]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003920:	f7fc fc02 	bl	8000128 <__udivsi3>
 8003924:	0003      	movs	r3, r0
 8003926:	0019      	movs	r1, r3
 8003928:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	0a1b      	lsrs	r3, r3, #8
 800392e:	227f      	movs	r2, #127	; 0x7f
 8003930:	4013      	ands	r3, r2
 8003932:	434b      	muls	r3, r1
 8003934:	617b      	str	r3, [r7, #20]
        break;
 8003936:	e00d      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	481c      	ldr	r0, [pc, #112]	; (80039ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800393c:	f7fc fbf4 	bl	8000128 <__udivsi3>
 8003940:	0003      	movs	r3, r0
 8003942:	0019      	movs	r1, r3
 8003944:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	0a1b      	lsrs	r3, r3, #8
 800394a:	227f      	movs	r2, #127	; 0x7f
 800394c:	4013      	ands	r3, r2
 800394e:	434b      	muls	r3, r1
 8003950:	617b      	str	r3, [r7, #20]
        break;
 8003952:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003954:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0f5b      	lsrs	r3, r3, #29
 800395a:	2207      	movs	r2, #7
 800395c:	4013      	ands	r3, r2
 800395e:	3301      	adds	r3, #1
 8003960:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	6978      	ldr	r0, [r7, #20]
 8003966:	f7fc fbdf 	bl	8000128 <__udivsi3>
 800396a:	0003      	movs	r3, r0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e015      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2238      	movs	r2, #56	; 0x38
 8003976:	4013      	ands	r3, r2
 8003978:	2b20      	cmp	r3, #32
 800397a:	d103      	bne.n	8003984 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	e00b      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2238      	movs	r2, #56	; 0x38
 800398a:	4013      	ands	r3, r2
 800398c:	2b18      	cmp	r3, #24
 800398e:	d103      	bne.n	8003998 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003990:	23fa      	movs	r3, #250	; 0xfa
 8003992:	01db      	lsls	r3, r3, #7
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	e001      	b.n	800399c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800399c:	693b      	ldr	r3, [r7, #16]
}
 800399e:	0018      	movs	r0, r3
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b006      	add	sp, #24
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	46c0      	nop			; (mov r8, r8)
 80039a8:	40021000 	.word	0x40021000
 80039ac:	00f42400 	.word	0x00f42400
 80039b0:	007a1200 	.word	0x007a1200

080039b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b8:	4b02      	ldr	r3, [pc, #8]	; (80039c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	20000040 	.word	0x20000040

080039c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c8:	b5b0      	push	{r4, r5, r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039cc:	f7ff fff2 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039d0:	0004      	movs	r4, r0
 80039d2:	f7ff ff61 	bl	8003898 <LL_RCC_GetAPB1Prescaler>
 80039d6:	0003      	movs	r3, r0
 80039d8:	0b1a      	lsrs	r2, r3, #12
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039dc:	0092      	lsls	r2, r2, #2
 80039de:	58d3      	ldr	r3, [r2, r3]
 80039e0:	221f      	movs	r2, #31
 80039e2:	4013      	ands	r3, r2
 80039e4:	40dc      	lsrs	r4, r3
 80039e6:	0023      	movs	r3, r4
}
 80039e8:	0018      	movs	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bdb0      	pop	{r4, r5, r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	08007df4 	.word	0x08007df4

080039f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e046      	b.n	8003a94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2288      	movs	r2, #136	; 0x88
 8003a0a:	589b      	ldr	r3, [r3, r2]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d107      	bne.n	8003a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2284      	movs	r2, #132	; 0x84
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7ff fab4 	bl	8002f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2288      	movs	r2, #136	; 0x88
 8003a24:	2124      	movs	r1, #36	; 0x24
 8003a26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2101      	movs	r1, #1
 8003a34:	438a      	bics	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f000 ffce 	bl	80049e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 fc74 	bl	8004338 <UART_SetConfig>
 8003a50:	0003      	movs	r3, r0
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e01c      	b.n	8003a94 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	490d      	ldr	r1, [pc, #52]	; (8003a9c <HAL_UART_Init+0xa8>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	212a      	movs	r1, #42	; 0x2a
 8003a76:	438a      	bics	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	f001 f85d 	bl	8004b4c <UART_CheckIdleState>
 8003a92:	0003      	movs	r3, r0
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b002      	add	sp, #8
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	ffffb7ff 	.word	0xffffb7ff

08003aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	1dbb      	adds	r3, r7, #6
 8003aae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2288      	movs	r2, #136	; 0x88
 8003ab4:	589b      	ldr	r3, [r3, r2]
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d000      	beq.n	8003abc <HAL_UART_Transmit+0x1c>
 8003aba:	e090      	b.n	8003bde <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_UART_Transmit+0x2a>
 8003ac2:	1dbb      	adds	r3, r7, #6
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e088      	b.n	8003be0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	2380      	movs	r3, #128	; 0x80
 8003ad4:	015b      	lsls	r3, r3, #5
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d109      	bne.n	8003aee <HAL_UART_Transmit+0x4e>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d105      	bne.n	8003aee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d001      	beq.n	8003aee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e078      	b.n	8003be0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2290      	movs	r2, #144	; 0x90
 8003af2:	2100      	movs	r1, #0
 8003af4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2288      	movs	r2, #136	; 0x88
 8003afa:	2121      	movs	r1, #33	; 0x21
 8003afc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afe:	f7ff fba3 	bl	8003248 <HAL_GetTick>
 8003b02:	0003      	movs	r3, r0
 8003b04:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1dba      	adds	r2, r7, #6
 8003b0a:	2154      	movs	r1, #84	; 0x54
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1dba      	adds	r2, r7, #6
 8003b14:	2156      	movs	r1, #86	; 0x56
 8003b16:	8812      	ldrh	r2, [r2, #0]
 8003b18:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	2380      	movs	r3, #128	; 0x80
 8003b20:	015b      	lsls	r3, r3, #5
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d108      	bne.n	8003b38 <HAL_UART_Transmit+0x98>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e003      	b.n	8003b40 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b40:	e030      	b.n	8003ba4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	f001 f8a6 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2288      	movs	r2, #136	; 0x88
 8003b5c:	2120      	movs	r1, #32
 8003b5e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e03d      	b.n	8003be0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	001a      	movs	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	05d2      	lsls	r2, r2, #23
 8003b76:	0dd2      	lsrs	r2, r2, #23
 8003b78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e007      	b.n	8003b92 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	781a      	ldrb	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2256      	movs	r2, #86	; 0x56
 8003b96:	5a9b      	ldrh	r3, [r3, r2]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b299      	uxth	r1, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2256      	movs	r2, #86	; 0x56
 8003ba2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2256      	movs	r2, #86	; 0x56
 8003ba8:	5a9b      	ldrh	r3, [r3, r2]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1c8      	bne.n	8003b42 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	0013      	movs	r3, r2
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2140      	movs	r1, #64	; 0x40
 8003bbe:	f001 f86f 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8003bc2:	1e03      	subs	r3, r0, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2288      	movs	r2, #136	; 0x88
 8003bca:	2120      	movs	r1, #32
 8003bcc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e006      	b.n	8003be0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2288      	movs	r2, #136	; 0x88
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
  }
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b008      	add	sp, #32
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	1dbb      	adds	r3, r7, #6
 8003bf4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	228c      	movs	r2, #140	; 0x8c
 8003bfa:	589b      	ldr	r3, [r3, r2]
 8003bfc:	2b20      	cmp	r3, #32
 8003bfe:	d14f      	bne.n	8003ca0 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_UART_Receive_IT+0x26>
 8003c06:	1dbb      	adds	r3, r7, #6
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e047      	b.n	8003ca2 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	015b      	lsls	r3, r3, #5
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d109      	bne.n	8003c32 <HAL_UART_Receive_IT+0x4a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d001      	beq.n	8003c32 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e037      	b.n	8003ca2 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <HAL_UART_Receive_IT+0xc4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d025      	beq.n	8003c8e <HAL_UART_Receive_IT+0xa6>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1a      	ldr	r2, [pc, #104]	; (8003cb0 <HAL_UART_Receive_IT+0xc8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d020      	beq.n	8003c8e <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	041b      	lsls	r3, r3, #16
 8003c56:	4013      	ands	r3, r2
 8003c58:	d019      	beq.n	8003c8e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5e:	613b      	str	r3, [r7, #16]
  return(result);
 8003c60:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	2301      	movs	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2180      	movs	r1, #128	; 0x80
 8003c7c:	04c9      	lsls	r1, r1, #19
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	f383 8810 	msr	PRIMASK, r3
}
 8003c8c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c8e:	1dbb      	adds	r3, r7, #6
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	68b9      	ldr	r1, [r7, #8]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	0018      	movs	r0, r3
 8003c98:	f001 f872 	bl	8004d80 <UART_Start_Receive_IT>
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	e000      	b.n	8003ca2 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b008      	add	sp, #32
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	40008000 	.word	0x40008000
 8003cb0:	40008400 	.word	0x40008400

08003cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb4:	b5b0      	push	{r4, r5, r7, lr}
 8003cb6:	b0aa      	sub	sp, #168	; 0xa8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	22a4      	movs	r2, #164	; 0xa4
 8003cc4:	18b9      	adds	r1, r7, r2
 8003cc6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	20a0      	movs	r0, #160	; 0xa0
 8003cd0:	1839      	adds	r1, r7, r0
 8003cd2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	249c      	movs	r4, #156	; 0x9c
 8003cdc:	1939      	adds	r1, r7, r4
 8003cde:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ce0:	0011      	movs	r1, r2
 8003ce2:	18bb      	adds	r3, r7, r2
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4aa2      	ldr	r2, [pc, #648]	; (8003f70 <HAL_UART_IRQHandler+0x2bc>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2298      	movs	r2, #152	; 0x98
 8003cec:	18bd      	adds	r5, r7, r2
 8003cee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003cf0:	18bb      	adds	r3, r7, r2
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d11a      	bne.n	8003d2e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d015      	beq.n	8003d2e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d02:	183b      	adds	r3, r7, r0
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2220      	movs	r2, #32
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d105      	bne.n	8003d18 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d0c:	193b      	adds	r3, r7, r4
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	055b      	lsls	r3, r3, #21
 8003d14:	4013      	ands	r3, r2
 8003d16:	d00a      	beq.n	8003d2e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d100      	bne.n	8003d22 <HAL_UART_IRQHandler+0x6e>
 8003d20:	e2dc      	b.n	80042dc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	0010      	movs	r0, r2
 8003d2a:	4798      	blx	r3
      }
      return;
 8003d2c:	e2d6      	b.n	80042dc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d2e:	2398      	movs	r3, #152	; 0x98
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d100      	bne.n	8003d3a <HAL_UART_IRQHandler+0x86>
 8003d38:	e122      	b.n	8003f80 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d3a:	239c      	movs	r3, #156	; 0x9c
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a8c      	ldr	r2, [pc, #560]	; (8003f74 <HAL_UART_IRQHandler+0x2c0>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	d106      	bne.n	8003d54 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d46:	23a0      	movs	r3, #160	; 0xa0
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a8a      	ldr	r2, [pc, #552]	; (8003f78 <HAL_UART_IRQHandler+0x2c4>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d100      	bne.n	8003d54 <HAL_UART_IRQHandler+0xa0>
 8003d52:	e115      	b.n	8003f80 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d54:	23a4      	movs	r3, #164	; 0xa4
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d012      	beq.n	8003d86 <HAL_UART_IRQHandler+0xd2>
 8003d60:	23a0      	movs	r3, #160	; 0xa0
 8003d62:	18fb      	adds	r3, r7, r3
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d00b      	beq.n	8003d86 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2201      	movs	r2, #1
 8003d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2290      	movs	r2, #144	; 0x90
 8003d7a:	589b      	ldr	r3, [r3, r2]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2190      	movs	r1, #144	; 0x90
 8003d84:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d86:	23a4      	movs	r3, #164	; 0xa4
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d011      	beq.n	8003db6 <HAL_UART_IRQHandler+0x102>
 8003d92:	239c      	movs	r3, #156	; 0x9c
 8003d94:	18fb      	adds	r3, r7, r3
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d00b      	beq.n	8003db6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2202      	movs	r2, #2
 8003da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2290      	movs	r2, #144	; 0x90
 8003daa:	589b      	ldr	r3, [r3, r2]
 8003dac:	2204      	movs	r2, #4
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2190      	movs	r1, #144	; 0x90
 8003db4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003db6:	23a4      	movs	r3, #164	; 0xa4
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d011      	beq.n	8003de6 <HAL_UART_IRQHandler+0x132>
 8003dc2:	239c      	movs	r3, #156	; 0x9c
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d00b      	beq.n	8003de6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2290      	movs	r2, #144	; 0x90
 8003dda:	589b      	ldr	r3, [r3, r2]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2190      	movs	r1, #144	; 0x90
 8003de4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003de6:	23a4      	movs	r3, #164	; 0xa4
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2208      	movs	r2, #8
 8003dee:	4013      	ands	r3, r2
 8003df0:	d017      	beq.n	8003e22 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003df2:	23a0      	movs	r3, #160	; 0xa0
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d105      	bne.n	8003e0a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003dfe:	239c      	movs	r3, #156	; 0x9c
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a5b      	ldr	r2, [pc, #364]	; (8003f74 <HAL_UART_IRQHandler+0x2c0>)
 8003e06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e08:	d00b      	beq.n	8003e22 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2208      	movs	r2, #8
 8003e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2290      	movs	r2, #144	; 0x90
 8003e16:	589b      	ldr	r3, [r3, r2]
 8003e18:	2208      	movs	r2, #8
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2190      	movs	r1, #144	; 0x90
 8003e20:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e22:	23a4      	movs	r3, #164	; 0xa4
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_UART_IRQHandler+0x1a4>
 8003e30:	23a0      	movs	r3, #160	; 0xa0
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	04db      	lsls	r3, r3, #19
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d00c      	beq.n	8003e58 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	0112      	lsls	r2, r2, #4
 8003e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2290      	movs	r2, #144	; 0x90
 8003e4c:	589b      	ldr	r3, [r3, r2]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2190      	movs	r1, #144	; 0x90
 8003e56:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2290      	movs	r2, #144	; 0x90
 8003e5c:	589b      	ldr	r3, [r3, r2]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d100      	bne.n	8003e64 <HAL_UART_IRQHandler+0x1b0>
 8003e62:	e23d      	b.n	80042e0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e64:	23a4      	movs	r3, #164	; 0xa4
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d015      	beq.n	8003e9c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e70:	23a0      	movs	r3, #160	; 0xa0
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2220      	movs	r2, #32
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d106      	bne.n	8003e8a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e7c:	239c      	movs	r3, #156	; 0x9c
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	055b      	lsls	r3, r3, #21
 8003e86:	4013      	ands	r3, r2
 8003e88:	d008      	beq.n	8003e9c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	0010      	movs	r0, r2
 8003e9a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2290      	movs	r2, #144	; 0x90
 8003ea0:	589b      	ldr	r3, [r3, r2]
 8003ea2:	2194      	movs	r1, #148	; 0x94
 8003ea4:	187a      	adds	r2, r7, r1
 8003ea6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d004      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003eb6:	187b      	adds	r3, r7, r1
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2228      	movs	r2, #40	; 0x28
 8003ebc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ebe:	d04c      	beq.n	8003f5a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f001 f880 	bl	8004fc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2240      	movs	r2, #64	; 0x40
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d13c      	bne.n	8003f50 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eda:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ede:	2090      	movs	r0, #144	; 0x90
 8003ee0:	183a      	adds	r2, r7, r0
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eea:	f383 8810 	msr	PRIMASK, r3
}
 8003eee:	46c0      	nop			; (mov r8, r8)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2140      	movs	r1, #64	; 0x40
 8003efc:	438a      	bics	r2, r1
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	183b      	adds	r3, r7, r0
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f08:	f383 8810 	msr	PRIMASK, r3
}
 8003f0c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2280      	movs	r2, #128	; 0x80
 8003f12:	589b      	ldr	r3, [r3, r2]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d016      	beq.n	8003f46 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	589b      	ldr	r3, [r3, r2]
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_UART_IRQHandler+0x2c8>)
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2280      	movs	r2, #128	; 0x80
 8003f26:	589b      	ldr	r3, [r3, r2]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7ff fae1 	bl	80034f0 <HAL_DMA_Abort_IT>
 8003f2e:	1e03      	subs	r3, r0, #0
 8003f30:	d01c      	beq.n	8003f6c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2280      	movs	r2, #128	; 0x80
 8003f36:	589b      	ldr	r3, [r3, r2]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	2180      	movs	r1, #128	; 0x80
 8003f3e:	5852      	ldr	r2, [r2, r1]
 8003f40:	0010      	movs	r0, r2
 8003f42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	e012      	b.n	8003f6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f000 f9e1 	bl	8004310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4e:	e00d      	b.n	8003f6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	0018      	movs	r0, r3
 8003f54:	f000 f9dc 	bl	8004310 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f58:	e008      	b.n	8003f6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f000 f9d7 	bl	8004310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2290      	movs	r2, #144	; 0x90
 8003f66:	2100      	movs	r1, #0
 8003f68:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003f6a:	e1b9      	b.n	80042e0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	46c0      	nop			; (mov r8, r8)
    return;
 8003f6e:	e1b7      	b.n	80042e0 <HAL_UART_IRQHandler+0x62c>
 8003f70:	0000080f 	.word	0x0000080f
 8003f74:	10000001 	.word	0x10000001
 8003f78:	04000120 	.word	0x04000120
 8003f7c:	08005095 	.word	0x08005095

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d000      	beq.n	8003f8a <HAL_UART_IRQHandler+0x2d6>
 8003f88:	e13e      	b.n	8004208 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f8a:	23a4      	movs	r3, #164	; 0xa4
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	4013      	ands	r3, r2
 8003f94:	d100      	bne.n	8003f98 <HAL_UART_IRQHandler+0x2e4>
 8003f96:	e137      	b.n	8004208 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f98:	23a0      	movs	r3, #160	; 0xa0
 8003f9a:	18fb      	adds	r3, r7, r3
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d100      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x2f2>
 8003fa4:	e130      	b.n	8004208 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2210      	movs	r2, #16
 8003fac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2240      	movs	r2, #64	; 0x40
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d000      	beq.n	8003fbe <HAL_UART_IRQHandler+0x30a>
 8003fbc:	e0a4      	b.n	8004108 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2280      	movs	r2, #128	; 0x80
 8003fc2:	589b      	ldr	r3, [r3, r2]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	217e      	movs	r1, #126	; 0x7e
 8003fca:	187b      	adds	r3, r7, r1
 8003fcc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003fce:	187b      	adds	r3, r7, r1
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d100      	bne.n	8003fd8 <HAL_UART_IRQHandler+0x324>
 8003fd6:	e185      	b.n	80042e4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	225c      	movs	r2, #92	; 0x5c
 8003fdc:	5a9b      	ldrh	r3, [r3, r2]
 8003fde:	187a      	adds	r2, r7, r1
 8003fe0:	8812      	ldrh	r2, [r2, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d300      	bcc.n	8003fe8 <HAL_UART_IRQHandler+0x334>
 8003fe6:	e17d      	b.n	80042e4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	187a      	adds	r2, r7, r1
 8003fec:	215e      	movs	r1, #94	; 0x5e
 8003fee:	8812      	ldrh	r2, [r2, #0]
 8003ff0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	589b      	ldr	r3, [r3, r2]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	4013      	ands	r3, r2
 8004000:	d170      	bne.n	80040e4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004002:	f3ef 8310 	mrs	r3, PRIMASK
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800400a:	67bb      	str	r3, [r7, #120]	; 0x78
 800400c:	2301      	movs	r3, #1
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004012:	f383 8810 	msr	PRIMASK, r3
}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	49b4      	ldr	r1, [pc, #720]	; (80042f4 <HAL_UART_IRQHandler+0x640>)
 8004024:	400a      	ands	r2, r1
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800402a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402e:	f383 8810 	msr	PRIMASK, r3
}
 8004032:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004034:	f3ef 8310 	mrs	r3, PRIMASK
 8004038:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800403a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403c:	677b      	str	r3, [r7, #116]	; 0x74
 800403e:	2301      	movs	r3, #1
 8004040:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	46c0      	nop			; (mov r8, r8)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2101      	movs	r1, #1
 8004056:	438a      	bics	r2, r1
 8004058:	609a      	str	r2, [r3, #8]
 800405a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004060:	f383 8810 	msr	PRIMASK, r3
}
 8004064:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004066:	f3ef 8310 	mrs	r3, PRIMASK
 800406a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800406c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800406e:	673b      	str	r3, [r7, #112]	; 0x70
 8004070:	2301      	movs	r3, #1
 8004072:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2140      	movs	r1, #64	; 0x40
 8004088:	438a      	bics	r2, r1
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800408e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004092:	f383 8810 	msr	PRIMASK, r3
}
 8004096:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	228c      	movs	r2, #140	; 0x8c
 800409c:	2120      	movs	r1, #32
 800409e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a6:	f3ef 8310 	mrs	r3, PRIMASK
 80040aa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80040ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040b0:	2301      	movs	r3, #1
 80040b2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040b6:	f383 8810 	msr	PRIMASK, r3
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2110      	movs	r1, #16
 80040c8:	438a      	bics	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d2:	f383 8810 	msr	PRIMASK, r3
}
 80040d6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	589b      	ldr	r3, [r3, r2]
 80040de:	0018      	movs	r0, r3
 80040e0:	f7ff f9a6 	bl	8003430 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	225c      	movs	r2, #92	; 0x5c
 80040ee:	5a9a      	ldrh	r2, [r3, r2]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	215e      	movs	r1, #94	; 0x5e
 80040f4:	5a5b      	ldrh	r3, [r3, r1]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	0011      	movs	r1, r2
 8004100:	0018      	movs	r0, r3
 8004102:	f000 f90d 	bl	8004320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004106:	e0ed      	b.n	80042e4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	225c      	movs	r2, #92	; 0x5c
 800410c:	5a99      	ldrh	r1, [r3, r2]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	225e      	movs	r2, #94	; 0x5e
 8004112:	5a9b      	ldrh	r3, [r3, r2]
 8004114:	b29a      	uxth	r2, r3
 8004116:	208e      	movs	r0, #142	; 0x8e
 8004118:	183b      	adds	r3, r7, r0
 800411a:	1a8a      	subs	r2, r1, r2
 800411c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	225e      	movs	r2, #94	; 0x5e
 8004122:	5a9b      	ldrh	r3, [r3, r2]
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d100      	bne.n	800412c <HAL_UART_IRQHandler+0x478>
 800412a:	e0dd      	b.n	80042e8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800412c:	183b      	adds	r3, r7, r0
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d100      	bne.n	8004136 <HAL_UART_IRQHandler+0x482>
 8004134:	e0d8      	b.n	80042e8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004136:	f3ef 8310 	mrs	r3, PRIMASK
 800413a:	60fb      	str	r3, [r7, #12]
  return(result);
 800413c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800413e:	2488      	movs	r4, #136	; 0x88
 8004140:	193a      	adds	r2, r7, r4
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	2301      	movs	r3, #1
 8004146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f383 8810 	msr	PRIMASK, r3
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4967      	ldr	r1, [pc, #412]	; (80042f8 <HAL_UART_IRQHandler+0x644>)
 800415c:	400a      	ands	r2, r1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	193b      	adds	r3, r7, r4
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f383 8810 	msr	PRIMASK, r3
}
 800416c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416e:	f3ef 8310 	mrs	r3, PRIMASK
 8004172:	61bb      	str	r3, [r7, #24]
  return(result);
 8004174:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004176:	2484      	movs	r4, #132	; 0x84
 8004178:	193a      	adds	r2, r7, r4
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	2301      	movs	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f383 8810 	msr	PRIMASK, r3
}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	495a      	ldr	r1, [pc, #360]	; (80042fc <HAL_UART_IRQHandler+0x648>)
 8004194:	400a      	ands	r2, r1
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	193b      	adds	r3, r7, r4
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	f383 8810 	msr	PRIMASK, r3
}
 80041a4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	228c      	movs	r2, #140	; 0x8c
 80041aa:	2120      	movs	r1, #32
 80041ac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ba:	f3ef 8310 	mrs	r3, PRIMASK
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c2:	2480      	movs	r4, #128	; 0x80
 80041c4:	193a      	adds	r2, r7, r4
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	2301      	movs	r3, #1
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	f383 8810 	msr	PRIMASK, r3
}
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2110      	movs	r1, #16
 80041e0:	438a      	bics	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	193b      	adds	r3, r7, r4
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ec:	f383 8810 	msr	PRIMASK, r3
}
 80041f0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2202      	movs	r2, #2
 80041f6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041f8:	183b      	adds	r3, r7, r0
 80041fa:	881a      	ldrh	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	0011      	movs	r1, r2
 8004200:	0018      	movs	r0, r3
 8004202:	f000 f88d 	bl	8004320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004206:	e06f      	b.n	80042e8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004208:	23a4      	movs	r3, #164	; 0xa4
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	035b      	lsls	r3, r3, #13
 8004212:	4013      	ands	r3, r2
 8004214:	d010      	beq.n	8004238 <HAL_UART_IRQHandler+0x584>
 8004216:	239c      	movs	r3, #156	; 0x9c
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	03db      	lsls	r3, r3, #15
 8004220:	4013      	ands	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	0352      	lsls	r2, r2, #13
 800422c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	0018      	movs	r0, r3
 8004232:	f001 fc9f 	bl	8005b74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004236:	e05a      	b.n	80042ee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004238:	23a4      	movs	r3, #164	; 0xa4
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2280      	movs	r2, #128	; 0x80
 8004240:	4013      	ands	r3, r2
 8004242:	d016      	beq.n	8004272 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004244:	23a0      	movs	r3, #160	; 0xa0
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2280      	movs	r2, #128	; 0x80
 800424c:	4013      	ands	r3, r2
 800424e:	d106      	bne.n	800425e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004250:	239c      	movs	r3, #156	; 0x9c
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	4013      	ands	r3, r2
 800425c:	d009      	beq.n	8004272 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004262:	2b00      	cmp	r3, #0
 8004264:	d042      	beq.n	80042ec <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	0010      	movs	r0, r2
 800426e:	4798      	blx	r3
    }
    return;
 8004270:	e03c      	b.n	80042ec <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004272:	23a4      	movs	r3, #164	; 0xa4
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2240      	movs	r2, #64	; 0x40
 800427a:	4013      	ands	r3, r2
 800427c:	d00a      	beq.n	8004294 <HAL_UART_IRQHandler+0x5e0>
 800427e:	23a0      	movs	r3, #160	; 0xa0
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2240      	movs	r2, #64	; 0x40
 8004286:	4013      	ands	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0018      	movs	r0, r3
 800428e:	f000 ff18 	bl	80050c2 <UART_EndTransmit_IT>
    return;
 8004292:	e02c      	b.n	80042ee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004294:	23a4      	movs	r3, #164	; 0xa4
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	041b      	lsls	r3, r3, #16
 800429e:	4013      	ands	r3, r2
 80042a0:	d00b      	beq.n	80042ba <HAL_UART_IRQHandler+0x606>
 80042a2:	23a0      	movs	r3, #160	; 0xa0
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	05db      	lsls	r3, r3, #23
 80042ac:	4013      	ands	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	0018      	movs	r0, r3
 80042b4:	f001 fc6e 	bl	8005b94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042b8:	e019      	b.n	80042ee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80042ba:	23a4      	movs	r3, #164	; 0xa4
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	2380      	movs	r3, #128	; 0x80
 80042c2:	045b      	lsls	r3, r3, #17
 80042c4:	4013      	ands	r3, r2
 80042c6:	d012      	beq.n	80042ee <HAL_UART_IRQHandler+0x63a>
 80042c8:	23a0      	movs	r3, #160	; 0xa0
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	da0d      	bge.n	80042ee <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f001 fc55 	bl	8005b84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80042da:	e008      	b.n	80042ee <HAL_UART_IRQHandler+0x63a>
      return;
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	e006      	b.n	80042ee <HAL_UART_IRQHandler+0x63a>
    return;
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	e004      	b.n	80042ee <HAL_UART_IRQHandler+0x63a>
      return;
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	e002      	b.n	80042ee <HAL_UART_IRQHandler+0x63a>
      return;
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	e000      	b.n	80042ee <HAL_UART_IRQHandler+0x63a>
    return;
 80042ec:	46c0      	nop			; (mov r8, r8)
  }
}
 80042ee:	46bd      	mov	sp, r7
 80042f0:	b02a      	add	sp, #168	; 0xa8
 80042f2:	bdb0      	pop	{r4, r5, r7, pc}
 80042f4:	fffffeff 	.word	0xfffffeff
 80042f8:	fffffedf 	.word	0xfffffedf
 80042fc:	effffffe 	.word	0xeffffffe

08004300 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004318:	46c0      	nop			; (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	000a      	movs	r2, r1
 800432a:	1cbb      	adds	r3, r7, #2
 800432c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	46bd      	mov	sp, r7
 8004332:	b002      	add	sp, #8
 8004334:	bd80      	pop	{r7, pc}
	...

08004338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004338:	b5b0      	push	{r4, r5, r7, lr}
 800433a:	b090      	sub	sp, #64	; 0x40
 800433c:	af00      	add	r7, sp, #0
 800433e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004340:	231a      	movs	r3, #26
 8004342:	2220      	movs	r2, #32
 8004344:	189b      	adds	r3, r3, r2
 8004346:	19db      	adds	r3, r3, r7
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	431a      	orrs	r2, r3
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	431a      	orrs	r2, r3
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	4313      	orrs	r3, r2
 8004362:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4ac1      	ldr	r2, [pc, #772]	; (8004670 <UART_SetConfig+0x338>)
 800436c:	4013      	ands	r3, r2
 800436e:	0019      	movs	r1, r3
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004376:	430b      	orrs	r3, r1
 8004378:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4abc      	ldr	r2, [pc, #752]	; (8004674 <UART_SetConfig+0x33c>)
 8004382:	4013      	ands	r3, r2
 8004384:	0018      	movs	r0, r3
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	68d9      	ldr	r1, [r3, #12]
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	0003      	movs	r3, r0
 8004390:	430b      	orrs	r3, r1
 8004392:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4ab6      	ldr	r2, [pc, #728]	; (8004678 <UART_SetConfig+0x340>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d009      	beq.n	80043b8 <UART_SetConfig+0x80>
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4ab4      	ldr	r2, [pc, #720]	; (800467c <UART_SetConfig+0x344>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043b4:	4313      	orrs	r3, r2
 80043b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	4ab0      	ldr	r2, [pc, #704]	; (8004680 <UART_SetConfig+0x348>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	0019      	movs	r1, r3
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ca:	430b      	orrs	r3, r1
 80043cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	220f      	movs	r2, #15
 80043d6:	4393      	bics	r3, r2
 80043d8:	0018      	movs	r0, r3
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	0003      	movs	r3, r0
 80043e4:	430b      	orrs	r3, r1
 80043e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4aa5      	ldr	r2, [pc, #660]	; (8004684 <UART_SetConfig+0x34c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d131      	bne.n	8004456 <UART_SetConfig+0x11e>
 80043f2:	4ba5      	ldr	r3, [pc, #660]	; (8004688 <UART_SetConfig+0x350>)
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	2203      	movs	r2, #3
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d01d      	beq.n	800443a <UART_SetConfig+0x102>
 80043fe:	d823      	bhi.n	8004448 <UART_SetConfig+0x110>
 8004400:	2b02      	cmp	r3, #2
 8004402:	d00c      	beq.n	800441e <UART_SetConfig+0xe6>
 8004404:	d820      	bhi.n	8004448 <UART_SetConfig+0x110>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <UART_SetConfig+0xd8>
 800440a:	2b01      	cmp	r3, #1
 800440c:	d00e      	beq.n	800442c <UART_SetConfig+0xf4>
 800440e:	e01b      	b.n	8004448 <UART_SetConfig+0x110>
 8004410:	231b      	movs	r3, #27
 8004412:	2220      	movs	r2, #32
 8004414:	189b      	adds	r3, r3, r2
 8004416:	19db      	adds	r3, r3, r7
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e154      	b.n	80046c8 <UART_SetConfig+0x390>
 800441e:	231b      	movs	r3, #27
 8004420:	2220      	movs	r2, #32
 8004422:	189b      	adds	r3, r3, r2
 8004424:	19db      	adds	r3, r3, r7
 8004426:	2202      	movs	r2, #2
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	e14d      	b.n	80046c8 <UART_SetConfig+0x390>
 800442c:	231b      	movs	r3, #27
 800442e:	2220      	movs	r2, #32
 8004430:	189b      	adds	r3, r3, r2
 8004432:	19db      	adds	r3, r3, r7
 8004434:	2204      	movs	r2, #4
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	e146      	b.n	80046c8 <UART_SetConfig+0x390>
 800443a:	231b      	movs	r3, #27
 800443c:	2220      	movs	r2, #32
 800443e:	189b      	adds	r3, r3, r2
 8004440:	19db      	adds	r3, r3, r7
 8004442:	2208      	movs	r2, #8
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	e13f      	b.n	80046c8 <UART_SetConfig+0x390>
 8004448:	231b      	movs	r3, #27
 800444a:	2220      	movs	r2, #32
 800444c:	189b      	adds	r3, r3, r2
 800444e:	19db      	adds	r3, r3, r7
 8004450:	2210      	movs	r2, #16
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e138      	b.n	80046c8 <UART_SetConfig+0x390>
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a8c      	ldr	r2, [pc, #560]	; (800468c <UART_SetConfig+0x354>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d131      	bne.n	80044c4 <UART_SetConfig+0x18c>
 8004460:	4b89      	ldr	r3, [pc, #548]	; (8004688 <UART_SetConfig+0x350>)
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	220c      	movs	r2, #12
 8004466:	4013      	ands	r3, r2
 8004468:	2b0c      	cmp	r3, #12
 800446a:	d01d      	beq.n	80044a8 <UART_SetConfig+0x170>
 800446c:	d823      	bhi.n	80044b6 <UART_SetConfig+0x17e>
 800446e:	2b08      	cmp	r3, #8
 8004470:	d00c      	beq.n	800448c <UART_SetConfig+0x154>
 8004472:	d820      	bhi.n	80044b6 <UART_SetConfig+0x17e>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <UART_SetConfig+0x146>
 8004478:	2b04      	cmp	r3, #4
 800447a:	d00e      	beq.n	800449a <UART_SetConfig+0x162>
 800447c:	e01b      	b.n	80044b6 <UART_SetConfig+0x17e>
 800447e:	231b      	movs	r3, #27
 8004480:	2220      	movs	r2, #32
 8004482:	189b      	adds	r3, r3, r2
 8004484:	19db      	adds	r3, r3, r7
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
 800448a:	e11d      	b.n	80046c8 <UART_SetConfig+0x390>
 800448c:	231b      	movs	r3, #27
 800448e:	2220      	movs	r2, #32
 8004490:	189b      	adds	r3, r3, r2
 8004492:	19db      	adds	r3, r3, r7
 8004494:	2202      	movs	r2, #2
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	e116      	b.n	80046c8 <UART_SetConfig+0x390>
 800449a:	231b      	movs	r3, #27
 800449c:	2220      	movs	r2, #32
 800449e:	189b      	adds	r3, r3, r2
 80044a0:	19db      	adds	r3, r3, r7
 80044a2:	2204      	movs	r2, #4
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e10f      	b.n	80046c8 <UART_SetConfig+0x390>
 80044a8:	231b      	movs	r3, #27
 80044aa:	2220      	movs	r2, #32
 80044ac:	189b      	adds	r3, r3, r2
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	2208      	movs	r2, #8
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e108      	b.n	80046c8 <UART_SetConfig+0x390>
 80044b6:	231b      	movs	r3, #27
 80044b8:	2220      	movs	r2, #32
 80044ba:	189b      	adds	r3, r3, r2
 80044bc:	19db      	adds	r3, r3, r7
 80044be:	2210      	movs	r2, #16
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	e101      	b.n	80046c8 <UART_SetConfig+0x390>
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a71      	ldr	r2, [pc, #452]	; (8004690 <UART_SetConfig+0x358>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d131      	bne.n	8004532 <UART_SetConfig+0x1fa>
 80044ce:	4b6e      	ldr	r3, [pc, #440]	; (8004688 <UART_SetConfig+0x350>)
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	2230      	movs	r2, #48	; 0x30
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b30      	cmp	r3, #48	; 0x30
 80044d8:	d01d      	beq.n	8004516 <UART_SetConfig+0x1de>
 80044da:	d823      	bhi.n	8004524 <UART_SetConfig+0x1ec>
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d00c      	beq.n	80044fa <UART_SetConfig+0x1c2>
 80044e0:	d820      	bhi.n	8004524 <UART_SetConfig+0x1ec>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <UART_SetConfig+0x1b4>
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d00e      	beq.n	8004508 <UART_SetConfig+0x1d0>
 80044ea:	e01b      	b.n	8004524 <UART_SetConfig+0x1ec>
 80044ec:	231b      	movs	r3, #27
 80044ee:	2220      	movs	r2, #32
 80044f0:	189b      	adds	r3, r3, r2
 80044f2:	19db      	adds	r3, r3, r7
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	e0e6      	b.n	80046c8 <UART_SetConfig+0x390>
 80044fa:	231b      	movs	r3, #27
 80044fc:	2220      	movs	r2, #32
 80044fe:	189b      	adds	r3, r3, r2
 8004500:	19db      	adds	r3, r3, r7
 8004502:	2202      	movs	r2, #2
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	e0df      	b.n	80046c8 <UART_SetConfig+0x390>
 8004508:	231b      	movs	r3, #27
 800450a:	2220      	movs	r2, #32
 800450c:	189b      	adds	r3, r3, r2
 800450e:	19db      	adds	r3, r3, r7
 8004510:	2204      	movs	r2, #4
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	e0d8      	b.n	80046c8 <UART_SetConfig+0x390>
 8004516:	231b      	movs	r3, #27
 8004518:	2220      	movs	r2, #32
 800451a:	189b      	adds	r3, r3, r2
 800451c:	19db      	adds	r3, r3, r7
 800451e:	2208      	movs	r2, #8
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	e0d1      	b.n	80046c8 <UART_SetConfig+0x390>
 8004524:	231b      	movs	r3, #27
 8004526:	2220      	movs	r2, #32
 8004528:	189b      	adds	r3, r3, r2
 800452a:	19db      	adds	r3, r3, r7
 800452c:	2210      	movs	r2, #16
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e0ca      	b.n	80046c8 <UART_SetConfig+0x390>
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a57      	ldr	r2, [pc, #348]	; (8004694 <UART_SetConfig+0x35c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d106      	bne.n	800454a <UART_SetConfig+0x212>
 800453c:	231b      	movs	r3, #27
 800453e:	2220      	movs	r2, #32
 8004540:	189b      	adds	r3, r3, r2
 8004542:	19db      	adds	r3, r3, r7
 8004544:	2200      	movs	r2, #0
 8004546:	701a      	strb	r2, [r3, #0]
 8004548:	e0be      	b.n	80046c8 <UART_SetConfig+0x390>
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a52      	ldr	r2, [pc, #328]	; (8004698 <UART_SetConfig+0x360>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d106      	bne.n	8004562 <UART_SetConfig+0x22a>
 8004554:	231b      	movs	r3, #27
 8004556:	2220      	movs	r2, #32
 8004558:	189b      	adds	r3, r3, r2
 800455a:	19db      	adds	r3, r3, r7
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	e0b2      	b.n	80046c8 <UART_SetConfig+0x390>
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a4d      	ldr	r2, [pc, #308]	; (800469c <UART_SetConfig+0x364>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d106      	bne.n	800457a <UART_SetConfig+0x242>
 800456c:	231b      	movs	r3, #27
 800456e:	2220      	movs	r2, #32
 8004570:	189b      	adds	r3, r3, r2
 8004572:	19db      	adds	r3, r3, r7
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	e0a6      	b.n	80046c8 <UART_SetConfig+0x390>
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a3e      	ldr	r2, [pc, #248]	; (8004678 <UART_SetConfig+0x340>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d13e      	bne.n	8004602 <UART_SetConfig+0x2ca>
 8004584:	4b40      	ldr	r3, [pc, #256]	; (8004688 <UART_SetConfig+0x350>)
 8004586:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004588:	23c0      	movs	r3, #192	; 0xc0
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	4013      	ands	r3, r2
 800458e:	22c0      	movs	r2, #192	; 0xc0
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	4293      	cmp	r3, r2
 8004594:	d027      	beq.n	80045e6 <UART_SetConfig+0x2ae>
 8004596:	22c0      	movs	r2, #192	; 0xc0
 8004598:	0112      	lsls	r2, r2, #4
 800459a:	4293      	cmp	r3, r2
 800459c:	d82a      	bhi.n	80045f4 <UART_SetConfig+0x2bc>
 800459e:	2280      	movs	r2, #128	; 0x80
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d011      	beq.n	80045ca <UART_SetConfig+0x292>
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	0112      	lsls	r2, r2, #4
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d822      	bhi.n	80045f4 <UART_SetConfig+0x2bc>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <UART_SetConfig+0x284>
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	00d2      	lsls	r2, r2, #3
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <UART_SetConfig+0x2a0>
 80045ba:	e01b      	b.n	80045f4 <UART_SetConfig+0x2bc>
 80045bc:	231b      	movs	r3, #27
 80045be:	2220      	movs	r2, #32
 80045c0:	189b      	adds	r3, r3, r2
 80045c2:	19db      	adds	r3, r3, r7
 80045c4:	2200      	movs	r2, #0
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e07e      	b.n	80046c8 <UART_SetConfig+0x390>
 80045ca:	231b      	movs	r3, #27
 80045cc:	2220      	movs	r2, #32
 80045ce:	189b      	adds	r3, r3, r2
 80045d0:	19db      	adds	r3, r3, r7
 80045d2:	2202      	movs	r2, #2
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e077      	b.n	80046c8 <UART_SetConfig+0x390>
 80045d8:	231b      	movs	r3, #27
 80045da:	2220      	movs	r2, #32
 80045dc:	189b      	adds	r3, r3, r2
 80045de:	19db      	adds	r3, r3, r7
 80045e0:	2204      	movs	r2, #4
 80045e2:	701a      	strb	r2, [r3, #0]
 80045e4:	e070      	b.n	80046c8 <UART_SetConfig+0x390>
 80045e6:	231b      	movs	r3, #27
 80045e8:	2220      	movs	r2, #32
 80045ea:	189b      	adds	r3, r3, r2
 80045ec:	19db      	adds	r3, r3, r7
 80045ee:	2208      	movs	r2, #8
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e069      	b.n	80046c8 <UART_SetConfig+0x390>
 80045f4:	231b      	movs	r3, #27
 80045f6:	2220      	movs	r2, #32
 80045f8:	189b      	adds	r3, r3, r2
 80045fa:	19db      	adds	r3, r3, r7
 80045fc:	2210      	movs	r2, #16
 80045fe:	701a      	strb	r2, [r3, #0]
 8004600:	e062      	b.n	80046c8 <UART_SetConfig+0x390>
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a1d      	ldr	r2, [pc, #116]	; (800467c <UART_SetConfig+0x344>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d157      	bne.n	80046bc <UART_SetConfig+0x384>
 800460c:	4b1e      	ldr	r3, [pc, #120]	; (8004688 <UART_SetConfig+0x350>)
 800460e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004610:	23c0      	movs	r3, #192	; 0xc0
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4013      	ands	r3, r2
 8004616:	22c0      	movs	r2, #192	; 0xc0
 8004618:	0092      	lsls	r2, r2, #2
 800461a:	4293      	cmp	r3, r2
 800461c:	d040      	beq.n	80046a0 <UART_SetConfig+0x368>
 800461e:	22c0      	movs	r2, #192	; 0xc0
 8004620:	0092      	lsls	r2, r2, #2
 8004622:	4293      	cmp	r3, r2
 8004624:	d843      	bhi.n	80046ae <UART_SetConfig+0x376>
 8004626:	2280      	movs	r2, #128	; 0x80
 8004628:	0092      	lsls	r2, r2, #2
 800462a:	4293      	cmp	r3, r2
 800462c:	d011      	beq.n	8004652 <UART_SetConfig+0x31a>
 800462e:	2280      	movs	r2, #128	; 0x80
 8004630:	0092      	lsls	r2, r2, #2
 8004632:	4293      	cmp	r3, r2
 8004634:	d83b      	bhi.n	80046ae <UART_SetConfig+0x376>
 8004636:	2b00      	cmp	r3, #0
 8004638:	d004      	beq.n	8004644 <UART_SetConfig+0x30c>
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	0052      	lsls	r2, r2, #1
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <UART_SetConfig+0x328>
 8004642:	e034      	b.n	80046ae <UART_SetConfig+0x376>
 8004644:	231b      	movs	r3, #27
 8004646:	2220      	movs	r2, #32
 8004648:	189b      	adds	r3, r3, r2
 800464a:	19db      	adds	r3, r3, r7
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	e03a      	b.n	80046c8 <UART_SetConfig+0x390>
 8004652:	231b      	movs	r3, #27
 8004654:	2220      	movs	r2, #32
 8004656:	189b      	adds	r3, r3, r2
 8004658:	19db      	adds	r3, r3, r7
 800465a:	2202      	movs	r2, #2
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e033      	b.n	80046c8 <UART_SetConfig+0x390>
 8004660:	231b      	movs	r3, #27
 8004662:	2220      	movs	r2, #32
 8004664:	189b      	adds	r3, r3, r2
 8004666:	19db      	adds	r3, r3, r7
 8004668:	2204      	movs	r2, #4
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	e02c      	b.n	80046c8 <UART_SetConfig+0x390>
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	cfff69f3 	.word	0xcfff69f3
 8004674:	ffffcfff 	.word	0xffffcfff
 8004678:	40008000 	.word	0x40008000
 800467c:	40008400 	.word	0x40008400
 8004680:	11fff4ff 	.word	0x11fff4ff
 8004684:	40013800 	.word	0x40013800
 8004688:	40021000 	.word	0x40021000
 800468c:	40004400 	.word	0x40004400
 8004690:	40004800 	.word	0x40004800
 8004694:	40004c00 	.word	0x40004c00
 8004698:	40005000 	.word	0x40005000
 800469c:	40013c00 	.word	0x40013c00
 80046a0:	231b      	movs	r3, #27
 80046a2:	2220      	movs	r2, #32
 80046a4:	189b      	adds	r3, r3, r2
 80046a6:	19db      	adds	r3, r3, r7
 80046a8:	2208      	movs	r2, #8
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	e00c      	b.n	80046c8 <UART_SetConfig+0x390>
 80046ae:	231b      	movs	r3, #27
 80046b0:	2220      	movs	r2, #32
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	19db      	adds	r3, r3, r7
 80046b6:	2210      	movs	r2, #16
 80046b8:	701a      	strb	r2, [r3, #0]
 80046ba:	e005      	b.n	80046c8 <UART_SetConfig+0x390>
 80046bc:	231b      	movs	r3, #27
 80046be:	2220      	movs	r2, #32
 80046c0:	189b      	adds	r3, r3, r2
 80046c2:	19db      	adds	r3, r3, r7
 80046c4:	2210      	movs	r2, #16
 80046c6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4ac1      	ldr	r2, [pc, #772]	; (80049d4 <UART_SetConfig+0x69c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d005      	beq.n	80046de <UART_SetConfig+0x3a6>
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4ac0      	ldr	r2, [pc, #768]	; (80049d8 <UART_SetConfig+0x6a0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d000      	beq.n	80046de <UART_SetConfig+0x3a6>
 80046dc:	e093      	b.n	8004806 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046de:	231b      	movs	r3, #27
 80046e0:	2220      	movs	r2, #32
 80046e2:	189b      	adds	r3, r3, r2
 80046e4:	19db      	adds	r3, r3, r7
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d015      	beq.n	8004718 <UART_SetConfig+0x3e0>
 80046ec:	dc18      	bgt.n	8004720 <UART_SetConfig+0x3e8>
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d00d      	beq.n	800470e <UART_SetConfig+0x3d6>
 80046f2:	dc15      	bgt.n	8004720 <UART_SetConfig+0x3e8>
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <UART_SetConfig+0x3c6>
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d005      	beq.n	8004708 <UART_SetConfig+0x3d0>
 80046fc:	e010      	b.n	8004720 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046fe:	f7ff f963 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8004702:	0003      	movs	r3, r0
 8004704:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004706:	e014      	b.n	8004732 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004708:	4bb4      	ldr	r3, [pc, #720]	; (80049dc <UART_SetConfig+0x6a4>)
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800470c:	e011      	b.n	8004732 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800470e:	f7ff f8cf 	bl	80038b0 <HAL_RCC_GetSysClockFreq>
 8004712:	0003      	movs	r3, r0
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004716:	e00c      	b.n	8004732 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800471e:	e008      	b.n	8004732 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004724:	231a      	movs	r3, #26
 8004726:	2220      	movs	r2, #32
 8004728:	189b      	adds	r3, r3, r2
 800472a:	19db      	adds	r3, r3, r7
 800472c:	2201      	movs	r2, #1
 800472e:	701a      	strb	r2, [r3, #0]
        break;
 8004730:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	2b00      	cmp	r3, #0
 8004736:	d100      	bne.n	800473a <UART_SetConfig+0x402>
 8004738:	e135      	b.n	80049a6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800473e:	4ba8      	ldr	r3, [pc, #672]	; (80049e0 <UART_SetConfig+0x6a8>)
 8004740:	0052      	lsls	r2, r2, #1
 8004742:	5ad3      	ldrh	r3, [r2, r3]
 8004744:	0019      	movs	r1, r3
 8004746:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004748:	f7fb fcee 	bl	8000128 <__udivsi3>
 800474c:	0003      	movs	r3, r0
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	0013      	movs	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	189b      	adds	r3, r3, r2
 800475a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800475c:	429a      	cmp	r2, r3
 800475e:	d305      	bcc.n	800476c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004768:	429a      	cmp	r2, r3
 800476a:	d906      	bls.n	800477a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800476c:	231a      	movs	r3, #26
 800476e:	2220      	movs	r2, #32
 8004770:	189b      	adds	r3, r3, r2
 8004772:	19db      	adds	r3, r3, r7
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	e044      	b.n	8004804 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800477a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004786:	4b96      	ldr	r3, [pc, #600]	; (80049e0 <UART_SetConfig+0x6a8>)
 8004788:	0052      	lsls	r2, r2, #1
 800478a:	5ad3      	ldrh	r3, [r2, r3]
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	69b8      	ldr	r0, [r7, #24]
 8004798:	69f9      	ldr	r1, [r7, #28]
 800479a:	f7fb fe79 	bl	8000490 <__aeabi_uldivmod>
 800479e:	0002      	movs	r2, r0
 80047a0:	000b      	movs	r3, r1
 80047a2:	0e11      	lsrs	r1, r2, #24
 80047a4:	021d      	lsls	r5, r3, #8
 80047a6:	430d      	orrs	r5, r1
 80047a8:	0214      	lsls	r4, r2, #8
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	085b      	lsrs	r3, r3, #1
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	68b8      	ldr	r0, [r7, #8]
 80047b8:	68f9      	ldr	r1, [r7, #12]
 80047ba:	1900      	adds	r0, r0, r4
 80047bc:	4169      	adcs	r1, r5
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f7fb fe60 	bl	8000490 <__aeabi_uldivmod>
 80047d0:	0002      	movs	r2, r0
 80047d2:	000b      	movs	r3, r1
 80047d4:	0013      	movs	r3, r2
 80047d6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047da:	23c0      	movs	r3, #192	; 0xc0
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	429a      	cmp	r2, r3
 80047e0:	d309      	bcc.n	80047f6 <UART_SetConfig+0x4be>
 80047e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	035b      	lsls	r3, r3, #13
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d204      	bcs.n	80047f6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f2:	60da      	str	r2, [r3, #12]
 80047f4:	e006      	b.n	8004804 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80047f6:	231a      	movs	r3, #26
 80047f8:	2220      	movs	r2, #32
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	19db      	adds	r3, r3, r7
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004802:	e0d0      	b.n	80049a6 <UART_SetConfig+0x66e>
 8004804:	e0cf      	b.n	80049a6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	429a      	cmp	r2, r3
 8004810:	d000      	beq.n	8004814 <UART_SetConfig+0x4dc>
 8004812:	e070      	b.n	80048f6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004814:	231b      	movs	r3, #27
 8004816:	2220      	movs	r2, #32
 8004818:	189b      	adds	r3, r3, r2
 800481a:	19db      	adds	r3, r3, r7
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b08      	cmp	r3, #8
 8004820:	d015      	beq.n	800484e <UART_SetConfig+0x516>
 8004822:	dc18      	bgt.n	8004856 <UART_SetConfig+0x51e>
 8004824:	2b04      	cmp	r3, #4
 8004826:	d00d      	beq.n	8004844 <UART_SetConfig+0x50c>
 8004828:	dc15      	bgt.n	8004856 <UART_SetConfig+0x51e>
 800482a:	2b00      	cmp	r3, #0
 800482c:	d002      	beq.n	8004834 <UART_SetConfig+0x4fc>
 800482e:	2b02      	cmp	r3, #2
 8004830:	d005      	beq.n	800483e <UART_SetConfig+0x506>
 8004832:	e010      	b.n	8004856 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004834:	f7ff f8c8 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 8004838:	0003      	movs	r3, r0
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800483c:	e014      	b.n	8004868 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483e:	4b67      	ldr	r3, [pc, #412]	; (80049dc <UART_SetConfig+0x6a4>)
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004842:	e011      	b.n	8004868 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004844:	f7ff f834 	bl	80038b0 <HAL_RCC_GetSysClockFreq>
 8004848:	0003      	movs	r3, r0
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800484c:	e00c      	b.n	8004868 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484e:	2380      	movs	r3, #128	; 0x80
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004854:	e008      	b.n	8004868 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800485a:	231a      	movs	r3, #26
 800485c:	2220      	movs	r2, #32
 800485e:	189b      	adds	r3, r3, r2
 8004860:	19db      	adds	r3, r3, r7
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
        break;
 8004866:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486a:	2b00      	cmp	r3, #0
 800486c:	d100      	bne.n	8004870 <UART_SetConfig+0x538>
 800486e:	e09a      	b.n	80049a6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004874:	4b5a      	ldr	r3, [pc, #360]	; (80049e0 <UART_SetConfig+0x6a8>)
 8004876:	0052      	lsls	r2, r2, #1
 8004878:	5ad3      	ldrh	r3, [r2, r3]
 800487a:	0019      	movs	r1, r3
 800487c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800487e:	f7fb fc53 	bl	8000128 <__udivsi3>
 8004882:	0003      	movs	r3, r0
 8004884:	005a      	lsls	r2, r3, #1
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	085b      	lsrs	r3, r3, #1
 800488c:	18d2      	adds	r2, r2, r3
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	0019      	movs	r1, r3
 8004894:	0010      	movs	r0, r2
 8004896:	f7fb fc47 	bl	8000128 <__udivsi3>
 800489a:	0003      	movs	r3, r0
 800489c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	2b0f      	cmp	r3, #15
 80048a2:	d921      	bls.n	80048e8 <UART_SetConfig+0x5b0>
 80048a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	025b      	lsls	r3, r3, #9
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d21c      	bcs.n	80048e8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	200e      	movs	r0, #14
 80048b4:	2420      	movs	r4, #32
 80048b6:	1903      	adds	r3, r0, r4
 80048b8:	19db      	adds	r3, r3, r7
 80048ba:	210f      	movs	r1, #15
 80048bc:	438a      	bics	r2, r1
 80048be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	085b      	lsrs	r3, r3, #1
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2207      	movs	r2, #7
 80048c8:	4013      	ands	r3, r2
 80048ca:	b299      	uxth	r1, r3
 80048cc:	1903      	adds	r3, r0, r4
 80048ce:	19db      	adds	r3, r3, r7
 80048d0:	1902      	adds	r2, r0, r4
 80048d2:	19d2      	adds	r2, r2, r7
 80048d4:	8812      	ldrh	r2, [r2, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	1902      	adds	r2, r0, r4
 80048e0:	19d2      	adds	r2, r2, r7
 80048e2:	8812      	ldrh	r2, [r2, #0]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	e05e      	b.n	80049a6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80048e8:	231a      	movs	r3, #26
 80048ea:	2220      	movs	r2, #32
 80048ec:	189b      	adds	r3, r3, r2
 80048ee:	19db      	adds	r3, r3, r7
 80048f0:	2201      	movs	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e057      	b.n	80049a6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048f6:	231b      	movs	r3, #27
 80048f8:	2220      	movs	r2, #32
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	19db      	adds	r3, r3, r7
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b08      	cmp	r3, #8
 8004902:	d015      	beq.n	8004930 <UART_SetConfig+0x5f8>
 8004904:	dc18      	bgt.n	8004938 <UART_SetConfig+0x600>
 8004906:	2b04      	cmp	r3, #4
 8004908:	d00d      	beq.n	8004926 <UART_SetConfig+0x5ee>
 800490a:	dc15      	bgt.n	8004938 <UART_SetConfig+0x600>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <UART_SetConfig+0x5de>
 8004910:	2b02      	cmp	r3, #2
 8004912:	d005      	beq.n	8004920 <UART_SetConfig+0x5e8>
 8004914:	e010      	b.n	8004938 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004916:	f7ff f857 	bl	80039c8 <HAL_RCC_GetPCLK1Freq>
 800491a:	0003      	movs	r3, r0
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800491e:	e014      	b.n	800494a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004920:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <UART_SetConfig+0x6a4>)
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004924:	e011      	b.n	800494a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004926:	f7fe ffc3 	bl	80038b0 <HAL_RCC_GetSysClockFreq>
 800492a:	0003      	movs	r3, r0
 800492c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800492e:	e00c      	b.n	800494a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004936:	e008      	b.n	800494a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800493c:	231a      	movs	r3, #26
 800493e:	2220      	movs	r2, #32
 8004940:	189b      	adds	r3, r3, r2
 8004942:	19db      	adds	r3, r3, r7
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
        break;
 8004948:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800494a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494c:	2b00      	cmp	r3, #0
 800494e:	d02a      	beq.n	80049a6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <UART_SetConfig+0x6a8>)
 8004956:	0052      	lsls	r2, r2, #1
 8004958:	5ad3      	ldrh	r3, [r2, r3]
 800495a:	0019      	movs	r1, r3
 800495c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800495e:	f7fb fbe3 	bl	8000128 <__udivsi3>
 8004962:	0003      	movs	r3, r0
 8004964:	001a      	movs	r2, r3
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	18d2      	adds	r2, r2, r3
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	0019      	movs	r1, r3
 8004974:	0010      	movs	r0, r2
 8004976:	f7fb fbd7 	bl	8000128 <__udivsi3>
 800497a:	0003      	movs	r3, r0
 800497c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2b0f      	cmp	r3, #15
 8004982:	d90a      	bls.n	800499a <UART_SetConfig+0x662>
 8004984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	025b      	lsls	r3, r3, #9
 800498a:	429a      	cmp	r2, r3
 800498c:	d205      	bcs.n	800499a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	b29a      	uxth	r2, r3
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60da      	str	r2, [r3, #12]
 8004998:	e005      	b.n	80049a6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800499a:	231a      	movs	r3, #26
 800499c:	2220      	movs	r2, #32
 800499e:	189b      	adds	r3, r3, r2
 80049a0:	19db      	adds	r3, r3, r7
 80049a2:	2201      	movs	r2, #1
 80049a4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	226a      	movs	r2, #106	; 0x6a
 80049aa:	2101      	movs	r1, #1
 80049ac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	2268      	movs	r2, #104	; 0x68
 80049b2:	2101      	movs	r1, #1
 80049b4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	2200      	movs	r2, #0
 80049ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	2200      	movs	r2, #0
 80049c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80049c2:	231a      	movs	r3, #26
 80049c4:	2220      	movs	r2, #32
 80049c6:	189b      	adds	r3, r3, r2
 80049c8:	19db      	adds	r3, r3, r7
 80049ca:	781b      	ldrb	r3, [r3, #0]
}
 80049cc:	0018      	movs	r0, r3
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b010      	add	sp, #64	; 0x40
 80049d2:	bdb0      	pop	{r4, r5, r7, pc}
 80049d4:	40008000 	.word	0x40008000
 80049d8:	40008400 	.word	0x40008400
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	08007e14 	.word	0x08007e14

080049e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	2208      	movs	r2, #8
 80049f2:	4013      	ands	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4a4a      	ldr	r2, [pc, #296]	; (8004b28 <UART_AdvFeatureConfig+0x144>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	0019      	movs	r1, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a12:	2201      	movs	r2, #1
 8004a14:	4013      	ands	r3, r2
 8004a16:	d00b      	beq.n	8004a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4a43      	ldr	r2, [pc, #268]	; (8004b2c <UART_AdvFeatureConfig+0x148>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	2202      	movs	r2, #2
 8004a36:	4013      	ands	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a3b      	ldr	r2, [pc, #236]	; (8004b30 <UART_AdvFeatureConfig+0x14c>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	0019      	movs	r1, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	2204      	movs	r2, #4
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d00b      	beq.n	8004a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4a34      	ldr	r2, [pc, #208]	; (8004b34 <UART_AdvFeatureConfig+0x150>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	0019      	movs	r1, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a78:	2210      	movs	r2, #16
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <UART_AdvFeatureConfig+0x154>)
 8004a86:	4013      	ands	r3, r2
 8004a88:	0019      	movs	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	d00b      	beq.n	8004ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4a25      	ldr	r2, [pc, #148]	; (8004b3c <UART_AdvFeatureConfig+0x158>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	0019      	movs	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d01d      	beq.n	8004afe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <UART_AdvFeatureConfig+0x15c>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	0019      	movs	r1, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	035b      	lsls	r3, r3, #13
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d10b      	bne.n	8004afe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <UART_AdvFeatureConfig+0x160>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	0019      	movs	r1, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	2280      	movs	r2, #128	; 0x80
 8004b04:	4013      	ands	r3, r2
 8004b06:	d00b      	beq.n	8004b20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4a0e      	ldr	r2, [pc, #56]	; (8004b48 <UART_AdvFeatureConfig+0x164>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  }
}
 8004b20:	46c0      	nop			; (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b002      	add	sp, #8
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	ffff7fff 	.word	0xffff7fff
 8004b2c:	fffdffff 	.word	0xfffdffff
 8004b30:	fffeffff 	.word	0xfffeffff
 8004b34:	fffbffff 	.word	0xfffbffff
 8004b38:	ffffefff 	.word	0xffffefff
 8004b3c:	ffffdfff 	.word	0xffffdfff
 8004b40:	ffefffff 	.word	0xffefffff
 8004b44:	ff9fffff 	.word	0xff9fffff
 8004b48:	fff7ffff 	.word	0xfff7ffff

08004b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b092      	sub	sp, #72	; 0x48
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2290      	movs	r2, #144	; 0x90
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b5c:	f7fe fb74 	bl	8003248 <HAL_GetTick>
 8004b60:	0003      	movs	r3, r0
 8004b62:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d12d      	bne.n	8004bce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b74:	2280      	movs	r2, #128	; 0x80
 8004b76:	0391      	lsls	r1, r2, #14
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4a47      	ldr	r2, [pc, #284]	; (8004c98 <UART_CheckIdleState+0x14c>)
 8004b7c:	9200      	str	r2, [sp, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f000 f88e 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d022      	beq.n	8004bce <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b88:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b92:	2301      	movs	r3, #1
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	f383 8810 	msr	PRIMASK, r3
}
 8004b9c:	46c0      	nop			; (mov r8, r8)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2180      	movs	r1, #128	; 0x80
 8004baa:	438a      	bics	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb4:	f383 8810 	msr	PRIMASK, r3
}
 8004bb8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2288      	movs	r2, #136	; 0x88
 8004bbe:	2120      	movs	r1, #32
 8004bc0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2284      	movs	r2, #132	; 0x84
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e060      	b.n	8004c90 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d146      	bne.n	8004c6a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	2280      	movs	r2, #128	; 0x80
 8004be0:	03d1      	lsls	r1, r2, #15
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <UART_CheckIdleState+0x14c>)
 8004be6:	9200      	str	r2, [sp, #0]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f000 f859 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8004bee:	1e03      	subs	r3, r0, #0
 8004bf0:	d03b      	beq.n	8004c6a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f383 8810 	msr	PRIMASK, r3
}
 8004c06:	46c0      	nop			; (mov r8, r8)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4922      	ldr	r1, [pc, #136]	; (8004c9c <UART_CheckIdleState+0x150>)
 8004c14:	400a      	ands	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f383 8810 	msr	PRIMASK, r3
}
 8004c22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c24:	f3ef 8310 	mrs	r3, PRIMASK
 8004c28:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2e:	2301      	movs	r3, #1
 8004c30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	f383 8810 	msr	PRIMASK, r3
}
 8004c38:	46c0      	nop			; (mov r8, r8)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2101      	movs	r1, #1
 8004c46:	438a      	bics	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4e:	6a3b      	ldr	r3, [r7, #32]
 8004c50:	f383 8810 	msr	PRIMASK, r3
}
 8004c54:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	228c      	movs	r2, #140	; 0x8c
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2284      	movs	r2, #132	; 0x84
 8004c62:	2100      	movs	r1, #0
 8004c64:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e012      	b.n	8004c90 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2288      	movs	r2, #136	; 0x88
 8004c6e:	2120      	movs	r1, #32
 8004c70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	228c      	movs	r2, #140	; 0x8c
 8004c76:	2120      	movs	r1, #32
 8004c78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2284      	movs	r2, #132	; 0x84
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b010      	add	sp, #64	; 0x40
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	01ffffff 	.word	0x01ffffff
 8004c9c:	fffffedf 	.word	0xfffffedf

08004ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	1dfb      	adds	r3, r7, #7
 8004cae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb0:	e051      	b.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	d04e      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb8:	f7fe fac6 	bl	8003248 <HAL_GetTick>
 8004cbc:	0002      	movs	r2, r0
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d302      	bcc.n	8004cce <UART_WaitOnFlagUntilTimeout+0x2e>
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e051      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2204      	movs	r2, #4
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d03b      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b80      	cmp	r3, #128	; 0x80
 8004ce2:	d038      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d035      	beq.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d111      	bne.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	0018      	movs	r0, r3
 8004d04:	f000 f960 	bl	8004fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2290      	movs	r2, #144	; 0x90
 8004d0c:	2108      	movs	r1, #8
 8004d0e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2284      	movs	r2, #132	; 0x84
 8004d14:	2100      	movs	r1, #0
 8004d16:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e02c      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69da      	ldr	r2, [r3, #28]
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	401a      	ands	r2, r3
 8004d28:	2380      	movs	r3, #128	; 0x80
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d112      	bne.n	8004d56 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2280      	movs	r2, #128	; 0x80
 8004d36:	0112      	lsls	r2, r2, #4
 8004d38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 f943 	bl	8004fc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2290      	movs	r2, #144	; 0x90
 8004d46:	2120      	movs	r1, #32
 8004d48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2284      	movs	r2, #132	; 0x84
 8004d4e:	2100      	movs	r1, #0
 8004d50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e00f      	b.n	8004d76 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	425a      	negs	r2, r3
 8004d66:	4153      	adcs	r3, r2
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	1dfb      	adds	r3, r7, #7
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d09e      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	0018      	movs	r0, r3
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b004      	add	sp, #16
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b098      	sub	sp, #96	; 0x60
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	1dbb      	adds	r3, r7, #6
 8004d8c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	1dba      	adds	r2, r7, #6
 8004d98:	215c      	movs	r1, #92	; 0x5c
 8004d9a:	8812      	ldrh	r2, [r2, #0]
 8004d9c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1dba      	adds	r2, r7, #6
 8004da2:	215e      	movs	r1, #94	; 0x5e
 8004da4:	8812      	ldrh	r2, [r2, #0]
 8004da6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	015b      	lsls	r3, r3, #5
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d10d      	bne.n	8004dd6 <UART_Start_Receive_IT+0x56>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <UART_Start_Receive_IT+0x4c>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2260      	movs	r2, #96	; 0x60
 8004dc6:	497b      	ldr	r1, [pc, #492]	; (8004fb4 <UART_Start_Receive_IT+0x234>)
 8004dc8:	5299      	strh	r1, [r3, r2]
 8004dca:	e02e      	b.n	8004e2a <UART_Start_Receive_IT+0xaa>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2260      	movs	r2, #96	; 0x60
 8004dd0:	21ff      	movs	r1, #255	; 0xff
 8004dd2:	5299      	strh	r1, [r3, r2]
 8004dd4:	e029      	b.n	8004e2a <UART_Start_Receive_IT+0xaa>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10d      	bne.n	8004dfa <UART_Start_Receive_IT+0x7a>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <UART_Start_Receive_IT+0x70>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2260      	movs	r2, #96	; 0x60
 8004dea:	21ff      	movs	r1, #255	; 0xff
 8004dec:	5299      	strh	r1, [r3, r2]
 8004dee:	e01c      	b.n	8004e2a <UART_Start_Receive_IT+0xaa>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2260      	movs	r2, #96	; 0x60
 8004df4:	217f      	movs	r1, #127	; 0x7f
 8004df6:	5299      	strh	r1, [r3, r2]
 8004df8:	e017      	b.n	8004e2a <UART_Start_Receive_IT+0xaa>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	055b      	lsls	r3, r3, #21
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d10d      	bne.n	8004e22 <UART_Start_Receive_IT+0xa2>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <UART_Start_Receive_IT+0x98>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2260      	movs	r2, #96	; 0x60
 8004e12:	217f      	movs	r1, #127	; 0x7f
 8004e14:	5299      	strh	r1, [r3, r2]
 8004e16:	e008      	b.n	8004e2a <UART_Start_Receive_IT+0xaa>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2260      	movs	r2, #96	; 0x60
 8004e1c:	213f      	movs	r1, #63	; 0x3f
 8004e1e:	5299      	strh	r1, [r3, r2]
 8004e20:	e003      	b.n	8004e2a <UART_Start_Receive_IT+0xaa>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2260      	movs	r2, #96	; 0x60
 8004e26:	2100      	movs	r1, #0
 8004e28:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2290      	movs	r2, #144	; 0x90
 8004e2e:	2100      	movs	r1, #0
 8004e30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	228c      	movs	r2, #140	; 0x8c
 8004e36:	2122      	movs	r1, #34	; 0x22
 8004e38:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8004e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e44:	2301      	movs	r3, #1
 8004e46:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4a:	f383 8810 	msr	PRIMASK, r3
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	609a      	str	r2, [r3, #8]
 8004e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e62:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e66:	f383 8810 	msr	PRIMASK, r3
}
 8004e6a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	059b      	lsls	r3, r3, #22
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d150      	bne.n	8004f1a <UART_Start_Receive_IT+0x19a>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2268      	movs	r2, #104	; 0x68
 8004e7c:	5a9b      	ldrh	r3, [r3, r2]
 8004e7e:	1dba      	adds	r2, r7, #6
 8004e80:	8812      	ldrh	r2, [r2, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d349      	bcc.n	8004f1a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	2380      	movs	r3, #128	; 0x80
 8004e8c:	015b      	lsls	r3, r3, #5
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d107      	bne.n	8004ea2 <UART_Start_Receive_IT+0x122>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d103      	bne.n	8004ea2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a46      	ldr	r2, [pc, #280]	; (8004fb8 <UART_Start_Receive_IT+0x238>)
 8004e9e:	675a      	str	r2, [r3, #116]	; 0x74
 8004ea0:	e002      	b.n	8004ea8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a45      	ldr	r2, [pc, #276]	; (8004fbc <UART_Start_Receive_IT+0x23c>)
 8004ea6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d019      	beq.n	8004ee4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eba:	2301      	movs	r3, #1
 8004ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	f383 8810 	msr	PRIMASK, r3
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2180      	movs	r1, #128	; 0x80
 8004ed2:	0049      	lsls	r1, r1, #1
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eda:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ede:	f383 8810 	msr	PRIMASK, r3
}
 8004ee2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004eec:	657b      	str	r3, [r7, #84]	; 0x54
 8004eee:	2301      	movs	r3, #1
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	f383 8810 	msr	PRIMASK, r3
}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2180      	movs	r1, #128	; 0x80
 8004f06:	0549      	lsls	r1, r1, #21
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	f383 8810 	msr	PRIMASK, r3
}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	e047      	b.n	8004faa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	015b      	lsls	r3, r3, #5
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d107      	bne.n	8004f36 <UART_Start_Receive_IT+0x1b6>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d103      	bne.n	8004f36 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <UART_Start_Receive_IT+0x240>)
 8004f32:	675a      	str	r2, [r3, #116]	; 0x74
 8004f34:	e002      	b.n	8004f3c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a22      	ldr	r2, [pc, #136]	; (8004fc4 <UART_Start_Receive_IT+0x244>)
 8004f3a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d019      	beq.n	8004f78 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f44:	f3ef 8310 	mrs	r3, PRIMASK
 8004f48:	61fb      	str	r3, [r7, #28]
  return(result);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f4e:	2301      	movs	r3, #1
 8004f50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2190      	movs	r1, #144	; 0x90
 8004f66:	0049      	lsls	r1, r1, #1
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	f383 8810 	msr	PRIMASK, r3
}
 8004f76:	e018      	b.n	8004faa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f78:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7c:	613b      	str	r3, [r7, #16]
  return(result);
 8004f7e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004f80:	653b      	str	r3, [r7, #80]	; 0x50
 8004f82:	2301      	movs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f383 8810 	msr	PRIMASK, r3
}
 8004f8c:	46c0      	nop			; (mov r8, r8)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2120      	movs	r1, #32
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	f383 8810 	msr	PRIMASK, r3
}
 8004fa8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	0018      	movs	r0, r3
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	b018      	add	sp, #96	; 0x60
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	000001ff 	.word	0x000001ff
 8004fb8:	08005811 	.word	0x08005811
 8004fbc:	080054c5 	.word	0x080054c5
 8004fc0:	080052f1 	.word	0x080052f1
 8004fc4:	0800511d 	.word	0x0800511d

08004fc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08e      	sub	sp, #56	; 0x38
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8004fd6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fda:	2301      	movs	r3, #1
 8004fdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	f383 8810 	msr	PRIMASK, r3
}
 8004fe4:	46c0      	nop			; (mov r8, r8)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4926      	ldr	r1, [pc, #152]	; (800508c <UART_EndRxTransfer+0xc4>)
 8004ff2:	400a      	ands	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005002:	f3ef 8310 	mrs	r3, PRIMASK
 8005006:	623b      	str	r3, [r7, #32]
  return(result);
 8005008:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
 800500c:	2301      	movs	r3, #1
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	f383 8810 	msr	PRIMASK, r3
}
 8005016:	46c0      	nop			; (mov r8, r8)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	491b      	ldr	r1, [pc, #108]	; (8005090 <UART_EndRxTransfer+0xc8>)
 8005024:	400a      	ands	r2, r1
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	f383 8810 	msr	PRIMASK, r3
}
 8005032:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005038:	2b01      	cmp	r3, #1
 800503a:	d118      	bne.n	800506e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503c:	f3ef 8310 	mrs	r3, PRIMASK
 8005040:	60bb      	str	r3, [r7, #8]
  return(result);
 8005042:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005046:	2301      	movs	r3, #1
 8005048:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f383 8810 	msr	PRIMASK, r3
}
 8005050:	46c0      	nop			; (mov r8, r8)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2110      	movs	r1, #16
 800505e:	438a      	bics	r2, r1
 8005060:	601a      	str	r2, [r3, #0]
 8005062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005064:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f383 8810 	msr	PRIMASK, r3
}
 800506c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	228c      	movs	r2, #140	; 0x8c
 8005072:	2120      	movs	r1, #32
 8005074:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	46bd      	mov	sp, r7
 8005086:	b00e      	add	sp, #56	; 0x38
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	fffffedf 	.word	0xfffffedf
 8005090:	effffffe 	.word	0xeffffffe

08005094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	225e      	movs	r2, #94	; 0x5e
 80050a6:	2100      	movs	r1, #0
 80050a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2256      	movs	r2, #86	; 0x56
 80050ae:	2100      	movs	r1, #0
 80050b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	0018      	movs	r0, r3
 80050b6:	f7ff f92b 	bl	8004310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	46bd      	mov	sp, r7
 80050be:	b004      	add	sp, #16
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ca:	f3ef 8310 	mrs	r3, PRIMASK
 80050ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80050d0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	2301      	movs	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f383 8810 	msr	PRIMASK, r3
}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2140      	movs	r1, #64	; 0x40
 80050ec:	438a      	bics	r2, r1
 80050ee:	601a      	str	r2, [r3, #0]
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f383 8810 	msr	PRIMASK, r3
}
 80050fa:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2288      	movs	r2, #136	; 0x88
 8005100:	2120      	movs	r1, #32
 8005102:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0018      	movs	r0, r3
 800510e:	f7ff f8f7 	bl	8004300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b006      	add	sp, #24
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b094      	sub	sp, #80	; 0x50
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005124:	204e      	movs	r0, #78	; 0x4e
 8005126:	183b      	adds	r3, r7, r0
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	2160      	movs	r1, #96	; 0x60
 800512c:	5a52      	ldrh	r2, [r2, r1]
 800512e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	228c      	movs	r2, #140	; 0x8c
 8005134:	589b      	ldr	r3, [r3, r2]
 8005136:	2b22      	cmp	r3, #34	; 0x22
 8005138:	d000      	beq.n	800513c <UART_RxISR_8BIT+0x20>
 800513a:	e0c4      	b.n	80052c6 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005142:	214c      	movs	r1, #76	; 0x4c
 8005144:	187b      	adds	r3, r7, r1
 8005146:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005148:	187b      	adds	r3, r7, r1
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b2da      	uxtb	r2, r3
 800514e:	183b      	adds	r3, r7, r0
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b2d9      	uxtb	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005158:	400a      	ands	r2, r1
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	225e      	movs	r2, #94	; 0x5e
 800516c:	5a9b      	ldrh	r3, [r3, r2]
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b299      	uxth	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	225e      	movs	r2, #94	; 0x5e
 8005178:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	225e      	movs	r2, #94	; 0x5e
 800517e:	5a9b      	ldrh	r3, [r3, r2]
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d000      	beq.n	8005188 <UART_RxISR_8BIT+0x6c>
 8005186:	e0a6      	b.n	80052d6 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005188:	f3ef 8310 	mrs	r3, PRIMASK
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005190:	64bb      	str	r3, [r7, #72]	; 0x48
 8005192:	2301      	movs	r3, #1
 8005194:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005198:	f383 8810 	msr	PRIMASK, r3
}
 800519c:	46c0      	nop			; (mov r8, r8)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	494d      	ldr	r1, [pc, #308]	; (80052e0 <UART_RxISR_8BIT+0x1c4>)
 80051aa:	400a      	ands	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	f383 8810 	msr	PRIMASK, r3
}
 80051b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051ba:	f3ef 8310 	mrs	r3, PRIMASK
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c2:	647b      	str	r3, [r7, #68]	; 0x44
 80051c4:	2301      	movs	r3, #1
 80051c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	f383 8810 	msr	PRIMASK, r3
}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2101      	movs	r1, #1
 80051dc:	438a      	bics	r2, r1
 80051de:	609a      	str	r2, [r3, #8]
 80051e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	f383 8810 	msr	PRIMASK, r3
}
 80051ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	228c      	movs	r2, #140	; 0x8c
 80051f0:	2120      	movs	r1, #32
 80051f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a37      	ldr	r2, [pc, #220]	; (80052e4 <UART_RxISR_8BIT+0x1c8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d024      	beq.n	8005254 <UART_RxISR_8BIT+0x138>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a36      	ldr	r2, [pc, #216]	; (80052e8 <UART_RxISR_8BIT+0x1cc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d01f      	beq.n	8005254 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	2380      	movs	r3, #128	; 0x80
 800521c:	041b      	lsls	r3, r3, #16
 800521e:	4013      	ands	r3, r2
 8005220:	d018      	beq.n	8005254 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005222:	f3ef 8310 	mrs	r3, PRIMASK
 8005226:	61bb      	str	r3, [r7, #24]
  return(result);
 8005228:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800522a:	643b      	str	r3, [r7, #64]	; 0x40
 800522c:	2301      	movs	r3, #1
 800522e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f383 8810 	msr	PRIMASK, r3
}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	492a      	ldr	r1, [pc, #168]	; (80052ec <UART_RxISR_8BIT+0x1d0>)
 8005244:	400a      	ands	r2, r1
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800524a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	f383 8810 	msr	PRIMASK, r3
}
 8005252:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d12f      	bne.n	80052bc <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005262:	f3ef 8310 	mrs	r3, PRIMASK
 8005266:	60fb      	str	r3, [r7, #12]
  return(result);
 8005268:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800526c:	2301      	movs	r3, #1
 800526e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f383 8810 	msr	PRIMASK, r3
}
 8005276:	46c0      	nop			; (mov r8, r8)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2110      	movs	r1, #16
 8005284:	438a      	bics	r2, r1
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800528a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f383 8810 	msr	PRIMASK, r3
}
 8005292:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	2210      	movs	r2, #16
 800529c:	4013      	ands	r3, r2
 800529e:	2b10      	cmp	r3, #16
 80052a0:	d103      	bne.n	80052aa <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2210      	movs	r2, #16
 80052a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	225c      	movs	r2, #92	; 0x5c
 80052ae:	5a9a      	ldrh	r2, [r3, r2]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	0011      	movs	r1, r2
 80052b4:	0018      	movs	r0, r3
 80052b6:	f7ff f833 	bl	8004320 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052ba:	e00c      	b.n	80052d6 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	0018      	movs	r0, r3
 80052c0:	f7fd fb2c 	bl	800291c <HAL_UART_RxCpltCallback>
}
 80052c4:	e007      	b.n	80052d6 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2108      	movs	r1, #8
 80052d2:	430a      	orrs	r2, r1
 80052d4:	619a      	str	r2, [r3, #24]
}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	46bd      	mov	sp, r7
 80052da:	b014      	add	sp, #80	; 0x50
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	fffffedf 	.word	0xfffffedf
 80052e4:	40008000 	.word	0x40008000
 80052e8:	40008400 	.word	0x40008400
 80052ec:	fbffffff 	.word	0xfbffffff

080052f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b094      	sub	sp, #80	; 0x50
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052f8:	204e      	movs	r0, #78	; 0x4e
 80052fa:	183b      	adds	r3, r7, r0
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	2160      	movs	r1, #96	; 0x60
 8005300:	5a52      	ldrh	r2, [r2, r1]
 8005302:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	228c      	movs	r2, #140	; 0x8c
 8005308:	589b      	ldr	r3, [r3, r2]
 800530a:	2b22      	cmp	r3, #34	; 0x22
 800530c:	d000      	beq.n	8005310 <UART_RxISR_16BIT+0x20>
 800530e:	e0c4      	b.n	800549a <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005316:	214c      	movs	r1, #76	; 0x4c
 8005318:	187b      	adds	r3, r7, r1
 800531a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005322:	187b      	adds	r3, r7, r1
 8005324:	183a      	adds	r2, r7, r0
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	8812      	ldrh	r2, [r2, #0]
 800532a:	4013      	ands	r3, r2
 800532c:	b29a      	uxth	r2, r3
 800532e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005330:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	1c9a      	adds	r2, r3, #2
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	225e      	movs	r2, #94	; 0x5e
 8005340:	5a9b      	ldrh	r3, [r3, r2]
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b299      	uxth	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	225e      	movs	r2, #94	; 0x5e
 800534c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	225e      	movs	r2, #94	; 0x5e
 8005352:	5a9b      	ldrh	r3, [r3, r2]
 8005354:	b29b      	uxth	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d000      	beq.n	800535c <UART_RxISR_16BIT+0x6c>
 800535a:	e0a6      	b.n	80054aa <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800535c:	f3ef 8310 	mrs	r3, PRIMASK
 8005360:	623b      	str	r3, [r7, #32]
  return(result);
 8005362:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005364:	647b      	str	r3, [r7, #68]	; 0x44
 8005366:	2301      	movs	r3, #1
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			; (mov r8, r8)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	494d      	ldr	r1, [pc, #308]	; (80054b4 <UART_RxISR_16BIT+0x1c4>)
 800537e:	400a      	ands	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	f383 8810 	msr	PRIMASK, r3
}
 800538c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538e:	f3ef 8310 	mrs	r3, PRIMASK
 8005392:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	643b      	str	r3, [r7, #64]	; 0x40
 8005398:	2301      	movs	r3, #1
 800539a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2101      	movs	r1, #1
 80053b0:	438a      	bics	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	f383 8810 	msr	PRIMASK, r3
}
 80053be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	228c      	movs	r2, #140	; 0x8c
 80053c4:	2120      	movs	r1, #32
 80053c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a37      	ldr	r2, [pc, #220]	; (80054b8 <UART_RxISR_16BIT+0x1c8>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d024      	beq.n	8005428 <UART_RxISR_16BIT+0x138>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a36      	ldr	r2, [pc, #216]	; (80054bc <UART_RxISR_16BIT+0x1cc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d01f      	beq.n	8005428 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	041b      	lsls	r3, r3, #16
 80053f2:	4013      	ands	r3, r2
 80053f4:	d018      	beq.n	8005428 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053f6:	f3ef 8310 	mrs	r3, PRIMASK
 80053fa:	617b      	str	r3, [r7, #20]
  return(result);
 80053fc:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005400:	2301      	movs	r3, #1
 8005402:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f383 8810 	msr	PRIMASK, r3
}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	492a      	ldr	r1, [pc, #168]	; (80054c0 <UART_RxISR_16BIT+0x1d0>)
 8005418:	400a      	ands	r2, r1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800541e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f383 8810 	msr	PRIMASK, r3
}
 8005426:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d12f      	bne.n	8005490 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005436:	f3ef 8310 	mrs	r3, PRIMASK
 800543a:	60bb      	str	r3, [r7, #8]
  return(result);
 800543c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005440:	2301      	movs	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f383 8810 	msr	PRIMASK, r3
}
 800544a:	46c0      	nop			; (mov r8, r8)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2110      	movs	r1, #16
 8005458:	438a      	bics	r2, r1
 800545a:	601a      	str	r2, [r3, #0]
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f383 8810 	msr	PRIMASK, r3
}
 8005466:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	2210      	movs	r2, #16
 8005470:	4013      	ands	r3, r2
 8005472:	2b10      	cmp	r3, #16
 8005474:	d103      	bne.n	800547e <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2210      	movs	r2, #16
 800547c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	225c      	movs	r2, #92	; 0x5c
 8005482:	5a9a      	ldrh	r2, [r3, r2]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	0011      	movs	r1, r2
 8005488:	0018      	movs	r0, r3
 800548a:	f7fe ff49 	bl	8004320 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800548e:	e00c      	b.n	80054aa <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	0018      	movs	r0, r3
 8005494:	f7fd fa42 	bl	800291c <HAL_UART_RxCpltCallback>
}
 8005498:	e007      	b.n	80054aa <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2108      	movs	r1, #8
 80054a6:	430a      	orrs	r2, r1
 80054a8:	619a      	str	r2, [r3, #24]
}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b014      	add	sp, #80	; 0x50
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	fffffedf 	.word	0xfffffedf
 80054b8:	40008000 	.word	0x40008000
 80054bc:	40008400 	.word	0x40008400
 80054c0:	fbffffff 	.word	0xfbffffff

080054c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b0a0      	sub	sp, #128	; 0x80
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80054cc:	237a      	movs	r3, #122	; 0x7a
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	2160      	movs	r1, #96	; 0x60
 80054d4:	5a52      	ldrh	r2, [r2, r1]
 80054d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	228c      	movs	r2, #140	; 0x8c
 80054f4:	589b      	ldr	r3, [r3, r2]
 80054f6:	2b22      	cmp	r3, #34	; 0x22
 80054f8:	d000      	beq.n	80054fc <UART_RxISR_8BIT_FIFOEN+0x38>
 80054fa:	e16f      	b.n	80057dc <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80054fc:	236e      	movs	r3, #110	; 0x6e
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	2168      	movs	r1, #104	; 0x68
 8005504:	5a52      	ldrh	r2, [r2, r1]
 8005506:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005508:	e116      	b.n	8005738 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005510:	216c      	movs	r1, #108	; 0x6c
 8005512:	187b      	adds	r3, r7, r1
 8005514:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005516:	187b      	adds	r3, r7, r1
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	237a      	movs	r3, #122	; 0x7a
 800551e:	18fb      	adds	r3, r7, r3
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	b2d9      	uxtb	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	400a      	ands	r2, r1
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	225e      	movs	r2, #94	; 0x5e
 800553c:	5a9b      	ldrh	r3, [r3, r2]
 800553e:	b29b      	uxth	r3, r3
 8005540:	3b01      	subs	r3, #1
 8005542:	b299      	uxth	r1, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	225e      	movs	r2, #94	; 0x5e
 8005548:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69db      	ldr	r3, [r3, #28]
 8005550:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005552:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005554:	2207      	movs	r2, #7
 8005556:	4013      	ands	r3, r2
 8005558:	d049      	beq.n	80055ee <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800555a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800555c:	2201      	movs	r2, #1
 800555e:	4013      	ands	r3, r2
 8005560:	d010      	beq.n	8005584 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005562:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	4013      	ands	r3, r2
 800556a:	d00b      	beq.n	8005584 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2201      	movs	r2, #1
 8005572:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2290      	movs	r2, #144	; 0x90
 8005578:	589b      	ldr	r3, [r3, r2]
 800557a:	2201      	movs	r2, #1
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2190      	movs	r1, #144	; 0x90
 8005582:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005584:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005586:	2202      	movs	r2, #2
 8005588:	4013      	ands	r3, r2
 800558a:	d00f      	beq.n	80055ac <UART_RxISR_8BIT_FIFOEN+0xe8>
 800558c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800558e:	2201      	movs	r2, #1
 8005590:	4013      	ands	r3, r2
 8005592:	d00b      	beq.n	80055ac <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2202      	movs	r2, #2
 800559a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2290      	movs	r2, #144	; 0x90
 80055a0:	589b      	ldr	r3, [r3, r2]
 80055a2:	2204      	movs	r2, #4
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2190      	movs	r1, #144	; 0x90
 80055aa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ae:	2204      	movs	r2, #4
 80055b0:	4013      	ands	r3, r2
 80055b2:	d00f      	beq.n	80055d4 <UART_RxISR_8BIT_FIFOEN+0x110>
 80055b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b6:	2201      	movs	r2, #1
 80055b8:	4013      	ands	r3, r2
 80055ba:	d00b      	beq.n	80055d4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2204      	movs	r2, #4
 80055c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2290      	movs	r2, #144	; 0x90
 80055c8:	589b      	ldr	r3, [r3, r2]
 80055ca:	2202      	movs	r2, #2
 80055cc:	431a      	orrs	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2190      	movs	r1, #144	; 0x90
 80055d2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2290      	movs	r2, #144	; 0x90
 80055d8:	589b      	ldr	r3, [r3, r2]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	0018      	movs	r0, r3
 80055e2:	f7fe fe95 	bl	8004310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2290      	movs	r2, #144	; 0x90
 80055ea:	2100      	movs	r1, #0
 80055ec:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	225e      	movs	r2, #94	; 0x5e
 80055f2:	5a9b      	ldrh	r3, [r3, r2]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d000      	beq.n	80055fc <UART_RxISR_8BIT_FIFOEN+0x138>
 80055fa:	e09d      	b.n	8005738 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005604:	66bb      	str	r3, [r7, #104]	; 0x68
 8005606:	2301      	movs	r3, #1
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560c:	f383 8810 	msr	PRIMASK, r3
}
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4975      	ldr	r1, [pc, #468]	; (80057f4 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800561e:	400a      	ands	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005624:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005628:	f383 8810 	msr	PRIMASK, r3
}
 800562c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800562e:	f3ef 8310 	mrs	r3, PRIMASK
 8005632:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8005634:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005636:	667b      	str	r3, [r7, #100]	; 0x64
 8005638:	2301      	movs	r3, #1
 800563a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800563e:	f383 8810 	msr	PRIMASK, r3
}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	496a      	ldr	r1, [pc, #424]	; (80057f8 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8005650:	400a      	ands	r2, r1
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565a:	f383 8810 	msr	PRIMASK, r3
}
 800565e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	228c      	movs	r2, #140	; 0x8c
 8005664:	2120      	movs	r1, #32
 8005666:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a60      	ldr	r2, [pc, #384]	; (80057fc <UART_RxISR_8BIT_FIFOEN+0x338>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d024      	beq.n	80056c8 <UART_RxISR_8BIT_FIFOEN+0x204>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a5f      	ldr	r2, [pc, #380]	; (8005800 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d01f      	beq.n	80056c8 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	2380      	movs	r3, #128	; 0x80
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	4013      	ands	r3, r2
 8005694:	d018      	beq.n	80056c8 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005696:	f3ef 8310 	mrs	r3, PRIMASK
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800569e:	663b      	str	r3, [r7, #96]	; 0x60
 80056a0:	2301      	movs	r3, #1
 80056a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a6:	f383 8810 	msr	PRIMASK, r3
}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4953      	ldr	r1, [pc, #332]	; (8005804 <UART_RxISR_8BIT_FIFOEN+0x340>)
 80056b8:	400a      	ands	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	f383 8810 	msr	PRIMASK, r3
}
 80056c6:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d12f      	bne.n	8005730 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d6:	f3ef 8310 	mrs	r3, PRIMASK
 80056da:	623b      	str	r3, [r7, #32]
  return(result);
 80056dc:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e0:	2301      	movs	r3, #1
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	f383 8810 	msr	PRIMASK, r3
}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2110      	movs	r1, #16
 80056f8:	438a      	bics	r2, r1
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	f383 8810 	msr	PRIMASK, r3
}
 8005706:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	2210      	movs	r2, #16
 8005710:	4013      	ands	r3, r2
 8005712:	2b10      	cmp	r3, #16
 8005714:	d103      	bne.n	800571e <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2210      	movs	r2, #16
 800571c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	225c      	movs	r2, #92	; 0x5c
 8005722:	5a9a      	ldrh	r2, [r3, r2]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0011      	movs	r1, r2
 8005728:	0018      	movs	r0, r3
 800572a:	f7fe fdf9 	bl	8004320 <HAL_UARTEx_RxEventCallback>
 800572e:	e003      	b.n	8005738 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	0018      	movs	r0, r3
 8005734:	f7fd f8f2 	bl	800291c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005738:	236e      	movs	r3, #110	; 0x6e
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <UART_RxISR_8BIT_FIFOEN+0x288>
 8005742:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005744:	2220      	movs	r2, #32
 8005746:	4013      	ands	r3, r2
 8005748:	d000      	beq.n	800574c <UART_RxISR_8BIT_FIFOEN+0x288>
 800574a:	e6de      	b.n	800550a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800574c:	205a      	movs	r0, #90	; 0x5a
 800574e:	183b      	adds	r3, r7, r0
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	215e      	movs	r1, #94	; 0x5e
 8005754:	5a52      	ldrh	r2, [r2, r1]
 8005756:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005758:	0001      	movs	r1, r0
 800575a:	187b      	adds	r3, r7, r1
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d044      	beq.n	80057ec <UART_RxISR_8BIT_FIFOEN+0x328>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2268      	movs	r2, #104	; 0x68
 8005766:	5a9b      	ldrh	r3, [r3, r2]
 8005768:	187a      	adds	r2, r7, r1
 800576a:	8812      	ldrh	r2, [r2, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d23d      	bcs.n	80057ec <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005770:	f3ef 8310 	mrs	r3, PRIMASK
 8005774:	60bb      	str	r3, [r7, #8]
  return(result);
 8005776:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005778:	657b      	str	r3, [r7, #84]	; 0x54
 800577a:	2301      	movs	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f383 8810 	msr	PRIMASK, r3
}
 8005784:	46c0      	nop			; (mov r8, r8)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	491d      	ldr	r1, [pc, #116]	; (8005808 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8005792:	400a      	ands	r2, r1
 8005794:	609a      	str	r2, [r3, #8]
 8005796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005798:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f383 8810 	msr	PRIMASK, r3
}
 80057a0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a19      	ldr	r2, [pc, #100]	; (800580c <UART_RxISR_8BIT_FIFOEN+0x348>)
 80057a6:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a8:	f3ef 8310 	mrs	r3, PRIMASK
 80057ac:	617b      	str	r3, [r7, #20]
  return(result);
 80057ae:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80057b0:	653b      	str	r3, [r7, #80]	; 0x50
 80057b2:	2301      	movs	r3, #1
 80057b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2120      	movs	r1, #32
 80057ca:	430a      	orrs	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f383 8810 	msr	PRIMASK, r3
}
 80057d8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057da:	e007      	b.n	80057ec <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	699a      	ldr	r2, [r3, #24]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2108      	movs	r1, #8
 80057e8:	430a      	orrs	r2, r1
 80057ea:	619a      	str	r2, [r3, #24]
}
 80057ec:	46c0      	nop			; (mov r8, r8)
 80057ee:	46bd      	mov	sp, r7
 80057f0:	b020      	add	sp, #128	; 0x80
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	fffffeff 	.word	0xfffffeff
 80057f8:	effffffe 	.word	0xeffffffe
 80057fc:	40008000 	.word	0x40008000
 8005800:	40008400 	.word	0x40008400
 8005804:	fbffffff 	.word	0xfbffffff
 8005808:	efffffff 	.word	0xefffffff
 800580c:	0800511d 	.word	0x0800511d

08005810 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b0a2      	sub	sp, #136	; 0x88
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005818:	2382      	movs	r3, #130	; 0x82
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	2160      	movs	r1, #96	; 0x60
 8005820:	5a52      	ldrh	r2, [r2, r1]
 8005822:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	2284      	movs	r2, #132	; 0x84
 800582c:	18ba      	adds	r2, r7, r2
 800582e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	228c      	movs	r2, #140	; 0x8c
 8005844:	589b      	ldr	r3, [r3, r2]
 8005846:	2b22      	cmp	r3, #34	; 0x22
 8005848:	d000      	beq.n	800584c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800584a:	e179      	b.n	8005b40 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800584c:	2376      	movs	r3, #118	; 0x76
 800584e:	18fb      	adds	r3, r7, r3
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	2168      	movs	r1, #104	; 0x68
 8005854:	5a52      	ldrh	r2, [r2, r1]
 8005856:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005858:	e11e      	b.n	8005a98 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005860:	2174      	movs	r1, #116	; 0x74
 8005862:	187b      	adds	r3, r7, r1
 8005864:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586a:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800586c:	187b      	adds	r3, r7, r1
 800586e:	2282      	movs	r2, #130	; 0x82
 8005870:	18ba      	adds	r2, r7, r2
 8005872:	881b      	ldrh	r3, [r3, #0]
 8005874:	8812      	ldrh	r2, [r2, #0]
 8005876:	4013      	ands	r3, r2
 8005878:	b29a      	uxth	r2, r3
 800587a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800587c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	225e      	movs	r2, #94	; 0x5e
 800588c:	5a9b      	ldrh	r3, [r3, r2]
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b299      	uxth	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	225e      	movs	r2, #94	; 0x5e
 8005898:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	2184      	movs	r1, #132	; 0x84
 80058a2:	187a      	adds	r2, r7, r1
 80058a4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80058a6:	187b      	adds	r3, r7, r1
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2207      	movs	r2, #7
 80058ac:	4013      	ands	r3, r2
 80058ae:	d04e      	beq.n	800594e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058b0:	187b      	adds	r3, r7, r1
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2201      	movs	r2, #1
 80058b6:	4013      	ands	r3, r2
 80058b8:	d010      	beq.n	80058dc <UART_RxISR_16BIT_FIFOEN+0xcc>
 80058ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4013      	ands	r3, r2
 80058c2:	d00b      	beq.n	80058dc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2201      	movs	r2, #1
 80058ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2290      	movs	r2, #144	; 0x90
 80058d0:	589b      	ldr	r3, [r3, r2]
 80058d2:	2201      	movs	r2, #1
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2190      	movs	r1, #144	; 0x90
 80058da:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058dc:	2384      	movs	r3, #132	; 0x84
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2202      	movs	r2, #2
 80058e4:	4013      	ands	r3, r2
 80058e6:	d00f      	beq.n	8005908 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80058e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ea:	2201      	movs	r2, #1
 80058ec:	4013      	ands	r3, r2
 80058ee:	d00b      	beq.n	8005908 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2202      	movs	r2, #2
 80058f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2290      	movs	r2, #144	; 0x90
 80058fc:	589b      	ldr	r3, [r3, r2]
 80058fe:	2204      	movs	r2, #4
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2190      	movs	r1, #144	; 0x90
 8005906:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005908:	2384      	movs	r3, #132	; 0x84
 800590a:	18fb      	adds	r3, r7, r3
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2204      	movs	r2, #4
 8005910:	4013      	ands	r3, r2
 8005912:	d00f      	beq.n	8005934 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005916:	2201      	movs	r2, #1
 8005918:	4013      	ands	r3, r2
 800591a:	d00b      	beq.n	8005934 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2204      	movs	r2, #4
 8005922:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2290      	movs	r2, #144	; 0x90
 8005928:	589b      	ldr	r3, [r3, r2]
 800592a:	2202      	movs	r2, #2
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2190      	movs	r1, #144	; 0x90
 8005932:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2290      	movs	r2, #144	; 0x90
 8005938:	589b      	ldr	r3, [r3, r2]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	0018      	movs	r0, r3
 8005942:	f7fe fce5 	bl	8004310 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2290      	movs	r2, #144	; 0x90
 800594a:	2100      	movs	r1, #0
 800594c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	225e      	movs	r2, #94	; 0x5e
 8005952:	5a9b      	ldrh	r3, [r3, r2]
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d000      	beq.n	800595c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800595a:	e09d      	b.n	8005a98 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595c:	f3ef 8310 	mrs	r3, PRIMASK
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005964:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005966:	2301      	movs	r3, #1
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800596c:	f383 8810 	msr	PRIMASK, r3
}
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4976      	ldr	r1, [pc, #472]	; (8005b58 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800597e:	400a      	ands	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005984:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005988:	f383 8810 	msr	PRIMASK, r3
}
 800598c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598e:	f3ef 8310 	mrs	r3, PRIMASK
 8005992:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005994:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005996:	66bb      	str	r3, [r7, #104]	; 0x68
 8005998:	2301      	movs	r3, #1
 800599a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599e:	f383 8810 	msr	PRIMASK, r3
}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	496b      	ldr	r1, [pc, #428]	; (8005b5c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80059b0:	400a      	ands	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ba:	f383 8810 	msr	PRIMASK, r3
}
 80059be:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	228c      	movs	r2, #140	; 0x8c
 80059c4:	2120      	movs	r1, #32
 80059c6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a61      	ldr	r2, [pc, #388]	; (8005b60 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d024      	beq.n	8005a28 <UART_RxISR_16BIT_FIFOEN+0x218>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a60      	ldr	r2, [pc, #384]	; (8005b64 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01f      	beq.n	8005a28 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	2380      	movs	r3, #128	; 0x80
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	4013      	ands	r3, r2
 80059f4:	d018      	beq.n	8005a28 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f6:	f3ef 8310 	mrs	r3, PRIMASK
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059fe:	667b      	str	r3, [r7, #100]	; 0x64
 8005a00:	2301      	movs	r3, #1
 8005a02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a06:	f383 8810 	msr	PRIMASK, r3
}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4954      	ldr	r1, [pc, #336]	; (8005b68 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	f383 8810 	msr	PRIMASK, r3
}
 8005a26:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d12f      	bne.n	8005a90 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a36:	f3ef 8310 	mrs	r3, PRIMASK
 8005a3a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a40:	2301      	movs	r3, #1
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	f383 8810 	msr	PRIMASK, r3
}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2110      	movs	r1, #16
 8005a58:	438a      	bics	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a62:	f383 8810 	msr	PRIMASK, r3
}
 8005a66:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	2210      	movs	r2, #16
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d103      	bne.n	8005a7e <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	225c      	movs	r2, #92	; 0x5c
 8005a82:	5a9a      	ldrh	r2, [r3, r2]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	0011      	movs	r1, r2
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f7fe fc49 	bl	8004320 <HAL_UARTEx_RxEventCallback>
 8005a8e:	e003      	b.n	8005a98 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f7fc ff42 	bl	800291c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a98:	2376      	movs	r3, #118	; 0x76
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d006      	beq.n	8005ab0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8005aa2:	2384      	movs	r3, #132	; 0x84
 8005aa4:	18fb      	adds	r3, r7, r3
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d000      	beq.n	8005ab0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 8005aae:	e6d4      	b.n	800585a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005ab0:	205e      	movs	r0, #94	; 0x5e
 8005ab2:	183b      	adds	r3, r7, r0
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	215e      	movs	r1, #94	; 0x5e
 8005ab8:	5a52      	ldrh	r2, [r2, r1]
 8005aba:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005abc:	0001      	movs	r1, r0
 8005abe:	187b      	adds	r3, r7, r1
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d044      	beq.n	8005b50 <UART_RxISR_16BIT_FIFOEN+0x340>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2268      	movs	r2, #104	; 0x68
 8005aca:	5a9b      	ldrh	r3, [r3, r2]
 8005acc:	187a      	adds	r2, r7, r1
 8005ace:	8812      	ldrh	r2, [r2, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d23d      	bcs.n	8005b50 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ada:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005adc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ade:	2301      	movs	r3, #1
 8005ae0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f383 8810 	msr	PRIMASK, r3
}
 8005ae8:	46c0      	nop			; (mov r8, r8)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	491d      	ldr	r1, [pc, #116]	; (8005b6c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8005af6:	400a      	ands	r2, r1
 8005af8:	609a      	str	r2, [r3, #8]
 8005afa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005afc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f383 8810 	msr	PRIMASK, r3
}
 8005b04:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a19      	ldr	r2, [pc, #100]	; (8005b70 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005b0a:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b10:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b12:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005b14:	657b      	str	r3, [r7, #84]	; 0x54
 8005b16:	2301      	movs	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f383 8810 	msr	PRIMASK, r3
}
 8005b20:	46c0      	nop			; (mov r8, r8)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2120      	movs	r1, #32
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	f383 8810 	msr	PRIMASK, r3
}
 8005b3c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b3e:	e007      	b.n	8005b50 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2108      	movs	r1, #8
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	619a      	str	r2, [r3, #24]
}
 8005b50:	46c0      	nop			; (mov r8, r8)
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b022      	add	sp, #136	; 0x88
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	fffffeff 	.word	0xfffffeff
 8005b5c:	effffffe 	.word	0xeffffffe
 8005b60:	40008000 	.word	0x40008000
 8005b64:	40008400 	.word	0x40008400
 8005b68:	fbffffff 	.word	0xfbffffff
 8005b6c:	efffffff 	.word	0xefffffff
 8005b70:	080052f1 	.word	0x080052f1

08005b74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005b9c:	46c0      	nop			; (mov r8, r8)
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b002      	add	sp, #8
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <siprintf>:
 8005ba4:	b40e      	push	{r1, r2, r3}
 8005ba6:	b500      	push	{lr}
 8005ba8:	490b      	ldr	r1, [pc, #44]	; (8005bd8 <siprintf+0x34>)
 8005baa:	b09c      	sub	sp, #112	; 0x70
 8005bac:	ab1d      	add	r3, sp, #116	; 0x74
 8005bae:	9002      	str	r0, [sp, #8]
 8005bb0:	9006      	str	r0, [sp, #24]
 8005bb2:	9107      	str	r1, [sp, #28]
 8005bb4:	9104      	str	r1, [sp, #16]
 8005bb6:	4809      	ldr	r0, [pc, #36]	; (8005bdc <siprintf+0x38>)
 8005bb8:	4909      	ldr	r1, [pc, #36]	; (8005be0 <siprintf+0x3c>)
 8005bba:	cb04      	ldmia	r3!, {r2}
 8005bbc:	9105      	str	r1, [sp, #20]
 8005bbe:	6800      	ldr	r0, [r0, #0]
 8005bc0:	a902      	add	r1, sp, #8
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	f000 fa00 	bl	8005fc8 <_svfiprintf_r>
 8005bc8:	2200      	movs	r2, #0
 8005bca:	9b02      	ldr	r3, [sp, #8]
 8005bcc:	701a      	strb	r2, [r3, #0]
 8005bce:	b01c      	add	sp, #112	; 0x70
 8005bd0:	bc08      	pop	{r3}
 8005bd2:	b003      	add	sp, #12
 8005bd4:	4718      	bx	r3
 8005bd6:	46c0      	nop			; (mov r8, r8)
 8005bd8:	7fffffff 	.word	0x7fffffff
 8005bdc:	20000098 	.word	0x20000098
 8005be0:	ffff0208 	.word	0xffff0208

08005be4 <siscanf>:
 8005be4:	b40e      	push	{r1, r2, r3}
 8005be6:	b530      	push	{r4, r5, lr}
 8005be8:	2381      	movs	r3, #129	; 0x81
 8005bea:	b09c      	sub	sp, #112	; 0x70
 8005bec:	466a      	mov	r2, sp
 8005bee:	ac1f      	add	r4, sp, #124	; 0x7c
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	cc20      	ldmia	r4!, {r5}
 8005bf4:	8293      	strh	r3, [r2, #20]
 8005bf6:	9002      	str	r0, [sp, #8]
 8005bf8:	9006      	str	r0, [sp, #24]
 8005bfa:	f7fa fa83 	bl	8000104 <strlen>
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <siscanf+0x48>)
 8005c00:	466a      	mov	r2, sp
 8005c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c04:	2300      	movs	r3, #0
 8005c06:	9003      	str	r0, [sp, #12]
 8005c08:	9007      	str	r0, [sp, #28]
 8005c0a:	4809      	ldr	r0, [pc, #36]	; (8005c30 <siscanf+0x4c>)
 8005c0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c0e:	9314      	str	r3, [sp, #80]	; 0x50
 8005c10:	3b01      	subs	r3, #1
 8005c12:	82d3      	strh	r3, [r2, #22]
 8005c14:	a902      	add	r1, sp, #8
 8005c16:	0023      	movs	r3, r4
 8005c18:	002a      	movs	r2, r5
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	9401      	str	r4, [sp, #4]
 8005c1e:	f000 fb2f 	bl	8006280 <__ssvfiscanf_r>
 8005c22:	b01c      	add	sp, #112	; 0x70
 8005c24:	bc30      	pop	{r4, r5}
 8005c26:	bc08      	pop	{r3}
 8005c28:	b003      	add	sp, #12
 8005c2a:	4718      	bx	r3
 8005c2c:	08005c35 	.word	0x08005c35
 8005c30:	20000098 	.word	0x20000098

08005c34 <__seofread>:
 8005c34:	2000      	movs	r0, #0
 8005c36:	4770      	bx	lr

08005c38 <memset>:
 8005c38:	0003      	movs	r3, r0
 8005c3a:	1882      	adds	r2, r0, r2
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d100      	bne.n	8005c42 <memset+0xa>
 8005c40:	4770      	bx	lr
 8005c42:	7019      	strb	r1, [r3, #0]
 8005c44:	3301      	adds	r3, #1
 8005c46:	e7f9      	b.n	8005c3c <memset+0x4>

08005c48 <strcat>:
 8005c48:	0002      	movs	r2, r0
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	7813      	ldrb	r3, [r2, #0]
 8005c4e:	0014      	movs	r4, r2
 8005c50:	3201      	adds	r2, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1fa      	bne.n	8005c4c <strcat+0x4>
 8005c56:	5cca      	ldrb	r2, [r1, r3]
 8005c58:	54e2      	strb	r2, [r4, r3]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	2a00      	cmp	r2, #0
 8005c5e:	d1fa      	bne.n	8005c56 <strcat+0xe>
 8005c60:	bd10      	pop	{r4, pc}

08005c62 <strncat>:
 8005c62:	0003      	movs	r3, r0
 8005c64:	b510      	push	{r4, lr}
 8005c66:	781c      	ldrb	r4, [r3, #0]
 8005c68:	2c00      	cmp	r4, #0
 8005c6a:	d107      	bne.n	8005c7c <strncat+0x1a>
 8005c6c:	3a01      	subs	r2, #1
 8005c6e:	1c54      	adds	r4, r2, #1
 8005c70:	d003      	beq.n	8005c7a <strncat+0x18>
 8005c72:	780c      	ldrb	r4, [r1, #0]
 8005c74:	701c      	strb	r4, [r3, #0]
 8005c76:	2c00      	cmp	r4, #0
 8005c78:	d102      	bne.n	8005c80 <strncat+0x1e>
 8005c7a:	bd10      	pop	{r4, pc}
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	e7f2      	b.n	8005c66 <strncat+0x4>
 8005c80:	2a00      	cmp	r2, #0
 8005c82:	d100      	bne.n	8005c86 <strncat+0x24>
 8005c84:	705a      	strb	r2, [r3, #1]
 8005c86:	3301      	adds	r3, #1
 8005c88:	3101      	adds	r1, #1
 8005c8a:	e7ef      	b.n	8005c6c <strncat+0xa>

08005c8c <__errno>:
 8005c8c:	4b01      	ldr	r3, [pc, #4]	; (8005c94 <__errno+0x8>)
 8005c8e:	6818      	ldr	r0, [r3, #0]
 8005c90:	4770      	bx	lr
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	20000098 	.word	0x20000098

08005c98 <__libc_init_array>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	4c0c      	ldr	r4, [pc, #48]	; (8005cd0 <__libc_init_array+0x38>)
 8005c9e:	4d0d      	ldr	r5, [pc, #52]	; (8005cd4 <__libc_init_array+0x3c>)
 8005ca0:	1b64      	subs	r4, r4, r5
 8005ca2:	10a4      	asrs	r4, r4, #2
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d109      	bne.n	8005cbc <__libc_init_array+0x24>
 8005ca8:	2600      	movs	r6, #0
 8005caa:	f002 f833 	bl	8007d14 <_init>
 8005cae:	4c0a      	ldr	r4, [pc, #40]	; (8005cd8 <__libc_init_array+0x40>)
 8005cb0:	4d0a      	ldr	r5, [pc, #40]	; (8005cdc <__libc_init_array+0x44>)
 8005cb2:	1b64      	subs	r4, r4, r5
 8005cb4:	10a4      	asrs	r4, r4, #2
 8005cb6:	42a6      	cmp	r6, r4
 8005cb8:	d105      	bne.n	8005cc6 <__libc_init_array+0x2e>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	00b3      	lsls	r3, r6, #2
 8005cbe:	58eb      	ldr	r3, [r5, r3]
 8005cc0:	4798      	blx	r3
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7ee      	b.n	8005ca4 <__libc_init_array+0xc>
 8005cc6:	00b3      	lsls	r3, r6, #2
 8005cc8:	58eb      	ldr	r3, [r5, r3]
 8005cca:	4798      	blx	r3
 8005ccc:	3601      	adds	r6, #1
 8005cce:	e7f2      	b.n	8005cb6 <__libc_init_array+0x1e>
 8005cd0:	08007fb8 	.word	0x08007fb8
 8005cd4:	08007fb8 	.word	0x08007fb8
 8005cd8:	08007fbc 	.word	0x08007fbc
 8005cdc:	08007fb8 	.word	0x08007fb8

08005ce0 <__retarget_lock_acquire_recursive>:
 8005ce0:	4770      	bx	lr

08005ce2 <__retarget_lock_release_recursive>:
 8005ce2:	4770      	bx	lr

08005ce4 <strcpy>:
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	780a      	ldrb	r2, [r1, #0]
 8005ce8:	3101      	adds	r1, #1
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	2a00      	cmp	r2, #0
 8005cf0:	d1f9      	bne.n	8005ce6 <strcpy+0x2>
 8005cf2:	4770      	bx	lr

08005cf4 <memcpy>:
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	b510      	push	{r4, lr}
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d100      	bne.n	8005cfe <memcpy+0xa>
 8005cfc:	bd10      	pop	{r4, pc}
 8005cfe:	5ccc      	ldrb	r4, [r1, r3]
 8005d00:	54c4      	strb	r4, [r0, r3]
 8005d02:	3301      	adds	r3, #1
 8005d04:	e7f8      	b.n	8005cf8 <memcpy+0x4>
	...

08005d08 <_free_r>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	0005      	movs	r5, r0
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d010      	beq.n	8005d32 <_free_r+0x2a>
 8005d10:	1f0c      	subs	r4, r1, #4
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da00      	bge.n	8005d1a <_free_r+0x12>
 8005d18:	18e4      	adds	r4, r4, r3
 8005d1a:	0028      	movs	r0, r5
 8005d1c:	f000 f8e2 	bl	8005ee4 <__malloc_lock>
 8005d20:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <_free_r+0x90>)
 8005d22:	6813      	ldr	r3, [r2, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <_free_r+0x2c>
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	6014      	str	r4, [r2, #0]
 8005d2c:	0028      	movs	r0, r5
 8005d2e:	f000 f8e1 	bl	8005ef4 <__malloc_unlock>
 8005d32:	bd70      	pop	{r4, r5, r6, pc}
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d908      	bls.n	8005d4a <_free_r+0x42>
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	1821      	adds	r1, r4, r0
 8005d3c:	428b      	cmp	r3, r1
 8005d3e:	d1f3      	bne.n	8005d28 <_free_r+0x20>
 8005d40:	6819      	ldr	r1, [r3, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	1809      	adds	r1, r1, r0
 8005d46:	6021      	str	r1, [r4, #0]
 8005d48:	e7ee      	b.n	8005d28 <_free_r+0x20>
 8005d4a:	001a      	movs	r2, r3
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <_free_r+0x4e>
 8005d52:	42a3      	cmp	r3, r4
 8005d54:	d9f9      	bls.n	8005d4a <_free_r+0x42>
 8005d56:	6811      	ldr	r1, [r2, #0]
 8005d58:	1850      	adds	r0, r2, r1
 8005d5a:	42a0      	cmp	r0, r4
 8005d5c:	d10b      	bne.n	8005d76 <_free_r+0x6e>
 8005d5e:	6820      	ldr	r0, [r4, #0]
 8005d60:	1809      	adds	r1, r1, r0
 8005d62:	1850      	adds	r0, r2, r1
 8005d64:	6011      	str	r1, [r2, #0]
 8005d66:	4283      	cmp	r3, r0
 8005d68:	d1e0      	bne.n	8005d2c <_free_r+0x24>
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	1841      	adds	r1, r0, r1
 8005d70:	6011      	str	r1, [r2, #0]
 8005d72:	6053      	str	r3, [r2, #4]
 8005d74:	e7da      	b.n	8005d2c <_free_r+0x24>
 8005d76:	42a0      	cmp	r0, r4
 8005d78:	d902      	bls.n	8005d80 <_free_r+0x78>
 8005d7a:	230c      	movs	r3, #12
 8005d7c:	602b      	str	r3, [r5, #0]
 8005d7e:	e7d5      	b.n	8005d2c <_free_r+0x24>
 8005d80:	6820      	ldr	r0, [r4, #0]
 8005d82:	1821      	adds	r1, r4, r0
 8005d84:	428b      	cmp	r3, r1
 8005d86:	d103      	bne.n	8005d90 <_free_r+0x88>
 8005d88:	6819      	ldr	r1, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	1809      	adds	r1, r1, r0
 8005d8e:	6021      	str	r1, [r4, #0]
 8005d90:	6063      	str	r3, [r4, #4]
 8005d92:	6054      	str	r4, [r2, #4]
 8005d94:	e7ca      	b.n	8005d2c <_free_r+0x24>
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	20000590 	.word	0x20000590

08005d9c <sbrk_aligned>:
 8005d9c:	b570      	push	{r4, r5, r6, lr}
 8005d9e:	4e0f      	ldr	r6, [pc, #60]	; (8005ddc <sbrk_aligned+0x40>)
 8005da0:	000d      	movs	r5, r1
 8005da2:	6831      	ldr	r1, [r6, #0]
 8005da4:	0004      	movs	r4, r0
 8005da6:	2900      	cmp	r1, #0
 8005da8:	d102      	bne.n	8005db0 <sbrk_aligned+0x14>
 8005daa:	f000 ff43 	bl	8006c34 <_sbrk_r>
 8005dae:	6030      	str	r0, [r6, #0]
 8005db0:	0029      	movs	r1, r5
 8005db2:	0020      	movs	r0, r4
 8005db4:	f000 ff3e 	bl	8006c34 <_sbrk_r>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d00a      	beq.n	8005dd2 <sbrk_aligned+0x36>
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	1cc5      	adds	r5, r0, #3
 8005dc0:	439d      	bics	r5, r3
 8005dc2:	42a8      	cmp	r0, r5
 8005dc4:	d007      	beq.n	8005dd6 <sbrk_aligned+0x3a>
 8005dc6:	1a29      	subs	r1, r5, r0
 8005dc8:	0020      	movs	r0, r4
 8005dca:	f000 ff33 	bl	8006c34 <_sbrk_r>
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d101      	bne.n	8005dd6 <sbrk_aligned+0x3a>
 8005dd2:	2501      	movs	r5, #1
 8005dd4:	426d      	negs	r5, r5
 8005dd6:	0028      	movs	r0, r5
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	46c0      	nop			; (mov r8, r8)
 8005ddc:	20000594 	.word	0x20000594

08005de0 <_malloc_r>:
 8005de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005de2:	2203      	movs	r2, #3
 8005de4:	1ccb      	adds	r3, r1, #3
 8005de6:	4393      	bics	r3, r2
 8005de8:	3308      	adds	r3, #8
 8005dea:	0006      	movs	r6, r0
 8005dec:	001f      	movs	r7, r3
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	d238      	bcs.n	8005e64 <_malloc_r+0x84>
 8005df2:	270c      	movs	r7, #12
 8005df4:	42b9      	cmp	r1, r7
 8005df6:	d837      	bhi.n	8005e68 <_malloc_r+0x88>
 8005df8:	0030      	movs	r0, r6
 8005dfa:	f000 f873 	bl	8005ee4 <__malloc_lock>
 8005dfe:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <_malloc_r+0x100>)
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	001c      	movs	r4, r3
 8005e06:	2c00      	cmp	r4, #0
 8005e08:	d133      	bne.n	8005e72 <_malloc_r+0x92>
 8005e0a:	0039      	movs	r1, r7
 8005e0c:	0030      	movs	r0, r6
 8005e0e:	f7ff ffc5 	bl	8005d9c <sbrk_aligned>
 8005e12:	0004      	movs	r4, r0
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d15e      	bne.n	8005ed6 <_malloc_r+0xf6>
 8005e18:	9b00      	ldr	r3, [sp, #0]
 8005e1a:	681c      	ldr	r4, [r3, #0]
 8005e1c:	0025      	movs	r5, r4
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	d14e      	bne.n	8005ec0 <_malloc_r+0xe0>
 8005e22:	2c00      	cmp	r4, #0
 8005e24:	d051      	beq.n	8005eca <_malloc_r+0xea>
 8005e26:	6823      	ldr	r3, [r4, #0]
 8005e28:	0029      	movs	r1, r5
 8005e2a:	18e3      	adds	r3, r4, r3
 8005e2c:	0030      	movs	r0, r6
 8005e2e:	9301      	str	r3, [sp, #4]
 8005e30:	f000 ff00 	bl	8006c34 <_sbrk_r>
 8005e34:	9b01      	ldr	r3, [sp, #4]
 8005e36:	4283      	cmp	r3, r0
 8005e38:	d147      	bne.n	8005eca <_malloc_r+0xea>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	0030      	movs	r0, r6
 8005e3e:	1aff      	subs	r7, r7, r3
 8005e40:	0039      	movs	r1, r7
 8005e42:	f7ff ffab 	bl	8005d9c <sbrk_aligned>
 8005e46:	3001      	adds	r0, #1
 8005e48:	d03f      	beq.n	8005eca <_malloc_r+0xea>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	19db      	adds	r3, r3, r7
 8005e4e:	6023      	str	r3, [r4, #0]
 8005e50:	9b00      	ldr	r3, [sp, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d040      	beq.n	8005eda <_malloc_r+0xfa>
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	42a2      	cmp	r2, r4
 8005e5c:	d133      	bne.n	8005ec6 <_malloc_r+0xe6>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	e014      	b.n	8005e8e <_malloc_r+0xae>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dac5      	bge.n	8005df4 <_malloc_r+0x14>
 8005e68:	230c      	movs	r3, #12
 8005e6a:	2500      	movs	r5, #0
 8005e6c:	6033      	str	r3, [r6, #0]
 8005e6e:	0028      	movs	r0, r5
 8005e70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e72:	6821      	ldr	r1, [r4, #0]
 8005e74:	1bc9      	subs	r1, r1, r7
 8005e76:	d420      	bmi.n	8005eba <_malloc_r+0xda>
 8005e78:	290b      	cmp	r1, #11
 8005e7a:	d918      	bls.n	8005eae <_malloc_r+0xce>
 8005e7c:	19e2      	adds	r2, r4, r7
 8005e7e:	6027      	str	r7, [r4, #0]
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	d112      	bne.n	8005eaa <_malloc_r+0xca>
 8005e84:	9b00      	ldr	r3, [sp, #0]
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	6011      	str	r1, [r2, #0]
 8005e8c:	6053      	str	r3, [r2, #4]
 8005e8e:	0030      	movs	r0, r6
 8005e90:	0025      	movs	r5, r4
 8005e92:	f000 f82f 	bl	8005ef4 <__malloc_unlock>
 8005e96:	2207      	movs	r2, #7
 8005e98:	350b      	adds	r5, #11
 8005e9a:	1d23      	adds	r3, r4, #4
 8005e9c:	4395      	bics	r5, r2
 8005e9e:	1aea      	subs	r2, r5, r3
 8005ea0:	429d      	cmp	r5, r3
 8005ea2:	d0e4      	beq.n	8005e6e <_malloc_r+0x8e>
 8005ea4:	1b5b      	subs	r3, r3, r5
 8005ea6:	50a3      	str	r3, [r4, r2]
 8005ea8:	e7e1      	b.n	8005e6e <_malloc_r+0x8e>
 8005eaa:	605a      	str	r2, [r3, #4]
 8005eac:	e7ec      	b.n	8005e88 <_malloc_r+0xa8>
 8005eae:	6862      	ldr	r2, [r4, #4]
 8005eb0:	42a3      	cmp	r3, r4
 8005eb2:	d1d5      	bne.n	8005e60 <_malloc_r+0x80>
 8005eb4:	9b00      	ldr	r3, [sp, #0]
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e7e9      	b.n	8005e8e <_malloc_r+0xae>
 8005eba:	0023      	movs	r3, r4
 8005ebc:	6864      	ldr	r4, [r4, #4]
 8005ebe:	e7a2      	b.n	8005e06 <_malloc_r+0x26>
 8005ec0:	002c      	movs	r4, r5
 8005ec2:	686d      	ldr	r5, [r5, #4]
 8005ec4:	e7ab      	b.n	8005e1e <_malloc_r+0x3e>
 8005ec6:	0013      	movs	r3, r2
 8005ec8:	e7c4      	b.n	8005e54 <_malloc_r+0x74>
 8005eca:	230c      	movs	r3, #12
 8005ecc:	0030      	movs	r0, r6
 8005ece:	6033      	str	r3, [r6, #0]
 8005ed0:	f000 f810 	bl	8005ef4 <__malloc_unlock>
 8005ed4:	e7cb      	b.n	8005e6e <_malloc_r+0x8e>
 8005ed6:	6027      	str	r7, [r4, #0]
 8005ed8:	e7d9      	b.n	8005e8e <_malloc_r+0xae>
 8005eda:	605b      	str	r3, [r3, #4]
 8005edc:	deff      	udf	#255	; 0xff
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	20000590 	.word	0x20000590

08005ee4 <__malloc_lock>:
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	4802      	ldr	r0, [pc, #8]	; (8005ef0 <__malloc_lock+0xc>)
 8005ee8:	f7ff fefa 	bl	8005ce0 <__retarget_lock_acquire_recursive>
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	2000058c 	.word	0x2000058c

08005ef4 <__malloc_unlock>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	4802      	ldr	r0, [pc, #8]	; (8005f00 <__malloc_unlock+0xc>)
 8005ef8:	f7ff fef3 	bl	8005ce2 <__retarget_lock_release_recursive>
 8005efc:	bd10      	pop	{r4, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	2000058c 	.word	0x2000058c

08005f04 <__ssputs_r>:
 8005f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f06:	b085      	sub	sp, #20
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	9203      	str	r2, [sp, #12]
 8005f0c:	688e      	ldr	r6, [r1, #8]
 8005f0e:	9a01      	ldr	r2, [sp, #4]
 8005f10:	0007      	movs	r7, r0
 8005f12:	000c      	movs	r4, r1
 8005f14:	680b      	ldr	r3, [r1, #0]
 8005f16:	4296      	cmp	r6, r2
 8005f18:	d831      	bhi.n	8005f7e <__ssputs_r+0x7a>
 8005f1a:	898a      	ldrh	r2, [r1, #12]
 8005f1c:	2190      	movs	r1, #144	; 0x90
 8005f1e:	00c9      	lsls	r1, r1, #3
 8005f20:	420a      	tst	r2, r1
 8005f22:	d029      	beq.n	8005f78 <__ssputs_r+0x74>
 8005f24:	2003      	movs	r0, #3
 8005f26:	6921      	ldr	r1, [r4, #16]
 8005f28:	1a5b      	subs	r3, r3, r1
 8005f2a:	9302      	str	r3, [sp, #8]
 8005f2c:	6963      	ldr	r3, [r4, #20]
 8005f2e:	4343      	muls	r3, r0
 8005f30:	0fdd      	lsrs	r5, r3, #31
 8005f32:	18ed      	adds	r5, r5, r3
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	9802      	ldr	r0, [sp, #8]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	181b      	adds	r3, r3, r0
 8005f3c:	106d      	asrs	r5, r5, #1
 8005f3e:	42ab      	cmp	r3, r5
 8005f40:	d900      	bls.n	8005f44 <__ssputs_r+0x40>
 8005f42:	001d      	movs	r5, r3
 8005f44:	0552      	lsls	r2, r2, #21
 8005f46:	d529      	bpl.n	8005f9c <__ssputs_r+0x98>
 8005f48:	0029      	movs	r1, r5
 8005f4a:	0038      	movs	r0, r7
 8005f4c:	f7ff ff48 	bl	8005de0 <_malloc_r>
 8005f50:	1e06      	subs	r6, r0, #0
 8005f52:	d02d      	beq.n	8005fb0 <__ssputs_r+0xac>
 8005f54:	9a02      	ldr	r2, [sp, #8]
 8005f56:	6921      	ldr	r1, [r4, #16]
 8005f58:	f7ff fecc 	bl	8005cf4 <memcpy>
 8005f5c:	89a2      	ldrh	r2, [r4, #12]
 8005f5e:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <__ssputs_r+0xc0>)
 8005f60:	401a      	ands	r2, r3
 8005f62:	2380      	movs	r3, #128	; 0x80
 8005f64:	4313      	orrs	r3, r2
 8005f66:	81a3      	strh	r3, [r4, #12]
 8005f68:	9b02      	ldr	r3, [sp, #8]
 8005f6a:	6126      	str	r6, [r4, #16]
 8005f6c:	18f6      	adds	r6, r6, r3
 8005f6e:	6026      	str	r6, [r4, #0]
 8005f70:	6165      	str	r5, [r4, #20]
 8005f72:	9e01      	ldr	r6, [sp, #4]
 8005f74:	1aed      	subs	r5, r5, r3
 8005f76:	60a5      	str	r5, [r4, #8]
 8005f78:	9b01      	ldr	r3, [sp, #4]
 8005f7a:	429e      	cmp	r6, r3
 8005f7c:	d900      	bls.n	8005f80 <__ssputs_r+0x7c>
 8005f7e:	9e01      	ldr	r6, [sp, #4]
 8005f80:	0032      	movs	r2, r6
 8005f82:	9903      	ldr	r1, [sp, #12]
 8005f84:	6820      	ldr	r0, [r4, #0]
 8005f86:	f000 fe41 	bl	8006c0c <memmove>
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	68a3      	ldr	r3, [r4, #8]
 8005f8e:	1b9b      	subs	r3, r3, r6
 8005f90:	60a3      	str	r3, [r4, #8]
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	199b      	adds	r3, r3, r6
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	b005      	add	sp, #20
 8005f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f9c:	002a      	movs	r2, r5
 8005f9e:	0038      	movs	r0, r7
 8005fa0:	f000 fe65 	bl	8006c6e <_realloc_r>
 8005fa4:	1e06      	subs	r6, r0, #0
 8005fa6:	d1df      	bne.n	8005f68 <__ssputs_r+0x64>
 8005fa8:	0038      	movs	r0, r7
 8005faa:	6921      	ldr	r1, [r4, #16]
 8005fac:	f7ff feac 	bl	8005d08 <_free_r>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	603b      	str	r3, [r7, #0]
 8005fb6:	89a2      	ldrh	r2, [r4, #12]
 8005fb8:	3334      	adds	r3, #52	; 0x34
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	4240      	negs	r0, r0
 8005fc0:	e7ea      	b.n	8005f98 <__ssputs_r+0x94>
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	fffffb7f 	.word	0xfffffb7f

08005fc8 <_svfiprintf_r>:
 8005fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fca:	b0a1      	sub	sp, #132	; 0x84
 8005fcc:	9003      	str	r0, [sp, #12]
 8005fce:	001d      	movs	r5, r3
 8005fd0:	898b      	ldrh	r3, [r1, #12]
 8005fd2:	000f      	movs	r7, r1
 8005fd4:	0016      	movs	r6, r2
 8005fd6:	061b      	lsls	r3, r3, #24
 8005fd8:	d511      	bpl.n	8005ffe <_svfiprintf_r+0x36>
 8005fda:	690b      	ldr	r3, [r1, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10e      	bne.n	8005ffe <_svfiprintf_r+0x36>
 8005fe0:	2140      	movs	r1, #64	; 0x40
 8005fe2:	f7ff fefd 	bl	8005de0 <_malloc_r>
 8005fe6:	6038      	str	r0, [r7, #0]
 8005fe8:	6138      	str	r0, [r7, #16]
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d105      	bne.n	8005ffa <_svfiprintf_r+0x32>
 8005fee:	230c      	movs	r3, #12
 8005ff0:	9a03      	ldr	r2, [sp, #12]
 8005ff2:	3801      	subs	r0, #1
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	b021      	add	sp, #132	; 0x84
 8005ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffa:	2340      	movs	r3, #64	; 0x40
 8005ffc:	617b      	str	r3, [r7, #20]
 8005ffe:	2300      	movs	r3, #0
 8006000:	ac08      	add	r4, sp, #32
 8006002:	6163      	str	r3, [r4, #20]
 8006004:	3320      	adds	r3, #32
 8006006:	7663      	strb	r3, [r4, #25]
 8006008:	3310      	adds	r3, #16
 800600a:	76a3      	strb	r3, [r4, #26]
 800600c:	9507      	str	r5, [sp, #28]
 800600e:	0035      	movs	r5, r6
 8006010:	782b      	ldrb	r3, [r5, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <_svfiprintf_r+0x52>
 8006016:	2b25      	cmp	r3, #37	; 0x25
 8006018:	d148      	bne.n	80060ac <_svfiprintf_r+0xe4>
 800601a:	1bab      	subs	r3, r5, r6
 800601c:	9305      	str	r3, [sp, #20]
 800601e:	42b5      	cmp	r5, r6
 8006020:	d00b      	beq.n	800603a <_svfiprintf_r+0x72>
 8006022:	0032      	movs	r2, r6
 8006024:	0039      	movs	r1, r7
 8006026:	9803      	ldr	r0, [sp, #12]
 8006028:	f7ff ff6c 	bl	8005f04 <__ssputs_r>
 800602c:	3001      	adds	r0, #1
 800602e:	d100      	bne.n	8006032 <_svfiprintf_r+0x6a>
 8006030:	e0af      	b.n	8006192 <_svfiprintf_r+0x1ca>
 8006032:	6963      	ldr	r3, [r4, #20]
 8006034:	9a05      	ldr	r2, [sp, #20]
 8006036:	189b      	adds	r3, r3, r2
 8006038:	6163      	str	r3, [r4, #20]
 800603a:	782b      	ldrb	r3, [r5, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d100      	bne.n	8006042 <_svfiprintf_r+0x7a>
 8006040:	e0a7      	b.n	8006192 <_svfiprintf_r+0x1ca>
 8006042:	2201      	movs	r2, #1
 8006044:	2300      	movs	r3, #0
 8006046:	4252      	negs	r2, r2
 8006048:	6062      	str	r2, [r4, #4]
 800604a:	a904      	add	r1, sp, #16
 800604c:	3254      	adds	r2, #84	; 0x54
 800604e:	1852      	adds	r2, r2, r1
 8006050:	1c6e      	adds	r6, r5, #1
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	60e3      	str	r3, [r4, #12]
 8006056:	60a3      	str	r3, [r4, #8]
 8006058:	7013      	strb	r3, [r2, #0]
 800605a:	65a3      	str	r3, [r4, #88]	; 0x58
 800605c:	4b55      	ldr	r3, [pc, #340]	; (80061b4 <_svfiprintf_r+0x1ec>)
 800605e:	2205      	movs	r2, #5
 8006060:	0018      	movs	r0, r3
 8006062:	7831      	ldrb	r1, [r6, #0]
 8006064:	9305      	str	r3, [sp, #20]
 8006066:	f000 fdf7 	bl	8006c58 <memchr>
 800606a:	1c75      	adds	r5, r6, #1
 800606c:	2800      	cmp	r0, #0
 800606e:	d11f      	bne.n	80060b0 <_svfiprintf_r+0xe8>
 8006070:	6822      	ldr	r2, [r4, #0]
 8006072:	06d3      	lsls	r3, r2, #27
 8006074:	d504      	bpl.n	8006080 <_svfiprintf_r+0xb8>
 8006076:	2353      	movs	r3, #83	; 0x53
 8006078:	a904      	add	r1, sp, #16
 800607a:	185b      	adds	r3, r3, r1
 800607c:	2120      	movs	r1, #32
 800607e:	7019      	strb	r1, [r3, #0]
 8006080:	0713      	lsls	r3, r2, #28
 8006082:	d504      	bpl.n	800608e <_svfiprintf_r+0xc6>
 8006084:	2353      	movs	r3, #83	; 0x53
 8006086:	a904      	add	r1, sp, #16
 8006088:	185b      	adds	r3, r3, r1
 800608a:	212b      	movs	r1, #43	; 0x2b
 800608c:	7019      	strb	r1, [r3, #0]
 800608e:	7833      	ldrb	r3, [r6, #0]
 8006090:	2b2a      	cmp	r3, #42	; 0x2a
 8006092:	d016      	beq.n	80060c2 <_svfiprintf_r+0xfa>
 8006094:	0035      	movs	r5, r6
 8006096:	2100      	movs	r1, #0
 8006098:	200a      	movs	r0, #10
 800609a:	68e3      	ldr	r3, [r4, #12]
 800609c:	782a      	ldrb	r2, [r5, #0]
 800609e:	1c6e      	adds	r6, r5, #1
 80060a0:	3a30      	subs	r2, #48	; 0x30
 80060a2:	2a09      	cmp	r2, #9
 80060a4:	d94e      	bls.n	8006144 <_svfiprintf_r+0x17c>
 80060a6:	2900      	cmp	r1, #0
 80060a8:	d111      	bne.n	80060ce <_svfiprintf_r+0x106>
 80060aa:	e017      	b.n	80060dc <_svfiprintf_r+0x114>
 80060ac:	3501      	adds	r5, #1
 80060ae:	e7af      	b.n	8006010 <_svfiprintf_r+0x48>
 80060b0:	9b05      	ldr	r3, [sp, #20]
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	1ac0      	subs	r0, r0, r3
 80060b6:	2301      	movs	r3, #1
 80060b8:	4083      	lsls	r3, r0
 80060ba:	4313      	orrs	r3, r2
 80060bc:	002e      	movs	r6, r5
 80060be:	6023      	str	r3, [r4, #0]
 80060c0:	e7cc      	b.n	800605c <_svfiprintf_r+0x94>
 80060c2:	9b07      	ldr	r3, [sp, #28]
 80060c4:	1d19      	adds	r1, r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	9107      	str	r1, [sp, #28]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	db01      	blt.n	80060d2 <_svfiprintf_r+0x10a>
 80060ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80060d0:	e004      	b.n	80060dc <_svfiprintf_r+0x114>
 80060d2:	425b      	negs	r3, r3
 80060d4:	60e3      	str	r3, [r4, #12]
 80060d6:	2302      	movs	r3, #2
 80060d8:	4313      	orrs	r3, r2
 80060da:	6023      	str	r3, [r4, #0]
 80060dc:	782b      	ldrb	r3, [r5, #0]
 80060de:	2b2e      	cmp	r3, #46	; 0x2e
 80060e0:	d10a      	bne.n	80060f8 <_svfiprintf_r+0x130>
 80060e2:	786b      	ldrb	r3, [r5, #1]
 80060e4:	2b2a      	cmp	r3, #42	; 0x2a
 80060e6:	d135      	bne.n	8006154 <_svfiprintf_r+0x18c>
 80060e8:	9b07      	ldr	r3, [sp, #28]
 80060ea:	3502      	adds	r5, #2
 80060ec:	1d1a      	adds	r2, r3, #4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	9207      	str	r2, [sp, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	db2b      	blt.n	800614e <_svfiprintf_r+0x186>
 80060f6:	9309      	str	r3, [sp, #36]	; 0x24
 80060f8:	4e2f      	ldr	r6, [pc, #188]	; (80061b8 <_svfiprintf_r+0x1f0>)
 80060fa:	2203      	movs	r2, #3
 80060fc:	0030      	movs	r0, r6
 80060fe:	7829      	ldrb	r1, [r5, #0]
 8006100:	f000 fdaa 	bl	8006c58 <memchr>
 8006104:	2800      	cmp	r0, #0
 8006106:	d006      	beq.n	8006116 <_svfiprintf_r+0x14e>
 8006108:	2340      	movs	r3, #64	; 0x40
 800610a:	1b80      	subs	r0, r0, r6
 800610c:	4083      	lsls	r3, r0
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	3501      	adds	r5, #1
 8006112:	4313      	orrs	r3, r2
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	7829      	ldrb	r1, [r5, #0]
 8006118:	2206      	movs	r2, #6
 800611a:	4828      	ldr	r0, [pc, #160]	; (80061bc <_svfiprintf_r+0x1f4>)
 800611c:	1c6e      	adds	r6, r5, #1
 800611e:	7621      	strb	r1, [r4, #24]
 8006120:	f000 fd9a 	bl	8006c58 <memchr>
 8006124:	2800      	cmp	r0, #0
 8006126:	d03c      	beq.n	80061a2 <_svfiprintf_r+0x1da>
 8006128:	4b25      	ldr	r3, [pc, #148]	; (80061c0 <_svfiprintf_r+0x1f8>)
 800612a:	2b00      	cmp	r3, #0
 800612c:	d125      	bne.n	800617a <_svfiprintf_r+0x1b2>
 800612e:	2207      	movs	r2, #7
 8006130:	9b07      	ldr	r3, [sp, #28]
 8006132:	3307      	adds	r3, #7
 8006134:	4393      	bics	r3, r2
 8006136:	3308      	adds	r3, #8
 8006138:	9307      	str	r3, [sp, #28]
 800613a:	6963      	ldr	r3, [r4, #20]
 800613c:	9a04      	ldr	r2, [sp, #16]
 800613e:	189b      	adds	r3, r3, r2
 8006140:	6163      	str	r3, [r4, #20]
 8006142:	e764      	b.n	800600e <_svfiprintf_r+0x46>
 8006144:	4343      	muls	r3, r0
 8006146:	0035      	movs	r5, r6
 8006148:	2101      	movs	r1, #1
 800614a:	189b      	adds	r3, r3, r2
 800614c:	e7a6      	b.n	800609c <_svfiprintf_r+0xd4>
 800614e:	2301      	movs	r3, #1
 8006150:	425b      	negs	r3, r3
 8006152:	e7d0      	b.n	80060f6 <_svfiprintf_r+0x12e>
 8006154:	2300      	movs	r3, #0
 8006156:	200a      	movs	r0, #10
 8006158:	001a      	movs	r2, r3
 800615a:	3501      	adds	r5, #1
 800615c:	6063      	str	r3, [r4, #4]
 800615e:	7829      	ldrb	r1, [r5, #0]
 8006160:	1c6e      	adds	r6, r5, #1
 8006162:	3930      	subs	r1, #48	; 0x30
 8006164:	2909      	cmp	r1, #9
 8006166:	d903      	bls.n	8006170 <_svfiprintf_r+0x1a8>
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0c5      	beq.n	80060f8 <_svfiprintf_r+0x130>
 800616c:	9209      	str	r2, [sp, #36]	; 0x24
 800616e:	e7c3      	b.n	80060f8 <_svfiprintf_r+0x130>
 8006170:	4342      	muls	r2, r0
 8006172:	0035      	movs	r5, r6
 8006174:	2301      	movs	r3, #1
 8006176:	1852      	adds	r2, r2, r1
 8006178:	e7f1      	b.n	800615e <_svfiprintf_r+0x196>
 800617a:	aa07      	add	r2, sp, #28
 800617c:	9200      	str	r2, [sp, #0]
 800617e:	0021      	movs	r1, r4
 8006180:	003a      	movs	r2, r7
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <_svfiprintf_r+0x1fc>)
 8006184:	9803      	ldr	r0, [sp, #12]
 8006186:	e000      	b.n	800618a <_svfiprintf_r+0x1c2>
 8006188:	bf00      	nop
 800618a:	9004      	str	r0, [sp, #16]
 800618c:	9b04      	ldr	r3, [sp, #16]
 800618e:	3301      	adds	r3, #1
 8006190:	d1d3      	bne.n	800613a <_svfiprintf_r+0x172>
 8006192:	89bb      	ldrh	r3, [r7, #12]
 8006194:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006196:	065b      	lsls	r3, r3, #25
 8006198:	d400      	bmi.n	800619c <_svfiprintf_r+0x1d4>
 800619a:	e72c      	b.n	8005ff6 <_svfiprintf_r+0x2e>
 800619c:	2001      	movs	r0, #1
 800619e:	4240      	negs	r0, r0
 80061a0:	e729      	b.n	8005ff6 <_svfiprintf_r+0x2e>
 80061a2:	aa07      	add	r2, sp, #28
 80061a4:	9200      	str	r2, [sp, #0]
 80061a6:	0021      	movs	r1, r4
 80061a8:	003a      	movs	r2, r7
 80061aa:	4b06      	ldr	r3, [pc, #24]	; (80061c4 <_svfiprintf_r+0x1fc>)
 80061ac:	9803      	ldr	r0, [sp, #12]
 80061ae:	f000 fa41 	bl	8006634 <_printf_i>
 80061b2:	e7ea      	b.n	800618a <_svfiprintf_r+0x1c2>
 80061b4:	08007e2c 	.word	0x08007e2c
 80061b8:	08007e32 	.word	0x08007e32
 80061bc:	08007e36 	.word	0x08007e36
 80061c0:	00000000 	.word	0x00000000
 80061c4:	08005f05 	.word	0x08005f05

080061c8 <_sungetc_r>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	0014      	movs	r4, r2
 80061cc:	1c4b      	adds	r3, r1, #1
 80061ce:	d103      	bne.n	80061d8 <_sungetc_r+0x10>
 80061d0:	2501      	movs	r5, #1
 80061d2:	426d      	negs	r5, r5
 80061d4:	0028      	movs	r0, r5
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	8993      	ldrh	r3, [r2, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	4393      	bics	r3, r2
 80061de:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80061e0:	81a3      	strh	r3, [r4, #12]
 80061e2:	b2ce      	uxtb	r6, r1
 80061e4:	6863      	ldr	r3, [r4, #4]
 80061e6:	b2cd      	uxtb	r5, r1
 80061e8:	2a00      	cmp	r2, #0
 80061ea:	d010      	beq.n	800620e <_sungetc_r+0x46>
 80061ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80061ee:	429a      	cmp	r2, r3
 80061f0:	dd07      	ble.n	8006202 <_sungetc_r+0x3a>
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	701e      	strb	r6, [r3, #0]
 80061fa:	6863      	ldr	r3, [r4, #4]
 80061fc:	3301      	adds	r3, #1
 80061fe:	6063      	str	r3, [r4, #4]
 8006200:	e7e8      	b.n	80061d4 <_sungetc_r+0xc>
 8006202:	0021      	movs	r1, r4
 8006204:	f000 fcc4 	bl	8006b90 <__submore>
 8006208:	2800      	cmp	r0, #0
 800620a:	d0f2      	beq.n	80061f2 <_sungetc_r+0x2a>
 800620c:	e7e0      	b.n	80061d0 <_sungetc_r+0x8>
 800620e:	6921      	ldr	r1, [r4, #16]
 8006210:	6822      	ldr	r2, [r4, #0]
 8006212:	2900      	cmp	r1, #0
 8006214:	d007      	beq.n	8006226 <_sungetc_r+0x5e>
 8006216:	4291      	cmp	r1, r2
 8006218:	d205      	bcs.n	8006226 <_sungetc_r+0x5e>
 800621a:	1e51      	subs	r1, r2, #1
 800621c:	7808      	ldrb	r0, [r1, #0]
 800621e:	42a8      	cmp	r0, r5
 8006220:	d101      	bne.n	8006226 <_sungetc_r+0x5e>
 8006222:	6021      	str	r1, [r4, #0]
 8006224:	e7ea      	b.n	80061fc <_sungetc_r+0x34>
 8006226:	6423      	str	r3, [r4, #64]	; 0x40
 8006228:	0023      	movs	r3, r4
 800622a:	3344      	adds	r3, #68	; 0x44
 800622c:	6363      	str	r3, [r4, #52]	; 0x34
 800622e:	2303      	movs	r3, #3
 8006230:	63a3      	str	r3, [r4, #56]	; 0x38
 8006232:	0023      	movs	r3, r4
 8006234:	3346      	adds	r3, #70	; 0x46
 8006236:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006238:	701e      	strb	r6, [r3, #0]
 800623a:	6023      	str	r3, [r4, #0]
 800623c:	2301      	movs	r3, #1
 800623e:	e7de      	b.n	80061fe <_sungetc_r+0x36>

08006240 <__ssrefill_r>:
 8006240:	b510      	push	{r4, lr}
 8006242:	000c      	movs	r4, r1
 8006244:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006246:	2900      	cmp	r1, #0
 8006248:	d00e      	beq.n	8006268 <__ssrefill_r+0x28>
 800624a:	0023      	movs	r3, r4
 800624c:	3344      	adds	r3, #68	; 0x44
 800624e:	4299      	cmp	r1, r3
 8006250:	d001      	beq.n	8006256 <__ssrefill_r+0x16>
 8006252:	f7ff fd59 	bl	8005d08 <_free_r>
 8006256:	2000      	movs	r0, #0
 8006258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800625a:	6360      	str	r0, [r4, #52]	; 0x34
 800625c:	6063      	str	r3, [r4, #4]
 800625e:	4283      	cmp	r3, r0
 8006260:	d002      	beq.n	8006268 <__ssrefill_r+0x28>
 8006262:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd10      	pop	{r4, pc}
 8006268:	6923      	ldr	r3, [r4, #16]
 800626a:	2001      	movs	r0, #1
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	2300      	movs	r3, #0
 8006270:	89a2      	ldrh	r2, [r4, #12]
 8006272:	6063      	str	r3, [r4, #4]
 8006274:	3320      	adds	r3, #32
 8006276:	4313      	orrs	r3, r2
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	4240      	negs	r0, r0
 800627c:	e7f3      	b.n	8006266 <__ssrefill_r+0x26>
	...

08006280 <__ssvfiscanf_r>:
 8006280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006282:	4cae      	ldr	r4, [pc, #696]	; (800653c <__ssvfiscanf_r+0x2bc>)
 8006284:	0006      	movs	r6, r0
 8006286:	44a5      	add	sp, r4
 8006288:	000c      	movs	r4, r1
 800628a:	2100      	movs	r1, #0
 800628c:	20be      	movs	r0, #190	; 0xbe
 800628e:	9146      	str	r1, [sp, #280]	; 0x118
 8006290:	9147      	str	r1, [sp, #284]	; 0x11c
 8006292:	a903      	add	r1, sp, #12
 8006294:	9148      	str	r1, [sp, #288]	; 0x120
 8006296:	49aa      	ldr	r1, [pc, #680]	; (8006540 <__ssvfiscanf_r+0x2c0>)
 8006298:	0040      	lsls	r0, r0, #1
 800629a:	ad43      	add	r5, sp, #268	; 0x10c
 800629c:	5029      	str	r1, [r5, r0]
 800629e:	25c0      	movs	r5, #192	; 0xc0
 80062a0:	49a8      	ldr	r1, [pc, #672]	; (8006544 <__ssvfiscanf_r+0x2c4>)
 80062a2:	006d      	lsls	r5, r5, #1
 80062a4:	a843      	add	r0, sp, #268	; 0x10c
 80062a6:	5141      	str	r1, [r0, r5]
 80062a8:	9302      	str	r3, [sp, #8]
 80062aa:	7815      	ldrb	r5, [r2, #0]
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	d100      	bne.n	80062b2 <__ssvfiscanf_r+0x32>
 80062b0:	e141      	b.n	8006536 <__ssvfiscanf_r+0x2b6>
 80062b2:	4ba5      	ldr	r3, [pc, #660]	; (8006548 <__ssvfiscanf_r+0x2c8>)
 80062b4:	2008      	movs	r0, #8
 80062b6:	5d59      	ldrb	r1, [r3, r5]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	2308      	movs	r3, #8
 80062bc:	1c57      	adds	r7, r2, #1
 80062be:	400b      	ands	r3, r1
 80062c0:	4201      	tst	r1, r0
 80062c2:	d01e      	beq.n	8006302 <__ssvfiscanf_r+0x82>
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	dd11      	ble.n	80062ee <__ssvfiscanf_r+0x6e>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	9900      	ldr	r1, [sp, #0]
 80062ce:	781a      	ldrb	r2, [r3, #0]
 80062d0:	5c8a      	ldrb	r2, [r1, r2]
 80062d2:	2108      	movs	r1, #8
 80062d4:	420a      	tst	r2, r1
 80062d6:	d101      	bne.n	80062dc <__ssvfiscanf_r+0x5c>
 80062d8:	003a      	movs	r2, r7
 80062da:	e7e6      	b.n	80062aa <__ssvfiscanf_r+0x2a>
 80062dc:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80062de:	3301      	adds	r3, #1
 80062e0:	3201      	adds	r2, #1
 80062e2:	9247      	str	r2, [sp, #284]	; 0x11c
 80062e4:	6862      	ldr	r2, [r4, #4]
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	3a01      	subs	r2, #1
 80062ea:	6062      	str	r2, [r4, #4]
 80062ec:	e7ea      	b.n	80062c4 <__ssvfiscanf_r+0x44>
 80062ee:	22c0      	movs	r2, #192	; 0xc0
 80062f0:	ab43      	add	r3, sp, #268	; 0x10c
 80062f2:	0052      	lsls	r2, r2, #1
 80062f4:	0021      	movs	r1, r4
 80062f6:	0030      	movs	r0, r6
 80062f8:	589b      	ldr	r3, [r3, r2]
 80062fa:	4798      	blx	r3
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d0e4      	beq.n	80062ca <__ssvfiscanf_r+0x4a>
 8006300:	e7ea      	b.n	80062d8 <__ssvfiscanf_r+0x58>
 8006302:	2d25      	cmp	r5, #37	; 0x25
 8006304:	d162      	bne.n	80063cc <__ssvfiscanf_r+0x14c>
 8006306:	9345      	str	r3, [sp, #276]	; 0x114
 8006308:	9343      	str	r3, [sp, #268]	; 0x10c
 800630a:	7853      	ldrb	r3, [r2, #1]
 800630c:	2b2a      	cmp	r3, #42	; 0x2a
 800630e:	d102      	bne.n	8006316 <__ssvfiscanf_r+0x96>
 8006310:	3b1a      	subs	r3, #26
 8006312:	9343      	str	r3, [sp, #268]	; 0x10c
 8006314:	1c97      	adds	r7, r2, #2
 8006316:	003d      	movs	r5, r7
 8006318:	220a      	movs	r2, #10
 800631a:	7829      	ldrb	r1, [r5, #0]
 800631c:	1c6b      	adds	r3, r5, #1
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	000b      	movs	r3, r1
 8006322:	3b30      	subs	r3, #48	; 0x30
 8006324:	2b09      	cmp	r3, #9
 8006326:	d91e      	bls.n	8006366 <__ssvfiscanf_r+0xe6>
 8006328:	4f88      	ldr	r7, [pc, #544]	; (800654c <__ssvfiscanf_r+0x2cc>)
 800632a:	2203      	movs	r2, #3
 800632c:	0038      	movs	r0, r7
 800632e:	f000 fc93 	bl	8006c58 <memchr>
 8006332:	2800      	cmp	r0, #0
 8006334:	d006      	beq.n	8006344 <__ssvfiscanf_r+0xc4>
 8006336:	2301      	movs	r3, #1
 8006338:	1bc0      	subs	r0, r0, r7
 800633a:	4083      	lsls	r3, r0
 800633c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800633e:	9d01      	ldr	r5, [sp, #4]
 8006340:	4313      	orrs	r3, r2
 8006342:	9343      	str	r3, [sp, #268]	; 0x10c
 8006344:	1c6f      	adds	r7, r5, #1
 8006346:	782d      	ldrb	r5, [r5, #0]
 8006348:	2d78      	cmp	r5, #120	; 0x78
 800634a:	d807      	bhi.n	800635c <__ssvfiscanf_r+0xdc>
 800634c:	2d57      	cmp	r5, #87	; 0x57
 800634e:	d811      	bhi.n	8006374 <__ssvfiscanf_r+0xf4>
 8006350:	2d25      	cmp	r5, #37	; 0x25
 8006352:	d03b      	beq.n	80063cc <__ssvfiscanf_r+0x14c>
 8006354:	d835      	bhi.n	80063c2 <__ssvfiscanf_r+0x142>
 8006356:	2d00      	cmp	r5, #0
 8006358:	d100      	bne.n	800635c <__ssvfiscanf_r+0xdc>
 800635a:	e0e9      	b.n	8006530 <__ssvfiscanf_r+0x2b0>
 800635c:	2303      	movs	r3, #3
 800635e:	9349      	str	r3, [sp, #292]	; 0x124
 8006360:	3307      	adds	r3, #7
 8006362:	9344      	str	r3, [sp, #272]	; 0x110
 8006364:	e06d      	b.n	8006442 <__ssvfiscanf_r+0x1c2>
 8006366:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006368:	9d01      	ldr	r5, [sp, #4]
 800636a:	4353      	muls	r3, r2
 800636c:	3b30      	subs	r3, #48	; 0x30
 800636e:	185b      	adds	r3, r3, r1
 8006370:	9345      	str	r3, [sp, #276]	; 0x114
 8006372:	e7d2      	b.n	800631a <__ssvfiscanf_r+0x9a>
 8006374:	0028      	movs	r0, r5
 8006376:	3858      	subs	r0, #88	; 0x58
 8006378:	2820      	cmp	r0, #32
 800637a:	d8ef      	bhi.n	800635c <__ssvfiscanf_r+0xdc>
 800637c:	f7f9 feca 	bl	8000114 <__gnu_thumb1_case_shi>
 8006380:	ffee004d 	.word	0xffee004d
 8006384:	007fffee 	.word	0x007fffee
 8006388:	ffeeffee 	.word	0xffeeffee
 800638c:	ffeeffee 	.word	0xffeeffee
 8006390:	ffeeffee 	.word	0xffeeffee
 8006394:	008affee 	.word	0x008affee
 8006398:	0024007d 	.word	0x0024007d
 800639c:	00240024 	.word	0x00240024
 80063a0:	0059ffee 	.word	0x0059ffee
 80063a4:	ffeeffee 	.word	0xffeeffee
 80063a8:	ffeeffee 	.word	0xffeeffee
 80063ac:	005d0092 	.word	0x005d0092
 80063b0:	ffee0049 	.word	0xffee0049
 80063b4:	0090ffee 	.word	0x0090ffee
 80063b8:	007dffee 	.word	0x007dffee
 80063bc:	ffeeffee 	.word	0xffeeffee
 80063c0:	004d      	.short	0x004d
 80063c2:	3d45      	subs	r5, #69	; 0x45
 80063c4:	2d02      	cmp	r5, #2
 80063c6:	d8c9      	bhi.n	800635c <__ssvfiscanf_r+0xdc>
 80063c8:	2305      	movs	r3, #5
 80063ca:	e039      	b.n	8006440 <__ssvfiscanf_r+0x1c0>
 80063cc:	6863      	ldr	r3, [r4, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	dd0d      	ble.n	80063ee <__ssvfiscanf_r+0x16e>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	781a      	ldrb	r2, [r3, #0]
 80063d6:	42aa      	cmp	r2, r5
 80063d8:	d000      	beq.n	80063dc <__ssvfiscanf_r+0x15c>
 80063da:	e0ac      	b.n	8006536 <__ssvfiscanf_r+0x2b6>
 80063dc:	3301      	adds	r3, #1
 80063de:	6862      	ldr	r2, [r4, #4]
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80063e4:	3a01      	subs	r2, #1
 80063e6:	3301      	adds	r3, #1
 80063e8:	6062      	str	r2, [r4, #4]
 80063ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80063ec:	e774      	b.n	80062d8 <__ssvfiscanf_r+0x58>
 80063ee:	22c0      	movs	r2, #192	; 0xc0
 80063f0:	ab43      	add	r3, sp, #268	; 0x10c
 80063f2:	0052      	lsls	r2, r2, #1
 80063f4:	0021      	movs	r1, r4
 80063f6:	0030      	movs	r0, r6
 80063f8:	589b      	ldr	r3, [r3, r2]
 80063fa:	4798      	blx	r3
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d0e8      	beq.n	80063d2 <__ssvfiscanf_r+0x152>
 8006400:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006402:	2800      	cmp	r0, #0
 8006404:	d000      	beq.n	8006408 <__ssvfiscanf_r+0x188>
 8006406:	e08f      	b.n	8006528 <__ssvfiscanf_r+0x2a8>
 8006408:	3801      	subs	r0, #1
 800640a:	23a5      	movs	r3, #165	; 0xa5
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	449d      	add	sp, r3
 8006410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006412:	2320      	movs	r3, #32
 8006414:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006416:	4313      	orrs	r3, r2
 8006418:	9343      	str	r3, [sp, #268]	; 0x10c
 800641a:	2380      	movs	r3, #128	; 0x80
 800641c:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4313      	orrs	r3, r2
 8006422:	9343      	str	r3, [sp, #268]	; 0x10c
 8006424:	2310      	movs	r3, #16
 8006426:	9344      	str	r3, [sp, #272]	; 0x110
 8006428:	236e      	movs	r3, #110	; 0x6e
 800642a:	42ab      	cmp	r3, r5
 800642c:	419b      	sbcs	r3, r3
 800642e:	425b      	negs	r3, r3
 8006430:	e001      	b.n	8006436 <__ssvfiscanf_r+0x1b6>
 8006432:	2300      	movs	r3, #0
 8006434:	9344      	str	r3, [sp, #272]	; 0x110
 8006436:	3303      	adds	r3, #3
 8006438:	e002      	b.n	8006440 <__ssvfiscanf_r+0x1c0>
 800643a:	2308      	movs	r3, #8
 800643c:	9344      	str	r3, [sp, #272]	; 0x110
 800643e:	3b04      	subs	r3, #4
 8006440:	9349      	str	r3, [sp, #292]	; 0x124
 8006442:	6863      	ldr	r3, [r4, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	dd3c      	ble.n	80064c2 <__ssvfiscanf_r+0x242>
 8006448:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800644a:	065b      	lsls	r3, r3, #25
 800644c:	d406      	bmi.n	800645c <__ssvfiscanf_r+0x1dc>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	9900      	ldr	r1, [sp, #0]
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	5c8a      	ldrb	r2, [r1, r2]
 8006456:	2108      	movs	r1, #8
 8006458:	420a      	tst	r2, r1
 800645a:	d13c      	bne.n	80064d6 <__ssvfiscanf_r+0x256>
 800645c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800645e:	2b02      	cmp	r3, #2
 8006460:	dc4e      	bgt.n	8006500 <__ssvfiscanf_r+0x280>
 8006462:	0022      	movs	r2, r4
 8006464:	0030      	movs	r0, r6
 8006466:	ab02      	add	r3, sp, #8
 8006468:	a943      	add	r1, sp, #268	; 0x10c
 800646a:	f000 f9f3 	bl	8006854 <_scanf_chars>
 800646e:	2801      	cmp	r0, #1
 8006470:	d061      	beq.n	8006536 <__ssvfiscanf_r+0x2b6>
 8006472:	2802      	cmp	r0, #2
 8006474:	d000      	beq.n	8006478 <__ssvfiscanf_r+0x1f8>
 8006476:	e72f      	b.n	80062d8 <__ssvfiscanf_r+0x58>
 8006478:	e7c2      	b.n	8006400 <__ssvfiscanf_r+0x180>
 800647a:	230a      	movs	r3, #10
 800647c:	e7d3      	b.n	8006426 <__ssvfiscanf_r+0x1a6>
 800647e:	0039      	movs	r1, r7
 8006480:	a803      	add	r0, sp, #12
 8006482:	f000 fb49 	bl	8006b18 <__sccl>
 8006486:	2340      	movs	r3, #64	; 0x40
 8006488:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800648a:	0007      	movs	r7, r0
 800648c:	4313      	orrs	r3, r2
 800648e:	9343      	str	r3, [sp, #268]	; 0x10c
 8006490:	2301      	movs	r3, #1
 8006492:	e7d5      	b.n	8006440 <__ssvfiscanf_r+0x1c0>
 8006494:	2340      	movs	r3, #64	; 0x40
 8006496:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8006498:	4313      	orrs	r3, r2
 800649a:	9343      	str	r3, [sp, #268]	; 0x10c
 800649c:	2300      	movs	r3, #0
 800649e:	e7cf      	b.n	8006440 <__ssvfiscanf_r+0x1c0>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e7cd      	b.n	8006440 <__ssvfiscanf_r+0x1c0>
 80064a4:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80064a6:	06d3      	lsls	r3, r2, #27
 80064a8:	d500      	bpl.n	80064ac <__ssvfiscanf_r+0x22c>
 80064aa:	e715      	b.n	80062d8 <__ssvfiscanf_r+0x58>
 80064ac:	9b02      	ldr	r3, [sp, #8]
 80064ae:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80064b0:	1d18      	adds	r0, r3, #4
 80064b2:	9002      	str	r0, [sp, #8]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	07d5      	lsls	r5, r2, #31
 80064b8:	d501      	bpl.n	80064be <__ssvfiscanf_r+0x23e>
 80064ba:	8019      	strh	r1, [r3, #0]
 80064bc:	e70c      	b.n	80062d8 <__ssvfiscanf_r+0x58>
 80064be:	6019      	str	r1, [r3, #0]
 80064c0:	e70a      	b.n	80062d8 <__ssvfiscanf_r+0x58>
 80064c2:	22c0      	movs	r2, #192	; 0xc0
 80064c4:	ab43      	add	r3, sp, #268	; 0x10c
 80064c6:	0052      	lsls	r2, r2, #1
 80064c8:	0021      	movs	r1, r4
 80064ca:	0030      	movs	r0, r6
 80064cc:	589b      	ldr	r3, [r3, r2]
 80064ce:	4798      	blx	r3
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d0b9      	beq.n	8006448 <__ssvfiscanf_r+0x1c8>
 80064d4:	e794      	b.n	8006400 <__ssvfiscanf_r+0x180>
 80064d6:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 80064d8:	3201      	adds	r2, #1
 80064da:	9247      	str	r2, [sp, #284]	; 0x11c
 80064dc:	6862      	ldr	r2, [r4, #4]
 80064de:	3a01      	subs	r2, #1
 80064e0:	6062      	str	r2, [r4, #4]
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	dd02      	ble.n	80064ec <__ssvfiscanf_r+0x26c>
 80064e6:	3301      	adds	r3, #1
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	e7b0      	b.n	800644e <__ssvfiscanf_r+0x1ce>
 80064ec:	22c0      	movs	r2, #192	; 0xc0
 80064ee:	ab43      	add	r3, sp, #268	; 0x10c
 80064f0:	0052      	lsls	r2, r2, #1
 80064f2:	0021      	movs	r1, r4
 80064f4:	0030      	movs	r0, r6
 80064f6:	589b      	ldr	r3, [r3, r2]
 80064f8:	4798      	blx	r3
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d0a7      	beq.n	800644e <__ssvfiscanf_r+0x1ce>
 80064fe:	e77f      	b.n	8006400 <__ssvfiscanf_r+0x180>
 8006500:	2b04      	cmp	r3, #4
 8006502:	dc06      	bgt.n	8006512 <__ssvfiscanf_r+0x292>
 8006504:	0022      	movs	r2, r4
 8006506:	0030      	movs	r0, r6
 8006508:	ab02      	add	r3, sp, #8
 800650a:	a943      	add	r1, sp, #268	; 0x10c
 800650c:	f000 fa00 	bl	8006910 <_scanf_i>
 8006510:	e7ad      	b.n	800646e <__ssvfiscanf_r+0x1ee>
 8006512:	4b0f      	ldr	r3, [pc, #60]	; (8006550 <__ssvfiscanf_r+0x2d0>)
 8006514:	2b00      	cmp	r3, #0
 8006516:	d100      	bne.n	800651a <__ssvfiscanf_r+0x29a>
 8006518:	e6de      	b.n	80062d8 <__ssvfiscanf_r+0x58>
 800651a:	0022      	movs	r2, r4
 800651c:	0030      	movs	r0, r6
 800651e:	ab02      	add	r3, sp, #8
 8006520:	a943      	add	r1, sp, #268	; 0x10c
 8006522:	e000      	b.n	8006526 <__ssvfiscanf_r+0x2a6>
 8006524:	bf00      	nop
 8006526:	e7a2      	b.n	800646e <__ssvfiscanf_r+0x1ee>
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	065b      	lsls	r3, r3, #25
 800652c:	d400      	bmi.n	8006530 <__ssvfiscanf_r+0x2b0>
 800652e:	e76c      	b.n	800640a <__ssvfiscanf_r+0x18a>
 8006530:	2001      	movs	r0, #1
 8006532:	4240      	negs	r0, r0
 8006534:	e769      	b.n	800640a <__ssvfiscanf_r+0x18a>
 8006536:	9846      	ldr	r0, [sp, #280]	; 0x118
 8006538:	e767      	b.n	800640a <__ssvfiscanf_r+0x18a>
 800653a:	46c0      	nop			; (mov r8, r8)
 800653c:	fffffd6c 	.word	0xfffffd6c
 8006540:	080061c9 	.word	0x080061c9
 8006544:	08006241 	.word	0x08006241
 8006548:	08007e7b 	.word	0x08007e7b
 800654c:	08007e32 	.word	0x08007e32
 8006550:	00000000 	.word	0x00000000

08006554 <_printf_common>:
 8006554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006556:	0016      	movs	r6, r2
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	688a      	ldr	r2, [r1, #8]
 800655c:	690b      	ldr	r3, [r1, #16]
 800655e:	000c      	movs	r4, r1
 8006560:	9000      	str	r0, [sp, #0]
 8006562:	4293      	cmp	r3, r2
 8006564:	da00      	bge.n	8006568 <_printf_common+0x14>
 8006566:	0013      	movs	r3, r2
 8006568:	0022      	movs	r2, r4
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	3243      	adds	r2, #67	; 0x43
 800656e:	7812      	ldrb	r2, [r2, #0]
 8006570:	2a00      	cmp	r2, #0
 8006572:	d001      	beq.n	8006578 <_printf_common+0x24>
 8006574:	3301      	adds	r3, #1
 8006576:	6033      	str	r3, [r6, #0]
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	069b      	lsls	r3, r3, #26
 800657c:	d502      	bpl.n	8006584 <_printf_common+0x30>
 800657e:	6833      	ldr	r3, [r6, #0]
 8006580:	3302      	adds	r3, #2
 8006582:	6033      	str	r3, [r6, #0]
 8006584:	6822      	ldr	r2, [r4, #0]
 8006586:	2306      	movs	r3, #6
 8006588:	0015      	movs	r5, r2
 800658a:	401d      	ands	r5, r3
 800658c:	421a      	tst	r2, r3
 800658e:	d027      	beq.n	80065e0 <_printf_common+0x8c>
 8006590:	0023      	movs	r3, r4
 8006592:	3343      	adds	r3, #67	; 0x43
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	1e5a      	subs	r2, r3, #1
 8006598:	4193      	sbcs	r3, r2
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	0692      	lsls	r2, r2, #26
 800659e:	d430      	bmi.n	8006602 <_printf_common+0xae>
 80065a0:	0022      	movs	r2, r4
 80065a2:	9901      	ldr	r1, [sp, #4]
 80065a4:	9800      	ldr	r0, [sp, #0]
 80065a6:	9d08      	ldr	r5, [sp, #32]
 80065a8:	3243      	adds	r2, #67	; 0x43
 80065aa:	47a8      	blx	r5
 80065ac:	3001      	adds	r0, #1
 80065ae:	d025      	beq.n	80065fc <_printf_common+0xa8>
 80065b0:	2206      	movs	r2, #6
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	2500      	movs	r5, #0
 80065b6:	4013      	ands	r3, r2
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d105      	bne.n	80065c8 <_printf_common+0x74>
 80065bc:	6833      	ldr	r3, [r6, #0]
 80065be:	68e5      	ldr	r5, [r4, #12]
 80065c0:	1aed      	subs	r5, r5, r3
 80065c2:	43eb      	mvns	r3, r5
 80065c4:	17db      	asrs	r3, r3, #31
 80065c6:	401d      	ands	r5, r3
 80065c8:	68a3      	ldr	r3, [r4, #8]
 80065ca:	6922      	ldr	r2, [r4, #16]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	dd01      	ble.n	80065d4 <_printf_common+0x80>
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	18ed      	adds	r5, r5, r3
 80065d4:	2600      	movs	r6, #0
 80065d6:	42b5      	cmp	r5, r6
 80065d8:	d120      	bne.n	800661c <_printf_common+0xc8>
 80065da:	2000      	movs	r0, #0
 80065dc:	e010      	b.n	8006600 <_printf_common+0xac>
 80065de:	3501      	adds	r5, #1
 80065e0:	68e3      	ldr	r3, [r4, #12]
 80065e2:	6832      	ldr	r2, [r6, #0]
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	42ab      	cmp	r3, r5
 80065e8:	ddd2      	ble.n	8006590 <_printf_common+0x3c>
 80065ea:	0022      	movs	r2, r4
 80065ec:	2301      	movs	r3, #1
 80065ee:	9901      	ldr	r1, [sp, #4]
 80065f0:	9800      	ldr	r0, [sp, #0]
 80065f2:	9f08      	ldr	r7, [sp, #32]
 80065f4:	3219      	adds	r2, #25
 80065f6:	47b8      	blx	r7
 80065f8:	3001      	adds	r0, #1
 80065fa:	d1f0      	bne.n	80065de <_printf_common+0x8a>
 80065fc:	2001      	movs	r0, #1
 80065fe:	4240      	negs	r0, r0
 8006600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006602:	2030      	movs	r0, #48	; 0x30
 8006604:	18e1      	adds	r1, r4, r3
 8006606:	3143      	adds	r1, #67	; 0x43
 8006608:	7008      	strb	r0, [r1, #0]
 800660a:	0021      	movs	r1, r4
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	3145      	adds	r1, #69	; 0x45
 8006610:	7809      	ldrb	r1, [r1, #0]
 8006612:	18a2      	adds	r2, r4, r2
 8006614:	3243      	adds	r2, #67	; 0x43
 8006616:	3302      	adds	r3, #2
 8006618:	7011      	strb	r1, [r2, #0]
 800661a:	e7c1      	b.n	80065a0 <_printf_common+0x4c>
 800661c:	0022      	movs	r2, r4
 800661e:	2301      	movs	r3, #1
 8006620:	9901      	ldr	r1, [sp, #4]
 8006622:	9800      	ldr	r0, [sp, #0]
 8006624:	9f08      	ldr	r7, [sp, #32]
 8006626:	321a      	adds	r2, #26
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	d0e6      	beq.n	80065fc <_printf_common+0xa8>
 800662e:	3601      	adds	r6, #1
 8006630:	e7d1      	b.n	80065d6 <_printf_common+0x82>
	...

08006634 <_printf_i>:
 8006634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006636:	b08b      	sub	sp, #44	; 0x2c
 8006638:	9206      	str	r2, [sp, #24]
 800663a:	000a      	movs	r2, r1
 800663c:	3243      	adds	r2, #67	; 0x43
 800663e:	9307      	str	r3, [sp, #28]
 8006640:	9005      	str	r0, [sp, #20]
 8006642:	9204      	str	r2, [sp, #16]
 8006644:	7e0a      	ldrb	r2, [r1, #24]
 8006646:	000c      	movs	r4, r1
 8006648:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800664a:	2a78      	cmp	r2, #120	; 0x78
 800664c:	d809      	bhi.n	8006662 <_printf_i+0x2e>
 800664e:	2a62      	cmp	r2, #98	; 0x62
 8006650:	d80b      	bhi.n	800666a <_printf_i+0x36>
 8006652:	2a00      	cmp	r2, #0
 8006654:	d100      	bne.n	8006658 <_printf_i+0x24>
 8006656:	e0be      	b.n	80067d6 <_printf_i+0x1a2>
 8006658:	497c      	ldr	r1, [pc, #496]	; (800684c <_printf_i+0x218>)
 800665a:	9103      	str	r1, [sp, #12]
 800665c:	2a58      	cmp	r2, #88	; 0x58
 800665e:	d100      	bne.n	8006662 <_printf_i+0x2e>
 8006660:	e093      	b.n	800678a <_printf_i+0x156>
 8006662:	0026      	movs	r6, r4
 8006664:	3642      	adds	r6, #66	; 0x42
 8006666:	7032      	strb	r2, [r6, #0]
 8006668:	e022      	b.n	80066b0 <_printf_i+0x7c>
 800666a:	0010      	movs	r0, r2
 800666c:	3863      	subs	r0, #99	; 0x63
 800666e:	2815      	cmp	r0, #21
 8006670:	d8f7      	bhi.n	8006662 <_printf_i+0x2e>
 8006672:	f7f9 fd4f 	bl	8000114 <__gnu_thumb1_case_shi>
 8006676:	0016      	.short	0x0016
 8006678:	fff6001f 	.word	0xfff6001f
 800667c:	fff6fff6 	.word	0xfff6fff6
 8006680:	001ffff6 	.word	0x001ffff6
 8006684:	fff6fff6 	.word	0xfff6fff6
 8006688:	fff6fff6 	.word	0xfff6fff6
 800668c:	003600a3 	.word	0x003600a3
 8006690:	fff60083 	.word	0xfff60083
 8006694:	00b4fff6 	.word	0x00b4fff6
 8006698:	0036fff6 	.word	0x0036fff6
 800669c:	fff6fff6 	.word	0xfff6fff6
 80066a0:	0087      	.short	0x0087
 80066a2:	0026      	movs	r6, r4
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	3642      	adds	r6, #66	; 0x42
 80066a8:	1d11      	adds	r1, r2, #4
 80066aa:	6019      	str	r1, [r3, #0]
 80066ac:	6813      	ldr	r3, [r2, #0]
 80066ae:	7033      	strb	r3, [r6, #0]
 80066b0:	2301      	movs	r3, #1
 80066b2:	e0a2      	b.n	80067fa <_printf_i+0x1c6>
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	6809      	ldr	r1, [r1, #0]
 80066b8:	1d02      	adds	r2, r0, #4
 80066ba:	060d      	lsls	r5, r1, #24
 80066bc:	d50b      	bpl.n	80066d6 <_printf_i+0xa2>
 80066be:	6805      	ldr	r5, [r0, #0]
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	2d00      	cmp	r5, #0
 80066c4:	da03      	bge.n	80066ce <_printf_i+0x9a>
 80066c6:	232d      	movs	r3, #45	; 0x2d
 80066c8:	9a04      	ldr	r2, [sp, #16]
 80066ca:	426d      	negs	r5, r5
 80066cc:	7013      	strb	r3, [r2, #0]
 80066ce:	4b5f      	ldr	r3, [pc, #380]	; (800684c <_printf_i+0x218>)
 80066d0:	270a      	movs	r7, #10
 80066d2:	9303      	str	r3, [sp, #12]
 80066d4:	e01b      	b.n	800670e <_printf_i+0xda>
 80066d6:	6805      	ldr	r5, [r0, #0]
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	0649      	lsls	r1, r1, #25
 80066dc:	d5f1      	bpl.n	80066c2 <_printf_i+0x8e>
 80066de:	b22d      	sxth	r5, r5
 80066e0:	e7ef      	b.n	80066c2 <_printf_i+0x8e>
 80066e2:	680d      	ldr	r5, [r1, #0]
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	1d08      	adds	r0, r1, #4
 80066e8:	6018      	str	r0, [r3, #0]
 80066ea:	062e      	lsls	r6, r5, #24
 80066ec:	d501      	bpl.n	80066f2 <_printf_i+0xbe>
 80066ee:	680d      	ldr	r5, [r1, #0]
 80066f0:	e003      	b.n	80066fa <_printf_i+0xc6>
 80066f2:	066d      	lsls	r5, r5, #25
 80066f4:	d5fb      	bpl.n	80066ee <_printf_i+0xba>
 80066f6:	680d      	ldr	r5, [r1, #0]
 80066f8:	b2ad      	uxth	r5, r5
 80066fa:	4b54      	ldr	r3, [pc, #336]	; (800684c <_printf_i+0x218>)
 80066fc:	2708      	movs	r7, #8
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	2a6f      	cmp	r2, #111	; 0x6f
 8006702:	d000      	beq.n	8006706 <_printf_i+0xd2>
 8006704:	3702      	adds	r7, #2
 8006706:	0023      	movs	r3, r4
 8006708:	2200      	movs	r2, #0
 800670a:	3343      	adds	r3, #67	; 0x43
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	6863      	ldr	r3, [r4, #4]
 8006710:	60a3      	str	r3, [r4, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	db03      	blt.n	800671e <_printf_i+0xea>
 8006716:	2104      	movs	r1, #4
 8006718:	6822      	ldr	r2, [r4, #0]
 800671a:	438a      	bics	r2, r1
 800671c:	6022      	str	r2, [r4, #0]
 800671e:	2d00      	cmp	r5, #0
 8006720:	d102      	bne.n	8006728 <_printf_i+0xf4>
 8006722:	9e04      	ldr	r6, [sp, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00c      	beq.n	8006742 <_printf_i+0x10e>
 8006728:	9e04      	ldr	r6, [sp, #16]
 800672a:	0028      	movs	r0, r5
 800672c:	0039      	movs	r1, r7
 800672e:	f7f9 fd81 	bl	8000234 <__aeabi_uidivmod>
 8006732:	9b03      	ldr	r3, [sp, #12]
 8006734:	3e01      	subs	r6, #1
 8006736:	5c5b      	ldrb	r3, [r3, r1]
 8006738:	7033      	strb	r3, [r6, #0]
 800673a:	002b      	movs	r3, r5
 800673c:	0005      	movs	r5, r0
 800673e:	429f      	cmp	r7, r3
 8006740:	d9f3      	bls.n	800672a <_printf_i+0xf6>
 8006742:	2f08      	cmp	r7, #8
 8006744:	d109      	bne.n	800675a <_printf_i+0x126>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	07db      	lsls	r3, r3, #31
 800674a:	d506      	bpl.n	800675a <_printf_i+0x126>
 800674c:	6862      	ldr	r2, [r4, #4]
 800674e:	6923      	ldr	r3, [r4, #16]
 8006750:	429a      	cmp	r2, r3
 8006752:	dc02      	bgt.n	800675a <_printf_i+0x126>
 8006754:	2330      	movs	r3, #48	; 0x30
 8006756:	3e01      	subs	r6, #1
 8006758:	7033      	strb	r3, [r6, #0]
 800675a:	9b04      	ldr	r3, [sp, #16]
 800675c:	1b9b      	subs	r3, r3, r6
 800675e:	6123      	str	r3, [r4, #16]
 8006760:	9b07      	ldr	r3, [sp, #28]
 8006762:	0021      	movs	r1, r4
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	9805      	ldr	r0, [sp, #20]
 8006768:	9b06      	ldr	r3, [sp, #24]
 800676a:	aa09      	add	r2, sp, #36	; 0x24
 800676c:	f7ff fef2 	bl	8006554 <_printf_common>
 8006770:	3001      	adds	r0, #1
 8006772:	d147      	bne.n	8006804 <_printf_i+0x1d0>
 8006774:	2001      	movs	r0, #1
 8006776:	4240      	negs	r0, r0
 8006778:	b00b      	add	sp, #44	; 0x2c
 800677a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800677c:	2220      	movs	r2, #32
 800677e:	6809      	ldr	r1, [r1, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	2278      	movs	r2, #120	; 0x78
 8006786:	4932      	ldr	r1, [pc, #200]	; (8006850 <_printf_i+0x21c>)
 8006788:	9103      	str	r1, [sp, #12]
 800678a:	0021      	movs	r1, r4
 800678c:	3145      	adds	r1, #69	; 0x45
 800678e:	700a      	strb	r2, [r1, #0]
 8006790:	6819      	ldr	r1, [r3, #0]
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	c920      	ldmia	r1!, {r5}
 8006796:	0610      	lsls	r0, r2, #24
 8006798:	d402      	bmi.n	80067a0 <_printf_i+0x16c>
 800679a:	0650      	lsls	r0, r2, #25
 800679c:	d500      	bpl.n	80067a0 <_printf_i+0x16c>
 800679e:	b2ad      	uxth	r5, r5
 80067a0:	6019      	str	r1, [r3, #0]
 80067a2:	07d3      	lsls	r3, r2, #31
 80067a4:	d502      	bpl.n	80067ac <_printf_i+0x178>
 80067a6:	2320      	movs	r3, #32
 80067a8:	4313      	orrs	r3, r2
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	2710      	movs	r7, #16
 80067ae:	2d00      	cmp	r5, #0
 80067b0:	d1a9      	bne.n	8006706 <_printf_i+0xd2>
 80067b2:	2220      	movs	r2, #32
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	4393      	bics	r3, r2
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	e7a4      	b.n	8006706 <_printf_i+0xd2>
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	680d      	ldr	r5, [r1, #0]
 80067c0:	1d10      	adds	r0, r2, #4
 80067c2:	6949      	ldr	r1, [r1, #20]
 80067c4:	6018      	str	r0, [r3, #0]
 80067c6:	6813      	ldr	r3, [r2, #0]
 80067c8:	062e      	lsls	r6, r5, #24
 80067ca:	d501      	bpl.n	80067d0 <_printf_i+0x19c>
 80067cc:	6019      	str	r1, [r3, #0]
 80067ce:	e002      	b.n	80067d6 <_printf_i+0x1a2>
 80067d0:	066d      	lsls	r5, r5, #25
 80067d2:	d5fb      	bpl.n	80067cc <_printf_i+0x198>
 80067d4:	8019      	strh	r1, [r3, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	9e04      	ldr	r6, [sp, #16]
 80067da:	6123      	str	r3, [r4, #16]
 80067dc:	e7c0      	b.n	8006760 <_printf_i+0x12c>
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	1d11      	adds	r1, r2, #4
 80067e2:	6019      	str	r1, [r3, #0]
 80067e4:	6816      	ldr	r6, [r2, #0]
 80067e6:	2100      	movs	r1, #0
 80067e8:	0030      	movs	r0, r6
 80067ea:	6862      	ldr	r2, [r4, #4]
 80067ec:	f000 fa34 	bl	8006c58 <memchr>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d001      	beq.n	80067f8 <_printf_i+0x1c4>
 80067f4:	1b80      	subs	r0, r0, r6
 80067f6:	6060      	str	r0, [r4, #4]
 80067f8:	6863      	ldr	r3, [r4, #4]
 80067fa:	6123      	str	r3, [r4, #16]
 80067fc:	2300      	movs	r3, #0
 80067fe:	9a04      	ldr	r2, [sp, #16]
 8006800:	7013      	strb	r3, [r2, #0]
 8006802:	e7ad      	b.n	8006760 <_printf_i+0x12c>
 8006804:	0032      	movs	r2, r6
 8006806:	6923      	ldr	r3, [r4, #16]
 8006808:	9906      	ldr	r1, [sp, #24]
 800680a:	9805      	ldr	r0, [sp, #20]
 800680c:	9d07      	ldr	r5, [sp, #28]
 800680e:	47a8      	blx	r5
 8006810:	3001      	adds	r0, #1
 8006812:	d0af      	beq.n	8006774 <_printf_i+0x140>
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	079b      	lsls	r3, r3, #30
 8006818:	d415      	bmi.n	8006846 <_printf_i+0x212>
 800681a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681c:	68e0      	ldr	r0, [r4, #12]
 800681e:	4298      	cmp	r0, r3
 8006820:	daaa      	bge.n	8006778 <_printf_i+0x144>
 8006822:	0018      	movs	r0, r3
 8006824:	e7a8      	b.n	8006778 <_printf_i+0x144>
 8006826:	0022      	movs	r2, r4
 8006828:	2301      	movs	r3, #1
 800682a:	9906      	ldr	r1, [sp, #24]
 800682c:	9805      	ldr	r0, [sp, #20]
 800682e:	9e07      	ldr	r6, [sp, #28]
 8006830:	3219      	adds	r2, #25
 8006832:	47b0      	blx	r6
 8006834:	3001      	adds	r0, #1
 8006836:	d09d      	beq.n	8006774 <_printf_i+0x140>
 8006838:	3501      	adds	r5, #1
 800683a:	68e3      	ldr	r3, [r4, #12]
 800683c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	42ab      	cmp	r3, r5
 8006842:	dcf0      	bgt.n	8006826 <_printf_i+0x1f2>
 8006844:	e7e9      	b.n	800681a <_printf_i+0x1e6>
 8006846:	2500      	movs	r5, #0
 8006848:	e7f7      	b.n	800683a <_printf_i+0x206>
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	08007e3d 	.word	0x08007e3d
 8006850:	08007e4e 	.word	0x08007e4e

08006854 <_scanf_chars>:
 8006854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006856:	0015      	movs	r5, r2
 8006858:	688a      	ldr	r2, [r1, #8]
 800685a:	000c      	movs	r4, r1
 800685c:	9001      	str	r0, [sp, #4]
 800685e:	2a00      	cmp	r2, #0
 8006860:	d105      	bne.n	800686e <_scanf_chars+0x1a>
 8006862:	6989      	ldr	r1, [r1, #24]
 8006864:	3201      	adds	r2, #1
 8006866:	2900      	cmp	r1, #0
 8006868:	d000      	beq.n	800686c <_scanf_chars+0x18>
 800686a:	3a02      	subs	r2, #2
 800686c:	60a2      	str	r2, [r4, #8]
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	06d2      	lsls	r2, r2, #27
 8006872:	d403      	bmi.n	800687c <_scanf_chars+0x28>
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	1d11      	adds	r1, r2, #4
 8006878:	6019      	str	r1, [r3, #0]
 800687a:	6817      	ldr	r7, [r2, #0]
 800687c:	2600      	movs	r6, #0
 800687e:	69a0      	ldr	r0, [r4, #24]
 8006880:	2800      	cmp	r0, #0
 8006882:	d013      	beq.n	80068ac <_scanf_chars+0x58>
 8006884:	2801      	cmp	r0, #1
 8006886:	d108      	bne.n	800689a <_scanf_chars+0x46>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	6962      	ldr	r2, [r4, #20]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	5cd3      	ldrb	r3, [r2, r3]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <_scanf_chars+0x58>
 8006894:	2e00      	cmp	r6, #0
 8006896:	d038      	beq.n	800690a <_scanf_chars+0xb6>
 8006898:	e026      	b.n	80068e8 <_scanf_chars+0x94>
 800689a:	2802      	cmp	r0, #2
 800689c:	d124      	bne.n	80068e8 <_scanf_chars+0x94>
 800689e:	682b      	ldr	r3, [r5, #0]
 80068a0:	4a1a      	ldr	r2, [pc, #104]	; (800690c <_scanf_chars+0xb8>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	5cd3      	ldrb	r3, [r2, r3]
 80068a6:	2208      	movs	r2, #8
 80068a8:	4213      	tst	r3, r2
 80068aa:	d11d      	bne.n	80068e8 <_scanf_chars+0x94>
 80068ac:	2210      	movs	r2, #16
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	3601      	adds	r6, #1
 80068b2:	4213      	tst	r3, r2
 80068b4:	d103      	bne.n	80068be <_scanf_chars+0x6a>
 80068b6:	682b      	ldr	r3, [r5, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	703b      	strb	r3, [r7, #0]
 80068bc:	3701      	adds	r7, #1
 80068be:	682a      	ldr	r2, [r5, #0]
 80068c0:	686b      	ldr	r3, [r5, #4]
 80068c2:	3201      	adds	r2, #1
 80068c4:	602a      	str	r2, [r5, #0]
 80068c6:	68a2      	ldr	r2, [r4, #8]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	3a01      	subs	r2, #1
 80068cc:	606b      	str	r3, [r5, #4]
 80068ce:	60a2      	str	r2, [r4, #8]
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	d009      	beq.n	80068e8 <_scanf_chars+0x94>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	dcd2      	bgt.n	800687e <_scanf_chars+0x2a>
 80068d8:	23c0      	movs	r3, #192	; 0xc0
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	0029      	movs	r1, r5
 80068de:	58e3      	ldr	r3, [r4, r3]
 80068e0:	9801      	ldr	r0, [sp, #4]
 80068e2:	4798      	blx	r3
 80068e4:	2800      	cmp	r0, #0
 80068e6:	d0ca      	beq.n	800687e <_scanf_chars+0x2a>
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	2310      	movs	r3, #16
 80068ec:	0011      	movs	r1, r2
 80068ee:	4019      	ands	r1, r3
 80068f0:	421a      	tst	r2, r3
 80068f2:	d106      	bne.n	8006902 <_scanf_chars+0xae>
 80068f4:	68e3      	ldr	r3, [r4, #12]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60e3      	str	r3, [r4, #12]
 80068fa:	69a3      	ldr	r3, [r4, #24]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d000      	beq.n	8006902 <_scanf_chars+0xae>
 8006900:	7039      	strb	r1, [r7, #0]
 8006902:	2000      	movs	r0, #0
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	199b      	adds	r3, r3, r6
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800690c:	08007e7b 	.word	0x08007e7b

08006910 <_scanf_i>:
 8006910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006912:	b08b      	sub	sp, #44	; 0x2c
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	4b7a      	ldr	r3, [pc, #488]	; (8006b00 <_scanf_i+0x1f0>)
 8006918:	0016      	movs	r6, r2
 800691a:	9004      	str	r0, [sp, #16]
 800691c:	aa07      	add	r2, sp, #28
 800691e:	cba1      	ldmia	r3!, {r0, r5, r7}
 8006920:	c2a1      	stmia	r2!, {r0, r5, r7}
 8006922:	4a78      	ldr	r2, [pc, #480]	; (8006b04 <_scanf_i+0x1f4>)
 8006924:	698b      	ldr	r3, [r1, #24]
 8006926:	000c      	movs	r4, r1
 8006928:	9205      	str	r2, [sp, #20]
 800692a:	2b03      	cmp	r3, #3
 800692c:	d001      	beq.n	8006932 <_scanf_i+0x22>
 800692e:	4b76      	ldr	r3, [pc, #472]	; (8006b08 <_scanf_i+0x1f8>)
 8006930:	9305      	str	r3, [sp, #20]
 8006932:	22ae      	movs	r2, #174	; 0xae
 8006934:	2000      	movs	r0, #0
 8006936:	68a3      	ldr	r3, [r4, #8]
 8006938:	0052      	lsls	r2, r2, #1
 800693a:	1e59      	subs	r1, r3, #1
 800693c:	9003      	str	r0, [sp, #12]
 800693e:	4291      	cmp	r1, r2
 8006940:	d905      	bls.n	800694e <_scanf_i+0x3e>
 8006942:	3b5e      	subs	r3, #94	; 0x5e
 8006944:	3bff      	subs	r3, #255	; 0xff
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	235e      	movs	r3, #94	; 0x5e
 800694a:	33ff      	adds	r3, #255	; 0xff
 800694c:	60a3      	str	r3, [r4, #8]
 800694e:	0023      	movs	r3, r4
 8006950:	331c      	adds	r3, #28
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	23d0      	movs	r3, #208	; 0xd0
 8006956:	2700      	movs	r7, #0
 8006958:	6822      	ldr	r2, [r4, #0]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	4313      	orrs	r3, r2
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	9b00      	ldr	r3, [sp, #0]
 8006962:	9302      	str	r3, [sp, #8]
 8006964:	6833      	ldr	r3, [r6, #0]
 8006966:	a807      	add	r0, sp, #28
 8006968:	7819      	ldrb	r1, [r3, #0]
 800696a:	00bb      	lsls	r3, r7, #2
 800696c:	2202      	movs	r2, #2
 800696e:	5818      	ldr	r0, [r3, r0]
 8006970:	f000 f972 	bl	8006c58 <memchr>
 8006974:	2800      	cmp	r0, #0
 8006976:	d02a      	beq.n	80069ce <_scanf_i+0xbe>
 8006978:	2f01      	cmp	r7, #1
 800697a:	d161      	bne.n	8006a40 <_scanf_i+0x130>
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d106      	bne.n	8006990 <_scanf_i+0x80>
 8006982:	3308      	adds	r3, #8
 8006984:	6822      	ldr	r2, [r4, #0]
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	33f9      	adds	r3, #249	; 0xf9
 800698a:	33ff      	adds	r3, #255	; 0xff
 800698c:	4313      	orrs	r3, r2
 800698e:	6023      	str	r3, [r4, #0]
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	4a5e      	ldr	r2, [pc, #376]	; (8006b0c <_scanf_i+0x1fc>)
 8006994:	4013      	ands	r3, r2
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	68a3      	ldr	r3, [r4, #8]
 800699a:	1e5a      	subs	r2, r3, #1
 800699c:	60a2      	str	r2, [r4, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d015      	beq.n	80069ce <_scanf_i+0xbe>
 80069a2:	6833      	ldr	r3, [r6, #0]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	6032      	str	r2, [r6, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	9a02      	ldr	r2, [sp, #8]
 80069ac:	7013      	strb	r3, [r2, #0]
 80069ae:	6873      	ldr	r3, [r6, #4]
 80069b0:	1c55      	adds	r5, r2, #1
 80069b2:	3b01      	subs	r3, #1
 80069b4:	6073      	str	r3, [r6, #4]
 80069b6:	9502      	str	r5, [sp, #8]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dc08      	bgt.n	80069ce <_scanf_i+0xbe>
 80069bc:	23c0      	movs	r3, #192	; 0xc0
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	0031      	movs	r1, r6
 80069c2:	58e3      	ldr	r3, [r4, r3]
 80069c4:	9804      	ldr	r0, [sp, #16]
 80069c6:	4798      	blx	r3
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d000      	beq.n	80069ce <_scanf_i+0xbe>
 80069cc:	e080      	b.n	8006ad0 <_scanf_i+0x1c0>
 80069ce:	3701      	adds	r7, #1
 80069d0:	2f03      	cmp	r7, #3
 80069d2:	d1c7      	bne.n	8006964 <_scanf_i+0x54>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <_scanf_i+0xce>
 80069da:	330a      	adds	r3, #10
 80069dc:	6063      	str	r3, [r4, #4]
 80069de:	2110      	movs	r1, #16
 80069e0:	2700      	movs	r7, #0
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	6960      	ldr	r0, [r4, #20]
 80069e6:	1ac9      	subs	r1, r1, r3
 80069e8:	4b49      	ldr	r3, [pc, #292]	; (8006b10 <_scanf_i+0x200>)
 80069ea:	18c9      	adds	r1, r1, r3
 80069ec:	f000 f894 	bl	8006b18 <__sccl>
 80069f0:	9d02      	ldr	r5, [sp, #8]
 80069f2:	68a3      	ldr	r3, [r4, #8]
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	9302      	str	r3, [sp, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d040      	beq.n	8006a7e <_scanf_i+0x16e>
 80069fc:	6831      	ldr	r1, [r6, #0]
 80069fe:	6963      	ldr	r3, [r4, #20]
 8006a00:	780a      	ldrb	r2, [r1, #0]
 8006a02:	5c9b      	ldrb	r3, [r3, r2]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d03a      	beq.n	8006a7e <_scanf_i+0x16e>
 8006a08:	2a30      	cmp	r2, #48	; 0x30
 8006a0a:	d129      	bne.n	8006a60 <_scanf_i+0x150>
 8006a0c:	2380      	movs	r3, #128	; 0x80
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	4218      	tst	r0, r3
 8006a12:	d025      	beq.n	8006a60 <_scanf_i+0x150>
 8006a14:	9b03      	ldr	r3, [sp, #12]
 8006a16:	3701      	adds	r7, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <_scanf_i+0x118>
 8006a1c:	001a      	movs	r2, r3
 8006a1e:	9b02      	ldr	r3, [sp, #8]
 8006a20:	3a01      	subs	r2, #1
 8006a22:	3301      	adds	r3, #1
 8006a24:	9203      	str	r2, [sp, #12]
 8006a26:	60a3      	str	r3, [r4, #8]
 8006a28:	6873      	ldr	r3, [r6, #4]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	6073      	str	r3, [r6, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	dd1d      	ble.n	8006a6e <_scanf_i+0x15e>
 8006a32:	6833      	ldr	r3, [r6, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	6033      	str	r3, [r6, #0]
 8006a38:	68a3      	ldr	r3, [r4, #8]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	60a3      	str	r3, [r4, #8]
 8006a3e:	e7d8      	b.n	80069f2 <_scanf_i+0xe2>
 8006a40:	2f02      	cmp	r7, #2
 8006a42:	d1a9      	bne.n	8006998 <_scanf_i+0x88>
 8006a44:	21c0      	movs	r1, #192	; 0xc0
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	6822      	ldr	r2, [r4, #0]
 8006a4a:	00c9      	lsls	r1, r1, #3
 8006a4c:	4011      	ands	r1, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4299      	cmp	r1, r3
 8006a52:	d1bf      	bne.n	80069d4 <_scanf_i+0xc4>
 8006a54:	3bf1      	subs	r3, #241	; 0xf1
 8006a56:	3bff      	subs	r3, #255	; 0xff
 8006a58:	6063      	str	r3, [r4, #4]
 8006a5a:	33f0      	adds	r3, #240	; 0xf0
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	e79a      	b.n	8006996 <_scanf_i+0x86>
 8006a60:	4b2c      	ldr	r3, [pc, #176]	; (8006b14 <_scanf_i+0x204>)
 8006a62:	4003      	ands	r3, r0
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	780b      	ldrb	r3, [r1, #0]
 8006a68:	702b      	strb	r3, [r5, #0]
 8006a6a:	3501      	adds	r5, #1
 8006a6c:	e7dc      	b.n	8006a28 <_scanf_i+0x118>
 8006a6e:	23c0      	movs	r3, #192	; 0xc0
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	0031      	movs	r1, r6
 8006a74:	58e3      	ldr	r3, [r4, r3]
 8006a76:	9804      	ldr	r0, [sp, #16]
 8006a78:	4798      	blx	r3
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d0dc      	beq.n	8006a38 <_scanf_i+0x128>
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	05db      	lsls	r3, r3, #23
 8006a82:	d50e      	bpl.n	8006aa2 <_scanf_i+0x192>
 8006a84:	9b00      	ldr	r3, [sp, #0]
 8006a86:	429d      	cmp	r5, r3
 8006a88:	d907      	bls.n	8006a9a <_scanf_i+0x18a>
 8006a8a:	23be      	movs	r3, #190	; 0xbe
 8006a8c:	3d01      	subs	r5, #1
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	0032      	movs	r2, r6
 8006a92:	7829      	ldrb	r1, [r5, #0]
 8006a94:	58e3      	ldr	r3, [r4, r3]
 8006a96:	9804      	ldr	r0, [sp, #16]
 8006a98:	4798      	blx	r3
 8006a9a:	9b00      	ldr	r3, [sp, #0]
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	429d      	cmp	r5, r3
 8006aa0:	d029      	beq.n	8006af6 <_scanf_i+0x1e6>
 8006aa2:	6821      	ldr	r1, [r4, #0]
 8006aa4:	2310      	movs	r3, #16
 8006aa6:	000a      	movs	r2, r1
 8006aa8:	401a      	ands	r2, r3
 8006aaa:	4219      	tst	r1, r3
 8006aac:	d11c      	bne.n	8006ae8 <_scanf_i+0x1d8>
 8006aae:	702a      	strb	r2, [r5, #0]
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	9900      	ldr	r1, [sp, #0]
 8006ab4:	9804      	ldr	r0, [sp, #16]
 8006ab6:	9e05      	ldr	r6, [sp, #20]
 8006ab8:	47b0      	blx	r6
 8006aba:	9b01      	ldr	r3, [sp, #4]
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	0691      	lsls	r1, r2, #26
 8006ac2:	d507      	bpl.n	8006ad4 <_scanf_i+0x1c4>
 8006ac4:	9901      	ldr	r1, [sp, #4]
 8006ac6:	1d1a      	adds	r2, r3, #4
 8006ac8:	600a      	str	r2, [r1, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6018      	str	r0, [r3, #0]
 8006ace:	e008      	b.n	8006ae2 <_scanf_i+0x1d2>
 8006ad0:	2700      	movs	r7, #0
 8006ad2:	e7d4      	b.n	8006a7e <_scanf_i+0x16e>
 8006ad4:	1d19      	adds	r1, r3, #4
 8006ad6:	07d6      	lsls	r6, r2, #31
 8006ad8:	d50f      	bpl.n	8006afa <_scanf_i+0x1ea>
 8006ada:	9a01      	ldr	r2, [sp, #4]
 8006adc:	6011      	str	r1, [r2, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	8018      	strh	r0, [r3, #0]
 8006ae2:	68e3      	ldr	r3, [r4, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60e3      	str	r3, [r4, #12]
 8006ae8:	2000      	movs	r0, #0
 8006aea:	9b00      	ldr	r3, [sp, #0]
 8006aec:	1aed      	subs	r5, r5, r3
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	19ed      	adds	r5, r5, r7
 8006af2:	195b      	adds	r3, r3, r5
 8006af4:	6123      	str	r3, [r4, #16]
 8006af6:	b00b      	add	sp, #44	; 0x2c
 8006af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006afa:	9a01      	ldr	r2, [sp, #4]
 8006afc:	6011      	str	r1, [r2, #0]
 8006afe:	e7e4      	b.n	8006aca <_scanf_i+0x1ba>
 8006b00:	08007da8 	.word	0x08007da8
 8006b04:	08006dd9 	.word	0x08006dd9
 8006b08:	08006ee5 	.word	0x08006ee5
 8006b0c:	fffffaff 	.word	0xfffffaff
 8006b10:	08007e5f 	.word	0x08007e5f
 8006b14:	fffff6ff 	.word	0xfffff6ff

08006b18 <__sccl>:
 8006b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1a:	780b      	ldrb	r3, [r1, #0]
 8006b1c:	0004      	movs	r4, r0
 8006b1e:	2b5e      	cmp	r3, #94	; 0x5e
 8006b20:	d019      	beq.n	8006b56 <__sccl+0x3e>
 8006b22:	2200      	movs	r2, #0
 8006b24:	1c4d      	adds	r5, r1, #1
 8006b26:	0021      	movs	r1, r4
 8006b28:	1c60      	adds	r0, r4, #1
 8006b2a:	30ff      	adds	r0, #255	; 0xff
 8006b2c:	700a      	strb	r2, [r1, #0]
 8006b2e:	3101      	adds	r1, #1
 8006b30:	4281      	cmp	r1, r0
 8006b32:	d1fb      	bne.n	8006b2c <__sccl+0x14>
 8006b34:	1e68      	subs	r0, r5, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00c      	beq.n	8006b54 <__sccl+0x3c>
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	262d      	movs	r6, #45	; 0x2d
 8006b3e:	404a      	eors	r2, r1
 8006b40:	0028      	movs	r0, r5
 8006b42:	54e2      	strb	r2, [r4, r3]
 8006b44:	7801      	ldrb	r1, [r0, #0]
 8006b46:	1c45      	adds	r5, r0, #1
 8006b48:	292d      	cmp	r1, #45	; 0x2d
 8006b4a:	d00c      	beq.n	8006b66 <__sccl+0x4e>
 8006b4c:	295d      	cmp	r1, #93	; 0x5d
 8006b4e:	d01d      	beq.n	8006b8c <__sccl+0x74>
 8006b50:	2900      	cmp	r1, #0
 8006b52:	d104      	bne.n	8006b5e <__sccl+0x46>
 8006b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b56:	2201      	movs	r2, #1
 8006b58:	784b      	ldrb	r3, [r1, #1]
 8006b5a:	1c8d      	adds	r5, r1, #2
 8006b5c:	e7e3      	b.n	8006b26 <__sccl+0xe>
 8006b5e:	000b      	movs	r3, r1
 8006b60:	e7ee      	b.n	8006b40 <__sccl+0x28>
 8006b62:	0033      	movs	r3, r6
 8006b64:	e7ec      	b.n	8006b40 <__sccl+0x28>
 8006b66:	7841      	ldrb	r1, [r0, #1]
 8006b68:	295d      	cmp	r1, #93	; 0x5d
 8006b6a:	d0fa      	beq.n	8006b62 <__sccl+0x4a>
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	dcf8      	bgt.n	8006b62 <__sccl+0x4a>
 8006b70:	001d      	movs	r5, r3
 8006b72:	3002      	adds	r0, #2
 8006b74:	3501      	adds	r5, #1
 8006b76:	5562      	strb	r2, [r4, r5]
 8006b78:	42a9      	cmp	r1, r5
 8006b7a:	dcfb      	bgt.n	8006b74 <__sccl+0x5c>
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	1c5f      	adds	r7, r3, #1
 8006b80:	428b      	cmp	r3, r1
 8006b82:	da01      	bge.n	8006b88 <__sccl+0x70>
 8006b84:	1acd      	subs	r5, r1, r3
 8006b86:	3d01      	subs	r5, #1
 8006b88:	197b      	adds	r3, r7, r5
 8006b8a:	e7db      	b.n	8006b44 <__sccl+0x2c>
 8006b8c:	0028      	movs	r0, r5
 8006b8e:	e7e1      	b.n	8006b54 <__sccl+0x3c>

08006b90 <__submore>:
 8006b90:	000b      	movs	r3, r1
 8006b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b94:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8006b96:	3344      	adds	r3, #68	; 0x44
 8006b98:	000c      	movs	r4, r1
 8006b9a:	429d      	cmp	r5, r3
 8006b9c:	d11c      	bne.n	8006bd8 <__submore+0x48>
 8006b9e:	2680      	movs	r6, #128	; 0x80
 8006ba0:	00f6      	lsls	r6, r6, #3
 8006ba2:	0031      	movs	r1, r6
 8006ba4:	f7ff f91c 	bl	8005de0 <_malloc_r>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	d102      	bne.n	8006bb2 <__submore+0x22>
 8006bac:	2001      	movs	r0, #1
 8006bae:	4240      	negs	r0, r0
 8006bb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bb2:	0023      	movs	r3, r4
 8006bb4:	6360      	str	r0, [r4, #52]	; 0x34
 8006bb6:	63a6      	str	r6, [r4, #56]	; 0x38
 8006bb8:	3346      	adds	r3, #70	; 0x46
 8006bba:	781a      	ldrb	r2, [r3, #0]
 8006bbc:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <__submore+0x70>)
 8006bbe:	54c2      	strb	r2, [r0, r3]
 8006bc0:	0023      	movs	r3, r4
 8006bc2:	3345      	adds	r3, #69	; 0x45
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <__submore+0x74>)
 8006bc8:	54c2      	strb	r2, [r0, r3]
 8006bca:	782a      	ldrb	r2, [r5, #0]
 8006bcc:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <__submore+0x78>)
 8006bce:	54c2      	strb	r2, [r0, r3]
 8006bd0:	18c0      	adds	r0, r0, r3
 8006bd2:	6020      	str	r0, [r4, #0]
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	e7eb      	b.n	8006bb0 <__submore+0x20>
 8006bd8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8006bda:	0029      	movs	r1, r5
 8006bdc:	0073      	lsls	r3, r6, #1
 8006bde:	001a      	movs	r2, r3
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	f000 f844 	bl	8006c6e <_realloc_r>
 8006be6:	1e05      	subs	r5, r0, #0
 8006be8:	d0e0      	beq.n	8006bac <__submore+0x1c>
 8006bea:	1987      	adds	r7, r0, r6
 8006bec:	0001      	movs	r1, r0
 8006bee:	0032      	movs	r2, r6
 8006bf0:	0038      	movs	r0, r7
 8006bf2:	f7ff f87f 	bl	8005cf4 <memcpy>
 8006bf6:	9b01      	ldr	r3, [sp, #4]
 8006bf8:	6027      	str	r7, [r4, #0]
 8006bfa:	6365      	str	r5, [r4, #52]	; 0x34
 8006bfc:	63a3      	str	r3, [r4, #56]	; 0x38
 8006bfe:	e7e9      	b.n	8006bd4 <__submore+0x44>
 8006c00:	000003ff 	.word	0x000003ff
 8006c04:	000003fe 	.word	0x000003fe
 8006c08:	000003fd 	.word	0x000003fd

08006c0c <memmove>:
 8006c0c:	b510      	push	{r4, lr}
 8006c0e:	4288      	cmp	r0, r1
 8006c10:	d902      	bls.n	8006c18 <memmove+0xc>
 8006c12:	188b      	adds	r3, r1, r2
 8006c14:	4298      	cmp	r0, r3
 8006c16:	d303      	bcc.n	8006c20 <memmove+0x14>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	e007      	b.n	8006c2c <memmove+0x20>
 8006c1c:	5c8b      	ldrb	r3, [r1, r2]
 8006c1e:	5483      	strb	r3, [r0, r2]
 8006c20:	3a01      	subs	r2, #1
 8006c22:	d2fb      	bcs.n	8006c1c <memmove+0x10>
 8006c24:	bd10      	pop	{r4, pc}
 8006c26:	5ccc      	ldrb	r4, [r1, r3]
 8006c28:	54c4      	strb	r4, [r0, r3]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d1fa      	bne.n	8006c26 <memmove+0x1a>
 8006c30:	e7f8      	b.n	8006c24 <memmove+0x18>
	...

08006c34 <_sbrk_r>:
 8006c34:	2300      	movs	r3, #0
 8006c36:	b570      	push	{r4, r5, r6, lr}
 8006c38:	4d06      	ldr	r5, [pc, #24]	; (8006c54 <_sbrk_r+0x20>)
 8006c3a:	0004      	movs	r4, r0
 8006c3c:	0008      	movs	r0, r1
 8006c3e:	602b      	str	r3, [r5, #0]
 8006c40:	f7fc fa20 	bl	8003084 <_sbrk>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	d103      	bne.n	8006c50 <_sbrk_r+0x1c>
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d000      	beq.n	8006c50 <_sbrk_r+0x1c>
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	20000588 	.word	0x20000588

08006c58 <memchr>:
 8006c58:	b2c9      	uxtb	r1, r1
 8006c5a:	1882      	adds	r2, r0, r2
 8006c5c:	4290      	cmp	r0, r2
 8006c5e:	d101      	bne.n	8006c64 <memchr+0xc>
 8006c60:	2000      	movs	r0, #0
 8006c62:	4770      	bx	lr
 8006c64:	7803      	ldrb	r3, [r0, #0]
 8006c66:	428b      	cmp	r3, r1
 8006c68:	d0fb      	beq.n	8006c62 <memchr+0xa>
 8006c6a:	3001      	adds	r0, #1
 8006c6c:	e7f6      	b.n	8006c5c <memchr+0x4>

08006c6e <_realloc_r>:
 8006c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c70:	0007      	movs	r7, r0
 8006c72:	000e      	movs	r6, r1
 8006c74:	0014      	movs	r4, r2
 8006c76:	2900      	cmp	r1, #0
 8006c78:	d105      	bne.n	8006c86 <_realloc_r+0x18>
 8006c7a:	0011      	movs	r1, r2
 8006c7c:	f7ff f8b0 	bl	8005de0 <_malloc_r>
 8006c80:	0005      	movs	r5, r0
 8006c82:	0028      	movs	r0, r5
 8006c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c86:	2a00      	cmp	r2, #0
 8006c88:	d103      	bne.n	8006c92 <_realloc_r+0x24>
 8006c8a:	f7ff f83d 	bl	8005d08 <_free_r>
 8006c8e:	0025      	movs	r5, r4
 8006c90:	e7f7      	b.n	8006c82 <_realloc_r+0x14>
 8006c92:	f000 f92b 	bl	8006eec <_malloc_usable_size_r>
 8006c96:	9001      	str	r0, [sp, #4]
 8006c98:	4284      	cmp	r4, r0
 8006c9a:	d803      	bhi.n	8006ca4 <_realloc_r+0x36>
 8006c9c:	0035      	movs	r5, r6
 8006c9e:	0843      	lsrs	r3, r0, #1
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d3ee      	bcc.n	8006c82 <_realloc_r+0x14>
 8006ca4:	0021      	movs	r1, r4
 8006ca6:	0038      	movs	r0, r7
 8006ca8:	f7ff f89a 	bl	8005de0 <_malloc_r>
 8006cac:	1e05      	subs	r5, r0, #0
 8006cae:	d0e8      	beq.n	8006c82 <_realloc_r+0x14>
 8006cb0:	9b01      	ldr	r3, [sp, #4]
 8006cb2:	0022      	movs	r2, r4
 8006cb4:	429c      	cmp	r4, r3
 8006cb6:	d900      	bls.n	8006cba <_realloc_r+0x4c>
 8006cb8:	001a      	movs	r2, r3
 8006cba:	0031      	movs	r1, r6
 8006cbc:	0028      	movs	r0, r5
 8006cbe:	f7ff f819 	bl	8005cf4 <memcpy>
 8006cc2:	0031      	movs	r1, r6
 8006cc4:	0038      	movs	r0, r7
 8006cc6:	f7ff f81f 	bl	8005d08 <_free_r>
 8006cca:	e7da      	b.n	8006c82 <_realloc_r+0x14>

08006ccc <_strtol_l.constprop.0>:
 8006ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	001e      	movs	r6, r3
 8006cd2:	9005      	str	r0, [sp, #20]
 8006cd4:	9101      	str	r1, [sp, #4]
 8006cd6:	9202      	str	r2, [sp, #8]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d048      	beq.n	8006d6e <_strtol_l.constprop.0+0xa2>
 8006cdc:	000b      	movs	r3, r1
 8006cde:	2e24      	cmp	r6, #36	; 0x24
 8006ce0:	d845      	bhi.n	8006d6e <_strtol_l.constprop.0+0xa2>
 8006ce2:	4a3b      	ldr	r2, [pc, #236]	; (8006dd0 <_strtol_l.constprop.0+0x104>)
 8006ce4:	2108      	movs	r1, #8
 8006ce6:	4694      	mov	ip, r2
 8006ce8:	001a      	movs	r2, r3
 8006cea:	4660      	mov	r0, ip
 8006cec:	7814      	ldrb	r4, [r2, #0]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	5d00      	ldrb	r0, [r0, r4]
 8006cf2:	001d      	movs	r5, r3
 8006cf4:	0007      	movs	r7, r0
 8006cf6:	400f      	ands	r7, r1
 8006cf8:	4208      	tst	r0, r1
 8006cfa:	d1f5      	bne.n	8006ce8 <_strtol_l.constprop.0+0x1c>
 8006cfc:	2c2d      	cmp	r4, #45	; 0x2d
 8006cfe:	d13d      	bne.n	8006d7c <_strtol_l.constprop.0+0xb0>
 8006d00:	2701      	movs	r7, #1
 8006d02:	781c      	ldrb	r4, [r3, #0]
 8006d04:	1c95      	adds	r5, r2, #2
 8006d06:	2e00      	cmp	r6, #0
 8006d08:	d05e      	beq.n	8006dc8 <_strtol_l.constprop.0+0xfc>
 8006d0a:	2e10      	cmp	r6, #16
 8006d0c:	d109      	bne.n	8006d22 <_strtol_l.constprop.0+0x56>
 8006d0e:	2c30      	cmp	r4, #48	; 0x30
 8006d10:	d107      	bne.n	8006d22 <_strtol_l.constprop.0+0x56>
 8006d12:	2220      	movs	r2, #32
 8006d14:	782b      	ldrb	r3, [r5, #0]
 8006d16:	4393      	bics	r3, r2
 8006d18:	2b58      	cmp	r3, #88	; 0x58
 8006d1a:	d150      	bne.n	8006dbe <_strtol_l.constprop.0+0xf2>
 8006d1c:	2610      	movs	r6, #16
 8006d1e:	786c      	ldrb	r4, [r5, #1]
 8006d20:	3502      	adds	r5, #2
 8006d22:	4b2c      	ldr	r3, [pc, #176]	; (8006dd4 <_strtol_l.constprop.0+0x108>)
 8006d24:	0031      	movs	r1, r6
 8006d26:	18fb      	adds	r3, r7, r3
 8006d28:	0018      	movs	r0, r3
 8006d2a:	9303      	str	r3, [sp, #12]
 8006d2c:	f7f9 fa82 	bl	8000234 <__aeabi_uidivmod>
 8006d30:	2200      	movs	r2, #0
 8006d32:	9104      	str	r1, [sp, #16]
 8006d34:	2101      	movs	r1, #1
 8006d36:	4684      	mov	ip, r0
 8006d38:	0010      	movs	r0, r2
 8006d3a:	4249      	negs	r1, r1
 8006d3c:	0023      	movs	r3, r4
 8006d3e:	3b30      	subs	r3, #48	; 0x30
 8006d40:	2b09      	cmp	r3, #9
 8006d42:	d903      	bls.n	8006d4c <_strtol_l.constprop.0+0x80>
 8006d44:	3b11      	subs	r3, #17
 8006d46:	2b19      	cmp	r3, #25
 8006d48:	d81d      	bhi.n	8006d86 <_strtol_l.constprop.0+0xba>
 8006d4a:	330a      	adds	r3, #10
 8006d4c:	429e      	cmp	r6, r3
 8006d4e:	dd1e      	ble.n	8006d8e <_strtol_l.constprop.0+0xc2>
 8006d50:	1c54      	adds	r4, r2, #1
 8006d52:	d009      	beq.n	8006d68 <_strtol_l.constprop.0+0x9c>
 8006d54:	000a      	movs	r2, r1
 8006d56:	4584      	cmp	ip, r0
 8006d58:	d306      	bcc.n	8006d68 <_strtol_l.constprop.0+0x9c>
 8006d5a:	d102      	bne.n	8006d62 <_strtol_l.constprop.0+0x96>
 8006d5c:	9c04      	ldr	r4, [sp, #16]
 8006d5e:	429c      	cmp	r4, r3
 8006d60:	db02      	blt.n	8006d68 <_strtol_l.constprop.0+0x9c>
 8006d62:	2201      	movs	r2, #1
 8006d64:	4370      	muls	r0, r6
 8006d66:	1818      	adds	r0, r3, r0
 8006d68:	782c      	ldrb	r4, [r5, #0]
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	e7e6      	b.n	8006d3c <_strtol_l.constprop.0+0x70>
 8006d6e:	f7fe ff8d 	bl	8005c8c <__errno>
 8006d72:	2316      	movs	r3, #22
 8006d74:	6003      	str	r3, [r0, #0]
 8006d76:	2000      	movs	r0, #0
 8006d78:	b007      	add	sp, #28
 8006d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d7c:	2c2b      	cmp	r4, #43	; 0x2b
 8006d7e:	d1c2      	bne.n	8006d06 <_strtol_l.constprop.0+0x3a>
 8006d80:	781c      	ldrb	r4, [r3, #0]
 8006d82:	1c95      	adds	r5, r2, #2
 8006d84:	e7bf      	b.n	8006d06 <_strtol_l.constprop.0+0x3a>
 8006d86:	0023      	movs	r3, r4
 8006d88:	3b61      	subs	r3, #97	; 0x61
 8006d8a:	2b19      	cmp	r3, #25
 8006d8c:	d9dd      	bls.n	8006d4a <_strtol_l.constprop.0+0x7e>
 8006d8e:	1c53      	adds	r3, r2, #1
 8006d90:	d109      	bne.n	8006da6 <_strtol_l.constprop.0+0xda>
 8006d92:	2322      	movs	r3, #34	; 0x22
 8006d94:	9a05      	ldr	r2, [sp, #20]
 8006d96:	9803      	ldr	r0, [sp, #12]
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	9b02      	ldr	r3, [sp, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0eb      	beq.n	8006d78 <_strtol_l.constprop.0+0xac>
 8006da0:	1e6b      	subs	r3, r5, #1
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	e007      	b.n	8006db6 <_strtol_l.constprop.0+0xea>
 8006da6:	2f00      	cmp	r7, #0
 8006da8:	d000      	beq.n	8006dac <_strtol_l.constprop.0+0xe0>
 8006daa:	4240      	negs	r0, r0
 8006dac:	9b02      	ldr	r3, [sp, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0e2      	beq.n	8006d78 <_strtol_l.constprop.0+0xac>
 8006db2:	2a00      	cmp	r2, #0
 8006db4:	d1f4      	bne.n	8006da0 <_strtol_l.constprop.0+0xd4>
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	9a01      	ldr	r2, [sp, #4]
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e7dc      	b.n	8006d78 <_strtol_l.constprop.0+0xac>
 8006dbe:	2430      	movs	r4, #48	; 0x30
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	d1ae      	bne.n	8006d22 <_strtol_l.constprop.0+0x56>
 8006dc4:	3608      	adds	r6, #8
 8006dc6:	e7ac      	b.n	8006d22 <_strtol_l.constprop.0+0x56>
 8006dc8:	2c30      	cmp	r4, #48	; 0x30
 8006dca:	d0a2      	beq.n	8006d12 <_strtol_l.constprop.0+0x46>
 8006dcc:	260a      	movs	r6, #10
 8006dce:	e7a8      	b.n	8006d22 <_strtol_l.constprop.0+0x56>
 8006dd0:	08007e7b 	.word	0x08007e7b
 8006dd4:	7fffffff 	.word	0x7fffffff

08006dd8 <_strtol_r>:
 8006dd8:	b510      	push	{r4, lr}
 8006dda:	f7ff ff77 	bl	8006ccc <_strtol_l.constprop.0>
 8006dde:	bd10      	pop	{r4, pc}

08006de0 <_strtoul_l.constprop.0>:
 8006de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006de2:	b087      	sub	sp, #28
 8006de4:	9202      	str	r2, [sp, #8]
 8006de6:	4a3e      	ldr	r2, [pc, #248]	; (8006ee0 <_strtoul_l.constprop.0+0x100>)
 8006de8:	001e      	movs	r6, r3
 8006dea:	9101      	str	r1, [sp, #4]
 8006dec:	000b      	movs	r3, r1
 8006dee:	4694      	mov	ip, r2
 8006df0:	2108      	movs	r1, #8
 8006df2:	9005      	str	r0, [sp, #20]
 8006df4:	001a      	movs	r2, r3
 8006df6:	4660      	mov	r0, ip
 8006df8:	7814      	ldrb	r4, [r2, #0]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	5d00      	ldrb	r0, [r0, r4]
 8006dfe:	001d      	movs	r5, r3
 8006e00:	0007      	movs	r7, r0
 8006e02:	400f      	ands	r7, r1
 8006e04:	4208      	tst	r0, r1
 8006e06:	d1f5      	bne.n	8006df4 <_strtoul_l.constprop.0+0x14>
 8006e08:	2c2d      	cmp	r4, #45	; 0x2d
 8006e0a:	d13d      	bne.n	8006e88 <_strtoul_l.constprop.0+0xa8>
 8006e0c:	2701      	movs	r7, #1
 8006e0e:	781c      	ldrb	r4, [r3, #0]
 8006e10:	1c95      	adds	r5, r2, #2
 8006e12:	2e00      	cmp	r6, #0
 8006e14:	d05f      	beq.n	8006ed6 <_strtoul_l.constprop.0+0xf6>
 8006e16:	2e10      	cmp	r6, #16
 8006e18:	d109      	bne.n	8006e2e <_strtoul_l.constprop.0+0x4e>
 8006e1a:	2c30      	cmp	r4, #48	; 0x30
 8006e1c:	d107      	bne.n	8006e2e <_strtoul_l.constprop.0+0x4e>
 8006e1e:	2220      	movs	r2, #32
 8006e20:	782b      	ldrb	r3, [r5, #0]
 8006e22:	4393      	bics	r3, r2
 8006e24:	2b58      	cmp	r3, #88	; 0x58
 8006e26:	d151      	bne.n	8006ecc <_strtoul_l.constprop.0+0xec>
 8006e28:	2610      	movs	r6, #16
 8006e2a:	786c      	ldrb	r4, [r5, #1]
 8006e2c:	3502      	adds	r5, #2
 8006e2e:	2001      	movs	r0, #1
 8006e30:	0031      	movs	r1, r6
 8006e32:	4240      	negs	r0, r0
 8006e34:	f7f9 f978 	bl	8000128 <__udivsi3>
 8006e38:	9003      	str	r0, [sp, #12]
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	0031      	movs	r1, r6
 8006e3e:	4240      	negs	r0, r0
 8006e40:	f7f9 f9f8 	bl	8000234 <__aeabi_uidivmod>
 8006e44:	2300      	movs	r3, #0
 8006e46:	2201      	movs	r2, #1
 8006e48:	9104      	str	r1, [sp, #16]
 8006e4a:	2101      	movs	r1, #1
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	4694      	mov	ip, r2
 8006e50:	4249      	negs	r1, r1
 8006e52:	0022      	movs	r2, r4
 8006e54:	3a30      	subs	r2, #48	; 0x30
 8006e56:	2a09      	cmp	r2, #9
 8006e58:	d903      	bls.n	8006e62 <_strtoul_l.constprop.0+0x82>
 8006e5a:	3a11      	subs	r2, #17
 8006e5c:	2a19      	cmp	r2, #25
 8006e5e:	d818      	bhi.n	8006e92 <_strtoul_l.constprop.0+0xb2>
 8006e60:	320a      	adds	r2, #10
 8006e62:	4296      	cmp	r6, r2
 8006e64:	dd19      	ble.n	8006e9a <_strtoul_l.constprop.0+0xba>
 8006e66:	1c5c      	adds	r4, r3, #1
 8006e68:	d00b      	beq.n	8006e82 <_strtoul_l.constprop.0+0xa2>
 8006e6a:	9c03      	ldr	r4, [sp, #12]
 8006e6c:	000b      	movs	r3, r1
 8006e6e:	4284      	cmp	r4, r0
 8006e70:	d307      	bcc.n	8006e82 <_strtoul_l.constprop.0+0xa2>
 8006e72:	d103      	bne.n	8006e7c <_strtoul_l.constprop.0+0x9c>
 8006e74:	9c04      	ldr	r4, [sp, #16]
 8006e76:	000b      	movs	r3, r1
 8006e78:	4294      	cmp	r4, r2
 8006e7a:	db02      	blt.n	8006e82 <_strtoul_l.constprop.0+0xa2>
 8006e7c:	4663      	mov	r3, ip
 8006e7e:	4370      	muls	r0, r6
 8006e80:	1810      	adds	r0, r2, r0
 8006e82:	782c      	ldrb	r4, [r5, #0]
 8006e84:	3501      	adds	r5, #1
 8006e86:	e7e4      	b.n	8006e52 <_strtoul_l.constprop.0+0x72>
 8006e88:	2c2b      	cmp	r4, #43	; 0x2b
 8006e8a:	d1c2      	bne.n	8006e12 <_strtoul_l.constprop.0+0x32>
 8006e8c:	781c      	ldrb	r4, [r3, #0]
 8006e8e:	1c95      	adds	r5, r2, #2
 8006e90:	e7bf      	b.n	8006e12 <_strtoul_l.constprop.0+0x32>
 8006e92:	0022      	movs	r2, r4
 8006e94:	3a61      	subs	r2, #97	; 0x61
 8006e96:	2a19      	cmp	r2, #25
 8006e98:	d9e2      	bls.n	8006e60 <_strtoul_l.constprop.0+0x80>
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	d108      	bne.n	8006eb0 <_strtoul_l.constprop.0+0xd0>
 8006e9e:	2222      	movs	r2, #34	; 0x22
 8006ea0:	9905      	ldr	r1, [sp, #20]
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	600a      	str	r2, [r1, #0]
 8006ea6:	9a02      	ldr	r2, [sp, #8]
 8006ea8:	2a00      	cmp	r2, #0
 8006eaa:	d109      	bne.n	8006ec0 <_strtoul_l.constprop.0+0xe0>
 8006eac:	b007      	add	sp, #28
 8006eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb0:	2f00      	cmp	r7, #0
 8006eb2:	d000      	beq.n	8006eb6 <_strtoul_l.constprop.0+0xd6>
 8006eb4:	4240      	negs	r0, r0
 8006eb6:	9a02      	ldr	r2, [sp, #8]
 8006eb8:	2a00      	cmp	r2, #0
 8006eba:	d0f7      	beq.n	8006eac <_strtoul_l.constprop.0+0xcc>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <_strtoul_l.constprop.0+0xe4>
 8006ec0:	1e6b      	subs	r3, r5, #1
 8006ec2:	9301      	str	r3, [sp, #4]
 8006ec4:	9b02      	ldr	r3, [sp, #8]
 8006ec6:	9a01      	ldr	r2, [sp, #4]
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	e7ef      	b.n	8006eac <_strtoul_l.constprop.0+0xcc>
 8006ecc:	2430      	movs	r4, #48	; 0x30
 8006ece:	2e00      	cmp	r6, #0
 8006ed0:	d1ad      	bne.n	8006e2e <_strtoul_l.constprop.0+0x4e>
 8006ed2:	3608      	adds	r6, #8
 8006ed4:	e7ab      	b.n	8006e2e <_strtoul_l.constprop.0+0x4e>
 8006ed6:	2c30      	cmp	r4, #48	; 0x30
 8006ed8:	d0a1      	beq.n	8006e1e <_strtoul_l.constprop.0+0x3e>
 8006eda:	260a      	movs	r6, #10
 8006edc:	e7a7      	b.n	8006e2e <_strtoul_l.constprop.0+0x4e>
 8006ede:	46c0      	nop			; (mov r8, r8)
 8006ee0:	08007e7b 	.word	0x08007e7b

08006ee4 <_strtoul_r>:
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	f7ff ff7b 	bl	8006de0 <_strtoul_l.constprop.0>
 8006eea:	bd10      	pop	{r4, pc}

08006eec <_malloc_usable_size_r>:
 8006eec:	1f0b      	subs	r3, r1, #4
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	1f18      	subs	r0, r3, #4
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	da01      	bge.n	8006efa <_malloc_usable_size_r+0xe>
 8006ef6:	580b      	ldr	r3, [r1, r0]
 8006ef8:	18c0      	adds	r0, r0, r3
 8006efa:	4770      	bx	lr

08006efc <pow>:
 8006efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006efe:	0014      	movs	r4, r2
 8006f00:	001d      	movs	r5, r3
 8006f02:	9000      	str	r0, [sp, #0]
 8006f04:	9101      	str	r1, [sp, #4]
 8006f06:	f000 f86f 	bl	8006fe8 <__ieee754_pow>
 8006f0a:	0022      	movs	r2, r4
 8006f0c:	0006      	movs	r6, r0
 8006f0e:	000f      	movs	r7, r1
 8006f10:	002b      	movs	r3, r5
 8006f12:	0020      	movs	r0, r4
 8006f14:	0029      	movs	r1, r5
 8006f16:	f7fb f945 	bl	80021a4 <__aeabi_dcmpun>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	d13f      	bne.n	8006f9e <pow+0xa2>
 8006f1e:	9800      	ldr	r0, [sp, #0]
 8006f20:	9901      	ldr	r1, [sp, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	2300      	movs	r3, #0
 8006f26:	f7f9 fa85 	bl	8000434 <__aeabi_dcmpeq>
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d019      	beq.n	8006f62 <pow+0x66>
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2300      	movs	r3, #0
 8006f32:	0020      	movs	r0, r4
 8006f34:	0029      	movs	r1, r5
 8006f36:	f7f9 fa7d 	bl	8000434 <__aeabi_dcmpeq>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d146      	bne.n	8006fcc <pow+0xd0>
 8006f3e:	0020      	movs	r0, r4
 8006f40:	0029      	movs	r1, r5
 8006f42:	f000 f849 	bl	8006fd8 <finite>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d029      	beq.n	8006f9e <pow+0xa2>
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	0020      	movs	r0, r4
 8006f50:	0029      	movs	r1, r5
 8006f52:	f7f9 fa75 	bl	8000440 <__aeabi_dcmplt>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d021      	beq.n	8006f9e <pow+0xa2>
 8006f5a:	f7fe fe97 	bl	8005c8c <__errno>
 8006f5e:	2322      	movs	r3, #34	; 0x22
 8006f60:	e01c      	b.n	8006f9c <pow+0xa0>
 8006f62:	0030      	movs	r0, r6
 8006f64:	0039      	movs	r1, r7
 8006f66:	f000 f837 	bl	8006fd8 <finite>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d11b      	bne.n	8006fa6 <pow+0xaa>
 8006f6e:	9800      	ldr	r0, [sp, #0]
 8006f70:	9901      	ldr	r1, [sp, #4]
 8006f72:	f000 f831 	bl	8006fd8 <finite>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d015      	beq.n	8006fa6 <pow+0xaa>
 8006f7a:	0020      	movs	r0, r4
 8006f7c:	0029      	movs	r1, r5
 8006f7e:	f000 f82b 	bl	8006fd8 <finite>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d00f      	beq.n	8006fa6 <pow+0xaa>
 8006f86:	0032      	movs	r2, r6
 8006f88:	003b      	movs	r3, r7
 8006f8a:	0030      	movs	r0, r6
 8006f8c:	0039      	movs	r1, r7
 8006f8e:	f7fb f909 	bl	80021a4 <__aeabi_dcmpun>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d0e1      	beq.n	8006f5a <pow+0x5e>
 8006f96:	f7fe fe79 	bl	8005c8c <__errno>
 8006f9a:	2321      	movs	r3, #33	; 0x21
 8006f9c:	6003      	str	r3, [r0, #0]
 8006f9e:	0030      	movs	r0, r6
 8006fa0:	0039      	movs	r1, r7
 8006fa2:	b003      	add	sp, #12
 8006fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	2300      	movs	r3, #0
 8006faa:	0030      	movs	r0, r6
 8006fac:	0039      	movs	r1, r7
 8006fae:	f7f9 fa41 	bl	8000434 <__aeabi_dcmpeq>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d0f3      	beq.n	8006f9e <pow+0xa2>
 8006fb6:	9800      	ldr	r0, [sp, #0]
 8006fb8:	9901      	ldr	r1, [sp, #4]
 8006fba:	f000 f80d 	bl	8006fd8 <finite>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d0ed      	beq.n	8006f9e <pow+0xa2>
 8006fc2:	0020      	movs	r0, r4
 8006fc4:	0029      	movs	r1, r5
 8006fc6:	f000 f807 	bl	8006fd8 <finite>
 8006fca:	e7c4      	b.n	8006f56 <pow+0x5a>
 8006fcc:	2600      	movs	r6, #0
 8006fce:	4f01      	ldr	r7, [pc, #4]	; (8006fd4 <pow+0xd8>)
 8006fd0:	e7e5      	b.n	8006f9e <pow+0xa2>
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	3ff00000 	.word	0x3ff00000

08006fd8 <finite>:
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <finite+0xc>)
 8006fda:	0048      	lsls	r0, r1, #1
 8006fdc:	0840      	lsrs	r0, r0, #1
 8006fde:	18c0      	adds	r0, r0, r3
 8006fe0:	0fc0      	lsrs	r0, r0, #31
 8006fe2:	4770      	bx	lr
 8006fe4:	80100000 	.word	0x80100000

08006fe8 <__ieee754_pow>:
 8006fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fea:	b095      	sub	sp, #84	; 0x54
 8006fec:	9202      	str	r2, [sp, #8]
 8006fee:	9303      	str	r3, [sp, #12]
 8006ff0:	9b03      	ldr	r3, [sp, #12]
 8006ff2:	9a03      	ldr	r2, [sp, #12]
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	9b02      	ldr	r3, [sp, #8]
 8006ff8:	0056      	lsls	r6, r2, #1
 8006ffa:	001a      	movs	r2, r3
 8006ffc:	0876      	lsrs	r6, r6, #1
 8006ffe:	0007      	movs	r7, r0
 8007000:	000d      	movs	r5, r1
 8007002:	4332      	orrs	r2, r6
 8007004:	d119      	bne.n	800703a <__ieee754_pow+0x52>
 8007006:	2180      	movs	r1, #128	; 0x80
 8007008:	0309      	lsls	r1, r1, #12
 800700a:	4069      	eors	r1, r5
 800700c:	0002      	movs	r2, r0
 800700e:	000b      	movs	r3, r1
 8007010:	1892      	adds	r2, r2, r2
 8007012:	415b      	adcs	r3, r3
 8007014:	4989      	ldr	r1, [pc, #548]	; (800723c <__ieee754_pow+0x254>)
 8007016:	428b      	cmp	r3, r1
 8007018:	d806      	bhi.n	8007028 <__ieee754_pow+0x40>
 800701a:	d001      	beq.n	8007020 <__ieee754_pow+0x38>
 800701c:	f000 fcb6 	bl	800798c <__ieee754_pow+0x9a4>
 8007020:	2a00      	cmp	r2, #0
 8007022:	d101      	bne.n	8007028 <__ieee754_pow+0x40>
 8007024:	f000 fcb2 	bl	800798c <__ieee754_pow+0x9a4>
 8007028:	9a02      	ldr	r2, [sp, #8]
 800702a:	9b03      	ldr	r3, [sp, #12]
 800702c:	0038      	movs	r0, r7
 800702e:	0029      	movs	r1, r5
 8007030:	f7f9 fb1a 	bl	8000668 <__aeabi_dadd>
 8007034:	9000      	str	r0, [sp, #0]
 8007036:	9101      	str	r1, [sp, #4]
 8007038:	e0ad      	b.n	8007196 <__ieee754_pow+0x1ae>
 800703a:	4a81      	ldr	r2, [pc, #516]	; (8007240 <__ieee754_pow+0x258>)
 800703c:	004c      	lsls	r4, r1, #1
 800703e:	9108      	str	r1, [sp, #32]
 8007040:	9000      	str	r0, [sp, #0]
 8007042:	0864      	lsrs	r4, r4, #1
 8007044:	4294      	cmp	r4, r2
 8007046:	dc08      	bgt.n	800705a <__ieee754_pow+0x72>
 8007048:	d101      	bne.n	800704e <__ieee754_pow+0x66>
 800704a:	2800      	cmp	r0, #0
 800704c:	d1ec      	bne.n	8007028 <__ieee754_pow+0x40>
 800704e:	4a7c      	ldr	r2, [pc, #496]	; (8007240 <__ieee754_pow+0x258>)
 8007050:	4296      	cmp	r6, r2
 8007052:	dc02      	bgt.n	800705a <__ieee754_pow+0x72>
 8007054:	d10c      	bne.n	8007070 <__ieee754_pow+0x88>
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <__ieee754_pow+0x88>
 800705a:	4b7a      	ldr	r3, [pc, #488]	; (8007244 <__ieee754_pow+0x25c>)
 800705c:	18eb      	adds	r3, r5, r3
 800705e:	433b      	orrs	r3, r7
 8007060:	d1e2      	bne.n	8007028 <__ieee754_pow+0x40>
 8007062:	2180      	movs	r1, #128	; 0x80
 8007064:	9803      	ldr	r0, [sp, #12]
 8007066:	0309      	lsls	r1, r1, #12
 8007068:	4048      	eors	r0, r1
 800706a:	0003      	movs	r3, r0
 800706c:	9a02      	ldr	r2, [sp, #8]
 800706e:	e7cf      	b.n	8007010 <__ieee754_pow+0x28>
 8007070:	2200      	movs	r2, #0
 8007072:	9206      	str	r2, [sp, #24]
 8007074:	2d00      	cmp	r5, #0
 8007076:	da69      	bge.n	800714c <__ieee754_pow+0x164>
 8007078:	4a73      	ldr	r2, [pc, #460]	; (8007248 <__ieee754_pow+0x260>)
 800707a:	4296      	cmp	r6, r2
 800707c:	dc64      	bgt.n	8007148 <__ieee754_pow+0x160>
 800707e:	4a73      	ldr	r2, [pc, #460]	; (800724c <__ieee754_pow+0x264>)
 8007080:	4296      	cmp	r6, r2
 8007082:	dd11      	ble.n	80070a8 <__ieee754_pow+0xc0>
 8007084:	4972      	ldr	r1, [pc, #456]	; (8007250 <__ieee754_pow+0x268>)
 8007086:	1532      	asrs	r2, r6, #20
 8007088:	1852      	adds	r2, r2, r1
 800708a:	2a14      	cmp	r2, #20
 800708c:	dd3c      	ble.n	8007108 <__ieee754_pow+0x120>
 800708e:	2134      	movs	r1, #52	; 0x34
 8007090:	1a89      	subs	r1, r1, r2
 8007092:	9a02      	ldr	r2, [sp, #8]
 8007094:	40ca      	lsrs	r2, r1
 8007096:	0010      	movs	r0, r2
 8007098:	4088      	lsls	r0, r1
 800709a:	4298      	cmp	r0, r3
 800709c:	d104      	bne.n	80070a8 <__ieee754_pow+0xc0>
 800709e:	2101      	movs	r1, #1
 80070a0:	400a      	ands	r2, r1
 80070a2:	1849      	adds	r1, r1, r1
 80070a4:	1a8a      	subs	r2, r1, r2
 80070a6:	9206      	str	r2, [sp, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d03c      	beq.n	8007126 <__ieee754_pow+0x13e>
 80070ac:	0038      	movs	r0, r7
 80070ae:	0029      	movs	r1, r5
 80070b0:	f000 fca4 	bl	80079fc <fabs>
 80070b4:	9000      	str	r0, [sp, #0]
 80070b6:	9101      	str	r1, [sp, #4]
 80070b8:	2f00      	cmp	r7, #0
 80070ba:	d000      	beq.n	80070be <__ieee754_pow+0xd6>
 80070bc:	e094      	b.n	80071e8 <__ieee754_pow+0x200>
 80070be:	2c00      	cmp	r4, #0
 80070c0:	d005      	beq.n	80070ce <__ieee754_pow+0xe6>
 80070c2:	4a64      	ldr	r2, [pc, #400]	; (8007254 <__ieee754_pow+0x26c>)
 80070c4:	00ab      	lsls	r3, r5, #2
 80070c6:	089b      	lsrs	r3, r3, #2
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d000      	beq.n	80070ce <__ieee754_pow+0xe6>
 80070cc:	e08c      	b.n	80071e8 <__ieee754_pow+0x200>
 80070ce:	9b04      	ldr	r3, [sp, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da07      	bge.n	80070e4 <__ieee754_pow+0xfc>
 80070d4:	9a00      	ldr	r2, [sp, #0]
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	2000      	movs	r0, #0
 80070da:	495e      	ldr	r1, [pc, #376]	; (8007254 <__ieee754_pow+0x26c>)
 80070dc:	f7f9 fe24 	bl	8000d28 <__aeabi_ddiv>
 80070e0:	9000      	str	r0, [sp, #0]
 80070e2:	9101      	str	r1, [sp, #4]
 80070e4:	9b08      	ldr	r3, [sp, #32]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	da55      	bge.n	8007196 <__ieee754_pow+0x1ae>
 80070ea:	4b56      	ldr	r3, [pc, #344]	; (8007244 <__ieee754_pow+0x25c>)
 80070ec:	18e4      	adds	r4, r4, r3
 80070ee:	9b06      	ldr	r3, [sp, #24]
 80070f0:	431c      	orrs	r4, r3
 80070f2:	d000      	beq.n	80070f6 <__ieee754_pow+0x10e>
 80070f4:	e06c      	b.n	80071d0 <__ieee754_pow+0x1e8>
 80070f6:	9a00      	ldr	r2, [sp, #0]
 80070f8:	9b01      	ldr	r3, [sp, #4]
 80070fa:	0010      	movs	r0, r2
 80070fc:	0019      	movs	r1, r3
 80070fe:	f7fa fccf 	bl	8001aa0 <__aeabi_dsub>
 8007102:	0002      	movs	r2, r0
 8007104:	000b      	movs	r3, r1
 8007106:	e01c      	b.n	8007142 <__ieee754_pow+0x15a>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1cf      	bne.n	80070ac <__ieee754_pow+0xc4>
 800710c:	3314      	adds	r3, #20
 800710e:	1a9a      	subs	r2, r3, r2
 8007110:	0033      	movs	r3, r6
 8007112:	4113      	asrs	r3, r2
 8007114:	0019      	movs	r1, r3
 8007116:	4091      	lsls	r1, r2
 8007118:	42b1      	cmp	r1, r6
 800711a:	d104      	bne.n	8007126 <__ieee754_pow+0x13e>
 800711c:	2201      	movs	r2, #1
 800711e:	4013      	ands	r3, r2
 8007120:	1892      	adds	r2, r2, r2
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	9306      	str	r3, [sp, #24]
 8007126:	4b4b      	ldr	r3, [pc, #300]	; (8007254 <__ieee754_pow+0x26c>)
 8007128:	429e      	cmp	r6, r3
 800712a:	d138      	bne.n	800719e <__ieee754_pow+0x1b6>
 800712c:	0038      	movs	r0, r7
 800712e:	0029      	movs	r1, r5
 8007130:	9b04      	ldr	r3, [sp, #16]
 8007132:	9000      	str	r0, [sp, #0]
 8007134:	9101      	str	r1, [sp, #4]
 8007136:	2b00      	cmp	r3, #0
 8007138:	da2d      	bge.n	8007196 <__ieee754_pow+0x1ae>
 800713a:	003a      	movs	r2, r7
 800713c:	002b      	movs	r3, r5
 800713e:	2000      	movs	r0, #0
 8007140:	4944      	ldr	r1, [pc, #272]	; (8007254 <__ieee754_pow+0x26c>)
 8007142:	f7f9 fdf1 	bl	8000d28 <__aeabi_ddiv>
 8007146:	e775      	b.n	8007034 <__ieee754_pow+0x4c>
 8007148:	2202      	movs	r2, #2
 800714a:	9206      	str	r2, [sp, #24]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1ad      	bne.n	80070ac <__ieee754_pow+0xc4>
 8007150:	4b3b      	ldr	r3, [pc, #236]	; (8007240 <__ieee754_pow+0x258>)
 8007152:	429e      	cmp	r6, r3
 8007154:	d1e7      	bne.n	8007126 <__ieee754_pow+0x13e>
 8007156:	4b3b      	ldr	r3, [pc, #236]	; (8007244 <__ieee754_pow+0x25c>)
 8007158:	18e3      	adds	r3, r4, r3
 800715a:	433b      	orrs	r3, r7
 800715c:	d101      	bne.n	8007162 <__ieee754_pow+0x17a>
 800715e:	f000 fc15 	bl	800798c <__ieee754_pow+0x9a4>
 8007162:	4b3a      	ldr	r3, [pc, #232]	; (800724c <__ieee754_pow+0x264>)
 8007164:	429c      	cmp	r4, r3
 8007166:	dd09      	ble.n	800717c <__ieee754_pow+0x194>
 8007168:	9b04      	ldr	r3, [sp, #16]
 800716a:	2b00      	cmp	r3, #0
 800716c:	da01      	bge.n	8007172 <__ieee754_pow+0x18a>
 800716e:	f000 fc11 	bl	8007994 <__ieee754_pow+0x9ac>
 8007172:	9b02      	ldr	r3, [sp, #8]
 8007174:	9c03      	ldr	r4, [sp, #12]
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	9401      	str	r4, [sp, #4]
 800717a:	e00c      	b.n	8007196 <__ieee754_pow+0x1ae>
 800717c:	9b04      	ldr	r3, [sp, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	db01      	blt.n	8007186 <__ieee754_pow+0x19e>
 8007182:	f000 fc07 	bl	8007994 <__ieee754_pow+0x9ac>
 8007186:	2280      	movs	r2, #128	; 0x80
 8007188:	0612      	lsls	r2, r2, #24
 800718a:	4694      	mov	ip, r2
 800718c:	9b02      	ldr	r3, [sp, #8]
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	4463      	add	r3, ip
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	9800      	ldr	r0, [sp, #0]
 8007198:	9901      	ldr	r1, [sp, #4]
 800719a:	b015      	add	sp, #84	; 0x54
 800719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719e:	2380      	movs	r3, #128	; 0x80
 80071a0:	9a04      	ldr	r2, [sp, #16]
 80071a2:	05db      	lsls	r3, r3, #23
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d106      	bne.n	80071b6 <__ieee754_pow+0x1ce>
 80071a8:	003a      	movs	r2, r7
 80071aa:	002b      	movs	r3, r5
 80071ac:	0038      	movs	r0, r7
 80071ae:	0029      	movs	r1, r5
 80071b0:	f7fa f9b4 	bl	800151c <__aeabi_dmul>
 80071b4:	e73e      	b.n	8007034 <__ieee754_pow+0x4c>
 80071b6:	4b28      	ldr	r3, [pc, #160]	; (8007258 <__ieee754_pow+0x270>)
 80071b8:	9a04      	ldr	r2, [sp, #16]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d000      	beq.n	80071c0 <__ieee754_pow+0x1d8>
 80071be:	e775      	b.n	80070ac <__ieee754_pow+0xc4>
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	da00      	bge.n	80071c6 <__ieee754_pow+0x1de>
 80071c4:	e772      	b.n	80070ac <__ieee754_pow+0xc4>
 80071c6:	0038      	movs	r0, r7
 80071c8:	0029      	movs	r1, r5
 80071ca:	f000 fcb7 	bl	8007b3c <__ieee754_sqrt>
 80071ce:	e731      	b.n	8007034 <__ieee754_pow+0x4c>
 80071d0:	9b06      	ldr	r3, [sp, #24]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d1df      	bne.n	8007196 <__ieee754_pow+0x1ae>
 80071d6:	9800      	ldr	r0, [sp, #0]
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	0002      	movs	r2, r0
 80071dc:	9801      	ldr	r0, [sp, #4]
 80071de:	0609      	lsls	r1, r1, #24
 80071e0:	1843      	adds	r3, r0, r1
 80071e2:	9200      	str	r2, [sp, #0]
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	e7d6      	b.n	8007196 <__ieee754_pow+0x1ae>
 80071e8:	0feb      	lsrs	r3, r5, #31
 80071ea:	3b01      	subs	r3, #1
 80071ec:	930e      	str	r3, [sp, #56]	; 0x38
 80071ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071f0:	9b06      	ldr	r3, [sp, #24]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	d104      	bne.n	8007200 <__ieee754_pow+0x218>
 80071f6:	003a      	movs	r2, r7
 80071f8:	002b      	movs	r3, r5
 80071fa:	0038      	movs	r0, r7
 80071fc:	0029      	movs	r1, r5
 80071fe:	e77e      	b.n	80070fe <__ieee754_pow+0x116>
 8007200:	4b16      	ldr	r3, [pc, #88]	; (800725c <__ieee754_pow+0x274>)
 8007202:	429e      	cmp	r6, r3
 8007204:	dc00      	bgt.n	8007208 <__ieee754_pow+0x220>
 8007206:	e0f1      	b.n	80073ec <__ieee754_pow+0x404>
 8007208:	4b15      	ldr	r3, [pc, #84]	; (8007260 <__ieee754_pow+0x278>)
 800720a:	429e      	cmp	r6, r3
 800720c:	dd09      	ble.n	8007222 <__ieee754_pow+0x23a>
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <__ieee754_pow+0x264>)
 8007210:	429c      	cmp	r4, r3
 8007212:	dc0c      	bgt.n	800722e <__ieee754_pow+0x246>
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	da0c      	bge.n	8007234 <__ieee754_pow+0x24c>
 800721a:	2000      	movs	r0, #0
 800721c:	f000 fc86 	bl	8007b2c <__math_oflow>
 8007220:	e708      	b.n	8007034 <__ieee754_pow+0x4c>
 8007222:	4b10      	ldr	r3, [pc, #64]	; (8007264 <__ieee754_pow+0x27c>)
 8007224:	429c      	cmp	r4, r3
 8007226:	ddf5      	ble.n	8007214 <__ieee754_pow+0x22c>
 8007228:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <__ieee754_pow+0x26c>)
 800722a:	429c      	cmp	r4, r3
 800722c:	dd1c      	ble.n	8007268 <__ieee754_pow+0x280>
 800722e:	9b04      	ldr	r3, [sp, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	dcf2      	bgt.n	800721a <__ieee754_pow+0x232>
 8007234:	2000      	movs	r0, #0
 8007236:	f000 fc72 	bl	8007b1e <__math_uflow>
 800723a:	e6fb      	b.n	8007034 <__ieee754_pow+0x4c>
 800723c:	fff00000 	.word	0xfff00000
 8007240:	7ff00000 	.word	0x7ff00000
 8007244:	c0100000 	.word	0xc0100000
 8007248:	433fffff 	.word	0x433fffff
 800724c:	3fefffff 	.word	0x3fefffff
 8007250:	fffffc01 	.word	0xfffffc01
 8007254:	3ff00000 	.word	0x3ff00000
 8007258:	3fe00000 	.word	0x3fe00000
 800725c:	41e00000 	.word	0x41e00000
 8007260:	43f00000 	.word	0x43f00000
 8007264:	3feffffe 	.word	0x3feffffe
 8007268:	2200      	movs	r2, #0
 800726a:	9800      	ldr	r0, [sp, #0]
 800726c:	9901      	ldr	r1, [sp, #4]
 800726e:	4b53      	ldr	r3, [pc, #332]	; (80073bc <__ieee754_pow+0x3d4>)
 8007270:	f7fa fc16 	bl	8001aa0 <__aeabi_dsub>
 8007274:	22c0      	movs	r2, #192	; 0xc0
 8007276:	4b52      	ldr	r3, [pc, #328]	; (80073c0 <__ieee754_pow+0x3d8>)
 8007278:	05d2      	lsls	r2, r2, #23
 800727a:	0004      	movs	r4, r0
 800727c:	000d      	movs	r5, r1
 800727e:	f7fa f94d 	bl	800151c <__aeabi_dmul>
 8007282:	4a50      	ldr	r2, [pc, #320]	; (80073c4 <__ieee754_pow+0x3dc>)
 8007284:	0006      	movs	r6, r0
 8007286:	000f      	movs	r7, r1
 8007288:	0020      	movs	r0, r4
 800728a:	0029      	movs	r1, r5
 800728c:	4b4e      	ldr	r3, [pc, #312]	; (80073c8 <__ieee754_pow+0x3e0>)
 800728e:	f7fa f945 	bl	800151c <__aeabi_dmul>
 8007292:	2200      	movs	r2, #0
 8007294:	9000      	str	r0, [sp, #0]
 8007296:	9101      	str	r1, [sp, #4]
 8007298:	4b4c      	ldr	r3, [pc, #304]	; (80073cc <__ieee754_pow+0x3e4>)
 800729a:	0020      	movs	r0, r4
 800729c:	0029      	movs	r1, r5
 800729e:	f7fa f93d 	bl	800151c <__aeabi_dmul>
 80072a2:	0002      	movs	r2, r0
 80072a4:	000b      	movs	r3, r1
 80072a6:	484a      	ldr	r0, [pc, #296]	; (80073d0 <__ieee754_pow+0x3e8>)
 80072a8:	494a      	ldr	r1, [pc, #296]	; (80073d4 <__ieee754_pow+0x3ec>)
 80072aa:	f7fa fbf9 	bl	8001aa0 <__aeabi_dsub>
 80072ae:	0022      	movs	r2, r4
 80072b0:	002b      	movs	r3, r5
 80072b2:	f7fa f933 	bl	800151c <__aeabi_dmul>
 80072b6:	0002      	movs	r2, r0
 80072b8:	000b      	movs	r3, r1
 80072ba:	2000      	movs	r0, #0
 80072bc:	4946      	ldr	r1, [pc, #280]	; (80073d8 <__ieee754_pow+0x3f0>)
 80072be:	f7fa fbef 	bl	8001aa0 <__aeabi_dsub>
 80072c2:	0022      	movs	r2, r4
 80072c4:	002b      	movs	r3, r5
 80072c6:	9004      	str	r0, [sp, #16]
 80072c8:	9105      	str	r1, [sp, #20]
 80072ca:	0020      	movs	r0, r4
 80072cc:	0029      	movs	r1, r5
 80072ce:	f7fa f925 	bl	800151c <__aeabi_dmul>
 80072d2:	0002      	movs	r2, r0
 80072d4:	000b      	movs	r3, r1
 80072d6:	9804      	ldr	r0, [sp, #16]
 80072d8:	9905      	ldr	r1, [sp, #20]
 80072da:	f7fa f91f 	bl	800151c <__aeabi_dmul>
 80072de:	4a3f      	ldr	r2, [pc, #252]	; (80073dc <__ieee754_pow+0x3f4>)
 80072e0:	4b37      	ldr	r3, [pc, #220]	; (80073c0 <__ieee754_pow+0x3d8>)
 80072e2:	f7fa f91b 	bl	800151c <__aeabi_dmul>
 80072e6:	0002      	movs	r2, r0
 80072e8:	000b      	movs	r3, r1
 80072ea:	9800      	ldr	r0, [sp, #0]
 80072ec:	9901      	ldr	r1, [sp, #4]
 80072ee:	f7fa fbd7 	bl	8001aa0 <__aeabi_dsub>
 80072f2:	0002      	movs	r2, r0
 80072f4:	000b      	movs	r3, r1
 80072f6:	0004      	movs	r4, r0
 80072f8:	000d      	movs	r5, r1
 80072fa:	0030      	movs	r0, r6
 80072fc:	0039      	movs	r1, r7
 80072fe:	f7f9 f9b3 	bl	8000668 <__aeabi_dadd>
 8007302:	2000      	movs	r0, #0
 8007304:	0032      	movs	r2, r6
 8007306:	003b      	movs	r3, r7
 8007308:	9004      	str	r0, [sp, #16]
 800730a:	9105      	str	r1, [sp, #20]
 800730c:	f7fa fbc8 	bl	8001aa0 <__aeabi_dsub>
 8007310:	0002      	movs	r2, r0
 8007312:	000b      	movs	r3, r1
 8007314:	0020      	movs	r0, r4
 8007316:	0029      	movs	r1, r5
 8007318:	f7fa fbc2 	bl	8001aa0 <__aeabi_dsub>
 800731c:	9b06      	ldr	r3, [sp, #24]
 800731e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007320:	3b01      	subs	r3, #1
 8007322:	0006      	movs	r6, r0
 8007324:	000f      	movs	r7, r1
 8007326:	4313      	orrs	r3, r2
 8007328:	d000      	beq.n	800732c <__ieee754_pow+0x344>
 800732a:	e1dc      	b.n	80076e6 <__ieee754_pow+0x6fe>
 800732c:	2300      	movs	r3, #0
 800732e:	4c2c      	ldr	r4, [pc, #176]	; (80073e0 <__ieee754_pow+0x3f8>)
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	9401      	str	r4, [sp, #4]
 8007334:	9c02      	ldr	r4, [sp, #8]
 8007336:	9d03      	ldr	r5, [sp, #12]
 8007338:	9802      	ldr	r0, [sp, #8]
 800733a:	9903      	ldr	r1, [sp, #12]
 800733c:	2400      	movs	r4, #0
 800733e:	002b      	movs	r3, r5
 8007340:	0022      	movs	r2, r4
 8007342:	f7fa fbad 	bl	8001aa0 <__aeabi_dsub>
 8007346:	9a04      	ldr	r2, [sp, #16]
 8007348:	9b05      	ldr	r3, [sp, #20]
 800734a:	f7fa f8e7 	bl	800151c <__aeabi_dmul>
 800734e:	9a02      	ldr	r2, [sp, #8]
 8007350:	9b03      	ldr	r3, [sp, #12]
 8007352:	9006      	str	r0, [sp, #24]
 8007354:	9107      	str	r1, [sp, #28]
 8007356:	0030      	movs	r0, r6
 8007358:	0039      	movs	r1, r7
 800735a:	f7fa f8df 	bl	800151c <__aeabi_dmul>
 800735e:	0002      	movs	r2, r0
 8007360:	000b      	movs	r3, r1
 8007362:	9806      	ldr	r0, [sp, #24]
 8007364:	9907      	ldr	r1, [sp, #28]
 8007366:	f7f9 f97f 	bl	8000668 <__aeabi_dadd>
 800736a:	0022      	movs	r2, r4
 800736c:	002b      	movs	r3, r5
 800736e:	0006      	movs	r6, r0
 8007370:	000f      	movs	r7, r1
 8007372:	9804      	ldr	r0, [sp, #16]
 8007374:	9905      	ldr	r1, [sp, #20]
 8007376:	f7fa f8d1 	bl	800151c <__aeabi_dmul>
 800737a:	0003      	movs	r3, r0
 800737c:	000c      	movs	r4, r1
 800737e:	9004      	str	r0, [sp, #16]
 8007380:	9105      	str	r1, [sp, #20]
 8007382:	9306      	str	r3, [sp, #24]
 8007384:	9407      	str	r4, [sp, #28]
 8007386:	0002      	movs	r2, r0
 8007388:	000b      	movs	r3, r1
 800738a:	0030      	movs	r0, r6
 800738c:	0039      	movs	r1, r7
 800738e:	f7f9 f96b 	bl	8000668 <__aeabi_dadd>
 8007392:	4b14      	ldr	r3, [pc, #80]	; (80073e4 <__ieee754_pow+0x3fc>)
 8007394:	0005      	movs	r5, r0
 8007396:	000c      	movs	r4, r1
 8007398:	9108      	str	r1, [sp, #32]
 800739a:	4299      	cmp	r1, r3
 800739c:	dc00      	bgt.n	80073a0 <__ieee754_pow+0x3b8>
 800739e:	e2d4      	b.n	800794a <__ieee754_pow+0x962>
 80073a0:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <__ieee754_pow+0x400>)
 80073a2:	18cb      	adds	r3, r1, r3
 80073a4:	4303      	orrs	r3, r0
 80073a6:	d100      	bne.n	80073aa <__ieee754_pow+0x3c2>
 80073a8:	e1d6      	b.n	8007758 <__ieee754_pow+0x770>
 80073aa:	9800      	ldr	r0, [sp, #0]
 80073ac:	9901      	ldr	r1, [sp, #4]
 80073ae:	2300      	movs	r3, #0
 80073b0:	2200      	movs	r2, #0
 80073b2:	f7f9 f845 	bl	8000440 <__aeabi_dcmplt>
 80073b6:	1e43      	subs	r3, r0, #1
 80073b8:	4198      	sbcs	r0, r3
 80073ba:	e72f      	b.n	800721c <__ieee754_pow+0x234>
 80073bc:	3ff00000 	.word	0x3ff00000
 80073c0:	3ff71547 	.word	0x3ff71547
 80073c4:	f85ddf44 	.word	0xf85ddf44
 80073c8:	3e54ae0b 	.word	0x3e54ae0b
 80073cc:	3fd00000 	.word	0x3fd00000
 80073d0:	55555555 	.word	0x55555555
 80073d4:	3fd55555 	.word	0x3fd55555
 80073d8:	3fe00000 	.word	0x3fe00000
 80073dc:	652b82fe 	.word	0x652b82fe
 80073e0:	bff00000 	.word	0xbff00000
 80073e4:	408fffff 	.word	0x408fffff
 80073e8:	bf700000 	.word	0xbf700000
 80073ec:	4bbf      	ldr	r3, [pc, #764]	; (80076ec <__ieee754_pow+0x704>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	422b      	tst	r3, r5
 80073f2:	d10a      	bne.n	800740a <__ieee754_pow+0x422>
 80073f4:	9800      	ldr	r0, [sp, #0]
 80073f6:	9901      	ldr	r1, [sp, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	4bbd      	ldr	r3, [pc, #756]	; (80076f0 <__ieee754_pow+0x708>)
 80073fc:	f7fa f88e 	bl	800151c <__aeabi_dmul>
 8007400:	2235      	movs	r2, #53	; 0x35
 8007402:	9000      	str	r0, [sp, #0]
 8007404:	9101      	str	r1, [sp, #4]
 8007406:	9c01      	ldr	r4, [sp, #4]
 8007408:	4252      	negs	r2, r2
 800740a:	49ba      	ldr	r1, [pc, #744]	; (80076f4 <__ieee754_pow+0x70c>)
 800740c:	1523      	asrs	r3, r4, #20
 800740e:	185b      	adds	r3, r3, r1
 8007410:	189b      	adds	r3, r3, r2
 8007412:	0324      	lsls	r4, r4, #12
 8007414:	4db8      	ldr	r5, [pc, #736]	; (80076f8 <__ieee754_pow+0x710>)
 8007416:	930d      	str	r3, [sp, #52]	; 0x34
 8007418:	4bb8      	ldr	r3, [pc, #736]	; (80076fc <__ieee754_pow+0x714>)
 800741a:	0b22      	lsrs	r2, r4, #12
 800741c:	4315      	orrs	r5, r2
 800741e:	2400      	movs	r4, #0
 8007420:	429a      	cmp	r2, r3
 8007422:	dd09      	ble.n	8007438 <__ieee754_pow+0x450>
 8007424:	4bb6      	ldr	r3, [pc, #728]	; (8007700 <__ieee754_pow+0x718>)
 8007426:	3401      	adds	r4, #1
 8007428:	429a      	cmp	r2, r3
 800742a:	dd05      	ble.n	8007438 <__ieee754_pow+0x450>
 800742c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800742e:	191b      	adds	r3, r3, r4
 8007430:	2400      	movs	r4, #0
 8007432:	930d      	str	r3, [sp, #52]	; 0x34
 8007434:	4bb3      	ldr	r3, [pc, #716]	; (8007704 <__ieee754_pow+0x71c>)
 8007436:	18ed      	adds	r5, r5, r3
 8007438:	4bb3      	ldr	r3, [pc, #716]	; (8007708 <__ieee754_pow+0x720>)
 800743a:	00e2      	lsls	r2, r4, #3
 800743c:	189b      	adds	r3, r3, r2
 800743e:	9800      	ldr	r0, [sp, #0]
 8007440:	9901      	ldr	r1, [sp, #4]
 8007442:	920f      	str	r2, [sp, #60]	; 0x3c
 8007444:	0029      	movs	r1, r5
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	0006      	movs	r6, r0
 800744c:	920a      	str	r2, [sp, #40]	; 0x28
 800744e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007450:	f7fa fb26 	bl	8001aa0 <__aeabi_dsub>
 8007454:	0032      	movs	r2, r6
 8007456:	002b      	movs	r3, r5
 8007458:	9010      	str	r0, [sp, #64]	; 0x40
 800745a:	9111      	str	r1, [sp, #68]	; 0x44
 800745c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800745e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007460:	f7f9 f902 	bl	8000668 <__aeabi_dadd>
 8007464:	0002      	movs	r2, r0
 8007466:	000b      	movs	r3, r1
 8007468:	2000      	movs	r0, #0
 800746a:	49a3      	ldr	r1, [pc, #652]	; (80076f8 <__ieee754_pow+0x710>)
 800746c:	f7f9 fc5c 	bl	8000d28 <__aeabi_ddiv>
 8007470:	0002      	movs	r2, r0
 8007472:	000b      	movs	r3, r1
 8007474:	9012      	str	r0, [sp, #72]	; 0x48
 8007476:	9113      	str	r1, [sp, #76]	; 0x4c
 8007478:	9810      	ldr	r0, [sp, #64]	; 0x40
 800747a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800747c:	f7fa f84e 	bl	800151c <__aeabi_dmul>
 8007480:	9008      	str	r0, [sp, #32]
 8007482:	9109      	str	r1, [sp, #36]	; 0x24
 8007484:	9a08      	ldr	r2, [sp, #32]
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	9204      	str	r2, [sp, #16]
 800748a:	9305      	str	r3, [sp, #20]
 800748c:	2300      	movs	r3, #0
 800748e:	2180      	movs	r1, #128	; 0x80
 8007490:	2080      	movs	r0, #128	; 0x80
 8007492:	9304      	str	r3, [sp, #16]
 8007494:	9a04      	ldr	r2, [sp, #16]
 8007496:	9b05      	ldr	r3, [sp, #20]
 8007498:	9200      	str	r2, [sp, #0]
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	002f      	movs	r7, r5
 80074a0:	0589      	lsls	r1, r1, #22
 80074a2:	106d      	asrs	r5, r5, #1
 80074a4:	4329      	orrs	r1, r5
 80074a6:	0300      	lsls	r0, r0, #12
 80074a8:	1809      	adds	r1, r1, r0
 80074aa:	04a0      	lsls	r0, r4, #18
 80074ac:	180b      	adds	r3, r1, r0
 80074ae:	9800      	ldr	r0, [sp, #0]
 80074b0:	9901      	ldr	r1, [sp, #4]
 80074b2:	0014      	movs	r4, r2
 80074b4:	001d      	movs	r5, r3
 80074b6:	f7fa f831 	bl	800151c <__aeabi_dmul>
 80074ba:	0002      	movs	r2, r0
 80074bc:	000b      	movs	r3, r1
 80074be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80074c0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074c2:	f7fa faed 	bl	8001aa0 <__aeabi_dsub>
 80074c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ca:	9010      	str	r0, [sp, #64]	; 0x40
 80074cc:	9111      	str	r1, [sp, #68]	; 0x44
 80074ce:	0020      	movs	r0, r4
 80074d0:	0029      	movs	r1, r5
 80074d2:	f7fa fae5 	bl	8001aa0 <__aeabi_dsub>
 80074d6:	0002      	movs	r2, r0
 80074d8:	000b      	movs	r3, r1
 80074da:	0030      	movs	r0, r6
 80074dc:	0039      	movs	r1, r7
 80074de:	f7fa fadf 	bl	8001aa0 <__aeabi_dsub>
 80074e2:	9a00      	ldr	r2, [sp, #0]
 80074e4:	9b01      	ldr	r3, [sp, #4]
 80074e6:	f7fa f819 	bl	800151c <__aeabi_dmul>
 80074ea:	0002      	movs	r2, r0
 80074ec:	000b      	movs	r3, r1
 80074ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80074f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80074f2:	f7fa fad5 	bl	8001aa0 <__aeabi_dsub>
 80074f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80074f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074fa:	f7fa f80f 	bl	800151c <__aeabi_dmul>
 80074fe:	9a08      	ldr	r2, [sp, #32]
 8007500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007502:	900a      	str	r0, [sp, #40]	; 0x28
 8007504:	910b      	str	r1, [sp, #44]	; 0x2c
 8007506:	0010      	movs	r0, r2
 8007508:	0019      	movs	r1, r3
 800750a:	f7fa f807 	bl	800151c <__aeabi_dmul>
 800750e:	0006      	movs	r6, r0
 8007510:	000f      	movs	r7, r1
 8007512:	4a7e      	ldr	r2, [pc, #504]	; (800770c <__ieee754_pow+0x724>)
 8007514:	4b7e      	ldr	r3, [pc, #504]	; (8007710 <__ieee754_pow+0x728>)
 8007516:	f7fa f801 	bl	800151c <__aeabi_dmul>
 800751a:	4a7e      	ldr	r2, [pc, #504]	; (8007714 <__ieee754_pow+0x72c>)
 800751c:	4b7e      	ldr	r3, [pc, #504]	; (8007718 <__ieee754_pow+0x730>)
 800751e:	f7f9 f8a3 	bl	8000668 <__aeabi_dadd>
 8007522:	0032      	movs	r2, r6
 8007524:	003b      	movs	r3, r7
 8007526:	f7f9 fff9 	bl	800151c <__aeabi_dmul>
 800752a:	4a7c      	ldr	r2, [pc, #496]	; (800771c <__ieee754_pow+0x734>)
 800752c:	4b7c      	ldr	r3, [pc, #496]	; (8007720 <__ieee754_pow+0x738>)
 800752e:	f7f9 f89b 	bl	8000668 <__aeabi_dadd>
 8007532:	0032      	movs	r2, r6
 8007534:	003b      	movs	r3, r7
 8007536:	f7f9 fff1 	bl	800151c <__aeabi_dmul>
 800753a:	4a7a      	ldr	r2, [pc, #488]	; (8007724 <__ieee754_pow+0x73c>)
 800753c:	4b7a      	ldr	r3, [pc, #488]	; (8007728 <__ieee754_pow+0x740>)
 800753e:	f7f9 f893 	bl	8000668 <__aeabi_dadd>
 8007542:	0032      	movs	r2, r6
 8007544:	003b      	movs	r3, r7
 8007546:	f7f9 ffe9 	bl	800151c <__aeabi_dmul>
 800754a:	4a78      	ldr	r2, [pc, #480]	; (800772c <__ieee754_pow+0x744>)
 800754c:	4b78      	ldr	r3, [pc, #480]	; (8007730 <__ieee754_pow+0x748>)
 800754e:	f7f9 f88b 	bl	8000668 <__aeabi_dadd>
 8007552:	0032      	movs	r2, r6
 8007554:	003b      	movs	r3, r7
 8007556:	f7f9 ffe1 	bl	800151c <__aeabi_dmul>
 800755a:	4a76      	ldr	r2, [pc, #472]	; (8007734 <__ieee754_pow+0x74c>)
 800755c:	4b76      	ldr	r3, [pc, #472]	; (8007738 <__ieee754_pow+0x750>)
 800755e:	f7f9 f883 	bl	8000668 <__aeabi_dadd>
 8007562:	0032      	movs	r2, r6
 8007564:	0004      	movs	r4, r0
 8007566:	000d      	movs	r5, r1
 8007568:	003b      	movs	r3, r7
 800756a:	0030      	movs	r0, r6
 800756c:	0039      	movs	r1, r7
 800756e:	f7f9 ffd5 	bl	800151c <__aeabi_dmul>
 8007572:	0002      	movs	r2, r0
 8007574:	000b      	movs	r3, r1
 8007576:	0020      	movs	r0, r4
 8007578:	0029      	movs	r1, r5
 800757a:	f7f9 ffcf 	bl	800151c <__aeabi_dmul>
 800757e:	9a00      	ldr	r2, [sp, #0]
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	0004      	movs	r4, r0
 8007584:	000d      	movs	r5, r1
 8007586:	9808      	ldr	r0, [sp, #32]
 8007588:	9909      	ldr	r1, [sp, #36]	; 0x24
 800758a:	f7f9 f86d 	bl	8000668 <__aeabi_dadd>
 800758e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007590:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007592:	f7f9 ffc3 	bl	800151c <__aeabi_dmul>
 8007596:	0022      	movs	r2, r4
 8007598:	002b      	movs	r3, r5
 800759a:	f7f9 f865 	bl	8000668 <__aeabi_dadd>
 800759e:	9a00      	ldr	r2, [sp, #0]
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	9010      	str	r0, [sp, #64]	; 0x40
 80075a4:	9111      	str	r1, [sp, #68]	; 0x44
 80075a6:	0010      	movs	r0, r2
 80075a8:	0019      	movs	r1, r3
 80075aa:	f7f9 ffb7 	bl	800151c <__aeabi_dmul>
 80075ae:	2200      	movs	r2, #0
 80075b0:	4b62      	ldr	r3, [pc, #392]	; (800773c <__ieee754_pow+0x754>)
 80075b2:	0004      	movs	r4, r0
 80075b4:	000d      	movs	r5, r1
 80075b6:	f7f9 f857 	bl	8000668 <__aeabi_dadd>
 80075ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075be:	f7f9 f853 	bl	8000668 <__aeabi_dadd>
 80075c2:	2000      	movs	r0, #0
 80075c4:	000f      	movs	r7, r1
 80075c6:	0006      	movs	r6, r0
 80075c8:	0002      	movs	r2, r0
 80075ca:	000b      	movs	r3, r1
 80075cc:	9800      	ldr	r0, [sp, #0]
 80075ce:	9901      	ldr	r1, [sp, #4]
 80075d0:	f7f9 ffa4 	bl	800151c <__aeabi_dmul>
 80075d4:	2200      	movs	r2, #0
 80075d6:	9000      	str	r0, [sp, #0]
 80075d8:	9101      	str	r1, [sp, #4]
 80075da:	4b58      	ldr	r3, [pc, #352]	; (800773c <__ieee754_pow+0x754>)
 80075dc:	0030      	movs	r0, r6
 80075de:	0039      	movs	r1, r7
 80075e0:	f7fa fa5e 	bl	8001aa0 <__aeabi_dsub>
 80075e4:	0022      	movs	r2, r4
 80075e6:	002b      	movs	r3, r5
 80075e8:	f7fa fa5a 	bl	8001aa0 <__aeabi_dsub>
 80075ec:	0002      	movs	r2, r0
 80075ee:	000b      	movs	r3, r1
 80075f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075f4:	f7fa fa54 	bl	8001aa0 <__aeabi_dsub>
 80075f8:	9a08      	ldr	r2, [sp, #32]
 80075fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fc:	f7f9 ff8e 	bl	800151c <__aeabi_dmul>
 8007600:	0032      	movs	r2, r6
 8007602:	0004      	movs	r4, r0
 8007604:	000d      	movs	r5, r1
 8007606:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007608:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800760a:	003b      	movs	r3, r7
 800760c:	f7f9 ff86 	bl	800151c <__aeabi_dmul>
 8007610:	0002      	movs	r2, r0
 8007612:	000b      	movs	r3, r1
 8007614:	0020      	movs	r0, r4
 8007616:	0029      	movs	r1, r5
 8007618:	f7f9 f826 	bl	8000668 <__aeabi_dadd>
 800761c:	0004      	movs	r4, r0
 800761e:	000d      	movs	r5, r1
 8007620:	0002      	movs	r2, r0
 8007622:	000b      	movs	r3, r1
 8007624:	9800      	ldr	r0, [sp, #0]
 8007626:	9901      	ldr	r1, [sp, #4]
 8007628:	f7f9 f81e 	bl	8000668 <__aeabi_dadd>
 800762c:	22e0      	movs	r2, #224	; 0xe0
 800762e:	2000      	movs	r0, #0
 8007630:	4b43      	ldr	r3, [pc, #268]	; (8007740 <__ieee754_pow+0x758>)
 8007632:	0612      	lsls	r2, r2, #24
 8007634:	0006      	movs	r6, r0
 8007636:	000f      	movs	r7, r1
 8007638:	f7f9 ff70 	bl	800151c <__aeabi_dmul>
 800763c:	9008      	str	r0, [sp, #32]
 800763e:	9109      	str	r1, [sp, #36]	; 0x24
 8007640:	9a00      	ldr	r2, [sp, #0]
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	0030      	movs	r0, r6
 8007646:	0039      	movs	r1, r7
 8007648:	f7fa fa2a 	bl	8001aa0 <__aeabi_dsub>
 800764c:	0002      	movs	r2, r0
 800764e:	000b      	movs	r3, r1
 8007650:	0020      	movs	r0, r4
 8007652:	0029      	movs	r1, r5
 8007654:	f7fa fa24 	bl	8001aa0 <__aeabi_dsub>
 8007658:	4a3a      	ldr	r2, [pc, #232]	; (8007744 <__ieee754_pow+0x75c>)
 800765a:	4b39      	ldr	r3, [pc, #228]	; (8007740 <__ieee754_pow+0x758>)
 800765c:	f7f9 ff5e 	bl	800151c <__aeabi_dmul>
 8007660:	4a39      	ldr	r2, [pc, #228]	; (8007748 <__ieee754_pow+0x760>)
 8007662:	0004      	movs	r4, r0
 8007664:	000d      	movs	r5, r1
 8007666:	0030      	movs	r0, r6
 8007668:	0039      	movs	r1, r7
 800766a:	4b38      	ldr	r3, [pc, #224]	; (800774c <__ieee754_pow+0x764>)
 800766c:	f7f9 ff56 	bl	800151c <__aeabi_dmul>
 8007670:	0002      	movs	r2, r0
 8007672:	000b      	movs	r3, r1
 8007674:	0020      	movs	r0, r4
 8007676:	0029      	movs	r1, r5
 8007678:	f7f8 fff6 	bl	8000668 <__aeabi_dadd>
 800767c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800767e:	4b34      	ldr	r3, [pc, #208]	; (8007750 <__ieee754_pow+0x768>)
 8007680:	189b      	adds	r3, r3, r2
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f7f8 ffef 	bl	8000668 <__aeabi_dadd>
 800768a:	9000      	str	r0, [sp, #0]
 800768c:	9101      	str	r1, [sp, #4]
 800768e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007690:	f7fa fddc 	bl	800224c <__aeabi_i2d>
 8007694:	0004      	movs	r4, r0
 8007696:	000d      	movs	r5, r1
 8007698:	9808      	ldr	r0, [sp, #32]
 800769a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800769c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800769e:	4b2d      	ldr	r3, [pc, #180]	; (8007754 <__ieee754_pow+0x76c>)
 80076a0:	189b      	adds	r3, r3, r2
 80076a2:	681e      	ldr	r6, [r3, #0]
 80076a4:	685f      	ldr	r7, [r3, #4]
 80076a6:	9a00      	ldr	r2, [sp, #0]
 80076a8:	9b01      	ldr	r3, [sp, #4]
 80076aa:	f7f8 ffdd 	bl	8000668 <__aeabi_dadd>
 80076ae:	0032      	movs	r2, r6
 80076b0:	003b      	movs	r3, r7
 80076b2:	f7f8 ffd9 	bl	8000668 <__aeabi_dadd>
 80076b6:	0022      	movs	r2, r4
 80076b8:	002b      	movs	r3, r5
 80076ba:	f7f8 ffd5 	bl	8000668 <__aeabi_dadd>
 80076be:	2000      	movs	r0, #0
 80076c0:	0022      	movs	r2, r4
 80076c2:	002b      	movs	r3, r5
 80076c4:	9004      	str	r0, [sp, #16]
 80076c6:	9105      	str	r1, [sp, #20]
 80076c8:	f7fa f9ea 	bl	8001aa0 <__aeabi_dsub>
 80076cc:	0032      	movs	r2, r6
 80076ce:	003b      	movs	r3, r7
 80076d0:	f7fa f9e6 	bl	8001aa0 <__aeabi_dsub>
 80076d4:	9a08      	ldr	r2, [sp, #32]
 80076d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d8:	f7fa f9e2 	bl	8001aa0 <__aeabi_dsub>
 80076dc:	0002      	movs	r2, r0
 80076de:	000b      	movs	r3, r1
 80076e0:	9800      	ldr	r0, [sp, #0]
 80076e2:	9901      	ldr	r1, [sp, #4]
 80076e4:	e618      	b.n	8007318 <__ieee754_pow+0x330>
 80076e6:	2300      	movs	r3, #0
 80076e8:	4c03      	ldr	r4, [pc, #12]	; (80076f8 <__ieee754_pow+0x710>)
 80076ea:	e621      	b.n	8007330 <__ieee754_pow+0x348>
 80076ec:	7ff00000 	.word	0x7ff00000
 80076f0:	43400000 	.word	0x43400000
 80076f4:	fffffc01 	.word	0xfffffc01
 80076f8:	3ff00000 	.word	0x3ff00000
 80076fc:	0003988e 	.word	0x0003988e
 8007700:	000bb679 	.word	0x000bb679
 8007704:	fff00000 	.word	0xfff00000
 8007708:	08007f80 	.word	0x08007f80
 800770c:	4a454eef 	.word	0x4a454eef
 8007710:	3fca7e28 	.word	0x3fca7e28
 8007714:	93c9db65 	.word	0x93c9db65
 8007718:	3fcd864a 	.word	0x3fcd864a
 800771c:	a91d4101 	.word	0xa91d4101
 8007720:	3fd17460 	.word	0x3fd17460
 8007724:	518f264d 	.word	0x518f264d
 8007728:	3fd55555 	.word	0x3fd55555
 800772c:	db6fabff 	.word	0xdb6fabff
 8007730:	3fdb6db6 	.word	0x3fdb6db6
 8007734:	33333303 	.word	0x33333303
 8007738:	3fe33333 	.word	0x3fe33333
 800773c:	40080000 	.word	0x40080000
 8007740:	3feec709 	.word	0x3feec709
 8007744:	dc3a03fd 	.word	0xdc3a03fd
 8007748:	145b01f5 	.word	0x145b01f5
 800774c:	be3e2fe0 	.word	0xbe3e2fe0
 8007750:	08007fa0 	.word	0x08007fa0
 8007754:	08007f90 	.word	0x08007f90
 8007758:	4a90      	ldr	r2, [pc, #576]	; (800799c <__ieee754_pow+0x9b4>)
 800775a:	4b91      	ldr	r3, [pc, #580]	; (80079a0 <__ieee754_pow+0x9b8>)
 800775c:	0030      	movs	r0, r6
 800775e:	0039      	movs	r1, r7
 8007760:	f7f8 ff82 	bl	8000668 <__aeabi_dadd>
 8007764:	9a04      	ldr	r2, [sp, #16]
 8007766:	9b05      	ldr	r3, [sp, #20]
 8007768:	9002      	str	r0, [sp, #8]
 800776a:	9103      	str	r1, [sp, #12]
 800776c:	0028      	movs	r0, r5
 800776e:	0021      	movs	r1, r4
 8007770:	f7fa f996 	bl	8001aa0 <__aeabi_dsub>
 8007774:	0002      	movs	r2, r0
 8007776:	000b      	movs	r3, r1
 8007778:	9802      	ldr	r0, [sp, #8]
 800777a:	9903      	ldr	r1, [sp, #12]
 800777c:	f7f8 fe74 	bl	8000468 <__aeabi_dcmpgt>
 8007780:	2800      	cmp	r0, #0
 8007782:	d000      	beq.n	8007786 <__ieee754_pow+0x79e>
 8007784:	e611      	b.n	80073aa <__ieee754_pow+0x3c2>
 8007786:	2100      	movs	r1, #0
 8007788:	4a86      	ldr	r2, [pc, #536]	; (80079a4 <__ieee754_pow+0x9bc>)
 800778a:	0063      	lsls	r3, r4, #1
 800778c:	085b      	lsrs	r3, r3, #1
 800778e:	9102      	str	r1, [sp, #8]
 8007790:	4293      	cmp	r3, r2
 8007792:	dd25      	ble.n	80077e0 <__ieee754_pow+0x7f8>
 8007794:	4a84      	ldr	r2, [pc, #528]	; (80079a8 <__ieee754_pow+0x9c0>)
 8007796:	151b      	asrs	r3, r3, #20
 8007798:	189b      	adds	r3, r3, r2
 800779a:	2280      	movs	r2, #128	; 0x80
 800779c:	0352      	lsls	r2, r2, #13
 800779e:	0011      	movs	r1, r2
 80077a0:	4119      	asrs	r1, r3
 80077a2:	190b      	adds	r3, r1, r4
 80077a4:	005c      	lsls	r4, r3, #1
 80077a6:	4981      	ldr	r1, [pc, #516]	; (80079ac <__ieee754_pow+0x9c4>)
 80077a8:	4d81      	ldr	r5, [pc, #516]	; (80079b0 <__ieee754_pow+0x9c8>)
 80077aa:	0d64      	lsrs	r4, r4, #21
 80077ac:	1864      	adds	r4, r4, r1
 80077ae:	4125      	asrs	r5, r4
 80077b0:	401d      	ands	r5, r3
 80077b2:	031b      	lsls	r3, r3, #12
 80077b4:	0b1b      	lsrs	r3, r3, #12
 80077b6:	4313      	orrs	r3, r2
 80077b8:	2214      	movs	r2, #20
 80077ba:	1b12      	subs	r2, r2, r4
 80077bc:	4113      	asrs	r3, r2
 80077be:	9302      	str	r3, [sp, #8]
 80077c0:	9b08      	ldr	r3, [sp, #32]
 80077c2:	2000      	movs	r0, #0
 80077c4:	0029      	movs	r1, r5
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da02      	bge.n	80077d0 <__ieee754_pow+0x7e8>
 80077ca:	9b02      	ldr	r3, [sp, #8]
 80077cc:	425b      	negs	r3, r3
 80077ce:	9302      	str	r3, [sp, #8]
 80077d0:	0002      	movs	r2, r0
 80077d2:	000b      	movs	r3, r1
 80077d4:	9804      	ldr	r0, [sp, #16]
 80077d6:	9905      	ldr	r1, [sp, #20]
 80077d8:	f7fa f962 	bl	8001aa0 <__aeabi_dsub>
 80077dc:	9006      	str	r0, [sp, #24]
 80077de:	9107      	str	r1, [sp, #28]
 80077e0:	9806      	ldr	r0, [sp, #24]
 80077e2:	9907      	ldr	r1, [sp, #28]
 80077e4:	0032      	movs	r2, r6
 80077e6:	003b      	movs	r3, r7
 80077e8:	f7f8 ff3e 	bl	8000668 <__aeabi_dadd>
 80077ec:	2000      	movs	r0, #0
 80077ee:	2200      	movs	r2, #0
 80077f0:	4b70      	ldr	r3, [pc, #448]	; (80079b4 <__ieee754_pow+0x9cc>)
 80077f2:	9004      	str	r0, [sp, #16]
 80077f4:	9105      	str	r1, [sp, #20]
 80077f6:	f7f9 fe91 	bl	800151c <__aeabi_dmul>
 80077fa:	9a06      	ldr	r2, [sp, #24]
 80077fc:	9b07      	ldr	r3, [sp, #28]
 80077fe:	9008      	str	r0, [sp, #32]
 8007800:	9109      	str	r1, [sp, #36]	; 0x24
 8007802:	9804      	ldr	r0, [sp, #16]
 8007804:	9905      	ldr	r1, [sp, #20]
 8007806:	f7fa f94b 	bl	8001aa0 <__aeabi_dsub>
 800780a:	0002      	movs	r2, r0
 800780c:	000b      	movs	r3, r1
 800780e:	0030      	movs	r0, r6
 8007810:	0039      	movs	r1, r7
 8007812:	f7fa f945 	bl	8001aa0 <__aeabi_dsub>
 8007816:	4a68      	ldr	r2, [pc, #416]	; (80079b8 <__ieee754_pow+0x9d0>)
 8007818:	4b68      	ldr	r3, [pc, #416]	; (80079bc <__ieee754_pow+0x9d4>)
 800781a:	f7f9 fe7f 	bl	800151c <__aeabi_dmul>
 800781e:	4a68      	ldr	r2, [pc, #416]	; (80079c0 <__ieee754_pow+0x9d8>)
 8007820:	0004      	movs	r4, r0
 8007822:	000d      	movs	r5, r1
 8007824:	9804      	ldr	r0, [sp, #16]
 8007826:	9905      	ldr	r1, [sp, #20]
 8007828:	4b66      	ldr	r3, [pc, #408]	; (80079c4 <__ieee754_pow+0x9dc>)
 800782a:	f7f9 fe77 	bl	800151c <__aeabi_dmul>
 800782e:	0002      	movs	r2, r0
 8007830:	000b      	movs	r3, r1
 8007832:	0020      	movs	r0, r4
 8007834:	0029      	movs	r1, r5
 8007836:	f7f8 ff17 	bl	8000668 <__aeabi_dadd>
 800783a:	0004      	movs	r4, r0
 800783c:	000d      	movs	r5, r1
 800783e:	0002      	movs	r2, r0
 8007840:	000b      	movs	r3, r1
 8007842:	9808      	ldr	r0, [sp, #32]
 8007844:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007846:	f7f8 ff0f 	bl	8000668 <__aeabi_dadd>
 800784a:	9a08      	ldr	r2, [sp, #32]
 800784c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800784e:	0006      	movs	r6, r0
 8007850:	000f      	movs	r7, r1
 8007852:	f7fa f925 	bl	8001aa0 <__aeabi_dsub>
 8007856:	0002      	movs	r2, r0
 8007858:	000b      	movs	r3, r1
 800785a:	0020      	movs	r0, r4
 800785c:	0029      	movs	r1, r5
 800785e:	f7fa f91f 	bl	8001aa0 <__aeabi_dsub>
 8007862:	0032      	movs	r2, r6
 8007864:	9004      	str	r0, [sp, #16]
 8007866:	9105      	str	r1, [sp, #20]
 8007868:	003b      	movs	r3, r7
 800786a:	0030      	movs	r0, r6
 800786c:	0039      	movs	r1, r7
 800786e:	f7f9 fe55 	bl	800151c <__aeabi_dmul>
 8007872:	0004      	movs	r4, r0
 8007874:	000d      	movs	r5, r1
 8007876:	4a54      	ldr	r2, [pc, #336]	; (80079c8 <__ieee754_pow+0x9e0>)
 8007878:	4b54      	ldr	r3, [pc, #336]	; (80079cc <__ieee754_pow+0x9e4>)
 800787a:	f7f9 fe4f 	bl	800151c <__aeabi_dmul>
 800787e:	4a54      	ldr	r2, [pc, #336]	; (80079d0 <__ieee754_pow+0x9e8>)
 8007880:	4b54      	ldr	r3, [pc, #336]	; (80079d4 <__ieee754_pow+0x9ec>)
 8007882:	f7fa f90d 	bl	8001aa0 <__aeabi_dsub>
 8007886:	0022      	movs	r2, r4
 8007888:	002b      	movs	r3, r5
 800788a:	f7f9 fe47 	bl	800151c <__aeabi_dmul>
 800788e:	4a52      	ldr	r2, [pc, #328]	; (80079d8 <__ieee754_pow+0x9f0>)
 8007890:	4b52      	ldr	r3, [pc, #328]	; (80079dc <__ieee754_pow+0x9f4>)
 8007892:	f7f8 fee9 	bl	8000668 <__aeabi_dadd>
 8007896:	0022      	movs	r2, r4
 8007898:	002b      	movs	r3, r5
 800789a:	f7f9 fe3f 	bl	800151c <__aeabi_dmul>
 800789e:	4a50      	ldr	r2, [pc, #320]	; (80079e0 <__ieee754_pow+0x9f8>)
 80078a0:	4b50      	ldr	r3, [pc, #320]	; (80079e4 <__ieee754_pow+0x9fc>)
 80078a2:	f7fa f8fd 	bl	8001aa0 <__aeabi_dsub>
 80078a6:	0022      	movs	r2, r4
 80078a8:	002b      	movs	r3, r5
 80078aa:	f7f9 fe37 	bl	800151c <__aeabi_dmul>
 80078ae:	4a4e      	ldr	r2, [pc, #312]	; (80079e8 <__ieee754_pow+0xa00>)
 80078b0:	4b4e      	ldr	r3, [pc, #312]	; (80079ec <__ieee754_pow+0xa04>)
 80078b2:	f7f8 fed9 	bl	8000668 <__aeabi_dadd>
 80078b6:	0022      	movs	r2, r4
 80078b8:	002b      	movs	r3, r5
 80078ba:	f7f9 fe2f 	bl	800151c <__aeabi_dmul>
 80078be:	0002      	movs	r2, r0
 80078c0:	000b      	movs	r3, r1
 80078c2:	0030      	movs	r0, r6
 80078c4:	0039      	movs	r1, r7
 80078c6:	f7fa f8eb 	bl	8001aa0 <__aeabi_dsub>
 80078ca:	0004      	movs	r4, r0
 80078cc:	000d      	movs	r5, r1
 80078ce:	0002      	movs	r2, r0
 80078d0:	000b      	movs	r3, r1
 80078d2:	0030      	movs	r0, r6
 80078d4:	0039      	movs	r1, r7
 80078d6:	f7f9 fe21 	bl	800151c <__aeabi_dmul>
 80078da:	2380      	movs	r3, #128	; 0x80
 80078dc:	9006      	str	r0, [sp, #24]
 80078de:	9107      	str	r1, [sp, #28]
 80078e0:	2200      	movs	r2, #0
 80078e2:	0020      	movs	r0, r4
 80078e4:	0029      	movs	r1, r5
 80078e6:	05db      	lsls	r3, r3, #23
 80078e8:	f7fa f8da 	bl	8001aa0 <__aeabi_dsub>
 80078ec:	0002      	movs	r2, r0
 80078ee:	000b      	movs	r3, r1
 80078f0:	9806      	ldr	r0, [sp, #24]
 80078f2:	9907      	ldr	r1, [sp, #28]
 80078f4:	f7f9 fa18 	bl	8000d28 <__aeabi_ddiv>
 80078f8:	9a04      	ldr	r2, [sp, #16]
 80078fa:	9b05      	ldr	r3, [sp, #20]
 80078fc:	0004      	movs	r4, r0
 80078fe:	000d      	movs	r5, r1
 8007900:	0030      	movs	r0, r6
 8007902:	0039      	movs	r1, r7
 8007904:	f7f9 fe0a 	bl	800151c <__aeabi_dmul>
 8007908:	9a04      	ldr	r2, [sp, #16]
 800790a:	9b05      	ldr	r3, [sp, #20]
 800790c:	f7f8 feac 	bl	8000668 <__aeabi_dadd>
 8007910:	0002      	movs	r2, r0
 8007912:	000b      	movs	r3, r1
 8007914:	0020      	movs	r0, r4
 8007916:	0029      	movs	r1, r5
 8007918:	f7fa f8c2 	bl	8001aa0 <__aeabi_dsub>
 800791c:	0032      	movs	r2, r6
 800791e:	003b      	movs	r3, r7
 8007920:	f7fa f8be 	bl	8001aa0 <__aeabi_dsub>
 8007924:	0002      	movs	r2, r0
 8007926:	000b      	movs	r3, r1
 8007928:	2000      	movs	r0, #0
 800792a:	4931      	ldr	r1, [pc, #196]	; (80079f0 <__ieee754_pow+0xa08>)
 800792c:	f7fa f8b8 	bl	8001aa0 <__aeabi_dsub>
 8007930:	9b02      	ldr	r3, [sp, #8]
 8007932:	051b      	lsls	r3, r3, #20
 8007934:	185b      	adds	r3, r3, r1
 8007936:	151a      	asrs	r2, r3, #20
 8007938:	2a00      	cmp	r2, #0
 800793a:	dc25      	bgt.n	8007988 <__ieee754_pow+0x9a0>
 800793c:	9a02      	ldr	r2, [sp, #8]
 800793e:	f000 f861 	bl	8007a04 <scalbn>
 8007942:	9a00      	ldr	r2, [sp, #0]
 8007944:	9b01      	ldr	r3, [sp, #4]
 8007946:	f7ff fc33 	bl	80071b0 <__ieee754_pow+0x1c8>
 800794a:	4a2a      	ldr	r2, [pc, #168]	; (80079f4 <__ieee754_pow+0xa0c>)
 800794c:	004b      	lsls	r3, r1, #1
 800794e:	085b      	lsrs	r3, r3, #1
 8007950:	4293      	cmp	r3, r2
 8007952:	dc00      	bgt.n	8007956 <__ieee754_pow+0x96e>
 8007954:	e717      	b.n	8007786 <__ieee754_pow+0x79e>
 8007956:	4b28      	ldr	r3, [pc, #160]	; (80079f8 <__ieee754_pow+0xa10>)
 8007958:	18cb      	adds	r3, r1, r3
 800795a:	4303      	orrs	r3, r0
 800795c:	d008      	beq.n	8007970 <__ieee754_pow+0x988>
 800795e:	9800      	ldr	r0, [sp, #0]
 8007960:	9901      	ldr	r1, [sp, #4]
 8007962:	2300      	movs	r3, #0
 8007964:	2200      	movs	r2, #0
 8007966:	f7f8 fd6b 	bl	8000440 <__aeabi_dcmplt>
 800796a:	1e43      	subs	r3, r0, #1
 800796c:	4198      	sbcs	r0, r3
 800796e:	e462      	b.n	8007236 <__ieee754_pow+0x24e>
 8007970:	9a04      	ldr	r2, [sp, #16]
 8007972:	9b05      	ldr	r3, [sp, #20]
 8007974:	f7fa f894 	bl	8001aa0 <__aeabi_dsub>
 8007978:	0032      	movs	r2, r6
 800797a:	003b      	movs	r3, r7
 800797c:	f7f8 fd7e 	bl	800047c <__aeabi_dcmpge>
 8007980:	2800      	cmp	r0, #0
 8007982:	d100      	bne.n	8007986 <__ieee754_pow+0x99e>
 8007984:	e6ff      	b.n	8007786 <__ieee754_pow+0x79e>
 8007986:	e7ea      	b.n	800795e <__ieee754_pow+0x976>
 8007988:	0019      	movs	r1, r3
 800798a:	e7da      	b.n	8007942 <__ieee754_pow+0x95a>
 800798c:	2300      	movs	r3, #0
 800798e:	4c18      	ldr	r4, [pc, #96]	; (80079f0 <__ieee754_pow+0xa08>)
 8007990:	f7ff fbf1 	bl	8007176 <__ieee754_pow+0x18e>
 8007994:	2300      	movs	r3, #0
 8007996:	2400      	movs	r4, #0
 8007998:	f7ff fbed 	bl	8007176 <__ieee754_pow+0x18e>
 800799c:	652b82fe 	.word	0x652b82fe
 80079a0:	3c971547 	.word	0x3c971547
 80079a4:	3fe00000 	.word	0x3fe00000
 80079a8:	fffffc02 	.word	0xfffffc02
 80079ac:	fffffc01 	.word	0xfffffc01
 80079b0:	fff00000 	.word	0xfff00000
 80079b4:	3fe62e43 	.word	0x3fe62e43
 80079b8:	fefa39ef 	.word	0xfefa39ef
 80079bc:	3fe62e42 	.word	0x3fe62e42
 80079c0:	0ca86c39 	.word	0x0ca86c39
 80079c4:	be205c61 	.word	0xbe205c61
 80079c8:	72bea4d0 	.word	0x72bea4d0
 80079cc:	3e663769 	.word	0x3e663769
 80079d0:	c5d26bf1 	.word	0xc5d26bf1
 80079d4:	3ebbbd41 	.word	0x3ebbbd41
 80079d8:	af25de2c 	.word	0xaf25de2c
 80079dc:	3f11566a 	.word	0x3f11566a
 80079e0:	16bebd93 	.word	0x16bebd93
 80079e4:	3f66c16c 	.word	0x3f66c16c
 80079e8:	5555553e 	.word	0x5555553e
 80079ec:	3fc55555 	.word	0x3fc55555
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	4090cbff 	.word	0x4090cbff
 80079f8:	3f6f3400 	.word	0x3f6f3400

080079fc <fabs>:
 80079fc:	0049      	lsls	r1, r1, #1
 80079fe:	084b      	lsrs	r3, r1, #1
 8007a00:	0019      	movs	r1, r3
 8007a02:	4770      	bx	lr

08007a04 <scalbn>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	0014      	movs	r4, r2
 8007a08:	004a      	lsls	r2, r1, #1
 8007a0a:	000b      	movs	r3, r1
 8007a0c:	0d52      	lsrs	r2, r2, #21
 8007a0e:	d10f      	bne.n	8007a30 <scalbn+0x2c>
 8007a10:	004b      	lsls	r3, r1, #1
 8007a12:	085b      	lsrs	r3, r3, #1
 8007a14:	4303      	orrs	r3, r0
 8007a16:	d011      	beq.n	8007a3c <scalbn+0x38>
 8007a18:	4b22      	ldr	r3, [pc, #136]	; (8007aa4 <scalbn+0xa0>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f7f9 fd7e 	bl	800151c <__aeabi_dmul>
 8007a20:	4b21      	ldr	r3, [pc, #132]	; (8007aa8 <scalbn+0xa4>)
 8007a22:	429c      	cmp	r4, r3
 8007a24:	da0b      	bge.n	8007a3e <scalbn+0x3a>
 8007a26:	4a21      	ldr	r2, [pc, #132]	; (8007aac <scalbn+0xa8>)
 8007a28:	4b21      	ldr	r3, [pc, #132]	; (8007ab0 <scalbn+0xac>)
 8007a2a:	f7f9 fd77 	bl	800151c <__aeabi_dmul>
 8007a2e:	e005      	b.n	8007a3c <scalbn+0x38>
 8007a30:	4d20      	ldr	r5, [pc, #128]	; (8007ab4 <scalbn+0xb0>)
 8007a32:	42aa      	cmp	r2, r5
 8007a34:	d107      	bne.n	8007a46 <scalbn+0x42>
 8007a36:	0002      	movs	r2, r0
 8007a38:	f7f8 fe16 	bl	8000668 <__aeabi_dadd>
 8007a3c:	bd70      	pop	{r4, r5, r6, pc}
 8007a3e:	000b      	movs	r3, r1
 8007a40:	004a      	lsls	r2, r1, #1
 8007a42:	0d52      	lsrs	r2, r2, #21
 8007a44:	3a36      	subs	r2, #54	; 0x36
 8007a46:	4d1c      	ldr	r5, [pc, #112]	; (8007ab8 <scalbn+0xb4>)
 8007a48:	42ac      	cmp	r4, r5
 8007a4a:	dd0a      	ble.n	8007a62 <scalbn+0x5e>
 8007a4c:	4c1b      	ldr	r4, [pc, #108]	; (8007abc <scalbn+0xb8>)
 8007a4e:	4d1c      	ldr	r5, [pc, #112]	; (8007ac0 <scalbn+0xbc>)
 8007a50:	2900      	cmp	r1, #0
 8007a52:	da01      	bge.n	8007a58 <scalbn+0x54>
 8007a54:	4c19      	ldr	r4, [pc, #100]	; (8007abc <scalbn+0xb8>)
 8007a56:	4d1b      	ldr	r5, [pc, #108]	; (8007ac4 <scalbn+0xc0>)
 8007a58:	4a18      	ldr	r2, [pc, #96]	; (8007abc <scalbn+0xb8>)
 8007a5a:	4b19      	ldr	r3, [pc, #100]	; (8007ac0 <scalbn+0xbc>)
 8007a5c:	0020      	movs	r0, r4
 8007a5e:	0029      	movs	r1, r5
 8007a60:	e7e3      	b.n	8007a2a <scalbn+0x26>
 8007a62:	18a2      	adds	r2, r4, r2
 8007a64:	4c18      	ldr	r4, [pc, #96]	; (8007ac8 <scalbn+0xc4>)
 8007a66:	42a2      	cmp	r2, r4
 8007a68:	dcf0      	bgt.n	8007a4c <scalbn+0x48>
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	dd05      	ble.n	8007a7a <scalbn+0x76>
 8007a6e:	4c17      	ldr	r4, [pc, #92]	; (8007acc <scalbn+0xc8>)
 8007a70:	0512      	lsls	r2, r2, #20
 8007a72:	4023      	ands	r3, r4
 8007a74:	4313      	orrs	r3, r2
 8007a76:	0019      	movs	r1, r3
 8007a78:	e7e0      	b.n	8007a3c <scalbn+0x38>
 8007a7a:	0014      	movs	r4, r2
 8007a7c:	3435      	adds	r4, #53	; 0x35
 8007a7e:	da08      	bge.n	8007a92 <scalbn+0x8e>
 8007a80:	4c0a      	ldr	r4, [pc, #40]	; (8007aac <scalbn+0xa8>)
 8007a82:	4d0b      	ldr	r5, [pc, #44]	; (8007ab0 <scalbn+0xac>)
 8007a84:	2900      	cmp	r1, #0
 8007a86:	da01      	bge.n	8007a8c <scalbn+0x88>
 8007a88:	4c08      	ldr	r4, [pc, #32]	; (8007aac <scalbn+0xa8>)
 8007a8a:	4d11      	ldr	r5, [pc, #68]	; (8007ad0 <scalbn+0xcc>)
 8007a8c:	4a07      	ldr	r2, [pc, #28]	; (8007aac <scalbn+0xa8>)
 8007a8e:	4b08      	ldr	r3, [pc, #32]	; (8007ab0 <scalbn+0xac>)
 8007a90:	e7e4      	b.n	8007a5c <scalbn+0x58>
 8007a92:	4c0e      	ldr	r4, [pc, #56]	; (8007acc <scalbn+0xc8>)
 8007a94:	3236      	adds	r2, #54	; 0x36
 8007a96:	4023      	ands	r3, r4
 8007a98:	0512      	lsls	r2, r2, #20
 8007a9a:	431a      	orrs	r2, r3
 8007a9c:	0011      	movs	r1, r2
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ad4 <scalbn+0xd0>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	e7c2      	b.n	8007a2a <scalbn+0x26>
 8007aa4:	43500000 	.word	0x43500000
 8007aa8:	ffff3cb0 	.word	0xffff3cb0
 8007aac:	c2f8f359 	.word	0xc2f8f359
 8007ab0:	01a56e1f 	.word	0x01a56e1f
 8007ab4:	000007ff 	.word	0x000007ff
 8007ab8:	0000c350 	.word	0x0000c350
 8007abc:	8800759c 	.word	0x8800759c
 8007ac0:	7e37e43c 	.word	0x7e37e43c
 8007ac4:	fe37e43c 	.word	0xfe37e43c
 8007ac8:	000007fe 	.word	0x000007fe
 8007acc:	800fffff 	.word	0x800fffff
 8007ad0:	81a56e1f 	.word	0x81a56e1f
 8007ad4:	3c900000 	.word	0x3c900000

08007ad8 <with_errno>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	000d      	movs	r5, r1
 8007adc:	0016      	movs	r6, r2
 8007ade:	0004      	movs	r4, r0
 8007ae0:	f7fe f8d4 	bl	8005c8c <__errno>
 8007ae4:	0029      	movs	r1, r5
 8007ae6:	6006      	str	r6, [r0, #0]
 8007ae8:	0020      	movs	r0, r4
 8007aea:	bd70      	pop	{r4, r5, r6, pc}

08007aec <xflow>:
 8007aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aee:	0015      	movs	r5, r2
 8007af0:	001c      	movs	r4, r3
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d010      	beq.n	8007b18 <xflow+0x2c>
 8007af6:	2380      	movs	r3, #128	; 0x80
 8007af8:	0010      	movs	r0, r2
 8007afa:	061b      	lsls	r3, r3, #24
 8007afc:	18e1      	adds	r1, r4, r3
 8007afe:	9000      	str	r0, [sp, #0]
 8007b00:	9101      	str	r1, [sp, #4]
 8007b02:	9a00      	ldr	r2, [sp, #0]
 8007b04:	9b01      	ldr	r3, [sp, #4]
 8007b06:	0028      	movs	r0, r5
 8007b08:	0021      	movs	r1, r4
 8007b0a:	f7f9 fd07 	bl	800151c <__aeabi_dmul>
 8007b0e:	2222      	movs	r2, #34	; 0x22
 8007b10:	f7ff ffe2 	bl	8007ad8 <with_errno>
 8007b14:	b003      	add	sp, #12
 8007b16:	bd30      	pop	{r4, r5, pc}
 8007b18:	0010      	movs	r0, r2
 8007b1a:	0019      	movs	r1, r3
 8007b1c:	e7ef      	b.n	8007afe <xflow+0x12>

08007b1e <__math_uflow>:
 8007b1e:	2380      	movs	r3, #128	; 0x80
 8007b20:	b510      	push	{r4, lr}
 8007b22:	2200      	movs	r2, #0
 8007b24:	055b      	lsls	r3, r3, #21
 8007b26:	f7ff ffe1 	bl	8007aec <xflow>
 8007b2a:	bd10      	pop	{r4, pc}

08007b2c <__math_oflow>:
 8007b2c:	23e0      	movs	r3, #224	; 0xe0
 8007b2e:	b510      	push	{r4, lr}
 8007b30:	2200      	movs	r2, #0
 8007b32:	05db      	lsls	r3, r3, #23
 8007b34:	f7ff ffda 	bl	8007aec <xflow>
 8007b38:	bd10      	pop	{r4, pc}
	...

08007b3c <__ieee754_sqrt>:
 8007b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b3e:	000a      	movs	r2, r1
 8007b40:	000c      	movs	r4, r1
 8007b42:	496f      	ldr	r1, [pc, #444]	; (8007d00 <__ieee754_sqrt+0x1c4>)
 8007b44:	0005      	movs	r5, r0
 8007b46:	0003      	movs	r3, r0
 8007b48:	0008      	movs	r0, r1
 8007b4a:	b087      	sub	sp, #28
 8007b4c:	4020      	ands	r0, r4
 8007b4e:	4288      	cmp	r0, r1
 8007b50:	d111      	bne.n	8007b76 <__ieee754_sqrt+0x3a>
 8007b52:	002a      	movs	r2, r5
 8007b54:	0023      	movs	r3, r4
 8007b56:	0028      	movs	r0, r5
 8007b58:	0021      	movs	r1, r4
 8007b5a:	f7f9 fcdf 	bl	800151c <__aeabi_dmul>
 8007b5e:	0002      	movs	r2, r0
 8007b60:	000b      	movs	r3, r1
 8007b62:	0028      	movs	r0, r5
 8007b64:	0021      	movs	r1, r4
 8007b66:	f7f8 fd7f 	bl	8000668 <__aeabi_dadd>
 8007b6a:	0005      	movs	r5, r0
 8007b6c:	000c      	movs	r4, r1
 8007b6e:	0028      	movs	r0, r5
 8007b70:	0021      	movs	r1, r4
 8007b72:	b007      	add	sp, #28
 8007b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b76:	2c00      	cmp	r4, #0
 8007b78:	dc12      	bgt.n	8007ba0 <__ieee754_sqrt+0x64>
 8007b7a:	0061      	lsls	r1, r4, #1
 8007b7c:	0849      	lsrs	r1, r1, #1
 8007b7e:	4329      	orrs	r1, r5
 8007b80:	d0f5      	beq.n	8007b6e <__ieee754_sqrt+0x32>
 8007b82:	2100      	movs	r1, #0
 8007b84:	428c      	cmp	r4, r1
 8007b86:	d100      	bne.n	8007b8a <__ieee754_sqrt+0x4e>
 8007b88:	e09f      	b.n	8007cca <__ieee754_sqrt+0x18e>
 8007b8a:	002a      	movs	r2, r5
 8007b8c:	0023      	movs	r3, r4
 8007b8e:	0028      	movs	r0, r5
 8007b90:	0021      	movs	r1, r4
 8007b92:	f7f9 ff85 	bl	8001aa0 <__aeabi_dsub>
 8007b96:	0002      	movs	r2, r0
 8007b98:	000b      	movs	r3, r1
 8007b9a:	f7f9 f8c5 	bl	8000d28 <__aeabi_ddiv>
 8007b9e:	e7e4      	b.n	8007b6a <__ieee754_sqrt+0x2e>
 8007ba0:	1521      	asrs	r1, r4, #20
 8007ba2:	d100      	bne.n	8007ba6 <__ieee754_sqrt+0x6a>
 8007ba4:	e091      	b.n	8007cca <__ieee754_sqrt+0x18e>
 8007ba6:	4857      	ldr	r0, [pc, #348]	; (8007d04 <__ieee754_sqrt+0x1c8>)
 8007ba8:	0312      	lsls	r2, r2, #12
 8007baa:	180c      	adds	r4, r1, r0
 8007bac:	2080      	movs	r0, #128	; 0x80
 8007bae:	0b12      	lsrs	r2, r2, #12
 8007bb0:	0340      	lsls	r0, r0, #13
 8007bb2:	4310      	orrs	r0, r2
 8007bb4:	07c9      	lsls	r1, r1, #31
 8007bb6:	d403      	bmi.n	8007bc0 <__ieee754_sqrt+0x84>
 8007bb8:	0fda      	lsrs	r2, r3, #31
 8007bba:	0040      	lsls	r0, r0, #1
 8007bbc:	1810      	adds	r0, r2, r0
 8007bbe:	005b      	lsls	r3, r3, #1
 8007bc0:	2500      	movs	r5, #0
 8007bc2:	1062      	asrs	r2, r4, #1
 8007bc4:	0040      	lsls	r0, r0, #1
 8007bc6:	2480      	movs	r4, #128	; 0x80
 8007bc8:	9205      	str	r2, [sp, #20]
 8007bca:	0fda      	lsrs	r2, r3, #31
 8007bcc:	1812      	adds	r2, r2, r0
 8007bce:	0029      	movs	r1, r5
 8007bd0:	2016      	movs	r0, #22
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	03a4      	lsls	r4, r4, #14
 8007bd6:	190e      	adds	r6, r1, r4
 8007bd8:	4296      	cmp	r6, r2
 8007bda:	dc02      	bgt.n	8007be2 <__ieee754_sqrt+0xa6>
 8007bdc:	1931      	adds	r1, r6, r4
 8007bde:	1b92      	subs	r2, r2, r6
 8007be0:	192d      	adds	r5, r5, r4
 8007be2:	0fde      	lsrs	r6, r3, #31
 8007be4:	0052      	lsls	r2, r2, #1
 8007be6:	3801      	subs	r0, #1
 8007be8:	18b2      	adds	r2, r6, r2
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	0864      	lsrs	r4, r4, #1
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d1f1      	bne.n	8007bd6 <__ieee754_sqrt+0x9a>
 8007bf2:	2620      	movs	r6, #32
 8007bf4:	2780      	movs	r7, #128	; 0x80
 8007bf6:	0004      	movs	r4, r0
 8007bf8:	9604      	str	r6, [sp, #16]
 8007bfa:	063f      	lsls	r7, r7, #24
 8007bfc:	183e      	adds	r6, r7, r0
 8007bfe:	46b4      	mov	ip, r6
 8007c00:	428a      	cmp	r2, r1
 8007c02:	dc02      	bgt.n	8007c0a <__ieee754_sqrt+0xce>
 8007c04:	d114      	bne.n	8007c30 <__ieee754_sqrt+0xf4>
 8007c06:	429e      	cmp	r6, r3
 8007c08:	d812      	bhi.n	8007c30 <__ieee754_sqrt+0xf4>
 8007c0a:	4660      	mov	r0, ip
 8007c0c:	4666      	mov	r6, ip
 8007c0e:	19c0      	adds	r0, r0, r7
 8007c10:	9100      	str	r1, [sp, #0]
 8007c12:	2e00      	cmp	r6, #0
 8007c14:	da03      	bge.n	8007c1e <__ieee754_sqrt+0xe2>
 8007c16:	43c6      	mvns	r6, r0
 8007c18:	0ff6      	lsrs	r6, r6, #31
 8007c1a:	198e      	adds	r6, r1, r6
 8007c1c:	9600      	str	r6, [sp, #0]
 8007c1e:	1a52      	subs	r2, r2, r1
 8007c20:	4563      	cmp	r3, ip
 8007c22:	4189      	sbcs	r1, r1
 8007c24:	4249      	negs	r1, r1
 8007c26:	1a52      	subs	r2, r2, r1
 8007c28:	4661      	mov	r1, ip
 8007c2a:	1a5b      	subs	r3, r3, r1
 8007c2c:	9900      	ldr	r1, [sp, #0]
 8007c2e:	19e4      	adds	r4, r4, r7
 8007c30:	0fde      	lsrs	r6, r3, #31
 8007c32:	0052      	lsls	r2, r2, #1
 8007c34:	18b2      	adds	r2, r6, r2
 8007c36:	9e04      	ldr	r6, [sp, #16]
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	3e01      	subs	r6, #1
 8007c3c:	087f      	lsrs	r7, r7, #1
 8007c3e:	9604      	str	r6, [sp, #16]
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	d1db      	bne.n	8007bfc <__ieee754_sqrt+0xc0>
 8007c44:	431a      	orrs	r2, r3
 8007c46:	d01f      	beq.n	8007c88 <__ieee754_sqrt+0x14c>
 8007c48:	4e2f      	ldr	r6, [pc, #188]	; (8007d08 <__ieee754_sqrt+0x1cc>)
 8007c4a:	4f30      	ldr	r7, [pc, #192]	; (8007d0c <__ieee754_sqrt+0x1d0>)
 8007c4c:	6830      	ldr	r0, [r6, #0]
 8007c4e:	6871      	ldr	r1, [r6, #4]
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	9200      	str	r2, [sp, #0]
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	6832      	ldr	r2, [r6, #0]
 8007c5a:	6873      	ldr	r3, [r6, #4]
 8007c5c:	9202      	str	r2, [sp, #8]
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	9a00      	ldr	r2, [sp, #0]
 8007c62:	9b01      	ldr	r3, [sp, #4]
 8007c64:	f7f9 ff1c 	bl	8001aa0 <__aeabi_dsub>
 8007c68:	0002      	movs	r2, r0
 8007c6a:	000b      	movs	r3, r1
 8007c6c:	9802      	ldr	r0, [sp, #8]
 8007c6e:	9903      	ldr	r1, [sp, #12]
 8007c70:	f7f8 fbf0 	bl	8000454 <__aeabi_dcmple>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d007      	beq.n	8007c88 <__ieee754_sqrt+0x14c>
 8007c78:	6830      	ldr	r0, [r6, #0]
 8007c7a:	6871      	ldr	r1, [r6, #4]
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	1c67      	adds	r7, r4, #1
 8007c82:	d127      	bne.n	8007cd4 <__ieee754_sqrt+0x198>
 8007c84:	9c04      	ldr	r4, [sp, #16]
 8007c86:	3501      	adds	r5, #1
 8007c88:	4b21      	ldr	r3, [pc, #132]	; (8007d10 <__ieee754_sqrt+0x1d4>)
 8007c8a:	1069      	asrs	r1, r5, #1
 8007c8c:	18c9      	adds	r1, r1, r3
 8007c8e:	0864      	lsrs	r4, r4, #1
 8007c90:	07ed      	lsls	r5, r5, #31
 8007c92:	d502      	bpl.n	8007c9a <__ieee754_sqrt+0x15e>
 8007c94:	2380      	movs	r3, #128	; 0x80
 8007c96:	061b      	lsls	r3, r3, #24
 8007c98:	431c      	orrs	r4, r3
 8007c9a:	9b05      	ldr	r3, [sp, #20]
 8007c9c:	0025      	movs	r5, r4
 8007c9e:	0518      	lsls	r0, r3, #20
 8007ca0:	1843      	adds	r3, r0, r1
 8007ca2:	001c      	movs	r4, r3
 8007ca4:	e763      	b.n	8007b6e <__ieee754_sqrt+0x32>
 8007ca6:	0ada      	lsrs	r2, r3, #11
 8007ca8:	3815      	subs	r0, #21
 8007caa:	055b      	lsls	r3, r3, #21
 8007cac:	2a00      	cmp	r2, #0
 8007cae:	d0fa      	beq.n	8007ca6 <__ieee754_sqrt+0x16a>
 8007cb0:	2480      	movs	r4, #128	; 0x80
 8007cb2:	0364      	lsls	r4, r4, #13
 8007cb4:	4222      	tst	r2, r4
 8007cb6:	d00a      	beq.n	8007cce <__ieee754_sqrt+0x192>
 8007cb8:	2420      	movs	r4, #32
 8007cba:	001e      	movs	r6, r3
 8007cbc:	1a64      	subs	r4, r4, r1
 8007cbe:	40e6      	lsrs	r6, r4
 8007cc0:	1e4d      	subs	r5, r1, #1
 8007cc2:	408b      	lsls	r3, r1
 8007cc4:	4332      	orrs	r2, r6
 8007cc6:	1b41      	subs	r1, r0, r5
 8007cc8:	e76d      	b.n	8007ba6 <__ieee754_sqrt+0x6a>
 8007cca:	2000      	movs	r0, #0
 8007ccc:	e7ee      	b.n	8007cac <__ieee754_sqrt+0x170>
 8007cce:	0052      	lsls	r2, r2, #1
 8007cd0:	3101      	adds	r1, #1
 8007cd2:	e7ef      	b.n	8007cb4 <__ieee754_sqrt+0x178>
 8007cd4:	f7f8 fcc8 	bl	8000668 <__aeabi_dadd>
 8007cd8:	6877      	ldr	r7, [r6, #4]
 8007cda:	6836      	ldr	r6, [r6, #0]
 8007cdc:	0002      	movs	r2, r0
 8007cde:	000b      	movs	r3, r1
 8007ce0:	0030      	movs	r0, r6
 8007ce2:	0039      	movs	r1, r7
 8007ce4:	f7f8 fbac 	bl	8000440 <__aeabi_dcmplt>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d004      	beq.n	8007cf6 <__ieee754_sqrt+0x1ba>
 8007cec:	3402      	adds	r4, #2
 8007cee:	4263      	negs	r3, r4
 8007cf0:	4163      	adcs	r3, r4
 8007cf2:	18ed      	adds	r5, r5, r3
 8007cf4:	e7c8      	b.n	8007c88 <__ieee754_sqrt+0x14c>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	3401      	adds	r4, #1
 8007cfa:	439c      	bics	r4, r3
 8007cfc:	e7c4      	b.n	8007c88 <__ieee754_sqrt+0x14c>
 8007cfe:	46c0      	nop			; (mov r8, r8)
 8007d00:	7ff00000 	.word	0x7ff00000
 8007d04:	fffffc01 	.word	0xfffffc01
 8007d08:	200000a0 	.word	0x200000a0
 8007d0c:	200000a8 	.word	0x200000a8
 8007d10:	3fe00000 	.word	0x3fe00000

08007d14 <_init>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1a:	bc08      	pop	{r3}
 8007d1c:	469e      	mov	lr, r3
 8007d1e:	4770      	bx	lr

08007d20 <_fini>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d26:	bc08      	pop	{r3}
 8007d28:	469e      	mov	lr, r3
 8007d2a:	4770      	bx	lr
